MWindow : ['There are no coupling dependencies between these two entities']
WindowDragAdapter : ['ConstructorInvoking(CMI): Construction Method Invoking found: new WindowDragAdapter(false) {', '', '    private boolean dragged;', '', '    private Insets screenInsets;', '', '    private Dimension screenSize;', '', '    @Override', '    public void adjustNewWindowLocation(final Point p) {', '        MNotification.PopupWindow popupWindow = MNotification.this.popupWindow;', '        int snapSize = 5;', '        // snap to left/right edge of the screen', '        int right = screenSize.width - popupWindow.getWidth() - screenInsets.right;', '        if (p.x < screenInsets.left + snapSize) {', '            p.x = screenInsets.left;', '            UI.horizontalNotificationPosition.set(UI.HorizontalPosition.LEFT);', '        } else if (p.x >= right - snapSize) {', '            p.x = right;', '            UI.horizontalNotificationPosition.set(UI.HorizontalPosition.RIGHT);', '        }', '        // snap to top/bottom edge of the screen', '        int bottom = screenSize.height - popupWindow.getHeight() - screenInsets.bottom;', '        if (p.y < screenInsets.top + snapSize) {', '            p.y = screenInsets.top;', '            UI.verticalNotificationPosition.set(UI.VerticalPosition.TOP);', '        } else if (p.y >= bottom - snapSize) {', '            p.y = bottom;', '            UI.verticalNotificationPosition.set(UI.VerticalPosition.BOTTOM);', '        }', '    }', '', '    @Override', '    public void mouseClicked(final MouseEvent e) {', '        super.mouseClicked(e);', '        // execute action', '        if (!dragged && !e.isConsumed() && (isLeft(e) || isMiddle(e))) {', '            e.consume();', '            MNotification.this.executeMessageAction(e.getSource(), e);', '        }', '    }', '', '    @Override', '    public void mouseDragged(final MouseEvent e) {', '        dragged = true;', '        if (Kiosk.notificationLocked.get())', '            return;', '        super.mouseDragged(e);', '    }', '', '    @Override', '    public void mousePressed(final MouseEvent e) {', '        dragged = false;', '        if (Kiosk.notificationLocked.get())', '            return;', '        screenInsets = UI.getScreenInsets();', '        screenSize = UI.getScreenSize();', '        super.mousePressed(e);', '    }', '', '    @Override', '    public void mouseReleased(final MouseEvent e) {', '        if (dragged) {', '            if (Kiosk.notificationLocked.get())', '                return;', '            super.mouseReleased(e);', '            Config.getDefault().sync();', '        } else {', '            super.mouseReleased(e);', '        }', '        dragged = false;', '    }', '', '    @Override', '    public void popupTrigger(final MouseEvent e) {', '        if (!dragged)', '            MNotification.this.showPopupMenu(e);', '    }', '},']
