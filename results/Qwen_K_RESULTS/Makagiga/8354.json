{
    "time": 1749629100.7501926,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MLabel.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_27032010064f4b05a207a0",
                    "function": {
                        "arguments": "{\"entity\": \"MLabel.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"ItemRenderer\", \"2\", \"0.09090909090909091\"], [\"LinkButton\", \"1\", \"0.045454545454545456\"], [\"TestMLabel\", \"1\", \"0.045454545454545456\"], [\"Renderer\", \"3\", \"0.13636363636363635\"], [\"MenuButton\", \"1\", \"0.045454545454545456\"], [\"TimeZoneLabel\", \"1\", \"0.045454545454545456\"], [\"NoObjectView\", \"1\", \"0.045454545454545456\"], [\"SelectionItem\", \"1\", \"0.045454545454545456\"], [\"MButton\", \"1\", \"0.045454545454545456\"], [\"PluginSettings\", \"2\", \"0.09090909090909091\"], [\"FeedViewer\", \"1\", \"0.045454545454545456\"], [\"MDialog\", \"2\", \"0.09090909090909091\"], [\"FSHelper\", \"1\", \"0.045454545454545456\"], [\"MFileChooser\", \"1\", \"0.045454545454545456\"], [\"Backup\", \"1\", \"0.045454545454545456\"], [\"TabIcon\", \"1\", \"0.045454545454545456\"], [\"PrintDialog\", \"1\", \"0.045454545454545456\"], [\"MAbout\", \"2\", \"0.09090909090909091\"], [\"PropertiesDialog\", \"1\", \"0.045454545454545456\"], [\"CalendarWidget\", \"1\", \"0.045454545454545456\"], [\"TaskSummary\", \"2\", \"0.09090909090909091\"], [\"Content\", \"2\", \"0.09090909090909091\"], [\"ActionProperties\", \"1\", \"0.045454545454545456\"], [\"PluginManager\", \"2\", \"0.09090909090909091\"], [\"Factory\", \"1\", \"0.045454545454545456\"], [\"CoolHeader\", \"1\", \"0.045454545454545456\"], [\"PrintPreview\", \"1\", \"0.045454545454545456\"], [\"PluginRenderer\", \"1\", \"0.045454545454545456\"], [\"MDateSpinner\", \"2\", \"0.09090909090909091\"], [\"LocationBar\", \"1\", \"0.045454545454545456\"], [\"PropertiesPanel\", \"1\", \"0.045454545454545456\"], [\"MainWindow\", \"2\", \"0.09090909090909091\"], [\"OptimizedLabel\", \"1\", \"0.045454545454545456\"], [\"MRenderer\", \"1\", \"0.045454545454545456\"], [\"MAboutDialog\", \"1\", \"0.045454545454545456\"], [\"OptimizedPanel\", \"1\", \"0.045454545454545456\"], [\"ScriptPlugin\", \"1\", \"0.045454545454545456\"], [\"MSplashScreen\", \"2\", \"0.09090909090909091\"], [\"Main\", \"1\", \"0.045454545454545456\"], [\"SummaryRenderer\", \"3\", \"0.13636363636363635\"], [\"MMenu\", \"1\", \"0.045454545454545456\"], [\"MToggleButton\", \"1\", \"0.045454545454545456\"], [\"AbstractTextEditor\", \"1\", \"0.045454545454545456\"], [\"MRadioButton\", \"1\", \"0.045454545454545456\"], [\"StaticHandler\", \"1\", \"0.045454545454545456\"], [\"StaticCoreHandler\", \"1\", \"0.045454545454545456\"], [\"Widget\", \"1\", \"0.045454545454545456\"], [\"StaticThrobber\", \"1\", \"0.045454545454545456\"], [\"Info\", \"1\", \"0.045454545454545456\"], [\"MTextFieldPanel\", \"1\", \"0.045454545454545456\"], [\"TextEditorCore\", \"1\", \"0.045454545454545456\"], [\"MWhatsThis\", \"1\", \"0.045454545454545456\"], [\"TestI\", \"1\", \"0.045454545454545456\"], [\"WikiTab\", \"1\", \"0.045454545454545456\"], [\"DateTimeRenderer\", \"2\", \"0.09090909090909091\"], [\"Editor\", \"1\", \"0.045454545454545456\"], [\"MCalendarPanel\", \"1\", \"0.045454545454545456\"], [\"DayButton\", \"1\", \"0.045454545454545456\"], [\"BackupDialog\", \"1\", \"0.045454545454545456\"], [\"InternetSearchPanel\", \"1\", \"0.045454545454545456\"], [\"Node\", \"1\", \"0.045454545454545456\"], [\"Style\", \"1\", \"0.045454545454545456\"], [\"ArticleList\", \"1\", \"0.045454545454545456\"], [\"ArchiveItemRenderer\", \"1\", \"0.045454545454545456\"], [\"ButtonRenderer\", \"1\", \"0.045454545454545456\"], [\"TodoEditorCore\", \"1\", \"0.045454545454545456\"], [\"TaskStateMenu\", \"1\", \"0.045454545454545456\"], [\"NodeMenu\", \"1\", \"0.045454545454545456\"], [\"TasksMenu\", \"1\", \"0.045454545454545456\"], [\"MTip\", \"1\", \"0.045454545454545456\"], [\"Tabs\", \"1\", \"0.045454545454545456\"], [\"TodoEditor\", \"1\", \"0.045454545454545456\"], [\"TextEditorDesigner\", \"1\", \"0.045454545454545456\"]]"
        },
        {
            "content": "The `get_co_change_relationship` function has returned a list of entities that have co-changed with `MLabel.java` in the project's version history. Each entry includes:\n\n- **Entity Name**: The name of the co-changing entity.\n- **Support Count**: The number of times this entity was modified along with `MLabel.java`.\n- **Confidence Score**: The probability that this entity changes along with `MLabel.java`.\n\n### Key Observations:\n1. **High Confidence Entities**:\n   - `SummaryRenderer` and `Renderer` have the highest confidence scores (\u224813.64%).\n   - These are strong candidates for synchronization since they frequently co-change with `MLabel.java`.\n\n2. **Medium Confidence Entities**:\n   - Entities like `ItemRenderer`, `PluginSettings`, `MDialog`, `TaskSummary`, `Content`, `MainWindow`, `MSplashScreen`, and `DateTimeRenderer` show moderate support/confidence values (\u22489.09%).\n   - They may also need to be synchronized depending on the nature of the change.\n\n3. **Low Confidence Entities**:\n   - A large number of entities have a confidence score of \u22484.54%.\n   - These could be potential candidates for review, but their low confidence suggests weaker historical coupling.\n\n### Next Steps:\nTo narrow down the most relevant set of entities for synchronization, we can apply additional analyses:\n\n#### Option 1: Analyze Coupling Dependencies\nWe can use `get_coupling_dependencies` between `MLabel.java` and the top co-changing entities (`SummaryRenderer`, `Renderer`) to determine if there is any direct structural dependency.\n\n#### Option 2: Analyze Conceptual Coupling\nUse `get_conceptual_coupling` to check semantic similarity between `MLabel.java` and the co-changing files. This helps identify whether these entities share similar concepts or functionality.\n\n#### Option 3: Call Graph Analysis\nUse `get_call_graph(MLabel.java)` to see which entities are directly referenced by `MLabel.java`. This gives insight into direct usage relationships.\n\n---\n\nLet\u2019s start by analyzing the call graph of `MLabel.java` to understand its direct dependencies.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_b2cb677bbacf49a7a53662",
                    "function": {
                        "arguments": "{\"entity\": \"MLabel.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "\"MLabel has been removed from the project due to project version iteration\""
        },
        {
            "content": "It appears that `MLabel.java` has been removed or is no longer present in the current version of the project. This could explain the limited direct information we\u2019re getting from the tools.\n\n### Implication:\nIf `MLabel.java` has been removed, the co-change relationships might reflect historical dependencies that are now obsolete. However, this also suggests that:\n- There may be **other entities that replaced or absorbed its functionality**.\n- The **co-changing entities** (especially those with high confidence) could be part of the same functional module and might still depend on similar logic or patterns.\n\n### Strategy Moving Forward:\n1. We should investigate the **entities with the highest co-change confidence**, such as `SummaryRenderer` and `Renderer`, to see if they have structural or conceptual relationships with each other or with any potential successors of `MLabel.java`.\n\n2. Let\u2019s start by analyzing **coupling dependencies** between `SummaryRenderer.java` and `Renderer.java` to determine if there is a strong dependency within this group.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_f7463c1686d848b9a7a860",
                    "function": {
                        "arguments": "{\"entity1\": \"SummaryRenderer.java\", \"entity2\": \"Renderer.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"SummaryRenderer and Renderer have been removed from the project due to project version iteration\"]"
        },
        {
            "content": "It seems that both `SummaryRenderer.java` and `Renderer.java` have also been removed from the current version of the project. This confirms a broader **version evolution issue** \u2014 several historically co-changing entities may no longer exist in the current codebase.\n\n### Revised Strategy:\n\nGiven this context, we need to:\n1. Identify **potential replacements or successors** of `MLabel.java` by analyzing its most frequent co-changers.\n2. Focus on entities that are still present in the system and show high conceptual or coupling similarity.\n\nLet\u2019s take one of the more frequently co-changing entities that is likely still present in the system (e.g., `MDialog.java`, `MainWindow.java`, or `MSplashScreen.java`) and analyze its **call graph** to understand what it depends on or interacts with.\n\nWe'll start with `MainWindow.java` as it appears often in UI-related contexts and may be central to the system.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_14acf4ea11864710bd9bdb",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"Tracker\", \"Config\", \"PropertiesPanel\", \"Console\", \"EditorQuickFind\", \"PluginSettings\", \"LocationBar\", \"Presentation\", \"TK\", \"OS\", \"Widget\", \"AbstractFS\", \"PluginManager\", \"MLogger\", \"DocumentHelp\", \"Flags\", \"EditorSearch\", \"LookAndFeelSettings\", \"MetaInfo\", \"EditorNavigation\", \"AnnotationBar\", \"UI\", \"PluginType\", \"SessionManager\", \"TreeFS\", \"QuickOpenDialog\", \"PluginMenu\", \"EditorZoom\", \"Desktop\", \"ImportExport\", \"Help\", \"PluginInfo\", \"TreePanel\", \"DocumentList\", \"Args\", \"EditorPrint\", \"EditorDesigner\", \"BookmarksMenu\", \"SearchBar\", \"Designer\", \"Tree\", \"Autosave\", \"Editor\", \"EditorPlugin\", \"EditorExport\", \"SummaryData\", \"PropertiesBar\", \"NavigationUtils\", \"GeneralSettings\", \"TagsMenu\"]"
        },
        {
            "content": "The call graph of `MainWindow.java` reveals a wide range of dependencies and interactions with various components in the system. These entities represent parts of the application that `MainWindow.java` directly references or uses \u2014 likely including UI components, configuration modules, plugin systems, and utility classes.\n\n### Key Observations:\n1. **UI and Interaction Components**:\n   - `LocationBar`, `PropertiesPanel`, `Console`, `SearchBar`, `AnnotationBar`, `QuickOpenDialog`, `BookmarksMenu`, `TagsMenu`, `PropertiesBar` \u2014 these suggest rich user interface interactions.\n   \n2. **Configuration & Settings**:\n   - `Config`, `PluginSettings`, `LookAndFeelSettings`, `GeneralSettings` \u2014 indicate that `MainWindow` manages or initializes settings.\n\n3. **Plugin System**:\n   - `PluginManager`, `PluginMenu`, `PluginType`, `PluginInfo`, `EditorPlugin` \u2014 show integration with a modular plugin architecture.\n\n4. **Document and File Handling**:\n   - `AbstractFS`, `TreeFS`, `DocumentList`, `DocumentHelp`, `ImportExport`, `Autosave`, `SessionManager` \u2014 imply document management and file system interaction.\n\n5. **Editor and Code Functionality**:\n   - `Editor`, `EditorQuickFind`, `EditorSearch`, `EditorZoom`, `EditorPrint`, `EditorDesigner`, `EditorExport` \u2014 suggest deep integration with an editor component.\n\n6. **Utilities and Infrastructure**:\n   - `TK`, `UI`, `OS`, `MLogger`, `Flags`, `NavigationUtils`, `SummaryData`, `Desktop`, `Args`, `Help`, `Designer`, `Tree`, `Widget`, `Tracker`, `MetaInfo` \u2014 general-purpose utilities used throughout the system.\n\n### Implications for Synchronization:\nSince `MLabel.java` was removed but had historical co-change relationships with many now-removed files, we should consider synchronizing changes across:\n- The **core UI components** used by `MainWindow.java`.\n- **High-level infrastructure** like configuration, plugin management, and document handling.\n\nTo refine this further, let's analyze **conceptual coupling** between `MainWindow.java` and one of its central dependencies \u2014 say, `PluginManager.java` \u2014 to see if they share semantic context or functionality.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_4dc70dfd0ec44a37b9fd1d",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"PluginManager.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.82570136\""
        },
        {
            "content": "The conceptual coupling score between `MainWindow.java` and `PluginManager.java` is **0.8257**, which indicates a **strong semantic relationship** between these two components.\n\n### Interpretation:\n- A high cosine similarity score like this suggests that `MainWindow` and `PluginManager` likely share **common functionality, domain concepts, or responsibilities**.\n- This reinforces the idea that changes in one may **naturally lead to changes in the other**, either due to direct dependency or shared system behavior.\n\n### CIA Implication:\nGiven the removal of `MLabel.java` and its historical co-change relationships, it's reasonable to infer that:\n- **Key UI components** like `MainWindow.java`, along with their tightly coupled modules (e.g., `PluginManager.java`), represent **new synchronization points**.\n- These should be monitored together for change propagation, especially when dealing with features like configuration, plugin handling, or user interface updates.\n\n### Final Step: Code Inspection\nTo confirm this understanding, we can inspect the actual code of `MainWindow.java` to see how it interacts with `PluginManager.java`.\n\nLet\u2019s retrieve the source code of `MainWindow.java`:\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_7c5a352e962a45e7b480cb",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.mods.Mod;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSmallButton;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMenuAdapter;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentList;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.GeneralSettings;\\nimport org.makagiga.tools.Help;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.presentation.Presentation;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentList documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate Presentation.Action presentationAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tprivate DocumentHelpAction documentHelpAction;\\n\\t\\tprivate MAction quickOpenAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"presentation-action\\\", presentationAction,\\n\\t\\t\\t\\t\\\"quick-open-action\\\", quickOpenAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession();\\n\\t\\tconfig.sync();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic static void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tif (restoreWindow)\\n\\t\\t\\tmainWindow.restore();\\n\\t\\tmainWindow.setDesktopVisible(true);\\n\\t\\tDesktop desktop = mainWindow.getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentList();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tif (MApplication.consoleOpenInTab.get()) {\\n\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tupdateState();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tif (UI.systemTray.get()) {\\n\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t}\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\telse if (Args.isSet(\\\"presentation\\\"))\\n\\t\\t\\t\\tPresentation.setActive(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI));\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\tpresentationAction = new Presentation.Action();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\tdocumentHelpAction = new DocumentHelpAction();\\n\\t\\t\\t\\tquickOpenAction = new QuickOpenDialog.Action();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tnew QuickSaveAction(),\\n\\t\\t\\tquickOpenAction,\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\temailAction.setEnabled((editor != null) && editor.getMetaInfo().isFile());\\n\\t\\t\\texportMenu.addSeparator(false);\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tif (Vars.actionPresentation.get())\\n\\t\\t\\tviewMenu.add(presentationAction);\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\thelpMenu.add(documentHelpAction);\\n\\t\\tif (Kiosk.actionWhatsThis.get())\\n\\t\\t\\thelpMenu.add(MWhatsThis.createAction(this));\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new MApplication.AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\tmenuBar.add(documentList);\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\tgetStatusBar().setClosed(true);\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(Desktop.RESTORE_SESSION_LAZY);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (editMenu.isEmpty()) {\\n\\t\\t\\teditMenu.addTitle(_(\\\"No Items\\\"));\\n\\t\\t}\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tdocumentHelpAction.updateProperties(editor);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\t\\t\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\tboolean stretchAdded = false;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!Presentation.isActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetToolTipText(UI.makeHTML(\\n\\t\\t\\t\\t_(\\\"Imports a selected files into the <b>Tree</b>.<br>Tip: You can use drag and drop to import/export files.\\\")\\n\\t\\t\\t));\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tImportMenu.class.cast(menu).doInit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\tprivate void doInit() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance().getFileSystems().values()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tmainWindow,\\n\\t\\t\\t\\t\\\"configure\\\",\\n\\t\\t\\t\\tUI.TOP\\n\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\t\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.addAdvancedPage(GeneralSettings.Advanced.class);\\n\\t\\t\\tdialog.addAdvancedPage(LookAndFeelSettings.Advanced.class);\\n\\t\\t\\tif (dialog.exec())\\n\\t\\t\\t\\tmainWindow.repaint();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !Presentation.isActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t\\tthis.add(\\\"Us\\\", presentationAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DocumentHelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif (context != null)\\n\\t\\t\\t\\t\\torg.makagiga.commons.help.Help.show(tab, context);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DocumentHelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP.getText()); \\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tsetEnabled(tab instanceof DocumentHelp);\\n\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\tsetName(_(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Vars.actionSendFile.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tHelp.show();\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tPluginSettingsTab tab = tabs.findEditor(PluginSettingsTab.class);\\n\\t\\t\\tif (tab == null)\\n\\t\\t\\t\\ttabs.addEditor(new PluginSettingsTab());\\n\\t\\t\\telse\\n\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(_(\\\"Save all the modified files now\\\"), VK_S, getMenuMask());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(_(\\\"Location Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.isInstance() ? PropertiesBar.getInstance() : null;\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tif (PropertiesBar.isInstance())\\n\\t\\t\\t\\t\\tPropertiesBar.getInstance().setVisible(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "content": "The source code of `MainWindow.java` confirms that it is a **central UI component** in the Makagiga application. It serves as the main window of the application and coordinates interactions between various subsystems such as:\n\n- **Plugin Management**: Integration with `PluginManager`, use of plugin menus/toolbars, and dynamic plugin updates.\n- **Editor System**: Manages multiple editor types (`Editor<?>`, `EditorDesigner`, `EditorZoom`, etc.), including their actions (find, zoom, print).\n- **Document Handling**: Works closely with `MetaInfo`, `TreeFS`, `AbstractFS`, and `DocumentList`.\n- **User Interface Components**: Coordinates UI elements like `LocationBar`, `PropertiesBar`, `Sidebar`, `ToolBar`, and `TabPanel`.\n- **Session Management**: Handles session saving/loading with `Config`, `SessionManager`, and autosave.\n\n### Key Coupling Points:\n1. **PluginManager**:\n   - Used extensively to update menus and toolbars (`PluginManager.updateMenu(...)`, `PluginManager.updateToolBar(...)`).\n   - Strong semantic coupling confirmed earlier via conceptual similarity score of **0.8257**.\n\n2. **Editor Subsystem**:\n   - References several editor-related classes: `EditorDesigner`, `EditorZoom`, `EditorSearch`, `EditorPrint`, etc.\n   - Suggests that changes to one editor class may propagate across others or to `MainWindow`.\n\n3. **UI Infrastructure**:\n   - Interacts heavily with components like `LocationBar`, `PropertiesBar`, `Sidebar`, `Tabs`, `Console`, and `ToolBar`.\n\n---\n\n### CIA Conclusion:\nGiven all the information gathered:\n\n- The original starting entity `MLabel.java` has been removed from the project, but its co-change history points to entities involved in UI rendering and data presentation (e.g., `Renderer`, `SummaryRenderer`).\n- These responsibilities are likely now encapsulated within or distributed among current key components like `MainWindow.java` and its dependencies.\n- Therefore, **changes in `MainWindow.java` should be synchronized with**:\n  - `PluginManager.java` (due to high conceptual coupling and structural integration),\n  - Core editor classes (`EditorDesigner`, `EditorZoom`, etc.),\n  - UI infrastructure (`LocationBar`, `PropertiesBar`, `Sidebar`, `Tabs`).\n\n---\n\n### Final Recommendation:\nTo ensure consistency and reduce regression risk:\n> \ud83d\udfe9 **Synchronize changes to `MainWindow.java` with:**\n> - `PluginManager.java`\n> - Editor implementations (e.g., `EditorDesigner.java`, `EditorZoom.java`)\n> - UI components it directly interacts with (e.g., `LocationBar.java`, `PropertiesBar.java`, `Sidebar.java`, `Tabs.java`)\n\nWould you like me to generate a structured synchronization report or explore any specific dependency further?",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `MLabel.java`\n\nChange set: [PluginManager, MainWindow, Renderer, SummaryRenderer, EditorDesigner, EditorZoom, EditorSearch, EditorPrint, PropertiesBar, LocationBar, Sidebar, Tabs, DocumentList, Console, DesktopTab, MSystemTray, PluginSettings, TreePanel, SessionManager, Help, MAboutDialog, ImportExport, EditorQuickFind, NavigationUtils, MToolBar, MSplitPane, MMainWindow, MPanel, AbstractFS, TreeFS, BookmarksMenu, TagsMenu, PluginMenu, PluginInfo, PluginType, Editor, EditorPlugin, EditorExport, EditorNavigation, ScriptExecutor, Config, Flags, MetaInfo, MLogger]\n\nDetails:\n1. **PluginManager**: Strong conceptual coupling (0.8257) and structural integration in `MainWindow` for updating menus, toolbars, and plugin lifecycle.\n2. **MainWindow**: Central UI coordinator; interacts with most components listed here.\n3. **Renderer / SummaryRenderer**: Historically co-changed with `MLabel`, likely involved in UI rendering logic now absorbed by `MainWindow`.\n4. **EditorDesigner**: Integrated into `MainWindow` via tab system and sidebar interaction.\n5. **EditorZoom**: Directly controlled by `MainWindow` via zoom actions and toolbar.\n6. **EditorSearch**: Managed by `MainWindow` through find actions and tab updates.\n7. **EditorPrint**: Triggered from `MainWindow` menu and action handling.\n8. **PropertiesBar**: Updated and shown/hidden by `MainWindow` based on context.\n9. **LocationBar**: Controlled and updated by `MainWindow` during tab changes.\n10. **Sidebar**: Toggled and managed directly by `MainWindow`.\n11. **Tabs**: Core component managed by `MainWindow` to handle editors and navigation.\n12. **DocumentList**: Embedded in `MainWindow` and used for file/document listing.\n13. **Console**: Integrated via menu and tab management in `MainWindow`.\n14. **DesktopTab**: A tab type managed by `MainWindow` for widget/desktop views.\n15. **MSystemTray**: Initialized and configured by `MainWindow`.\n16. **PluginSettings**: Accessed and displayed via `MainWindow` tools menu.\n17. **TreePanel**: Interacts closely with `MainWindow` for tree navigation.\n18. **SessionManager**: Used by `MainWindow` for session save/load operations.\n19. **Help**: Accessed and triggered from help menu in `MainWindow`.\n20. **MAboutDialog**: Displayed from help menu in `MainWindow`.\n21. **ImportExport**: Called from file/export menu in `MainWindow`.\n22. **EditorQuickFind**: Triggered and embedded in the tab bar via `MainWindow`.\n23. **NavigationUtils**: Used by `MainWindow` to update navigation actions.\n24. **MToolBar**: Part of `MainWindow` layout and dynamically updated.\n25. **MSplitPane**: Manages main layout structure in `MainWindow`.\n26. **MMainWindow**: Base class of `MainWindow`; tightly coupled.\n27. **MPanel**: Used extensively in UI construction within `MainWindow`.\n28. **AbstractFS**: Referenced by `MainWindow` when managing file systems.\n29. **TreeFS**: Specific implementation of `AbstractFS`, used in tree navigation.\n30. **BookmarksMenu**: Embedded in menu bar and managed by `MainWindow`.\n31. **TagsMenu**: Integrated in menu bar and managed by `MainWindow`.\n32. **PluginMenu**: Interface implemented by plugins used in `MainWindow` menus.\n33. **PluginInfo**: Used by `MainWindow` to manage plugin metadata.\n34. **PluginType**: Used to categorize plugins accessed via `MainWindow`.\n35. **Editor**: Base class for all editor types managed by `MainWindow`.\n36. **EditorPlugin**: Interface implemented by all editor plugins.\n37. **EditorExport**: Implemented by exportable editors tied to `MainWindow` menu.\n38. **EditorNavigation**: Used by `MainWindow` to support navigation actions.\n39. **ScriptExecutor**: Invoked at startup and referenced by `MainWindow`.\n40. **Config**: Used throughout `MainWindow` for persistent settings.\n41. **Flags**: Configuration flags used in UI behavior decisions.\n42. **MetaInfo**: Core data model used across `MainWindow` interactions.\n43. **MLogger**: Logging utility used in `MainWindow` initialization and events.\n\nThese entities are included due to a combination of direct structural coupling, historical co-change relationships, and semantic or functional dependencies derived from the analysis of Makagiga's evolving architecture.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14",
                    "m15",
                    "m16"
                ],
                "response_message": "m17"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MLabel.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_27032010064f4b05a207a0",
                        "function": {
                            "arguments": "{\"entity\": \"MLabel.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"ItemRenderer\", \"2\", \"0.09090909090909091\"], [\"LinkButton\", \"1\", \"0.045454545454545456\"], [\"TestMLabel\", \"1\", \"0.045454545454545456\"], [\"Renderer\", \"3\", \"0.13636363636363635\"], [\"MenuButton\", \"1\", \"0.045454545454545456\"], [\"TimeZoneLabel\", \"1\", \"0.045454545454545456\"], [\"NoObjectView\", \"1\", \"0.045454545454545456\"], [\"SelectionItem\", \"1\", \"0.045454545454545456\"], [\"MButton\", \"1\", \"0.045454545454545456\"], [\"PluginSettings\", \"2\", \"0.09090909090909091\"], [\"FeedViewer\", \"1\", \"0.045454545454545456\"], [\"MDialog\", \"2\", \"0.09090909090909091\"], [\"FSHelper\", \"1\", \"0.045454545454545456\"], [\"MFileChooser\", \"1\", \"0.045454545454545456\"], [\"Backup\", \"1\", \"0.045454545454545456\"], [\"TabIcon\", \"1\", \"0.045454545454545456\"], [\"PrintDialog\", \"1\", \"0.045454545454545456\"], [\"MAbout\", \"2\", \"0.09090909090909091\"], [\"PropertiesDialog\", \"1\", \"0.045454545454545456\"], [\"CalendarWidget\", \"1\", \"0.045454545454545456\"], [\"TaskSummary\", \"2\", \"0.09090909090909091\"], [\"Content\", \"2\", \"0.09090909090909091\"], [\"ActionProperties\", \"1\", \"0.045454545454545456\"], [\"PluginManager\", \"2\", \"0.09090909090909091\"], [\"Factory\", \"1\", \"0.045454545454545456\"], [\"CoolHeader\", \"1\", \"0.045454545454545456\"], [\"PrintPreview\", \"1\", \"0.045454545454545456\"], [\"PluginRenderer\", \"1\", \"0.045454545454545456\"], [\"MDateSpinner\", \"2\", \"0.09090909090909091\"], [\"LocationBar\", \"1\", \"0.045454545454545456\"], [\"PropertiesPanel\", \"1\", \"0.045454545454545456\"], [\"MainWindow\", \"2\", \"0.09090909090909091\"], [\"OptimizedLabel\", \"1\", \"0.045454545454545456\"], [\"MRenderer\", \"1\", \"0.045454545454545456\"], [\"MAboutDialog\", \"1\", \"0.045454545454545456\"], [\"OptimizedPanel\", \"1\", \"0.045454545454545456\"], [\"ScriptPlugin\", \"1\", \"0.045454545454545456\"], [\"MSplashScreen\", \"2\", \"0.09090909090909091\"], [\"Main\", \"1\", \"0.045454545454545456\"], [\"SummaryRenderer\", \"3\", \"0.13636363636363635\"], [\"MMenu\", \"1\", \"0.045454545454545456\"], [\"MToggleButton\", \"1\", \"0.045454545454545456\"], [\"AbstractTextEditor\", \"1\", \"0.045454545454545456\"], [\"MRadioButton\", \"1\", \"0.045454545454545456\"], [\"StaticHandler\", \"1\", \"0.045454545454545456\"], [\"StaticCoreHandler\", \"1\", \"0.045454545454545456\"], [\"Widget\", \"1\", \"0.045454545454545456\"], [\"StaticThrobber\", \"1\", \"0.045454545454545456\"], [\"Info\", \"1\", \"0.045454545454545456\"], [\"MTextFieldPanel\", \"1\", \"0.045454545454545456\"], [\"TextEditorCore\", \"1\", \"0.045454545454545456\"], [\"MWhatsThis\", \"1\", \"0.045454545454545456\"], [\"TestI\", \"1\", \"0.045454545454545456\"], [\"WikiTab\", \"1\", \"0.045454545454545456\"], [\"DateTimeRenderer\", \"2\", \"0.09090909090909091\"], [\"Editor\", \"1\", \"0.045454545454545456\"], [\"MCalendarPanel\", \"1\", \"0.045454545454545456\"], [\"DayButton\", \"1\", \"0.045454545454545456\"], [\"BackupDialog\", \"1\", \"0.045454545454545456\"], [\"InternetSearchPanel\", \"1\", \"0.045454545454545456\"], [\"Node\", \"1\", \"0.045454545454545456\"], [\"Style\", \"1\", \"0.045454545454545456\"], [\"ArticleList\", \"1\", \"0.045454545454545456\"], [\"ArchiveItemRenderer\", \"1\", \"0.045454545454545456\"], [\"ButtonRenderer\", \"1\", \"0.045454545454545456\"], [\"TodoEditorCore\", \"1\", \"0.045454545454545456\"], [\"TaskStateMenu\", \"1\", \"0.045454545454545456\"], [\"NodeMenu\", \"1\", \"0.045454545454545456\"], [\"TasksMenu\", \"1\", \"0.045454545454545456\"], [\"MTip\", \"1\", \"0.045454545454545456\"], [\"Tabs\", \"1\", \"0.045454545454545456\"], [\"TodoEditor\", \"1\", \"0.045454545454545456\"], [\"TextEditorDesigner\", \"1\", \"0.045454545454545456\"]]"
            },
            "m5": {
                "content": "The `get_co_change_relationship` function has returned a list of entities that have co-changed with `MLabel.java` in the project's version history. Each entry includes:\n\n- **Entity Name**: The name of the co-changing entity.\n- **Support Count**: The number of times this entity was modified along with `MLabel.java`.\n- **Confidence Score**: The probability that this entity changes along with `MLabel.java`.\n\n### Key Observations:\n1. **High Confidence Entities**:\n   - `SummaryRenderer` and `Renderer` have the highest confidence scores (\u224813.64%).\n   - These are strong candidates for synchronization since they frequently co-change with `MLabel.java`.\n\n2. **Medium Confidence Entities**:\n   - Entities like `ItemRenderer`, `PluginSettings`, `MDialog`, `TaskSummary`, `Content`, `MainWindow`, `MSplashScreen`, and `DateTimeRenderer` show moderate support/confidence values (\u22489.09%).\n   - They may also need to be synchronized depending on the nature of the change.\n\n3. **Low Confidence Entities**:\n   - A large number of entities have a confidence score of \u22484.54%.\n   - These could be potential candidates for review, but their low confidence suggests weaker historical coupling.\n\n### Next Steps:\nTo narrow down the most relevant set of entities for synchronization, we can apply additional analyses:\n\n#### Option 1: Analyze Coupling Dependencies\nWe can use `get_coupling_dependencies` between `MLabel.java` and the top co-changing entities (`SummaryRenderer`, `Renderer`) to determine if there is any direct structural dependency.\n\n#### Option 2: Analyze Conceptual Coupling\nUse `get_conceptual_coupling` to check semantic similarity between `MLabel.java` and the co-changing files. This helps identify whether these entities share similar concepts or functionality.\n\n#### Option 3: Call Graph Analysis\nUse `get_call_graph(MLabel.java)` to see which entities are directly referenced by `MLabel.java`. This gives insight into direct usage relationships.\n\n---\n\nLet\u2019s start by analyzing the call graph of `MLabel.java` to understand its direct dependencies.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_b2cb677bbacf49a7a53662",
                        "function": {
                            "arguments": "{\"entity\": \"MLabel.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "\"MLabel has been removed from the project due to project version iteration\""
            },
            "m7": {
                "content": "It appears that `MLabel.java` has been removed or is no longer present in the current version of the project. This could explain the limited direct information we\u2019re getting from the tools.\n\n### Implication:\nIf `MLabel.java` has been removed, the co-change relationships might reflect historical dependencies that are now obsolete. However, this also suggests that:\n- There may be **other entities that replaced or absorbed its functionality**.\n- The **co-changing entities** (especially those with high confidence) could be part of the same functional module and might still depend on similar logic or patterns.\n\n### Strategy Moving Forward:\n1. We should investigate the **entities with the highest co-change confidence**, such as `SummaryRenderer` and `Renderer`, to see if they have structural or conceptual relationships with each other or with any potential successors of `MLabel.java`.\n\n2. Let\u2019s start by analyzing **coupling dependencies** between `SummaryRenderer.java` and `Renderer.java` to determine if there is a strong dependency within this group.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_f7463c1686d848b9a7a860",
                        "function": {
                            "arguments": "{\"entity1\": \"SummaryRenderer.java\", \"entity2\": \"Renderer.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"SummaryRenderer and Renderer have been removed from the project due to project version iteration\"]"
            },
            "m9": {
                "content": "It seems that both `SummaryRenderer.java` and `Renderer.java` have also been removed from the current version of the project. This confirms a broader **version evolution issue** \u2014 several historically co-changing entities may no longer exist in the current codebase.\n\n### Revised Strategy:\n\nGiven this context, we need to:\n1. Identify **potential replacements or successors** of `MLabel.java` by analyzing its most frequent co-changers.\n2. Focus on entities that are still present in the system and show high conceptual or coupling similarity.\n\nLet\u2019s take one of the more frequently co-changing entities that is likely still present in the system (e.g., `MDialog.java`, `MainWindow.java`, or `MSplashScreen.java`) and analyze its **call graph** to understand what it depends on or interacts with.\n\nWe'll start with `MainWindow.java` as it appears often in UI-related contexts and may be central to the system.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_14acf4ea11864710bd9bdb",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"Tracker\", \"Config\", \"PropertiesPanel\", \"Console\", \"EditorQuickFind\", \"PluginSettings\", \"LocationBar\", \"Presentation\", \"TK\", \"OS\", \"Widget\", \"AbstractFS\", \"PluginManager\", \"MLogger\", \"DocumentHelp\", \"Flags\", \"EditorSearch\", \"LookAndFeelSettings\", \"MetaInfo\", \"EditorNavigation\", \"AnnotationBar\", \"UI\", \"PluginType\", \"SessionManager\", \"TreeFS\", \"QuickOpenDialog\", \"PluginMenu\", \"EditorZoom\", \"Desktop\", \"ImportExport\", \"Help\", \"PluginInfo\", \"TreePanel\", \"DocumentList\", \"Args\", \"EditorPrint\", \"EditorDesigner\", \"BookmarksMenu\", \"SearchBar\", \"Designer\", \"Tree\", \"Autosave\", \"Editor\", \"EditorPlugin\", \"EditorExport\", \"SummaryData\", \"PropertiesBar\", \"NavigationUtils\", \"GeneralSettings\", \"TagsMenu\"]"
            },
            "m11": {
                "content": "The call graph of `MainWindow.java` reveals a wide range of dependencies and interactions with various components in the system. These entities represent parts of the application that `MainWindow.java` directly references or uses \u2014 likely including UI components, configuration modules, plugin systems, and utility classes.\n\n### Key Observations:\n1. **UI and Interaction Components**:\n   - `LocationBar`, `PropertiesPanel`, `Console`, `SearchBar`, `AnnotationBar`, `QuickOpenDialog`, `BookmarksMenu`, `TagsMenu`, `PropertiesBar` \u2014 these suggest rich user interface interactions.\n   \n2. **Configuration & Settings**:\n   - `Config`, `PluginSettings`, `LookAndFeelSettings`, `GeneralSettings` \u2014 indicate that `MainWindow` manages or initializes settings.\n\n3. **Plugin System**:\n   - `PluginManager`, `PluginMenu`, `PluginType`, `PluginInfo`, `EditorPlugin` \u2014 show integration with a modular plugin architecture.\n\n4. **Document and File Handling**:\n   - `AbstractFS`, `TreeFS`, `DocumentList`, `DocumentHelp`, `ImportExport`, `Autosave`, `SessionManager` \u2014 imply document management and file system interaction.\n\n5. **Editor and Code Functionality**:\n   - `Editor`, `EditorQuickFind`, `EditorSearch`, `EditorZoom`, `EditorPrint`, `EditorDesigner`, `EditorExport` \u2014 suggest deep integration with an editor component.\n\n6. **Utilities and Infrastructure**:\n   - `TK`, `UI`, `OS`, `MLogger`, `Flags`, `NavigationUtils`, `SummaryData`, `Desktop`, `Args`, `Help`, `Designer`, `Tree`, `Widget`, `Tracker`, `MetaInfo` \u2014 general-purpose utilities used throughout the system.\n\n### Implications for Synchronization:\nSince `MLabel.java` was removed but had historical co-change relationships with many now-removed files, we should consider synchronizing changes across:\n- The **core UI components** used by `MainWindow.java`.\n- **High-level infrastructure** like configuration, plugin management, and document handling.\n\nTo refine this further, let's analyze **conceptual coupling** between `MainWindow.java` and one of its central dependencies \u2014 say, `PluginManager.java` \u2014 to see if they share semantic context or functionality.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_4dc70dfd0ec44a37b9fd1d",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"PluginManager.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.82570136\""
            },
            "m13": {
                "content": "The conceptual coupling score between `MainWindow.java` and `PluginManager.java` is **0.8257**, which indicates a **strong semantic relationship** between these two components.\n\n### Interpretation:\n- A high cosine similarity score like this suggests that `MainWindow` and `PluginManager` likely share **common functionality, domain concepts, or responsibilities**.\n- This reinforces the idea that changes in one may **naturally lead to changes in the other**, either due to direct dependency or shared system behavior.\n\n### CIA Implication:\nGiven the removal of `MLabel.java` and its historical co-change relationships, it's reasonable to infer that:\n- **Key UI components** like `MainWindow.java`, along with their tightly coupled modules (e.g., `PluginManager.java`), represent **new synchronization points**.\n- These should be monitored together for change propagation, especially when dealing with features like configuration, plugin handling, or user interface updates.\n\n### Final Step: Code Inspection\nTo confirm this understanding, we can inspect the actual code of `MainWindow.java` to see how it interacts with `PluginManager.java`.\n\nLet\u2019s retrieve the source code of `MainWindow.java`:\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_7c5a352e962a45e7b480cb",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m14": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.mods.Mod;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSmallButton;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMenuAdapter;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentList;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.GeneralSettings;\\nimport org.makagiga.tools.Help;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.presentation.Presentation;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentList documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate Presentation.Action presentationAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tprivate DocumentHelpAction documentHelpAction;\\n\\t\\tprivate MAction quickOpenAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"presentation-action\\\", presentationAction,\\n\\t\\t\\t\\t\\\"quick-open-action\\\", quickOpenAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession();\\n\\t\\tconfig.sync();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic static void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tif (restoreWindow)\\n\\t\\t\\tmainWindow.restore();\\n\\t\\tmainWindow.setDesktopVisible(true);\\n\\t\\tDesktop desktop = mainWindow.getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentList();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tif (MApplication.consoleOpenInTab.get()) {\\n\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tupdateState();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tif (UI.systemTray.get()) {\\n\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t}\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\telse if (Args.isSet(\\\"presentation\\\"))\\n\\t\\t\\t\\tPresentation.setActive(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI));\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\tpresentationAction = new Presentation.Action();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\tdocumentHelpAction = new DocumentHelpAction();\\n\\t\\t\\t\\tquickOpenAction = new QuickOpenDialog.Action();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tnew QuickSaveAction(),\\n\\t\\t\\tquickOpenAction,\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\temailAction.setEnabled((editor != null) && editor.getMetaInfo().isFile());\\n\\t\\t\\texportMenu.addSeparator(false);\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tif (Vars.actionPresentation.get())\\n\\t\\t\\tviewMenu.add(presentationAction);\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\thelpMenu.add(documentHelpAction);\\n\\t\\tif (Kiosk.actionWhatsThis.get())\\n\\t\\t\\thelpMenu.add(MWhatsThis.createAction(this));\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new MApplication.AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\tmenuBar.add(documentList);\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\tgetStatusBar().setClosed(true);\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(Desktop.RESTORE_SESSION_LAZY);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (editMenu.isEmpty()) {\\n\\t\\t\\teditMenu.addTitle(_(\\\"No Items\\\"));\\n\\t\\t}\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tdocumentHelpAction.updateProperties(editor);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\t\\t\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\tboolean stretchAdded = false;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!Presentation.isActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetToolTipText(UI.makeHTML(\\n\\t\\t\\t\\t_(\\\"Imports a selected files into the <b>Tree</b>.<br>Tip: You can use drag and drop to import/export files.\\\")\\n\\t\\t\\t));\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tImportMenu.class.cast(menu).doInit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\tprivate void doInit() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance().getFileSystems().values()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tmainWindow,\\n\\t\\t\\t\\t\\\"configure\\\",\\n\\t\\t\\t\\tUI.TOP\\n\\t\\t\\t);\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\t\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.addAdvancedPage(GeneralSettings.Advanced.class);\\n\\t\\t\\tdialog.addAdvancedPage(LookAndFeelSettings.Advanced.class);\\n\\t\\t\\tif (dialog.exec())\\n\\t\\t\\t\\tmainWindow.repaint();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !Presentation.isActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t\\tthis.add(\\\"Us\\\", presentationAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DocumentHelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif (context != null)\\n\\t\\t\\t\\t\\torg.makagiga.commons.help.Help.show(tab, context);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DocumentHelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP.getText()); \\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tsetEnabled(tab instanceof DocumentHelp);\\n\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\tsetName(_(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Vars.actionSendFile.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tHelp.show();\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tPluginSettingsTab tab = tabs.findEditor(PluginSettingsTab.class);\\n\\t\\t\\tif (tab == null)\\n\\t\\t\\t\\ttabs.addEditor(new PluginSettingsTab());\\n\\t\\t\\telse\\n\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(_(\\\"Save all the modified files now\\\"), VK_S, getMenuMask());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(_(\\\"Location Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.isInstance() ? PropertiesBar.getInstance() : null;\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tif (PropertiesBar.isInstance())\\n\\t\\t\\t\\t\\tPropertiesBar.getInstance().setVisible(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m15": {
                "content": "The source code of `MainWindow.java` confirms that it is a **central UI component** in the Makagiga application. It serves as the main window of the application and coordinates interactions between various subsystems such as:\n\n- **Plugin Management**: Integration with `PluginManager`, use of plugin menus/toolbars, and dynamic plugin updates.\n- **Editor System**: Manages multiple editor types (`Editor<?>`, `EditorDesigner`, `EditorZoom`, etc.), including their actions (find, zoom, print).\n- **Document Handling**: Works closely with `MetaInfo`, `TreeFS`, `AbstractFS`, and `DocumentList`.\n- **User Interface Components**: Coordinates UI elements like `LocationBar`, `PropertiesBar`, `Sidebar`, `ToolBar`, and `TabPanel`.\n- **Session Management**: Handles session saving/loading with `Config`, `SessionManager`, and autosave.\n\n### Key Coupling Points:\n1. **PluginManager**:\n   - Used extensively to update menus and toolbars (`PluginManager.updateMenu(...)`, `PluginManager.updateToolBar(...)`).\n   - Strong semantic coupling confirmed earlier via conceptual similarity score of **0.8257**.\n\n2. **Editor Subsystem**:\n   - References several editor-related classes: `EditorDesigner`, `EditorZoom`, `EditorSearch`, `EditorPrint`, etc.\n   - Suggests that changes to one editor class may propagate across others or to `MainWindow`.\n\n3. **UI Infrastructure**:\n   - Interacts heavily with components like `LocationBar`, `PropertiesBar`, `Sidebar`, `Tabs`, `Console`, and `ToolBar`.\n\n---\n\n### CIA Conclusion:\nGiven all the information gathered:\n\n- The original starting entity `MLabel.java` has been removed from the project, but its co-change history points to entities involved in UI rendering and data presentation (e.g., `Renderer`, `SummaryRenderer`).\n- These responsibilities are likely now encapsulated within or distributed among current key components like `MainWindow.java` and its dependencies.\n- Therefore, **changes in `MainWindow.java` should be synchronized with**:\n  - `PluginManager.java` (due to high conceptual coupling and structural integration),\n  - Core editor classes (`EditorDesigner`, `EditorZoom`, etc.),\n  - UI infrastructure (`LocationBar`, `PropertiesBar`, `Sidebar`, `Tabs`).\n\n---\n\n### Final Recommendation:\nTo ensure consistency and reduce regression risk:\n> \ud83d\udfe9 **Synchronize changes to `MainWindow.java` with:**\n> - `PluginManager.java`\n> - Editor implementations (e.g., `EditorDesigner.java`, `EditorZoom.java`)\n> - UI components it directly interacts with (e.g., `LocationBar.java`, `PropertiesBar.java`, `Sidebar.java`, `Tabs.java`)\n\nWould you like me to generate a structured synchronization report or explore any specific dependency further?",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m16": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m17": {
                "content": "Title: Diagnosis of starting entity `MLabel.java`\n\nChange set: [PluginManager, MainWindow, Renderer, SummaryRenderer, EditorDesigner, EditorZoom, EditorSearch, EditorPrint, PropertiesBar, LocationBar, Sidebar, Tabs, DocumentList, Console, DesktopTab, MSystemTray, PluginSettings, TreePanel, SessionManager, Help, MAboutDialog, ImportExport, EditorQuickFind, NavigationUtils, MToolBar, MSplitPane, MMainWindow, MPanel, AbstractFS, TreeFS, BookmarksMenu, TagsMenu, PluginMenu, PluginInfo, PluginType, Editor, EditorPlugin, EditorExport, EditorNavigation, ScriptExecutor, Config, Flags, MetaInfo, MLogger]\n\nDetails:\n1. **PluginManager**: Strong conceptual coupling (0.8257) and structural integration in `MainWindow` for updating menus, toolbars, and plugin lifecycle.\n2. **MainWindow**: Central UI coordinator; interacts with most components listed here.\n3. **Renderer / SummaryRenderer**: Historically co-changed with `MLabel`, likely involved in UI rendering logic now absorbed by `MainWindow`.\n4. **EditorDesigner**: Integrated into `MainWindow` via tab system and sidebar interaction.\n5. **EditorZoom**: Directly controlled by `MainWindow` via zoom actions and toolbar.\n6. **EditorSearch**: Managed by `MainWindow` through find actions and tab updates.\n7. **EditorPrint**: Triggered from `MainWindow` menu and action handling.\n8. **PropertiesBar**: Updated and shown/hidden by `MainWindow` based on context.\n9. **LocationBar**: Controlled and updated by `MainWindow` during tab changes.\n10. **Sidebar**: Toggled and managed directly by `MainWindow`.\n11. **Tabs**: Core component managed by `MainWindow` to handle editors and navigation.\n12. **DocumentList**: Embedded in `MainWindow` and used for file/document listing.\n13. **Console**: Integrated via menu and tab management in `MainWindow`.\n14. **DesktopTab**: A tab type managed by `MainWindow` for widget/desktop views.\n15. **MSystemTray**: Initialized and configured by `MainWindow`.\n16. **PluginSettings**: Accessed and displayed via `MainWindow` tools menu.\n17. **TreePanel**: Interacts closely with `MainWindow` for tree navigation.\n18. **SessionManager**: Used by `MainWindow` for session save/load operations.\n19. **Help**: Accessed and triggered from help menu in `MainWindow`.\n20. **MAboutDialog**: Displayed from help menu in `MainWindow`.\n21. **ImportExport**: Called from file/export menu in `MainWindow`.\n22. **EditorQuickFind**: Triggered and embedded in the tab bar via `MainWindow`.\n23. **NavigationUtils**: Used by `MainWindow` to update navigation actions.\n24. **MToolBar**: Part of `MainWindow` layout and dynamically updated.\n25. **MSplitPane**: Manages main layout structure in `MainWindow`.\n26. **MMainWindow**: Base class of `MainWindow`; tightly coupled.\n27. **MPanel**: Used extensively in UI construction within `MainWindow`.\n28. **AbstractFS**: Referenced by `MainWindow` when managing file systems.\n29. **TreeFS**: Specific implementation of `AbstractFS`, used in tree navigation.\n30. **BookmarksMenu**: Embedded in menu bar and managed by `MainWindow`.\n31. **TagsMenu**: Integrated in menu bar and managed by `MainWindow`.\n32. **PluginMenu**: Interface implemented by plugins used in `MainWindow` menus.\n33. **PluginInfo**: Used by `MainWindow` to manage plugin metadata.\n34. **PluginType**: Used to categorize plugins accessed via `MainWindow`.\n35. **Editor**: Base class for all editor types managed by `MainWindow`.\n36. **EditorPlugin**: Interface implemented by all editor plugins.\n37. **EditorExport**: Implemented by exportable editors tied to `MainWindow` menu.\n38. **EditorNavigation**: Used by `MainWindow` to support navigation actions.\n39. **ScriptExecutor**: Invoked at startup and referenced by `MainWindow`.\n40. **Config**: Used throughout `MainWindow` for persistent settings.\n41. **Flags**: Configuration flags used in UI behavior decisions.\n42. **MetaInfo**: Core data model used across `MainWindow` interactions.\n43. **MLogger**: Logging utility used in `MainWindow` initialization and events.\n\nThese entities are included due to a combination of direct structural coupling, historical co-change relationships, and semantic or functional dependencies derived from the analysis of Makagiga's evolving architecture.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}