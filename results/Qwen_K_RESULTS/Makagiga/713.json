{
    "time": 1749564913.4232397,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MainWindow.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_11c36ff8e24b41689dead9",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"ItemRenderer\", \"2\", \"0.01694915254237288\"], [\"Screen\", \"1\", \"0.00847457627118644\"], [\"RatingPanel\", \"1\", \"0.00847457627118644\"], [\"MTextPane\", \"2\", \"0.01694915254237288\"], [\"ValidatorMessage\", \"1\", \"0.00847457627118644\"], [\"TailBorder\", \"1\", \"0.00847457627118644\"], [\"StaticHandler\", \"1\", \"0.00847457627118644\"], [\"MLoginPanel\", \"1\", \"0.00847457627118644\"], [\"MActionInfo\", \"1\", \"0.00847457627118644\"], [\"Autosave\", \"2\", \"0.01694915254237288\"], [\"NoteWidgetPlugin\", \"4\", \"0.03389830508474576\"], [\"InputMethodAction\", \"1\", \"0.00847457627118644\"], [\"PasteAsStickyNoteAction\", \"1\", \"0.00847457627118644\"], [\"Backup\", \"2\", \"0.01694915254237288\"], [\"MWizard\", \"1\", \"0.00847457627118644\"], [\"Application\", \"3\", \"0.025423728813559324\"], [\"SDK\", \"3\", \"0.025423728813559324\"], [\"MSystemTray\", \"7\", \"0.059322033898305086\"], [\"LiveTutorial\", \"4\", \"0.03389830508474576\"], [\"MFrame\", \"2\", \"0.01694915254237288\"], [\"Main\", \"8\", \"0.06779661016949153\"], [\"LiveTutorialAction\", \"1\", \"0.00847457627118644\"], [\"ConfigureAction\", \"7\", \"0.059322033898305086\"], [\"AppSettings\", \"3\", \"0.025423728813559324\"], [\"PluginSettings\", \"6\", \"0.05084745762711865\"], [\"Desktop\", \"4\", \"0.03389830508474576\"], [\"CalendarComponent\", \"2\", \"0.01694915254237288\"], [\"MDocumentAdapter\", \"1\", \"0.00847457627118644\"], [\"MNotification\", \"4\", \"0.03389830508474576\"], [\"ControlPanel\", \"1\", \"0.00847457627118644\"], [\"MSplashScreen\", \"1\", \"0.00847457627118644\"], [\"ScriptIDE\", \"1\", \"0.00847457627118644\"], [\"MWindow\", \"1\", \"0.00847457627118644\"], [\"ClearAction\", \"1\", \"0.00847457627118644\"], [\"TreePanel\", \"13\", \"0.11016949152542373\"], [\"VersionDialog\", \"1\", \"0.00847457627118644\"], [\"ImageInfo\", \"1\", \"0.00847457627118644\"], [\"TreeFS\", \"1\", \"0.00847457627118644\"], [\"Widget\", \"3\", \"0.025423728813559324\"], [\"ImportExport\", \"8\", \"0.06779661016949153\"], [\"TodoEditor\", \"5\", \"0.0423728813559322\"], [\"MAbout\", \"4\", \"0.03389830508474576\"], [\"ProxySettings\", \"1\", \"0.00847457627118644\"], [\"EnumProperty\", \"1\", \"0.00847457627118644\"], [\"BackupPlugin\", \"1\", \"0.00847457627118644\"], [\"AboutAction\", \"2\", \"0.01694915254237288\"], [\"FSHelper\", \"2\", \"0.01694915254237288\"], [\"ToggleDesktopAction\", \"4\", \"0.03389830508474576\"], [\"ToolManager\", \"1\", \"0.00847457627118644\"], [\"MMessage\", \"2\", \"0.01694915254237288\"], [\"MMainWindow\", \"7\", \"0.059322033898305086\"], [\"Preloader\", \"1\", \"0.00847457627118644\"], [\"Item\", \"1\", \"0.00847457627118644\"], [\"Database\", \"1\", \"0.00847457627118644\"], [\"DesktopPanel\", \"3\", \"0.025423728813559324\"], [\"MTip\", \"3\", \"0.025423728813559324\"], [\"LookAndFeelSettings\", \"3\", \"0.025423728813559324\"], [\"Tips\", \"1\", \"0.00847457627118644\"], [\"TextEditorPlugin\", \"1\", \"0.00847457627118644\"], [\"TipInfo\", \"1\", \"0.00847457627118644\"], [\"TagsEditor\", \"2\", \"0.01694915254237288\"], [\"JAXBPreloader\", \"1\", \"0.00847457627118644\"], [\"PropertiesDialog\", \"4\", \"0.03389830508474576\"], [\"PropertiesPanel\", \"6\", \"0.05084745762711865\"], [\"MFlipPanel\", \"1\", \"0.00847457627118644\"], [\"FadeEffect\", \"1\", \"0.00847457627118644\"], [\"FindNextAction\", \"4\", \"0.03389830508474576\"], [\"FindAction\", \"4\", \"0.03389830508474576\"], [\"LabelMenuAction\", \"1\", \"0.00847457627118644\"], [\"VerticalMoveEffect\", \"1\", \"0.00847457627118644\"], [\"PropertiesAction\", \"3\", \"0.025423728813559324\"], [\"DefaultIconAction\", \"1\", \"0.00847457627118644\"], [\"ImageEffect\", \"1\", \"0.00847457627118644\"], [\"MoveEffect\", \"1\", \"0.00847457627118644\"], [\"HorizontalMoveEffect\", \"1\", \"0.00847457627118644\"], [\"MCalendar\", \"1\", \"0.00847457627118644\"], [\"TaskManager\", \"1\", \"0.00847457627118644\"], [\"TaskSummary\", \"3\", \"0.025423728813559324\"], [\"MDialog\", \"1\", \"0.00847457627118644\"], [\"PropertiesBar\", \"9\", \"0.07627118644067797\"], [\"EditorQuickFind\", \"8\", \"0.06779661016949153\"], [\"Presentation\", \"3\", \"0.025423728813559324\"], [\"ShowHidePropertiesBarAction\", \"3\", \"0.025423728813559324\"], [\"GeneralSettings\", \"5\", \"0.0423728813559322\"], [\"ToggleBookmarkAction\", \"3\", \"0.025423728813559324\"], [\"Bookmarks\", \"1\", \"0.00847457627118644\"], [\"AddWidgetAction\", \"1\", \"0.00847457627118644\"], [\"NewWidgetAction\", \"1\", \"0.00847457627118644\"], [\"Vars\", \"4\", \"0.03389830508474576\"], [\"RatingButton\", \"1\", \"0.00847457627118644\"], [\"VersionPanel\", \"1\", \"0.00847457627118644\"], [\"AnnotationAction\", \"1\", \"0.00847457627118644\"], [\"MButton\", \"1\", \"0.00847457627118644\"], [\"LockButton\", \"2\", \"0.01694915254237288\"], [\"View\", \"1\", \"0.00847457627118644\"], [\"SampleModel\", \"1\", \"0.00847457627118644\"], [\"StatsDialog\", \"1\", \"0.00847457627118644\"], [\"StatsPlugin\", \"1\", \"0.00847457627118644\"], [\"Tabs\", \"2\", \"0.01694915254237288\"], [\"TextEditor\", \"2\", \"0.01694915254237288\"], [\"ImageEditor\", \"6\", \"0.05084745762711865\"], [\"MTextFieldPanel\", \"2\", \"0.01694915254237288\"], [\"MouseGestures\", \"1\", \"0.00847457627118644\"], [\"MTree\", \"1\", \"0.00847457627118644\"], [\"AnnotationBar\", \"3\", \"0.025423728813559324\"], [\"RenameEditor\", \"1\", \"0.00847457627118644\"], [\"ColorAction\", \"1\", \"0.00847457627118644\"], [\"LinkButton\", \"3\", \"0.025423728813559324\"], [\"Browser\", \"1\", \"0.00847457627118644\"], [\"EditorSearch\", \"1\", \"0.00847457627118644\"], [\"WebBrowserEditor\", \"1\", \"0.00847457627118644\"], [\"FeedViewer\", \"6\", \"0.05084745762711865\"], [\"AbstractTextEditor\", \"1\", \"0.00847457627118644\"], [\"EditorAnnotation\", \"1\", \"0.00847457627118644\"], [\"AnnotationInfo\", \"1\", \"0.00847457627118644\"], [\"Links\", \"2\", \"0.01694915254237288\"], [\"MToolBar\", \"2\", \"0.01694915254237288\"], [\"Index\", \"1\", \"0.00847457627118644\"], [\"MToggleButton\", \"1\", \"0.00847457627118644\"], [\"DeskletWidget\", \"1\", \"0.00847457627118644\"], [\"AddFeedDialog\", \"1\", \"0.00847457627118644\"], [\"TagsMenu\", \"2\", \"0.01694915254237288\"], [\"ScriptExecutor\", \"1\", \"0.00847457627118644\"], [\"ScriptPlugin\", \"3\", \"0.025423728813559324\"], [\"MenuButton\", \"1\", \"0.00847457627118644\"], [\"SearchBar\", \"5\", \"0.0423728813559322\"], [\"LocationBar\", \"2\", \"0.01694915254237288\"], [\"FeedThread\", \"2\", \"0.01694915254237288\"], [\"NewFileAction\", \"3\", \"0.025423728813559324\"], [\"FetchAllFeedsAction\", \"1\", \"0.00847457627118644\"], [\"NewFolderAction\", \"3\", \"0.025423728813559324\"], [\"ExtraKiosk\", \"2\", \"0.01694915254237288\"], [\"PluginsAction\", \"1\", \"0.00847457627118644\"], [\"NewFolderDialog\", \"2\", \"0.01694915254237288\"], [\"Editor\", \"2\", \"0.01694915254237288\"], [\"TaskTable\", \"2\", \"0.01694915254237288\"], [\"CloseAction\", \"1\", \"0.00847457627118644\"], [\"BooleanRenderer\", \"1\", \"0.00847457627118644\"], [\"ScriptYourself\", \"1\", \"0.00847457627118644\"], [\"MountPanel\", \"1\", \"0.00847457627118644\"], [\"AdvancedProperties\", \"1\", \"0.00847457627118644\"], [\"TabIcon\", \"1\", \"0.00847457627118644\"], [\"ToggleAction\", \"1\", \"0.00847457627118644\"], [\"Tree\", \"3\", \"0.025423728813559324\"], [\"Sidebar\", \"3\", \"0.025423728813559324\"], [\"TagsUtils\", \"1\", \"0.00847457627118644\"], [\"Tags\", \"1\", \"0.00847457627118644\"], [\"Query\", \"1\", \"0.00847457627118644\"], [\"Criterium\", \"1\", \"0.00847457627118644\"], [\"InternetSearchPanel\", \"2\", \"0.01694915254237288\"], [\"InternetSearchPlugin\", \"5\", \"0.0423728813559322\"], [\"InternetSearchAction\", \"4\", \"0.03389830508474576\"], [\"LocalSearchAction\", \"1\", \"0.00847457627118644\"], [\"Kiosk\", \"1\", \"0.00847457627118644\"], [\"Action\", \"3\", \"0.025423728813559324\"], [\"Page\", \"1\", \"0.00847457627118644\"], [\"Console\", \"1\", \"0.00847457627118644\"], [\"InternetSearch\", \"2\", \"0.01694915254237288\"], [\"Output\", \"1\", \"0.00847457627118644\"], [\"MDateSpinner\", \"1\", \"0.00847457627118644\"], [\"AutoCompletion\", \"1\", \"0.00847457627118644\"], [\"NoteWidget\", \"4\", \"0.03389830508474576\"], [\"CompletionWindow\", \"1\", \"0.00847457627118644\"], [\"FeedDownloader\", \"1\", \"0.00847457627118644\"], [\"MColorChooser\", \"1\", \"0.00847457627118644\"], [\"SummaryRenderer\", \"1\", \"0.00847457627118644\"], [\"Title\", \"1\", \"0.00847457627118644\"], [\"MMenuAdapter\", \"1\", \"0.00847457627118644\"], [\"NotepadEditor\", \"1\", \"0.00847457627118644\"], [\"SearchHighlighter\", \"1\", \"0.00847457627118644\"], [\"PrintPreview\", \"1\", \"0.00847457627118644\"], [\"CalendarWidget\", \"2\", \"0.01694915254237288\"], [\"TextUtils\", \"1\", \"0.00847457627118644\"], [\"Submenu\", \"1\", \"0.00847457627118644\"], [\"DayButton\", \"1\", \"0.00847457627118644\"], [\"TodoEditorCore\", \"2\", \"0.01694915254237288\"], [\"Reminder\", \"3\", \"0.025423728813559324\"], [\"SummaryPanel\", \"2\", \"0.01694915254237288\"], [\"Renderer\", \"1\", \"0.00847457627118644\"], [\"Node\", \"1\", \"0.00847457627118644\"], [\"MMenu\", \"1\", \"0.00847457627118644\"], [\"HelpAction\", \"2\", \"0.01694915254237288\"], [\"HTMLPreviewAction\", \"1\", \"0.00847457627118644\"], [\"ScriptAction\", \"1\", \"0.00847457627118644\"], [\"Scriptable\", \"1\", \"0.00847457627118644\"], [\"MSmallButton\", \"1\", \"0.00847457627118644\"], [\"ConsoleAction\", \"1\", \"0.00847457627118644\"], [\"SearchAction\", \"1\", \"0.00847457627118644\"], [\"UpdatePlugin\", \"2\", \"0.01694915254237288\"], [\"ConfigurePluginsAction\", \"1\", \"0.00847457627118644\"], [\"PluginSettingsPage\", \"1\", \"0.00847457627118644\"], [\"SessionManager\", \"2\", \"0.01694915254237288\"], [\"PluginManager\", \"1\", \"0.00847457627118644\"], [\"TaskInfoButton\", \"2\", \"0.01694915254237288\"], [\"Cut\", \"1\", \"0.00847457627118644\"], [\"PrintAction\", \"3\", \"0.025423728813559324\"], [\"ShowHTMLAction\", \"1\", \"0.00847457627118644\"], [\"DesktopToolBar\", \"1\", \"0.00847457627118644\"], [\"KeyNote\", \"1\", \"0.00847457627118644\"], [\"FeedFactory\", \"1\", \"0.00847457627118644\"], [\"MMenuBar\", \"1\", \"0.00847457627118644\"], [\"MinimizedUI\", \"1\", \"0.00847457627118644\"], [\"TodoEditorPlugin\", \"1\", \"0.00847457627118644\"], [\"SelectWidgetAction\", \"1\", \"0.00847457627118644\"], [\"MainView\", \"1\", \"0.00847457627118644\"], [\"Help\", \"1\", \"0.00847457627118644\"], [\"QuickSaveAction\", \"2\", \"0.01694915254237288\"], [\"TabsMenuAction\", \"1\", \"0.00847457627118644\"], [\"HistoryMenuAction\", \"1\", \"0.00847457627118644\"], [\"Shortcut\", \"1\", \"0.00847457627118644\"], [\"InternetSearchWidget\", \"1\", \"0.00847457627118644\"], [\"InternetSearchWidgetPlugin\", \"1\", \"0.00847457627118644\"], [\"Mnemonic\", \"1\", \"0.00847457627118644\"], [\"DesktopTab\", \"1\", \"0.00847457627118644\"], [\"ContainerScanner\", \"1\", \"0.00847457627118644\"], [\"TextEditorDesigner\", \"1\", \"0.00847457627118644\"], [\"HighlightAction\", \"1\", \"0.00847457627118644\"], [\"NotepadEditorDesigner\", \"1\", \"0.00847457627118644\"], [\"AppletTab\", \"1\", \"0.00847457627118644\"], [\"QuickOpenDialog\", \"1\", \"0.00847457627118644\"], [\"Mods\", \"2\", \"0.01694915254237288\"], [\"MHTMLViewer\", \"1\", \"0.00847457627118644\"], [\"ConsoleTab\", \"3\", \"0.025423728813559324\"], [\"AutoZoomAction\", \"1\", \"0.00847457627118644\"], [\"ZoomOutAction\", \"1\", \"0.00847457627118644\"], [\"ZoomInAction\", \"1\", \"0.00847457627118644\"], [\"ColumnManager\", \"1\", \"0.00847457627118644\"], [\"Advanced\", \"1\", \"0.00847457627118644\"], [\"ChartPanel\", \"1\", \"0.00847457627118644\"], [\"MAboutDialog\", \"1\", \"0.00847457627118644\"], [\"Globals\", \"1\", \"0.00847457627118644\"], [\"MSmallColorChooser\", \"1\", \"0.00847457627118644\"], [\"ColorPaletteMenuAdapter\", \"1\", \"0.00847457627118644\"], [\"AbstractSpinner\", \"1\", \"0.00847457627118644\"], [\"MApplication\", \"1\", \"0.00847457627118644\"], [\"ToggleSummaryAction\", \"2\", \"0.01694915254237288\"], [\"FeedsFS\", \"2\", \"0.01694915254237288\"], [\"CustomAdvancedPanel\", \"1\", \"0.00847457627118644\"], [\"SummaryData\", \"1\", \"0.00847457627118644\"], [\"PluginMenu\", \"1\", \"0.00847457627118644\"], [\"QueryEditor\", \"1\", \"0.00847457627118644\"], [\"SearchFS\", \"1\", \"0.00847457627118644\"], [\"RatingAction\", \"1\", \"0.00847457627118644\"], [\"FilterDialog\", \"2\", \"0.01694915254237288\"], [\"Button\", \"1\", \"0.00847457627118644\"], [\"FloatControlPanel\", \"1\", \"0.00847457627118644\"], [\"FiltersAction\", \"1\", \"0.00847457627118644\"], [\"VersionProperty\", \"1\", \"0.00847457627118644\"], [\"StuffRenderer\", \"1\", \"0.00847457627118644\"], [\"PluginDownloader\", \"1\", \"0.00847457627118644\"], [\"UpdateDialog\", \"1\", \"0.00847457627118644\"], [\"Note\", \"1\", \"0.00847457627118644\"], [\"TaskPanel\", \"1\", \"0.00847457627118644\"], [\"ResizeDialog\", \"1\", \"0.00847457627118644\"], [\"MSmallColorButton\", \"1\", \"0.00847457627118644\"], [\"ResizeAction\", \"1\", \"0.00847457627118644\"], [\"ImportFolderAction\", \"1\", \"0.00847457627118644\"], [\"NotepadEditorPlugin\", \"1\", \"0.00847457627118644\"], [\"DocumentHelpAction\", \"1\", \"0.00847457627118644\"], [\"ShowHideLocationBarAction\", \"1\", \"0.00847457627118644\"], [\"CustomMouseGestures\", \"1\", \"0.00847457627118644\"], [\"ImportMenu\", \"1\", \"0.00847457627118644\"], [\"ShowHideSidebarAction\", \"1\", \"0.00847457627118644\"], [\"ToggleDesignerAction\", \"1\", \"0.00847457627118644\"], [\"FindPreviousAction\", \"1\", \"0.00847457627118644\"], [\"AbstractImportExportAction\", \"1\", \"0.00847457627118644\"], [\"RenameAction\", \"1\", \"0.00847457627118644\"], [\"QuickPasteAction\", \"1\", \"0.00847457627118644\"], [\"DeleteAction\", \"1\", \"0.00847457627118644\"], [\"ImageEditorCore\", \"1\", \"0.00847457627118644\"], [\"ImagePreviewPanel\", \"1\", \"0.00847457627118644\"], [\"Filter\", \"1\", \"0.00847457627118644\"], [\"ZoomSelectionAction\", \"1\", \"0.00847457627118644\"], [\"ImageLabel\", \"1\", \"0.00847457627118644\"], [\"Armor\", \"1\", \"0.00847457627118644\"], [\"LoupeLayerUI\", \"1\", \"0.00847457627118644\"], [\"HistoryAction\", \"1\", \"0.00847457627118644\"]]"
        },
        {
            "content": "From the co-change relationship results, we can see several entities that have a significant history of being modified together with `MainWindow.java`. These entities are likely to be impacted by any changes in `MainWindow.java`, and hence should be synchronized or at least reviewed for potential impact.\n\n### Entities With High Co-Change Confidence:\nThe following entities show higher confidence values, indicating they are frequently changed alongside `MainWindow.java`:\n\n1. **TreePanel.java** (Support: 13, Confidence: 0.11016949152542373)\n2. **PropertiesBar.java** (Support: 9, Confidence: 0.07627118644067797)\n3. **Main.java** (Support: 8, Confidence: 0.06779661016949153)\n4. **ImportExport.java** (Support: 8, Confidence: 0.06779661016949153)\n5. **EditorQuickFind.java** (Support: 8, Confidence: 0.06779661016949153)\n6. **MSystemTray.java** (Support: 7, Confidence: 0.059322033898305086)\n7. **ConfigureAction.java** (Support: 7, Confidence: 0.059322033898305086)\n8. **MMainWindow.java** (Support: 7, Confidence: 0.059322033898305086)\n9. **PluginSettings.java** (Support: 6, Confidence: 0.05084745762711865)\n10. **ImageEditor.java** (Support: 6, Confidence: 0.05084745762711865)\n\nThese files are likely tightly coupled or functionally related to `MainWindow.java`, so changes in one may necessitate updates in these files to maintain consistency and functionality.\n\nNext, I will analyze dependencies between `MainWindow.java` and the top co-changed entity, `TreePanel.java`, using coupling dependencies to further validate their relationship.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_31a053c92ff34ffea8fc77",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TreePanel.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "The result indicates that there are **no direct coupling dependencies** between `MainWindow.java` and `TreePanel.java`, despite their high co-change relationship. This suggests that the correlation between these two entities may not be due to direct code-level dependencies, but rather through other factors such as shared functionality, historical development patterns, or indirect interactions via other components.\n\n### Next Steps:\nTo better understand the relationship between `MainWindow.java` and other co-changed entities, we should explore **semantic coupling** using natural language processing techniques. This will help us determine if they share similar concepts or responsibilities based on their source code's textual content.\n\nI will now calculate the **conceptual coupling** (semantic similarity) between `MainWindow.java` and `TreePanel.java`.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_b33b16fe41324a56bb0e29",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TreePanel.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.7109993\""
        },
        {
            "content": "The **conceptual coupling** between `MainWindow.java` and `TreePanel.java` is **0.711**, which indicates a relatively high semantic similarity. This suggests that even though there are no direct code-level dependencies between these two files, they likely share similar functional responsibilities or operate within the same conceptual domain\u2014explaining their frequent co-changes.\n\n### Interpretation:\n- **High semantic similarity (0.711)**: These entities may be involved in related tasks or UI components.\n- **No direct coupling**: The relationship is not enforced by code structure but rather by design or usage patterns.\n\n### Next Steps:\nTo better understand how `MainWindow.java` interacts with other components at runtime, we should analyze its **call graph**\u2014that is, which entities are directly invoked or used by `MainWindow.java`.\n\nI will now call `get_call_graph` on `MainWindow.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_c453f6f59bcf4de3bc2486",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"EditorSearch\", \"LocationBar\", \"ScriptAction\", \"SearchBar\", \"EditorQuickFind\", \"Editor\", \"PluginException\", \"EditorPlugin\", \"PluginMenu\", \"TagsMenu\", \"SidebarTab\", \"ScriptExecutor\", \"DesktopPanel\", \"LiveTutorial\", \"InternetSearch\", \"Tree\", \"TreePanel\", \"EditorZoom\", \"ScriptUtils\", \"DesktopToolBar\", \"EditorPrint\", \"AppSettings\", \"Elements\", \"Sidebar\", \"Bookmarks\", \"PrintDialog\", \"PluginSettings\", \"Designer\", \"MetaInfo\", \"ImportExport\", \"Console\", \"PluginManager\", \"PluginInfo\", \"\", \"TreeFS\", \"AbstractFS\", \"Scriptable\", \"EditorDesigner\", \"Tabs\", \"Pluggable\"]"
        },
        {
            "content": "The **call graph** of `MainWindow.java` reveals that it directly interacts with several entities, including:\n\n### Key Dependencies Identified:\n- **TreePanel.java** \u2013 Confirms a direct usage relationship.\n- **EditorSearch.java**\n- **SearchBar.java**\n- **EditorQuickFind.java**\n- **Editor.java**\n- **PluginManager.java**\n- **PluginSettings.java**\n- **ImportExport.java**\n- **Sidebar.java**\n- **Tabs.java**\n- **DesktopPanel.java**\n- **LiveTutorial.java**\n\nThese files are **directly invoked or used** by `MainWindow.java`, meaning changes in `MainWindow.java` could affect them at runtime.\n\n### Combined Analysis:\n- From **co-change history**, we found that `TreePanel.java` and others were frequently changed together.\n- From **conceptual coupling**, we found that `MainWindow.java` and `TreePanel.java` share similar semantics.\n- Now from the **call graph**, we confirm a **direct usage dependency** on `TreePanel.java`.\n\nThis confirms that `TreePanel.java` and other call graph members should be considered for synchronization when `MainWindow.java` is modified.\n\n### Next Step:\nTo ensure completeness, I will retrieve the **origin code** of `MainWindow.java` to examine its structure and detect any additional indirect dependencies or contextual clues about its role in the system.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_0bfb06427a3043e690a8a2",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga;\\nimport static java.awt.Color.*;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.CardLayout;\\nimport java.awt.TrayIcon;\\nimport java.awt.event.MouseEvent;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport javax.script.ScriptEngine;\\nimport javax.script.ScriptException;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.ToolTipManager;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport javax.swing.event.MenuEvent;\\nimport org.makagiga.commons.*;\\nimport org.makagiga.commons.script.Elements;\\nimport org.makagiga.commons.script.ScriptAction;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptUtils;\\nimport org.makagiga.commons.script.Scriptable;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.DesktopPanel;\\nimport org.makagiga.desktop.DesktopToolBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.EditorZoom.ZoomType;\\nimport org.makagiga.editors.PrintDialog;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.internetsearch.InternetSearch;\\nimport org.makagiga.plugins.Pluggable;\\nimport org.makagiga.plugins.PluginException;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.search.SearchBar;\\nimport org.makagiga.settings.AppSettings;\\nimport org.makagiga.settings.PluginSettings;\\nimport org.makagiga.sidebar.Sidebar;\\nimport org.makagiga.sidebar.SidebarTab;\\nimport org.makagiga.tabs.Tabs;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Bookmarks;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.LiveTutorial;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\npublic final class MainWindow extends MMainWindow\\nimplements\\n\\tScriptable,\\n\\tScriptExecutor.Initializer,\\n\\tThread.UncaughtExceptionHandler\\n{\\n\\tstatic boolean firstRun;\\n\\tprivate boolean desktop;\\n\\tprivate boolean wasFatal;\\n\\tprivate static final int DEFAULT_WIDTH = 800;\\n\\tprivate static final int DEFAULT_HEIGHT = 600;\\n\\tprivate static final int MIN_WIDTH = 320;\\n\\tprivate static final int MIN_HEIGHT = 200;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate MLabel editorStatusText;\\n\\tprivate static MainWindow _instance;\\n\\tprivate MMenu bookmarksMenu;\\n\\tprivate MMenu closeMenu;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu treeMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate MMenu viewModeMenu;\\n\\tprivate MPanel editorPanel;\\n\\tprivate MPanel mainPanel;\\n\\tprivate MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate MToolBar mainToolBar;\\n\\tprivate Object updateComponentsLock = new Object();\\n\\tprivate Object updateStateLock = new Object();\\n\\t\\t\\tprivate PreviousAction previousAction;\\n\\tprivate NextAction nextAction;\\n\\tprivate PrintAction printAction;\\n\\tprivate QuitAction quitAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate AppAction fullAction;\\n\\tprivate AppAction minimalAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ShowHideMainToolBarAction showHideMainToolBarAction;\\n\\tprivate ShowHideEditorToolBarAction showHideEditorToolBarAction;\\n\\tprivate ShowHideStatusBarAction showHideStatusBarAction;\\n\\tprivate ZoomAction zoomInAction;\\n\\tprivate ZoomAction zoomOutAction;\\n\\t\\tprivate InternetSearchAction internetSearchAction;\\n\\tprivate SearchAction searchAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\t\\tprivate LockAction lockAction;\\n\\tpublic Editor getEditor() {\\n\\t\\treturn Editor.getCurrentEditor();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tElements elements = new Elements();\\n\\t\\t\\t\\telements.put(\\\"file-menu\\\", fileMenu);\\n\\t\\t\\telements.put(\\\"tree-menu\\\", treeMenu);\\n\\t\\t\\telements.put(\\\"import-menu\\\", importMenu);\\n\\t\\t\\telements.put(\\\"export-menu\\\", exportMenu);\\n\\t\\t\\telements.put(\\\"close-menu\\\", closeMenu);\\n\\t\\telements.put(\\\"edit-menu\\\", editMenu);\\n\\t\\telements.put(\\\"view-menu\\\", viewMenu);\\n\\t\\t\\telements.put(\\\"view-mode-menu\\\", viewModeMenu);\\n\\t\\telements.put(\\\"bookmarks-menu\\\", bookmarksMenu);\\n\\t\\telements.put(\\\"tags-menu\\\", tagsMenu);\\n\\t\\telements.put(\\\"tools-menu\\\", toolsMenu);\\n\\t\\telements.put(\\\"help-menu\\\", helpMenu);\\n\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\telements.put(\\\"main-tool-bar\\\", mainToolBar);\\n\\t\\t\\t\\telements.put(\\\"main-split-pane\\\", mainSplitPane);\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic void help() {\\n\\t\\tUI.fire(helpAction, getJMenuBar());\\n\\t}\\n\\tpublic void initEngine(final ScriptEngine engine) {\\n\\t\\tengine.put(\\\"window\\\", this);\\n\\t\\tengine.put(\\\"sidebar\\\", Sidebar.getInstance());\\n\\t\\tengine.put(\\\"tabs\\\", Tabs.getInstance());\\n\\t\\tengine.put(\\\"tree\\\", Tree.getInstance());\\n\\t}\\n\\tpublic boolean isDesktop() {\\n\\t\\treturn DesktopPanel.getInstance().isVisible();\\n\\t}\\n\\tpublic void setDesktop(final boolean value) {\\n\\t\\tdesktop = value;\\n\\t\\tCardLayout.class.cast(mainPanel.getLayout()).show(\\n\\t\\t\\tmainPanel,\\n\\t\\t\\tdesktop ? \\\"Desktop\\\" : \\\"Editor\\\"\\n\\t\\t);\\n\\t\\ttoggleDesktopAction.setEnabled(Vars.desktopEnabled.get() && !Tabs.getInstance().isEmpty());\\n\\t\\tupdateState();\\n\\t\\tif (desktop)\\n\\t\\t\\tDesktopPanel.getInstance().focus();\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object object) {\\n\\t\\tif (object == null)\\n\\t\\t\\treturn null;\\n\\t\\tsynchronized (object) {\\n\\t\\t\\tif (object instanceof MAbout) {\\n\\t\\t\\t\\tMAbout about = MAbout.class.cast(object);\\n\\t\\t\\t\\tabout.addCredit(\\\"Amarok Team - Rediscover Your Music!\\\", \\\"Blend Algorithm\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Everaldo Coelho and KDE Team\\\", \\\"Crystal SVG Icon Theme\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Jerry Huxtable\\\", \\\"Image Filters\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", \\\"gmx\\\\u002enet\\\", \\\"lopoff\\\");\\n\\t\\t\\t\\tabout.addCredit(\\\"Romain Guy\\\", \\\"Java/Swing Special Effects\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Santhosh Kumar\\\", \\\"Java/Swing Ideas\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Scott Violet\\\", \\\"Ocean Gradient Customizer\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Stephen Kelvin Friedrich\\\", \\\"DataTips - Data Popups for JTree, JTable, JList\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"SourceForge.net\\\", \\\"Project Hosting\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Yellowicon Studio\\\", \\\"\\\\\\\"Emotion\\\\\\\" Icon Set\\\", \\\"http:\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseGestures) {\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\t\\tMouseGestures mouseGestures = MouseGestures.class.cast(object);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"D\\\", treePanel.getNewFileAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Dc\\\", _(\\\"Minimal View\\\"), minimalAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ds\\\", treePanel.getNewFolderAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\t\\t\\t\\tmouseGestures.registerGesture(\\\"L\\\", previousAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LD\\\", searchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LR\\\", new AppAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LU\\\", new AppAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tSidebar.goTo(SidebarTab.TREE);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"R\\\", nextAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"U\\\", internetSearchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Uc\\\", _(\\\"Full View\\\"), fullAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UR\\\", _(\\\"Find Text\\\"), findAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"URDL\\\", printAction);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object source, final Object object) {\\n\\t\\tif (source instanceof TrayIcon) {\\n\\t\\t\\tif (object instanceof MMenu) {\\n\\t\\t\\t\\tsynchronized (object) {\\n\\t\\t\\t\\t\\tMMenu menu = (MMenu)object;\\n\\t\\t\\t\\t\\tmenu.add(TreePanel.getInstance().getQuickPasteAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseEvent) {\\n\\t\\t\\t\\tsynchronized (object) {\\n\\t\\t\\t\\t\\tMouseEvent event = (MouseEvent)object;\\n\\t\\t\\t\\t\\tif (MMouseAdapter.isMiddle(event)) {\\n\\t\\t\\t\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tMCookieManager.save();\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tconfig.write(\\\"Tabs.current\\\", (metaInfo == null) ? \\\"\\\" : metaInfo.getFilePath());\\n\\t\\t\\t\\tconfig.write(\\\"StatusBar.enabled\\\", showHideStatusBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Editor.enabled\\\", showHideEditorToolBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Main.enabled\\\", showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tconfig.write(\\\"Window.width\\\", getWidth());\\n\\t\\tconfig.write(\\\"Window.height\\\", getHeight());\\n\\t\\tconfig.write(\\\"Window.x\\\", getX());\\n\\t\\tconfig.write(\\\"Window.y\\\", getY());\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\t\\t\\tDesktopPanel.getInstance().saveSession();\\n\\t\\tconfig.save();\\n\\t}\\n\\tpublic void setEditorStatusText(final String value) {\\n\\t\\tif (TK.isEmpty(value)) {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tString text = null;\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tif (editor.getInfo() == null)\\n\\t\\t\\t\\t\\ttext = editor.getMetaInfo().getFS().getName();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\ttext = editor.getInfo().toString();\\n\\t\\t\\t}\\n\\t\\t\\teditorStatusText.setText(text);\\n\\t\\t\\teditorStatusText.setToolTipText(text);\\n\\t\\t\\teditorStatusText.setVisible(text != null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\teditorStatusText.setText(value);\\n\\t\\t\\teditorStatusText.setToolTipText(value);\\n\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t}\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tgetInstance().mainSplitPane.setSidebarVisible(true);\\n\\t}\\n\\tpublic void uncaughtException(final Thread t, final Throwable e) {\\n\\t\\tMLogger.exception(e);\\n\\t\\tif (!Application.isInitialized() && !wasFatal) {\\n\\t\\t\\twasFatal = true;\\n\\t\\t\\tMMessage.error(null, e, UI.makeHTML(_(\\\"A fatal error occured during Makagiga startup.<br>See <b>{0}</b> file for details.<br><br>Please try to run the application again.\\\", Console.IO.getLogFile())));\\n\\t\\t\\tdispose();\\n\\t\\t\\t\\t\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\tconfig.write(\\\"safeMode\\\", true);\\n\\t\\t\\tconfig.save();\\n\\t\\t\\tSystem.exit(1);\\n\\t\\t}\\n\\t\\tif (e.getClass().getName().startsWith(\\\"sun.org.mozilla.javascript.\\\")) {\\n\\t\\t\\tScriptUtils.showError(e, false);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (!(e instanceof OutOfMemoryError) && Vars.debugShowConsoleOnException.get()) {\\n\\t\\t\\tMSplashScreen.close();\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void updateComponents(final boolean rename, final boolean updateUI, final MetaInfo... metaInfo) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfo != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfo) {\\n\\t\\t\\t\\t\\t\\tif (i.isFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(tabs.findEditor(i));\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t\\tif (rename)\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.onRename();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ((currentTab != null) && (lockAction != null) && (currentTab.getMetaInfo() == i))\\n\\t\\t\\t\\t\\t\\tlockAction.setMetaInfo(i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tif (updateUI)\\n\\t\\t\\t\\tTree.getInstance().updateUI();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t\\ttabs.repaint();\\n\\t\\t}\\n\\t}\\n\\tpublic static void updateMenu(final PluginManager.Table plugins, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateMenu(type, menu);\\n\\t\\t}\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateMenu(final PluginMenu plugin, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tplugin.updateMenu(type, menu);\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateToolBar(final PluginManager.Table plugins, final MToolBar toolBar, final String type, final boolean addSeparator) {\\n\\t\\tboolean editorToolBar = type.equals(PluginMenu.EDITOR_TOOL_BAR);\\n\\t\\tint count = toolBar.getComponentCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\t\\t\\t\\tif (editorToolBar && (p instanceof EditorPlugin))\\n\\t\\t\\t\\tcontinue; \\t\\t\\t\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateToolBar(type, toolBar);\\n\\t\\t}\\n\\t\\tif (addSeparator && (toolBar.getComponentCount() != count))\\n\\t\\t\\ttoolBar.addSeparator();\\n\\t}\\n\\tpublic void alert(final String text) {\\n\\t\\tMMessage.info(this, text);\\n\\t}\\n\\tpublic boolean confirm(final String text) {\\n\\t\\treturn MMessage.confirm(this, text);\\n\\t}\\n\\tpublic String prompt(final String text, final String defaultText) {\\n\\t\\treturn MMessage.input(this, defaultText, text, AppInfo.fullName.get());\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.AUTO_SAVE | Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\t_instance = this;\\n\\t\\tThread.currentThread().setDefaultUncaughtExceptionHandler(this);\\n\\t\\tSize.setMinimum(this, DEFAULT_WIDTH / 2, DEFAULT_HEIGHT / 2);\\n\\t\\tif (!MSplashScreen.isAvailable())\\n\\t\\t\\tMSplashScreen.setImage(new ImageIcon(\\\"splash.png\\\").getImage());\\n\\t\\tScriptExecutor.setInitializer(this); \\t\\tinitPlugins();\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table infos = PluginManager.getInfos();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(infos);\\n\\t\\tinitStatusBar();\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane(MSplitPane.HORIZONTAL_SPLIT);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\teditorPanel = MPanel.createBorderPanel();\\n\\t\\teditorPanel.addCenter(tabs);\\n\\t\\teditorPanel.setVisible(false); \\t\\t\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\tmainToolBar = new MToolBar();\\n\\t\\tmainToolBar.add(treePanel.getNewFileAction(), MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.add(treePanel.getQuickPasteAction());\\n\\t\\tmainToolBar.add(treePanel.getNewFolderAction());\\n\\t\\ttreePanel.setLabelMenuButton(mainToolBar.add(treePanel.getLabelMenuAction()));\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(previousAction);\\n\\t\\tmainToolBar.add(nextAction, MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(internetSearchAction);\\n\\t\\tupdateToolBar(infos, mainToolBar, PluginMenu.MAIN_TOOL_BAR, true);\\n\\t\\tif (Vars.desktopEnabled.get())\\n\\t\\t\\tDesktopToolBar.getInstance().updateToolBar(mainToolBar, toggleDesktopAction);\\n\\t\\taddNorth(mainToolBar);\\n\\t\\t\\t\\tmainPanel = MPanel.createCustomPanel(new CardLayout());\\n\\t\\tmainPanel.add(editorPanel, \\\"Editor\\\");\\n\\t\\tmainPanel.add(DesktopPanel.getInstance(), \\\"Desktop\\\");\\n\\t\\tmainSplitPane.setRightComponent(mainPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\tMSplashScreen.close();\\n\\t\\tMNotification.Message message = new MNotification.Message(AppInfo.fullName.get(), _(\\\"Restoring session...\\\"), AppInfo.icon.get());\\n\\t\\tmessage.setCloseButtonVisible(false);\\n\\t\\tMNotification.showMessage(message);\\n\\t\\tMNotification.getInstance().paintImmediately();\\n\\t\\trestoreSession();\\n\\t\\tMNotification.getInstance().hideMessage(message);\\n\\t\\t\\t\\tFile userScriptFile = new File(FS.makePath(FS.makeConfigPath(\\\"scripts\\\"), \\\"user.js\\\"));\\n\\t\\tScriptException userScriptError = null;\\n\\t\\tif (userScriptFile.exists()) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tScriptExecutor.execute(userScriptFile);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FileNotFoundException exception) { } \\t\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\t\\tuserScriptError = exception;\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsetVisible(true);\\n\\t\\tif (tabs.isEmpty())\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\telse\\n\\t\\t\\t\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(Config.getDefault().read(\\\"Tabs.current\\\", null)));\\n\\t\\tMStatusBar.ready();\\n\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tinitAutosave();\\n\\t\\tsetMouseGestures(new MouseGestures());\\n\\t\\tMSystemTray.setVisible(UI.systemTray.get());\\n\\t\\t\\t\\tif (Args.isSet(\\\"time-demo\\\")) {\\n\\t\\t\\tMLogger.info(\\\"makagiga\\\", \\\"END TIME DEMO\\\");\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t\\tInternetSearch.installGlobalMenu();\\n\\t\\tMCookieManager.init();\\n\\t\\tMAuthenticator.init();\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptUtils.showError(userScriptError, false);\\n\\t\\t\\t\\tfor (PluginInfo i : infos) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\ti.getPluggable().onPostInit();\\n\\t\\t\\t}\\n\\t\\t\\tcatch (PluginException exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\tprivate void applySettings() {\\n\\t\\tToolTipManager toolTipManager = ToolTipManager.sharedInstance();\\n\\t\\ttoolTipManager.setDismissDelay(8000); \\t\\ttoolTipManager.setEnabled(UI.toolTips.get());\\n\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\tpreviousAction = new PreviousAction();\\n\\t\\tnextAction = new NextAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\tquitAction = new QuitAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\tshowHideMainToolBarAction = new ShowHideMainToolBarAction();\\n\\t\\tshowHideEditorToolBarAction = new ShowHideEditorToolBarAction();\\n\\t\\tshowHideStatusBarAction = new ShowHideStatusBarAction();\\n\\t\\t\\t\\tinternetSearchAction = new InternetSearchAction();\\n\\t\\tsearchAction = new SearchAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t}\\n\\tprivate void initAutosave() {\\n\\t\\tnew MTimer(MTimer.Format.MINUTES, 10) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onTimeout() {\\n\\t\\t\\t\\tif (!Vars.autosaveEnabled.get())\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstop(); \\t\\t\\t\\t\\tString message = _(\\\"Autosave...\\\");\\n\\t\\t\\t\\t\\tMStatusBar.setInfo(message);\\n\\t\\t\\t\\t\\tMLogger.info(\\\"makagiga\\\", message);\\n\\t\\t\\t\\t\\tsaveSession(Tabs.AUTO_SAVE | Tabs.QUIET_SAVE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfinally {\\n\\t\\t\\t\\t\\trestart();\\n\\t\\t\\t\\t\\tMStatusBar.ready();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}.start();\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\texportMenu.setSplitMenu(true);\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tEditorPlugin.FileType[] types = EditorPlugin.fromInfo(editor.getInfo()).exportTypes.get();\\n\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t}\\n\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image\\\"), \\\"image/png\\\", true)));\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Select an item you want to export\\\"));\\n\\t}\\n\\tprivate void initImportMenu() {\\n\\t\\timportMenu.removeAll();\\n\\t\\timportMenu.setSplitMenu(true);\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif ((currentFS instanceof TreeFS) && currentFolder.canModify()) {\\n\\t\\t\\timportMenu.addTitle(_(\\\"Import To \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\timportMenu.add(new AppAction(_(\\\"Import Incollector Data...\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tImportExport.importIncollector();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\timportMenu.addSeparator();\\n\\t\\t\\tEditorPlugin plugin;\\n\\t\\t\\tEditorPlugin.FileType[] types;\\n\\t\\t\\tString text;\\n\\t\\t\\tfor (PluginInfo i : PluginManager.getInfos(Pluggable.EDITOR)) {\\n\\t\\t\\t\\tplugin = EditorPlugin.fromInfo(i);\\n\\t\\t\\t\\ttypes = plugin.importTypes.get();\\n\\t\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\t\\tAppAction importAction = new ImportExport.ImportAction(plugin, i.toString(), types);\\n\\t\\t\\t\\t\\timportAction.setIcon(i.getIcon());\\n\\t\\t\\t\\t\\timportMenu.add(importAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.IMPORT_MENU, importMenu);\\n\\t\\tif (importMenu.isEmpty())\\n\\t\\t\\timportMenu.addTitle(_(\\\"No folder selected or import is not supported\\\"));\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tmenuBar.getSelectionModel().addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (LiveTutorial.isActive())\\n\\t\\t\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tfileMenu.setSplitMenu(true);\\n\\t\\ttreeMenu = new MMenu(_(\\\"Tree\\\"), \\\"ui/detailedview\\\");\\n\\t\\ttreeMenu.setToolTipText(_(\\\"This menu allows you to modify all the files and folders.\\\"));\\n\\t\\ttreeMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu m = (MMenu)e.getSource();\\n\\t\\t\\t\\tif (m.isEmpty())\\n\\t\\t\\t\\t\\tTreePanel.getInstance().createTreeMenu(m);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(treeMenu);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tfileMenu.add(previousAction);\\n\\t\\tfileMenu.add(nextAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new MMenu(_(\\\"Import\\\"));\\n\\t\\timportMenu.setToolTipText(_(\\\"Imports a selected files to the Tree.\\\"));\\n\\t\\timportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitImportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active tab.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tcloseMenu = tabs.createCloseMenu();\\n\\t\\tfileMenu.add(closeMenu);\\n\\t\\tfileMenu.add(quitAction);\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\t\\t\\tviewModeMenu = new MMenu(_(\\\"View Mode\\\"));\\n\\t\\tfullAction =  new AppAction(_(\\\"Full\\\"), null, VK_1, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(true);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tfullAction.setHTMLHelp(_(\\\"Show sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(fullAction);\\n\\t\\tminimalAction = new AppAction(_(\\\"Minimal\\\"), null, VK_2, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(false);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tminimalAction.setHTMLHelp(_(\\\"Hide sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(minimalAction);\\n\\t\\tviewMenu.add(viewModeMenu);\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tviewMenu.add(showHideSidebarAction);\\n\\t\\tMMenuItem menuItem = viewMenu.add(toggleDesktopAction);\\n\\t\\tviewMenu.add(toggleDesignerAction);\\n\\t\\tviewMenu.add(new FullScreenAction());\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, true);\\n\\t\\tviewMenu.addCheckBox(showHideMainToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideEditorToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideStatusBarAction);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new MMenu(_(\\\"&Bookmarks\\\"), FS.getSmallIcon(\\\"ui/bookmark\\\"));\\n\\t\\tbookmarksMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tBookmarks.updateMenu(bookmarksMenu);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\ttoolsMenu.setSplitMenu(true);\\n\\t\\ttoolsMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\ttoolsMenu.add(internetSearchAction);\\n\\t\\ttoolsMenu.add(searchAction);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, true);\\n\\t\\ttoolsMenu.add(new ConsoleAction());\\n\\t\\ttoolsMenu.addTitle(_(\\\"Configure\\\"));\\n\\t\\ttoolsMenu.add(new ConfigureAction());\\n\\t\\ttoolsMenu.add(new ConfigurePluginsAction());\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\thelpMenu.add(new LiveTutorialAction());\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tSize.setPreferredHeight(menuBar, Math.min(menuItem.getPreferredSize().height, 32));\\n\\t\\tsetJMenuBar(menuBar);\\n\\t\\t\\t\\tUI.connect(menuBar, UI.WHEN_IN_FOCUSED_WINDOW, new QuickSaveAction());\\n\\t}\\n\\tprivate void initPlugins() {\\n\\t\\tfinal PluginManager plugins = PluginManager.getInstance();\\n\\t\\t\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/image\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/link\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/notepad\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/text\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/todo\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/feeds\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/search\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/trash\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/backup\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/update\\\");\\n\\t}\\n\\tprivate void initStatusBar() {\\n\\t\\tfinal MStatusBar statusBar = getStatusBar();\\n\\t\\teditorStatusText = new MLabel();\\n\\t\\teditorStatusText.setBorder(BorderFactory.createLoweredBevelBorder());\\n\\t\\tstatusBar.addStretch();\\n\\t\\tstatusBar.add(editorStatusText);\\n\\t\\tstatusBar.add(BackgroundTaskManager.getInstance());\\n\\t\\tstatusBar.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\tif (e.getPropertyName().equals(MStatusBar.CLOSED_PROPERTY))\\n\\t\\t\\t\\t\\tshowHideStatusBarAction.setSelected(!(Boolean)e.getNewValue());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\tprivate void navigate(final boolean next) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> currentEditor = tabs.getSelectedTab();\\n\\t\\tif (currentEditor == null)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo currentFile = currentEditor.getMetaInfo();\\n\\t\\tMetaInfo[] files = currentFile.getParentFolder().getSubMetaInfos(true);\\n\\t\\tif (files.length < 2)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo newFile = null;\\n\\t\\t\\t\\tif (next) {\\n\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (newFile != null) {\\n\\t\\t\\tint index = tabs.findEditor(currentFile);\\n\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(index, Tabs.REMOVE_TAB | Tabs.SAVE_TO_FILE);\\n\\t\\t\\t\\t\\t\\tTree.getInstance().open(newFile);\\n\\t\\t}\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\tapplySettings();\\n\\t\\tsetSize(\\n\\t\\t\\tMath.max(MIN_WIDTH, config.readInt(\\\"Window.width\\\", DEFAULT_WIDTH)),\\n\\t\\t\\tMath.max(MIN_HEIGHT, config.readInt(\\\"Window.height\\\", DEFAULT_HEIGHT))\\n\\t\\t);\\n\\t\\tsetLocationByPlatform(true); \\t\\tif (firstRun) {\\n\\t\\t\\tsetLocationRelativeTo(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tsetLocation(\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.x\\\", 0),\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.y\\\", 0)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", -1);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tMStatusBar.getGlobal().setClosed(!config.read(\\\"StatusBar.enabled\\\", false));\\n\\t\\tshowHideEditorToolBarAction.setSelected(config.read(\\\"ToolBar.Editor.enabled\\\", true));\\n\\t\\tshowHideMainToolBarAction.setSelected(config.read(\\\"ToolBar.Main.enabled\\\", true));\\n\\t\\tmainToolBar.setVisible(showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tif (Application.isSafeMode()) {\\n\\t\\t\\tconfig.write(\\\"safeMode\\\", false);\\n\\t\\t\\tconfig.save();\\n\\t\\t}\\n\\t\\t\\t\\tTree.getInstance().restoreAll();\\n\\t\\t\\t\\tDesktopPanel.getInstance().restoreSession();\\n\\t}\\n\\tprivate void setViewMode(final boolean full) {\\n\\t\\tmainSplitPane.setSidebarVisible(full);\\n\\t\\t\\t\\tshowHideMainToolBarAction.setSelected(full);\\n\\t\\tmainToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideEditorToolBarAction.setSelected(full);\\n\\t\\tif (editorToolBar != null)\\n\\t\\t\\teditorToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideStatusBarAction.setSelected(full);\\n\\t\\tMStatusBar.getGlobal().setVisible(full);\\n\\t}\\n\\tprivate void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tDesigner designer = null;\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\teditMenu.removeAll();\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\t\\t\\t\\tAppAction closeAction = tabs.getCloseAction();\\n\\t\\t\\tcloseMenu.setEnabled(closeAction.isEnabled());\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\tif ((editor != null) && !isDesktop()) {\\n\\t\\t\\t\\t\\t\\t\\t\\tboolean hasNext = false;\\n\\t\\t\\t\\tboolean hasPrevious = false;\\n\\t\\t\\t\\tMetaInfo parentFolder = metaInfo.getParentFolder();\\n\\t\\t\\t\\tif (parentFolder != null) {\\n\\t\\t\\t\\t\\tMetaInfo[] files = parentFolder.getSubMetaInfos(true);\\n\\t\\t\\t\\t\\tif (files.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasNext = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasPrevious = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpreviousAction.setEnabled(hasPrevious);\\n\\t\\t\\t\\tnextAction.setEnabled(hasNext);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance())\\n\\t\\t\\t\\t\\tDesktopToolBar.getInstance().setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tviewMenu.addSeparator();\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomAction(EditorZoom.ZoomType.IN);\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomAction(EditorZoom.ZoomType.OUT);\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.VIEW_MENU_EDITOR, viewMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tdesigner = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\teditorPanel.addNorth(editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\t\\tprintAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditorToolBar.add(printAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tupdateToolBar(PluginManager.getInfos(), editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomInAction);\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomOutAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (lockAction == null)\\n\\t\\t\\t\\t\\tlockAction = new LockAction();\\n\\t\\t\\t\\tlockAction.setMetaInfo(metaInfo);\\n\\t\\t\\t\\teditorToolBar.add(lockAction);\\n\\t\\t\\t\\teditorToolBar.setVisible(showHideEditorToolBarAction.isSelected());\\n\\t\\t\\t\\teditorToolBar.revalidate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t\\t\\tsetEditorStatusText(editor.getStatusText());\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tpreviousAction.setEnabled(false);\\n\\t\\t\\t\\tnextAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance()) {\\n\\t\\t\\t\\t\\tfinal DesktopToolBar desktopToolBar = DesktopToolBar.getInstance();\\n\\t\\t\\t\\t\\tdesktopToolBar.setVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tLocationBar.getInstance().setVisible(false);\\n\\t\\t\\t\\teditorStatusText.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tsetEditorStatusText(null);\\n\\t\\t\\t}\\n\\t\\t\\teditMenu.setEnabled(!editMenu.isEmpty());\\n\\t\\t\\t\\t\\t\\tif (EditorQuickFind.isInstance() && editorPanel.isAncestorOf(EditorQuickFind.getInstance()))\\n\\t\\t\\t\\teditorPanel.remove(EditorQuickFind.getInstance());\\n\\t\\t\\t\\t\\t\\tif (designer == null) {\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), false);\\n\\t\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\t\\tsidebar.goTo(SidebarTab.TREE, false);\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsidebar.setComponentAt(SidebarTab.DESIGNER.ordinal(), designer);\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), true);\\n\\t\\t\\t\\tdesigner.repaint(); \\t\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\t\\tdesigner.setReadOnly(!editor.getMetaInfo().canModify());\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(true);\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tsetTitle(\\n\\t\\t\\t(metaInfo == null) || isDesktop()\\n\\t\\t\\t? AppInfo.fullName.get()\\n\\t\\t\\t: (metaInfo.getNicePath() + \\\" - \\\" + AppInfo.fullName)\\n\\t\\t);\\n\\t}\\n\\tprivate static final class AboutAction extends ScriptAction {\\n\\t\\tpublic AboutAction() {\\n\\t\\t\\tsuper(\\\"about\\\", _(\\\"About {0}\\\", AppInfo.fullName), \\\"makagiga\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the information about this application.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class ConfigureAction extends AppAction {\\n\\t\\tpublic ConfigureAction() {\\n\\t\\t\\tsuper(_(\\\"Options\\\"), \\\"ui/configure\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tAppSettings dialog = new AppSettings(MainWindow.this);\\n\\t\\t\\tif (dialog.exec()) {\\n\\t\\t\\t\\tapplySettings();\\n\\t\\t\\t\\tMSystemTray.setVisible(UI.systemTray.get());\\n\\t\\t\\t\\trepaint();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigurePluginsAction extends AppAction {\\n\\t\\tpublic ConfigurePluginsAction() {\\n\\t\\t\\tsuper(_(\\\"Plugins\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Configure, add or remove plugins.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnew PluginSettings(MainWindow.getInstance()).exec();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConsoleAction extends AppAction {\\n\\t\\tConsoleAction() {\\n\\t\\t\\tsuper(_(\\\"Console\\\"), null, VK_F12, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the <b>Console</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindAction extends AppAction {\\n\\t\\tFindAction() {\\n\\t\\t\\tsuper(_(\\\"Find...\\\"), \\\"find\\\", VK_F, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindNextAction extends AppAction {\\n\\t\\tFindNextAction() {\\n\\t\\t\\tsuper(_(\\\"Find Next...\\\"), null, getFindNextKeyStroke());\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FullScreenAction extends ScriptAction {\\n\\t\\tpublic FullScreenAction() {\\n\\t\\t\\tsuper(\\\"full-screen\\\", _(\\\"Full Screen\\\"), VK_F11);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends ScriptAction {\\n\\t\\tpublic HelpAction() {\\n\\t\\t\\tsuper(\\\"help\\\", _(\\\"Help\\\"), \\\"ui/question\\\", VK_F1);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the <b>Help</b> in the <b>Browser</b>.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class InternetSearchAction extends ScriptAction {\\n\\t\\tpublic InternetSearchAction() {\\n\\t\\t\\tsuper(\\\"internet-search\\\", _(\\\"Internet Search...\\\"), \\\"network\\\", VK_K, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Internet search.<br><b>Tip:</b> Select text (or item) in the active editor<br>to search for it.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LiveTutorialAction extends AppAction {\\n\\t\\tpublic LiveTutorialAction() {\\n\\t\\t\\tsuper(_(\\\"Live Tutorial\\\"), null, VK_F1, SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Live Tutorial</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LockAction extends AppAction {\\n\\t\\tprivate MetaInfo metaInfo;\\n\\t\\tpublic LockAction() {\\n\\t\\t\\tsuper(_(\\\"Lock\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Click to lock/unlock the active tab.<br>Locked file cannot be modified.\\\"));\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmetaInfo.setLocked(!isSelected());\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t\\tgetInstance().updateComponents(false, true, metaInfo);\\n\\t\\t}\\n\\t\\tpublic void setMetaInfo(final MetaInfo value) {\\n\\t\\t\\tmetaInfo = value;\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t}\\n\\t\\tprivate void updateState(final boolean locked) {\\n\\t\\t\\tsetEnabled(!metaInfo.isVirtualFile() && metaInfo.isWriteable());\\n\\t\\t\\tsetIcon(locked ? \\\"ui/locked\\\" : \\\"ui/unlocked\\\");\\n\\t\\t\\tsetSelected(locked);\\n\\t\\t}\\n\\t}\\n\\tprivate final class NextAction extends AppAction {\\n\\t\\tNextAction() {\\n\\t\\t\\tsuper(_(\\\"Next\\\"), \\\"ui/right\\\", VK_RIGHT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the next file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class PreviousAction extends AppAction {\\n\\t\\tPreviousAction() {\\n\\t\\t\\tsuper(_(\\\"Previous\\\"), \\\"ui/left\\\", VK_LEFT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the previous file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PrintAction extends AppAction {\\n\\t\\tpublic PrintAction() {\\n\\t\\t\\tsuper(_(\\\"Print...\\\"), \\\"ui/print\\\", VK_P, CTRL_MASK);\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPrintDialog.exec(Tabs.getInstance().getSelectedTab());\\n\\t\\t}\\n\\t}\\n\\tprivate final class QuickSaveAction extends AppAction {\\n\\t\\tQuickSaveAction() {\\n\\t\\t\\tsuper(\\\"Quick Save\\\", null, VK_S, CTRL_MASK);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuitAction extends AppAction {\\n\\t\\tQuitAction() {\\n\\t\\t\\tsuper(_(\\\"Quit\\\"), \\\"ui/quit\\\", VK_Q, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class SearchAction extends AppAction {\\n\\t\\tSearchAction() {\\n\\t\\t\\tsuper(_(\\\"Find Files...\\\"), null, VK_F7);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for files.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tSearchBar.setQuery(null);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideEditorToolBarAction extends AppAction {\\n\\t\\tShowHideEditorToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Editor Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>editor tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (editorToolBar != null)\\n\\t\\t\\t\\teditorToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideMainToolBarAction extends AppAction {\\n\\t\\tShowHideMainToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Main Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>main tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideSidebarAction extends AppAction {\\n\\t\\tShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Sidebar\\\"), null, VK_F9);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Sidebar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideStatusBarAction extends AppAction {\\n\\t\\tShowHideStatusBarAction() {\\n\\t\\t\\tsuper(_(\\\"Status Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>status bar</b>.\\\"));\\n\\t\\t\\tsetSelected(true);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMStatusBar.getGlobal().setClosed(!isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends AppAction {\\n\\t\\tpublic ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"designer\\\", VK_F4);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Designer</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tshowSidebar();\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\tsidebar.selectLastTab();\\n\\t\\t\\telse\\n\\t\\t\\t\\tSidebar.goTo(SidebarTab.DESIGNER);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ToggleDesktopAction extends AppAction {\\n\\t\\tpublic ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Desktop\\\"), \\\"desktop\\\", VK_F5);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Desktop</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetDesktop(!isDesktop());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ZoomAction extends AppAction {\\n\\t\\tprivate ZoomType type;\\n\\t\\tpublic ZoomAction(final ZoomType type) {\\n\\t\\t\\tsuper();\\n\\t\\t\\tthis.type = type;\\n\\t\\t\\tswitch (type) {\\n\\t\\t\\t\\tcase IN:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_EQUALS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/plus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom In\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase OUT:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_MINUS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/minus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom Out\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\t\\tMainWindow.this.zoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\tMainWindow.this.zoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "content": "The source code of `MainWindow.java` reveals that it serves as the **main application window** and central control hub for the Makagiga application. It integrates various components such as editors, menus, toolbars, and plugins. Here's a breakdown of its key features:\n\n### Key Observations:\n- **Extends `MMainWindow`**: Indicates it is part of a custom UI framework.\n- **Implements Interfaces**:\n  - `Scriptable`, `ScriptExecutor.Initializer`, and `Thread.UncaughtExceptionHandler` \u2013 suggests integration with scripting and global exception handling.\n- **Imports**:\n  - Heavily uses Swing components (`JMenu`, `JToolBar`, `JLabel`, etc.)\n  - Integrates modules like `Editor`, `PluginManager`, `TreePanel`, `Sidebar`, `Tabs`, `SearchBar`, `Console`, and more.\n\n### Core Functionalities:\n- Manages the main user interface (menus, toolbars, status bar).\n- Handles editor tabs via `Tabs.getInstance()`.\n- Coordinates interaction between plugins and UI elements.\n- Supports scripting through `ScriptEngine`.\n- Implements actions like file operations, search, zoom, printing, and help.\n- Maintains session state (window size, open files, preferences).\n\n---\n\n### Impact Analysis Summary\n\nGiven all the data we've gathered:\n\n| Entity | Co-change Support | Confidence | Coupling Dependency | Conceptual Coupling | Call Graph Usage |\n|-------|--------------------|------------|----------------------|---------------------|------------------|\n| `TreePanel.java` | 13 | 0.110 | \u274c No direct coupling | \u2705 0.711 | \u2705 Yes |\n| `PropertiesBar.java` | 9 | 0.076 | \u2014 | \u2014 | \u2705 Yes (via call graph) |\n| `EditorQuickFind.java` | 8 | 0.068 | \u2014 | \u2014 | \u2705 Yes |\n| `ImportExport.java` | 8 | 0.068 | \u2014 | \u2014 | \u2705 Yes |\n| `Main.java` | 8 | 0.068 | \u2014 | \u2014 | \u2014 |\n| `MSystemTray.java` | 7 | 0.059 | \u2014 | \u2014 | \u2014 |\n| `ConfigureAction.java` | 7 | 0.059 | \u2014 | \u2014 | \u2014 |\n| `MMainWindow.java` | 7 | 0.059 | \u2705 Parent class | \u2014 | \u2014 |\n\n---\n\n### Final Recommendation: Entities to Synchronize\nBased on co-change history, conceptual coupling, and call graph analysis, the following entities should be synchronized or reviewed when modifying `MainWindow.java`:\n\n1. **TreePanel.java**  \n   - High co-change confidence and high semantic similarity despite no direct coupling.\n   - Central UI component used by `MainWindow`.\n\n2. **EditorQuickFind.java**  \n   - Frequently changed together and directly used in UI logic.\n\n3. **PropertiesBar.java**  \n   - High co-change support and likely involved in UI layout/state management.\n\n4. **ImportExport.java**  \n   - Directly used in menu and file operations.\n\n5. **PluginSettings.java**, **ImageEditor.java**, **SearchBar.java**, **Sidebar.java**, **Tabs.java**, **DesktopPanel.java**  \n   - All appear in the call graph and are tightly integrated into `MainWindow`'s functionality.\n\nThese files represent both **direct dependencies** and **frequently co-changed entities** due to shared responsibilities in UI, plugin handling, and document management.\n\nWould you like me to provide a summary report or explore any specific entity further?",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `MainWindow.java`\n\nChange set: [TreePanel, PropertiesBar, EditorQuickFind, ImportExport, Main, MSystemTray, ConfigureAction, MMainWindow, ScriptAction, SearchBar, Editor, PluginException, PluginMenu, TagsMenu, SidebarTab, ScriptExecutor, DesktopPanel, LiveTutorial, InternetSearch, Tree, EditorZoom, ScriptUtils, DesktopToolBar, EditorPrint, AppSettings, PluginSettings, Designer, MetaInfo, ImportExport, Console, PluginManager, PluginInfo, Sidebar, Tabs, Bookmarks, PrintDialog, Elements, AbstractFS, TreeFS, Scriptable, EditorDesigner, Pluggable]\n\nDetails:\n- **TreePanel**: High co-change (support 13), high semantic coupling (0.711), used in UI logic.\n- **PropertiesBar**: High co-change (support 9), likely involved in layout/state management.\n- **EditorQuickFind**: Co-change support 8, appears in call graph and UI.\n- **ImportExport**: Co-change support 8, used in file operations.\n- **Main**: Co-change support 8, central entry point potentially tied to UI lifecycle.\n- **MSystemTray**: Co-change support 7, related to system tray integration.\n- **ConfigureAction**: Co-change support 7, handles settings UI.\n- **MMainWindow**: Direct parent class, structural dependency.\n- **ScriptAction**: Used in menu/tool interactions; appears in imports and call graph.\n- **SearchBar**: Frequently used for search-related features.\n- **Editor**: Central to tabbed document interface.\n- **PluginException**: Related to plugin handling and error reporting.\n- **PluginMenu**: Integrates plugins into UI menus.\n- **TagsMenu**: Tagging functionality tightly integrated with UI.\n- **SidebarTab**: Sidebar navigation component.\n- **ScriptExecutor**: Handles scripting execution environment.\n- **DesktopPanel**: Manages desktop view state.\n- **LiveTutorial**: Guides users through UI workflows.\n- **InternetSearch**: Integrated into tools and menus.\n- **Tree**: Core navigation structure used by MainWindow.\n- **EditorZoom**: Zoom functionality for editors.\n- **ScriptUtils**: Utility functions for scripting support.\n- **DesktopToolBar**: Toolbar customization and visibility control.\n- **EditorPrint**: Printing functionality via actions.\n- **AppSettings**: Application-wide configuration.\n- **PluginSettings**: Configures plugin behavior.\n- **Designer**: UI designer component for active editor.\n- **MetaInfo**: File metadata management.\n- **Console**: Debugging and logging interface.\n- **PluginManager**: Orchestrates plugin loading and lifecycle.\n- **PluginInfo**: Plugin metadata representation.\n- **Sidebar**: Navigation and tool panel.\n- **Tabs**: Tabbed document interface management.\n- **Bookmarks**: Bookmarking functionality for files/folders.\n- **PrintDialog**: Dialog abstraction for printing.\n- **Elements**: Scripting integration for UI components.\n- **AbstractFS**: File system abstraction layer.\n- **TreeFS**: Specific implementation for tree-based file systems.\n- **Scriptable**: Enables script interaction with UI.\n- **EditorDesigner**: Tied to design-time editing capabilities.\n- **Pluggable**: Base type for plugin architecture.\n\nThese entities are included based on co-change history, coupling dependencies, conceptual similarity, and usage in the call graph or source code logic.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MainWindow.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_11c36ff8e24b41689dead9",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"ItemRenderer\", \"2\", \"0.01694915254237288\"], [\"Screen\", \"1\", \"0.00847457627118644\"], [\"RatingPanel\", \"1\", \"0.00847457627118644\"], [\"MTextPane\", \"2\", \"0.01694915254237288\"], [\"ValidatorMessage\", \"1\", \"0.00847457627118644\"], [\"TailBorder\", \"1\", \"0.00847457627118644\"], [\"StaticHandler\", \"1\", \"0.00847457627118644\"], [\"MLoginPanel\", \"1\", \"0.00847457627118644\"], [\"MActionInfo\", \"1\", \"0.00847457627118644\"], [\"Autosave\", \"2\", \"0.01694915254237288\"], [\"NoteWidgetPlugin\", \"4\", \"0.03389830508474576\"], [\"InputMethodAction\", \"1\", \"0.00847457627118644\"], [\"PasteAsStickyNoteAction\", \"1\", \"0.00847457627118644\"], [\"Backup\", \"2\", \"0.01694915254237288\"], [\"MWizard\", \"1\", \"0.00847457627118644\"], [\"Application\", \"3\", \"0.025423728813559324\"], [\"SDK\", \"3\", \"0.025423728813559324\"], [\"MSystemTray\", \"7\", \"0.059322033898305086\"], [\"LiveTutorial\", \"4\", \"0.03389830508474576\"], [\"MFrame\", \"2\", \"0.01694915254237288\"], [\"Main\", \"8\", \"0.06779661016949153\"], [\"LiveTutorialAction\", \"1\", \"0.00847457627118644\"], [\"ConfigureAction\", \"7\", \"0.059322033898305086\"], [\"AppSettings\", \"3\", \"0.025423728813559324\"], [\"PluginSettings\", \"6\", \"0.05084745762711865\"], [\"Desktop\", \"4\", \"0.03389830508474576\"], [\"CalendarComponent\", \"2\", \"0.01694915254237288\"], [\"MDocumentAdapter\", \"1\", \"0.00847457627118644\"], [\"MNotification\", \"4\", \"0.03389830508474576\"], [\"ControlPanel\", \"1\", \"0.00847457627118644\"], [\"MSplashScreen\", \"1\", \"0.00847457627118644\"], [\"ScriptIDE\", \"1\", \"0.00847457627118644\"], [\"MWindow\", \"1\", \"0.00847457627118644\"], [\"ClearAction\", \"1\", \"0.00847457627118644\"], [\"TreePanel\", \"13\", \"0.11016949152542373\"], [\"VersionDialog\", \"1\", \"0.00847457627118644\"], [\"ImageInfo\", \"1\", \"0.00847457627118644\"], [\"TreeFS\", \"1\", \"0.00847457627118644\"], [\"Widget\", \"3\", \"0.025423728813559324\"], [\"ImportExport\", \"8\", \"0.06779661016949153\"], [\"TodoEditor\", \"5\", \"0.0423728813559322\"], [\"MAbout\", \"4\", \"0.03389830508474576\"], [\"ProxySettings\", \"1\", \"0.00847457627118644\"], [\"EnumProperty\", \"1\", \"0.00847457627118644\"], [\"BackupPlugin\", \"1\", \"0.00847457627118644\"], [\"AboutAction\", \"2\", \"0.01694915254237288\"], [\"FSHelper\", \"2\", \"0.01694915254237288\"], [\"ToggleDesktopAction\", \"4\", \"0.03389830508474576\"], [\"ToolManager\", \"1\", \"0.00847457627118644\"], [\"MMessage\", \"2\", \"0.01694915254237288\"], [\"MMainWindow\", \"7\", \"0.059322033898305086\"], [\"Preloader\", \"1\", \"0.00847457627118644\"], [\"Item\", \"1\", \"0.00847457627118644\"], [\"Database\", \"1\", \"0.00847457627118644\"], [\"DesktopPanel\", \"3\", \"0.025423728813559324\"], [\"MTip\", \"3\", \"0.025423728813559324\"], [\"LookAndFeelSettings\", \"3\", \"0.025423728813559324\"], [\"Tips\", \"1\", \"0.00847457627118644\"], [\"TextEditorPlugin\", \"1\", \"0.00847457627118644\"], [\"TipInfo\", \"1\", \"0.00847457627118644\"], [\"TagsEditor\", \"2\", \"0.01694915254237288\"], [\"JAXBPreloader\", \"1\", \"0.00847457627118644\"], [\"PropertiesDialog\", \"4\", \"0.03389830508474576\"], [\"PropertiesPanel\", \"6\", \"0.05084745762711865\"], [\"MFlipPanel\", \"1\", \"0.00847457627118644\"], [\"FadeEffect\", \"1\", \"0.00847457627118644\"], [\"FindNextAction\", \"4\", \"0.03389830508474576\"], [\"FindAction\", \"4\", \"0.03389830508474576\"], [\"LabelMenuAction\", \"1\", \"0.00847457627118644\"], [\"VerticalMoveEffect\", \"1\", \"0.00847457627118644\"], [\"PropertiesAction\", \"3\", \"0.025423728813559324\"], [\"DefaultIconAction\", \"1\", \"0.00847457627118644\"], [\"ImageEffect\", \"1\", \"0.00847457627118644\"], [\"MoveEffect\", \"1\", \"0.00847457627118644\"], [\"HorizontalMoveEffect\", \"1\", \"0.00847457627118644\"], [\"MCalendar\", \"1\", \"0.00847457627118644\"], [\"TaskManager\", \"1\", \"0.00847457627118644\"], [\"TaskSummary\", \"3\", \"0.025423728813559324\"], [\"MDialog\", \"1\", \"0.00847457627118644\"], [\"PropertiesBar\", \"9\", \"0.07627118644067797\"], [\"EditorQuickFind\", \"8\", \"0.06779661016949153\"], [\"Presentation\", \"3\", \"0.025423728813559324\"], [\"ShowHidePropertiesBarAction\", \"3\", \"0.025423728813559324\"], [\"GeneralSettings\", \"5\", \"0.0423728813559322\"], [\"ToggleBookmarkAction\", \"3\", \"0.025423728813559324\"], [\"Bookmarks\", \"1\", \"0.00847457627118644\"], [\"AddWidgetAction\", \"1\", \"0.00847457627118644\"], [\"NewWidgetAction\", \"1\", \"0.00847457627118644\"], [\"Vars\", \"4\", \"0.03389830508474576\"], [\"RatingButton\", \"1\", \"0.00847457627118644\"], [\"VersionPanel\", \"1\", \"0.00847457627118644\"], [\"AnnotationAction\", \"1\", \"0.00847457627118644\"], [\"MButton\", \"1\", \"0.00847457627118644\"], [\"LockButton\", \"2\", \"0.01694915254237288\"], [\"View\", \"1\", \"0.00847457627118644\"], [\"SampleModel\", \"1\", \"0.00847457627118644\"], [\"StatsDialog\", \"1\", \"0.00847457627118644\"], [\"StatsPlugin\", \"1\", \"0.00847457627118644\"], [\"Tabs\", \"2\", \"0.01694915254237288\"], [\"TextEditor\", \"2\", \"0.01694915254237288\"], [\"ImageEditor\", \"6\", \"0.05084745762711865\"], [\"MTextFieldPanel\", \"2\", \"0.01694915254237288\"], [\"MouseGestures\", \"1\", \"0.00847457627118644\"], [\"MTree\", \"1\", \"0.00847457627118644\"], [\"AnnotationBar\", \"3\", \"0.025423728813559324\"], [\"RenameEditor\", \"1\", \"0.00847457627118644\"], [\"ColorAction\", \"1\", \"0.00847457627118644\"], [\"LinkButton\", \"3\", \"0.025423728813559324\"], [\"Browser\", \"1\", \"0.00847457627118644\"], [\"EditorSearch\", \"1\", \"0.00847457627118644\"], [\"WebBrowserEditor\", \"1\", \"0.00847457627118644\"], [\"FeedViewer\", \"6\", \"0.05084745762711865\"], [\"AbstractTextEditor\", \"1\", \"0.00847457627118644\"], [\"EditorAnnotation\", \"1\", \"0.00847457627118644\"], [\"AnnotationInfo\", \"1\", \"0.00847457627118644\"], [\"Links\", \"2\", \"0.01694915254237288\"], [\"MToolBar\", \"2\", \"0.01694915254237288\"], [\"Index\", \"1\", \"0.00847457627118644\"], [\"MToggleButton\", \"1\", \"0.00847457627118644\"], [\"DeskletWidget\", \"1\", \"0.00847457627118644\"], [\"AddFeedDialog\", \"1\", \"0.00847457627118644\"], [\"TagsMenu\", \"2\", \"0.01694915254237288\"], [\"ScriptExecutor\", \"1\", \"0.00847457627118644\"], [\"ScriptPlugin\", \"3\", \"0.025423728813559324\"], [\"MenuButton\", \"1\", \"0.00847457627118644\"], [\"SearchBar\", \"5\", \"0.0423728813559322\"], [\"LocationBar\", \"2\", \"0.01694915254237288\"], [\"FeedThread\", \"2\", \"0.01694915254237288\"], [\"NewFileAction\", \"3\", \"0.025423728813559324\"], [\"FetchAllFeedsAction\", \"1\", \"0.00847457627118644\"], [\"NewFolderAction\", \"3\", \"0.025423728813559324\"], [\"ExtraKiosk\", \"2\", \"0.01694915254237288\"], [\"PluginsAction\", \"1\", \"0.00847457627118644\"], [\"NewFolderDialog\", \"2\", \"0.01694915254237288\"], [\"Editor\", \"2\", \"0.01694915254237288\"], [\"TaskTable\", \"2\", \"0.01694915254237288\"], [\"CloseAction\", \"1\", \"0.00847457627118644\"], [\"BooleanRenderer\", \"1\", \"0.00847457627118644\"], [\"ScriptYourself\", \"1\", \"0.00847457627118644\"], [\"MountPanel\", \"1\", \"0.00847457627118644\"], [\"AdvancedProperties\", \"1\", \"0.00847457627118644\"], [\"TabIcon\", \"1\", \"0.00847457627118644\"], [\"ToggleAction\", \"1\", \"0.00847457627118644\"], [\"Tree\", \"3\", \"0.025423728813559324\"], [\"Sidebar\", \"3\", \"0.025423728813559324\"], [\"TagsUtils\", \"1\", \"0.00847457627118644\"], [\"Tags\", \"1\", \"0.00847457627118644\"], [\"Query\", \"1\", \"0.00847457627118644\"], [\"Criterium\", \"1\", \"0.00847457627118644\"], [\"InternetSearchPanel\", \"2\", \"0.01694915254237288\"], [\"InternetSearchPlugin\", \"5\", \"0.0423728813559322\"], [\"InternetSearchAction\", \"4\", \"0.03389830508474576\"], [\"LocalSearchAction\", \"1\", \"0.00847457627118644\"], [\"Kiosk\", \"1\", \"0.00847457627118644\"], [\"Action\", \"3\", \"0.025423728813559324\"], [\"Page\", \"1\", \"0.00847457627118644\"], [\"Console\", \"1\", \"0.00847457627118644\"], [\"InternetSearch\", \"2\", \"0.01694915254237288\"], [\"Output\", \"1\", \"0.00847457627118644\"], [\"MDateSpinner\", \"1\", \"0.00847457627118644\"], [\"AutoCompletion\", \"1\", \"0.00847457627118644\"], [\"NoteWidget\", \"4\", \"0.03389830508474576\"], [\"CompletionWindow\", \"1\", \"0.00847457627118644\"], [\"FeedDownloader\", \"1\", \"0.00847457627118644\"], [\"MColorChooser\", \"1\", \"0.00847457627118644\"], [\"SummaryRenderer\", \"1\", \"0.00847457627118644\"], [\"Title\", \"1\", \"0.00847457627118644\"], [\"MMenuAdapter\", \"1\", \"0.00847457627118644\"], [\"NotepadEditor\", \"1\", \"0.00847457627118644\"], [\"SearchHighlighter\", \"1\", \"0.00847457627118644\"], [\"PrintPreview\", \"1\", \"0.00847457627118644\"], [\"CalendarWidget\", \"2\", \"0.01694915254237288\"], [\"TextUtils\", \"1\", \"0.00847457627118644\"], [\"Submenu\", \"1\", \"0.00847457627118644\"], [\"DayButton\", \"1\", \"0.00847457627118644\"], [\"TodoEditorCore\", \"2\", \"0.01694915254237288\"], [\"Reminder\", \"3\", \"0.025423728813559324\"], [\"SummaryPanel\", \"2\", \"0.01694915254237288\"], [\"Renderer\", \"1\", \"0.00847457627118644\"], [\"Node\", \"1\", \"0.00847457627118644\"], [\"MMenu\", \"1\", \"0.00847457627118644\"], [\"HelpAction\", \"2\", \"0.01694915254237288\"], [\"HTMLPreviewAction\", \"1\", \"0.00847457627118644\"], [\"ScriptAction\", \"1\", \"0.00847457627118644\"], [\"Scriptable\", \"1\", \"0.00847457627118644\"], [\"MSmallButton\", \"1\", \"0.00847457627118644\"], [\"ConsoleAction\", \"1\", \"0.00847457627118644\"], [\"SearchAction\", \"1\", \"0.00847457627118644\"], [\"UpdatePlugin\", \"2\", \"0.01694915254237288\"], [\"ConfigurePluginsAction\", \"1\", \"0.00847457627118644\"], [\"PluginSettingsPage\", \"1\", \"0.00847457627118644\"], [\"SessionManager\", \"2\", \"0.01694915254237288\"], [\"PluginManager\", \"1\", \"0.00847457627118644\"], [\"TaskInfoButton\", \"2\", \"0.01694915254237288\"], [\"Cut\", \"1\", \"0.00847457627118644\"], [\"PrintAction\", \"3\", \"0.025423728813559324\"], [\"ShowHTMLAction\", \"1\", \"0.00847457627118644\"], [\"DesktopToolBar\", \"1\", \"0.00847457627118644\"], [\"KeyNote\", \"1\", \"0.00847457627118644\"], [\"FeedFactory\", \"1\", \"0.00847457627118644\"], [\"MMenuBar\", \"1\", \"0.00847457627118644\"], [\"MinimizedUI\", \"1\", \"0.00847457627118644\"], [\"TodoEditorPlugin\", \"1\", \"0.00847457627118644\"], [\"SelectWidgetAction\", \"1\", \"0.00847457627118644\"], [\"MainView\", \"1\", \"0.00847457627118644\"], [\"Help\", \"1\", \"0.00847457627118644\"], [\"QuickSaveAction\", \"2\", \"0.01694915254237288\"], [\"TabsMenuAction\", \"1\", \"0.00847457627118644\"], [\"HistoryMenuAction\", \"1\", \"0.00847457627118644\"], [\"Shortcut\", \"1\", \"0.00847457627118644\"], [\"InternetSearchWidget\", \"1\", \"0.00847457627118644\"], [\"InternetSearchWidgetPlugin\", \"1\", \"0.00847457627118644\"], [\"Mnemonic\", \"1\", \"0.00847457627118644\"], [\"DesktopTab\", \"1\", \"0.00847457627118644\"], [\"ContainerScanner\", \"1\", \"0.00847457627118644\"], [\"TextEditorDesigner\", \"1\", \"0.00847457627118644\"], [\"HighlightAction\", \"1\", \"0.00847457627118644\"], [\"NotepadEditorDesigner\", \"1\", \"0.00847457627118644\"], [\"AppletTab\", \"1\", \"0.00847457627118644\"], [\"QuickOpenDialog\", \"1\", \"0.00847457627118644\"], [\"Mods\", \"2\", \"0.01694915254237288\"], [\"MHTMLViewer\", \"1\", \"0.00847457627118644\"], [\"ConsoleTab\", \"3\", \"0.025423728813559324\"], [\"AutoZoomAction\", \"1\", \"0.00847457627118644\"], [\"ZoomOutAction\", \"1\", \"0.00847457627118644\"], [\"ZoomInAction\", \"1\", \"0.00847457627118644\"], [\"ColumnManager\", \"1\", \"0.00847457627118644\"], [\"Advanced\", \"1\", \"0.00847457627118644\"], [\"ChartPanel\", \"1\", \"0.00847457627118644\"], [\"MAboutDialog\", \"1\", \"0.00847457627118644\"], [\"Globals\", \"1\", \"0.00847457627118644\"], [\"MSmallColorChooser\", \"1\", \"0.00847457627118644\"], [\"ColorPaletteMenuAdapter\", \"1\", \"0.00847457627118644\"], [\"AbstractSpinner\", \"1\", \"0.00847457627118644\"], [\"MApplication\", \"1\", \"0.00847457627118644\"], [\"ToggleSummaryAction\", \"2\", \"0.01694915254237288\"], [\"FeedsFS\", \"2\", \"0.01694915254237288\"], [\"CustomAdvancedPanel\", \"1\", \"0.00847457627118644\"], [\"SummaryData\", \"1\", \"0.00847457627118644\"], [\"PluginMenu\", \"1\", \"0.00847457627118644\"], [\"QueryEditor\", \"1\", \"0.00847457627118644\"], [\"SearchFS\", \"1\", \"0.00847457627118644\"], [\"RatingAction\", \"1\", \"0.00847457627118644\"], [\"FilterDialog\", \"2\", \"0.01694915254237288\"], [\"Button\", \"1\", \"0.00847457627118644\"], [\"FloatControlPanel\", \"1\", \"0.00847457627118644\"], [\"FiltersAction\", \"1\", \"0.00847457627118644\"], [\"VersionProperty\", \"1\", \"0.00847457627118644\"], [\"StuffRenderer\", \"1\", \"0.00847457627118644\"], [\"PluginDownloader\", \"1\", \"0.00847457627118644\"], [\"UpdateDialog\", \"1\", \"0.00847457627118644\"], [\"Note\", \"1\", \"0.00847457627118644\"], [\"TaskPanel\", \"1\", \"0.00847457627118644\"], [\"ResizeDialog\", \"1\", \"0.00847457627118644\"], [\"MSmallColorButton\", \"1\", \"0.00847457627118644\"], [\"ResizeAction\", \"1\", \"0.00847457627118644\"], [\"ImportFolderAction\", \"1\", \"0.00847457627118644\"], [\"NotepadEditorPlugin\", \"1\", \"0.00847457627118644\"], [\"DocumentHelpAction\", \"1\", \"0.00847457627118644\"], [\"ShowHideLocationBarAction\", \"1\", \"0.00847457627118644\"], [\"CustomMouseGestures\", \"1\", \"0.00847457627118644\"], [\"ImportMenu\", \"1\", \"0.00847457627118644\"], [\"ShowHideSidebarAction\", \"1\", \"0.00847457627118644\"], [\"ToggleDesignerAction\", \"1\", \"0.00847457627118644\"], [\"FindPreviousAction\", \"1\", \"0.00847457627118644\"], [\"AbstractImportExportAction\", \"1\", \"0.00847457627118644\"], [\"RenameAction\", \"1\", \"0.00847457627118644\"], [\"QuickPasteAction\", \"1\", \"0.00847457627118644\"], [\"DeleteAction\", \"1\", \"0.00847457627118644\"], [\"ImageEditorCore\", \"1\", \"0.00847457627118644\"], [\"ImagePreviewPanel\", \"1\", \"0.00847457627118644\"], [\"Filter\", \"1\", \"0.00847457627118644\"], [\"ZoomSelectionAction\", \"1\", \"0.00847457627118644\"], [\"ImageLabel\", \"1\", \"0.00847457627118644\"], [\"Armor\", \"1\", \"0.00847457627118644\"], [\"LoupeLayerUI\", \"1\", \"0.00847457627118644\"], [\"HistoryAction\", \"1\", \"0.00847457627118644\"]]"
            },
            "m5": {
                "content": "From the co-change relationship results, we can see several entities that have a significant history of being modified together with `MainWindow.java`. These entities are likely to be impacted by any changes in `MainWindow.java`, and hence should be synchronized or at least reviewed for potential impact.\n\n### Entities With High Co-Change Confidence:\nThe following entities show higher confidence values, indicating they are frequently changed alongside `MainWindow.java`:\n\n1. **TreePanel.java** (Support: 13, Confidence: 0.11016949152542373)\n2. **PropertiesBar.java** (Support: 9, Confidence: 0.07627118644067797)\n3. **Main.java** (Support: 8, Confidence: 0.06779661016949153)\n4. **ImportExport.java** (Support: 8, Confidence: 0.06779661016949153)\n5. **EditorQuickFind.java** (Support: 8, Confidence: 0.06779661016949153)\n6. **MSystemTray.java** (Support: 7, Confidence: 0.059322033898305086)\n7. **ConfigureAction.java** (Support: 7, Confidence: 0.059322033898305086)\n8. **MMainWindow.java** (Support: 7, Confidence: 0.059322033898305086)\n9. **PluginSettings.java** (Support: 6, Confidence: 0.05084745762711865)\n10. **ImageEditor.java** (Support: 6, Confidence: 0.05084745762711865)\n\nThese files are likely tightly coupled or functionally related to `MainWindow.java`, so changes in one may necessitate updates in these files to maintain consistency and functionality.\n\nNext, I will analyze dependencies between `MainWindow.java` and the top co-changed entity, `TreePanel.java`, using coupling dependencies to further validate their relationship.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_31a053c92ff34ffea8fc77",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TreePanel.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m7": {
                "content": "The result indicates that there are **no direct coupling dependencies** between `MainWindow.java` and `TreePanel.java`, despite their high co-change relationship. This suggests that the correlation between these two entities may not be due to direct code-level dependencies, but rather through other factors such as shared functionality, historical development patterns, or indirect interactions via other components.\n\n### Next Steps:\nTo better understand the relationship between `MainWindow.java` and other co-changed entities, we should explore **semantic coupling** using natural language processing techniques. This will help us determine if they share similar concepts or responsibilities based on their source code's textual content.\n\nI will now calculate the **conceptual coupling** (semantic similarity) between `MainWindow.java` and `TreePanel.java`.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_b33b16fe41324a56bb0e29",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TreePanel.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.7109993\""
            },
            "m9": {
                "content": "The **conceptual coupling** between `MainWindow.java` and `TreePanel.java` is **0.711**, which indicates a relatively high semantic similarity. This suggests that even though there are no direct code-level dependencies between these two files, they likely share similar functional responsibilities or operate within the same conceptual domain\u2014explaining their frequent co-changes.\n\n### Interpretation:\n- **High semantic similarity (0.711)**: These entities may be involved in related tasks or UI components.\n- **No direct coupling**: The relationship is not enforced by code structure but rather by design or usage patterns.\n\n### Next Steps:\nTo better understand how `MainWindow.java` interacts with other components at runtime, we should analyze its **call graph**\u2014that is, which entities are directly invoked or used by `MainWindow.java`.\n\nI will now call `get_call_graph` on `MainWindow.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_c453f6f59bcf4de3bc2486",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"EditorSearch\", \"LocationBar\", \"ScriptAction\", \"SearchBar\", \"EditorQuickFind\", \"Editor\", \"PluginException\", \"EditorPlugin\", \"PluginMenu\", \"TagsMenu\", \"SidebarTab\", \"ScriptExecutor\", \"DesktopPanel\", \"LiveTutorial\", \"InternetSearch\", \"Tree\", \"TreePanel\", \"EditorZoom\", \"ScriptUtils\", \"DesktopToolBar\", \"EditorPrint\", \"AppSettings\", \"Elements\", \"Sidebar\", \"Bookmarks\", \"PrintDialog\", \"PluginSettings\", \"Designer\", \"MetaInfo\", \"ImportExport\", \"Console\", \"PluginManager\", \"PluginInfo\", \"\", \"TreeFS\", \"AbstractFS\", \"Scriptable\", \"EditorDesigner\", \"Tabs\", \"Pluggable\"]"
            },
            "m11": {
                "content": "The **call graph** of `MainWindow.java` reveals that it directly interacts with several entities, including:\n\n### Key Dependencies Identified:\n- **TreePanel.java** \u2013 Confirms a direct usage relationship.\n- **EditorSearch.java**\n- **SearchBar.java**\n- **EditorQuickFind.java**\n- **Editor.java**\n- **PluginManager.java**\n- **PluginSettings.java**\n- **ImportExport.java**\n- **Sidebar.java**\n- **Tabs.java**\n- **DesktopPanel.java**\n- **LiveTutorial.java**\n\nThese files are **directly invoked or used** by `MainWindow.java`, meaning changes in `MainWindow.java` could affect them at runtime.\n\n### Combined Analysis:\n- From **co-change history**, we found that `TreePanel.java` and others were frequently changed together.\n- From **conceptual coupling**, we found that `MainWindow.java` and `TreePanel.java` share similar semantics.\n- Now from the **call graph**, we confirm a **direct usage dependency** on `TreePanel.java`.\n\nThis confirms that `TreePanel.java` and other call graph members should be considered for synchronization when `MainWindow.java` is modified.\n\n### Next Step:\nTo ensure completeness, I will retrieve the **origin code** of `MainWindow.java` to examine its structure and detect any additional indirect dependencies or contextual clues about its role in the system.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_0bfb06427a3043e690a8a2",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga;\\nimport static java.awt.Color.*;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.CardLayout;\\nimport java.awt.TrayIcon;\\nimport java.awt.event.MouseEvent;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport javax.script.ScriptEngine;\\nimport javax.script.ScriptException;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.ToolTipManager;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport javax.swing.event.MenuEvent;\\nimport org.makagiga.commons.*;\\nimport org.makagiga.commons.script.Elements;\\nimport org.makagiga.commons.script.ScriptAction;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptUtils;\\nimport org.makagiga.commons.script.Scriptable;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.DesktopPanel;\\nimport org.makagiga.desktop.DesktopToolBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.EditorZoom.ZoomType;\\nimport org.makagiga.editors.PrintDialog;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.internetsearch.InternetSearch;\\nimport org.makagiga.plugins.Pluggable;\\nimport org.makagiga.plugins.PluginException;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.search.SearchBar;\\nimport org.makagiga.settings.AppSettings;\\nimport org.makagiga.settings.PluginSettings;\\nimport org.makagiga.sidebar.Sidebar;\\nimport org.makagiga.sidebar.SidebarTab;\\nimport org.makagiga.tabs.Tabs;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Bookmarks;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.LiveTutorial;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\npublic final class MainWindow extends MMainWindow\\nimplements\\n\\tScriptable,\\n\\tScriptExecutor.Initializer,\\n\\tThread.UncaughtExceptionHandler\\n{\\n\\tstatic boolean firstRun;\\n\\tprivate boolean desktop;\\n\\tprivate boolean wasFatal;\\n\\tprivate static final int DEFAULT_WIDTH = 800;\\n\\tprivate static final int DEFAULT_HEIGHT = 600;\\n\\tprivate static final int MIN_WIDTH = 320;\\n\\tprivate static final int MIN_HEIGHT = 200;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate MLabel editorStatusText;\\n\\tprivate static MainWindow _instance;\\n\\tprivate MMenu bookmarksMenu;\\n\\tprivate MMenu closeMenu;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu treeMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate MMenu viewModeMenu;\\n\\tprivate MPanel editorPanel;\\n\\tprivate MPanel mainPanel;\\n\\tprivate MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate MToolBar mainToolBar;\\n\\tprivate Object updateComponentsLock = new Object();\\n\\tprivate Object updateStateLock = new Object();\\n\\t\\t\\tprivate PreviousAction previousAction;\\n\\tprivate NextAction nextAction;\\n\\tprivate PrintAction printAction;\\n\\tprivate QuitAction quitAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate AppAction fullAction;\\n\\tprivate AppAction minimalAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ShowHideMainToolBarAction showHideMainToolBarAction;\\n\\tprivate ShowHideEditorToolBarAction showHideEditorToolBarAction;\\n\\tprivate ShowHideStatusBarAction showHideStatusBarAction;\\n\\tprivate ZoomAction zoomInAction;\\n\\tprivate ZoomAction zoomOutAction;\\n\\t\\tprivate InternetSearchAction internetSearchAction;\\n\\tprivate SearchAction searchAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\t\\tprivate LockAction lockAction;\\n\\tpublic Editor getEditor() {\\n\\t\\treturn Editor.getCurrentEditor();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tElements elements = new Elements();\\n\\t\\t\\t\\telements.put(\\\"file-menu\\\", fileMenu);\\n\\t\\t\\telements.put(\\\"tree-menu\\\", treeMenu);\\n\\t\\t\\telements.put(\\\"import-menu\\\", importMenu);\\n\\t\\t\\telements.put(\\\"export-menu\\\", exportMenu);\\n\\t\\t\\telements.put(\\\"close-menu\\\", closeMenu);\\n\\t\\telements.put(\\\"edit-menu\\\", editMenu);\\n\\t\\telements.put(\\\"view-menu\\\", viewMenu);\\n\\t\\t\\telements.put(\\\"view-mode-menu\\\", viewModeMenu);\\n\\t\\telements.put(\\\"bookmarks-menu\\\", bookmarksMenu);\\n\\t\\telements.put(\\\"tags-menu\\\", tagsMenu);\\n\\t\\telements.put(\\\"tools-menu\\\", toolsMenu);\\n\\t\\telements.put(\\\"help-menu\\\", helpMenu);\\n\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\telements.put(\\\"main-tool-bar\\\", mainToolBar);\\n\\t\\t\\t\\telements.put(\\\"main-split-pane\\\", mainSplitPane);\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic void help() {\\n\\t\\tUI.fire(helpAction, getJMenuBar());\\n\\t}\\n\\tpublic void initEngine(final ScriptEngine engine) {\\n\\t\\tengine.put(\\\"window\\\", this);\\n\\t\\tengine.put(\\\"sidebar\\\", Sidebar.getInstance());\\n\\t\\tengine.put(\\\"tabs\\\", Tabs.getInstance());\\n\\t\\tengine.put(\\\"tree\\\", Tree.getInstance());\\n\\t}\\n\\tpublic boolean isDesktop() {\\n\\t\\treturn DesktopPanel.getInstance().isVisible();\\n\\t}\\n\\tpublic void setDesktop(final boolean value) {\\n\\t\\tdesktop = value;\\n\\t\\tCardLayout.class.cast(mainPanel.getLayout()).show(\\n\\t\\t\\tmainPanel,\\n\\t\\t\\tdesktop ? \\\"Desktop\\\" : \\\"Editor\\\"\\n\\t\\t);\\n\\t\\ttoggleDesktopAction.setEnabled(Vars.desktopEnabled.get() && !Tabs.getInstance().isEmpty());\\n\\t\\tupdateState();\\n\\t\\tif (desktop)\\n\\t\\t\\tDesktopPanel.getInstance().focus();\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object object) {\\n\\t\\tif (object == null)\\n\\t\\t\\treturn null;\\n\\t\\tsynchronized (object) {\\n\\t\\t\\tif (object instanceof MAbout) {\\n\\t\\t\\t\\tMAbout about = MAbout.class.cast(object);\\n\\t\\t\\t\\tabout.addCredit(\\\"Amarok Team - Rediscover Your Music!\\\", \\\"Blend Algorithm\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Everaldo Coelho and KDE Team\\\", \\\"Crystal SVG Icon Theme\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Jerry Huxtable\\\", \\\"Image Filters\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", \\\"gmx\\\\u002enet\\\", \\\"lopoff\\\");\\n\\t\\t\\t\\tabout.addCredit(\\\"Romain Guy\\\", \\\"Java/Swing Special Effects\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Santhosh Kumar\\\", \\\"Java/Swing Ideas\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Scott Violet\\\", \\\"Ocean Gradient Customizer\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Stephen Kelvin Friedrich\\\", \\\"DataTips - Data Popups for JTree, JTable, JList\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"SourceForge.net\\\", \\\"Project Hosting\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Yellowicon Studio\\\", \\\"\\\\\\\"Emotion\\\\\\\" Icon Set\\\", \\\"http:\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseGestures) {\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\t\\tMouseGestures mouseGestures = MouseGestures.class.cast(object);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"D\\\", treePanel.getNewFileAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Dc\\\", _(\\\"Minimal View\\\"), minimalAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ds\\\", treePanel.getNewFolderAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\t\\t\\t\\tmouseGestures.registerGesture(\\\"L\\\", previousAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LD\\\", searchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LR\\\", new AppAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LU\\\", new AppAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tSidebar.goTo(SidebarTab.TREE);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"R\\\", nextAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"U\\\", internetSearchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Uc\\\", _(\\\"Full View\\\"), fullAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UR\\\", _(\\\"Find Text\\\"), findAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"URDL\\\", printAction);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object source, final Object object) {\\n\\t\\tif (source instanceof TrayIcon) {\\n\\t\\t\\tif (object instanceof MMenu) {\\n\\t\\t\\t\\tsynchronized (object) {\\n\\t\\t\\t\\t\\tMMenu menu = (MMenu)object;\\n\\t\\t\\t\\t\\tmenu.add(TreePanel.getInstance().getQuickPasteAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseEvent) {\\n\\t\\t\\t\\tsynchronized (object) {\\n\\t\\t\\t\\t\\tMouseEvent event = (MouseEvent)object;\\n\\t\\t\\t\\t\\tif (MMouseAdapter.isMiddle(event)) {\\n\\t\\t\\t\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tMCookieManager.save();\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tconfig.write(\\\"Tabs.current\\\", (metaInfo == null) ? \\\"\\\" : metaInfo.getFilePath());\\n\\t\\t\\t\\tconfig.write(\\\"StatusBar.enabled\\\", showHideStatusBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Editor.enabled\\\", showHideEditorToolBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Main.enabled\\\", showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tconfig.write(\\\"Window.width\\\", getWidth());\\n\\t\\tconfig.write(\\\"Window.height\\\", getHeight());\\n\\t\\tconfig.write(\\\"Window.x\\\", getX());\\n\\t\\tconfig.write(\\\"Window.y\\\", getY());\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\t\\t\\tDesktopPanel.getInstance().saveSession();\\n\\t\\tconfig.save();\\n\\t}\\n\\tpublic void setEditorStatusText(final String value) {\\n\\t\\tif (TK.isEmpty(value)) {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tString text = null;\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tif (editor.getInfo() == null)\\n\\t\\t\\t\\t\\ttext = editor.getMetaInfo().getFS().getName();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\ttext = editor.getInfo().toString();\\n\\t\\t\\t}\\n\\t\\t\\teditorStatusText.setText(text);\\n\\t\\t\\teditorStatusText.setToolTipText(text);\\n\\t\\t\\teditorStatusText.setVisible(text != null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\teditorStatusText.setText(value);\\n\\t\\t\\teditorStatusText.setToolTipText(value);\\n\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t}\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tgetInstance().mainSplitPane.setSidebarVisible(true);\\n\\t}\\n\\tpublic void uncaughtException(final Thread t, final Throwable e) {\\n\\t\\tMLogger.exception(e);\\n\\t\\tif (!Application.isInitialized() && !wasFatal) {\\n\\t\\t\\twasFatal = true;\\n\\t\\t\\tMMessage.error(null, e, UI.makeHTML(_(\\\"A fatal error occured during Makagiga startup.<br>See <b>{0}</b> file for details.<br><br>Please try to run the application again.\\\", Console.IO.getLogFile())));\\n\\t\\t\\tdispose();\\n\\t\\t\\t\\t\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\tconfig.write(\\\"safeMode\\\", true);\\n\\t\\t\\tconfig.save();\\n\\t\\t\\tSystem.exit(1);\\n\\t\\t}\\n\\t\\tif (e.getClass().getName().startsWith(\\\"sun.org.mozilla.javascript.\\\")) {\\n\\t\\t\\tScriptUtils.showError(e, false);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (!(e instanceof OutOfMemoryError) && Vars.debugShowConsoleOnException.get()) {\\n\\t\\t\\tMSplashScreen.close();\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void updateComponents(final boolean rename, final boolean updateUI, final MetaInfo... metaInfo) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfo != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfo) {\\n\\t\\t\\t\\t\\t\\tif (i.isFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(tabs.findEditor(i));\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t\\tif (rename)\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.onRename();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ((currentTab != null) && (lockAction != null) && (currentTab.getMetaInfo() == i))\\n\\t\\t\\t\\t\\t\\tlockAction.setMetaInfo(i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tif (updateUI)\\n\\t\\t\\t\\tTree.getInstance().updateUI();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t\\ttabs.repaint();\\n\\t\\t}\\n\\t}\\n\\tpublic static void updateMenu(final PluginManager.Table plugins, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateMenu(type, menu);\\n\\t\\t}\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateMenu(final PluginMenu plugin, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tplugin.updateMenu(type, menu);\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateToolBar(final PluginManager.Table plugins, final MToolBar toolBar, final String type, final boolean addSeparator) {\\n\\t\\tboolean editorToolBar = type.equals(PluginMenu.EDITOR_TOOL_BAR);\\n\\t\\tint count = toolBar.getComponentCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\t\\t\\t\\tif (editorToolBar && (p instanceof EditorPlugin))\\n\\t\\t\\t\\tcontinue; \\t\\t\\t\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateToolBar(type, toolBar);\\n\\t\\t}\\n\\t\\tif (addSeparator && (toolBar.getComponentCount() != count))\\n\\t\\t\\ttoolBar.addSeparator();\\n\\t}\\n\\tpublic void alert(final String text) {\\n\\t\\tMMessage.info(this, text);\\n\\t}\\n\\tpublic boolean confirm(final String text) {\\n\\t\\treturn MMessage.confirm(this, text);\\n\\t}\\n\\tpublic String prompt(final String text, final String defaultText) {\\n\\t\\treturn MMessage.input(this, defaultText, text, AppInfo.fullName.get());\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.AUTO_SAVE | Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\t_instance = this;\\n\\t\\tThread.currentThread().setDefaultUncaughtExceptionHandler(this);\\n\\t\\tSize.setMinimum(this, DEFAULT_WIDTH / 2, DEFAULT_HEIGHT / 2);\\n\\t\\tif (!MSplashScreen.isAvailable())\\n\\t\\t\\tMSplashScreen.setImage(new ImageIcon(\\\"splash.png\\\").getImage());\\n\\t\\tScriptExecutor.setInitializer(this); \\t\\tinitPlugins();\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table infos = PluginManager.getInfos();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(infos);\\n\\t\\tinitStatusBar();\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane(MSplitPane.HORIZONTAL_SPLIT);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\teditorPanel = MPanel.createBorderPanel();\\n\\t\\teditorPanel.addCenter(tabs);\\n\\t\\teditorPanel.setVisible(false); \\t\\t\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\tmainToolBar = new MToolBar();\\n\\t\\tmainToolBar.add(treePanel.getNewFileAction(), MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.add(treePanel.getQuickPasteAction());\\n\\t\\tmainToolBar.add(treePanel.getNewFolderAction());\\n\\t\\ttreePanel.setLabelMenuButton(mainToolBar.add(treePanel.getLabelMenuAction()));\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(previousAction);\\n\\t\\tmainToolBar.add(nextAction, MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(internetSearchAction);\\n\\t\\tupdateToolBar(infos, mainToolBar, PluginMenu.MAIN_TOOL_BAR, true);\\n\\t\\tif (Vars.desktopEnabled.get())\\n\\t\\t\\tDesktopToolBar.getInstance().updateToolBar(mainToolBar, toggleDesktopAction);\\n\\t\\taddNorth(mainToolBar);\\n\\t\\t\\t\\tmainPanel = MPanel.createCustomPanel(new CardLayout());\\n\\t\\tmainPanel.add(editorPanel, \\\"Editor\\\");\\n\\t\\tmainPanel.add(DesktopPanel.getInstance(), \\\"Desktop\\\");\\n\\t\\tmainSplitPane.setRightComponent(mainPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\tMSplashScreen.close();\\n\\t\\tMNotification.Message message = new MNotification.Message(AppInfo.fullName.get(), _(\\\"Restoring session...\\\"), AppInfo.icon.get());\\n\\t\\tmessage.setCloseButtonVisible(false);\\n\\t\\tMNotification.showMessage(message);\\n\\t\\tMNotification.getInstance().paintImmediately();\\n\\t\\trestoreSession();\\n\\t\\tMNotification.getInstance().hideMessage(message);\\n\\t\\t\\t\\tFile userScriptFile = new File(FS.makePath(FS.makeConfigPath(\\\"scripts\\\"), \\\"user.js\\\"));\\n\\t\\tScriptException userScriptError = null;\\n\\t\\tif (userScriptFile.exists()) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tScriptExecutor.execute(userScriptFile);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FileNotFoundException exception) { } \\t\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\t\\tuserScriptError = exception;\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsetVisible(true);\\n\\t\\tif (tabs.isEmpty())\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\telse\\n\\t\\t\\t\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(Config.getDefault().read(\\\"Tabs.current\\\", null)));\\n\\t\\tMStatusBar.ready();\\n\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tinitAutosave();\\n\\t\\tsetMouseGestures(new MouseGestures());\\n\\t\\tMSystemTray.setVisible(UI.systemTray.get());\\n\\t\\t\\t\\tif (Args.isSet(\\\"time-demo\\\")) {\\n\\t\\t\\tMLogger.info(\\\"makagiga\\\", \\\"END TIME DEMO\\\");\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t\\tInternetSearch.installGlobalMenu();\\n\\t\\tMCookieManager.init();\\n\\t\\tMAuthenticator.init();\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptUtils.showError(userScriptError, false);\\n\\t\\t\\t\\tfor (PluginInfo i : infos) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\ti.getPluggable().onPostInit();\\n\\t\\t\\t}\\n\\t\\t\\tcatch (PluginException exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\tprivate void applySettings() {\\n\\t\\tToolTipManager toolTipManager = ToolTipManager.sharedInstance();\\n\\t\\ttoolTipManager.setDismissDelay(8000); \\t\\ttoolTipManager.setEnabled(UI.toolTips.get());\\n\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\tpreviousAction = new PreviousAction();\\n\\t\\tnextAction = new NextAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\tquitAction = new QuitAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\tshowHideMainToolBarAction = new ShowHideMainToolBarAction();\\n\\t\\tshowHideEditorToolBarAction = new ShowHideEditorToolBarAction();\\n\\t\\tshowHideStatusBarAction = new ShowHideStatusBarAction();\\n\\t\\t\\t\\tinternetSearchAction = new InternetSearchAction();\\n\\t\\tsearchAction = new SearchAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t}\\n\\tprivate void initAutosave() {\\n\\t\\tnew MTimer(MTimer.Format.MINUTES, 10) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onTimeout() {\\n\\t\\t\\t\\tif (!Vars.autosaveEnabled.get())\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstop(); \\t\\t\\t\\t\\tString message = _(\\\"Autosave...\\\");\\n\\t\\t\\t\\t\\tMStatusBar.setInfo(message);\\n\\t\\t\\t\\t\\tMLogger.info(\\\"makagiga\\\", message);\\n\\t\\t\\t\\t\\tsaveSession(Tabs.AUTO_SAVE | Tabs.QUIET_SAVE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfinally {\\n\\t\\t\\t\\t\\trestart();\\n\\t\\t\\t\\t\\tMStatusBar.ready();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}.start();\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\texportMenu.setSplitMenu(true);\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tEditorPlugin.FileType[] types = EditorPlugin.fromInfo(editor.getInfo()).exportTypes.get();\\n\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t}\\n\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image\\\"), \\\"image/png\\\", true)));\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Select an item you want to export\\\"));\\n\\t}\\n\\tprivate void initImportMenu() {\\n\\t\\timportMenu.removeAll();\\n\\t\\timportMenu.setSplitMenu(true);\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif ((currentFS instanceof TreeFS) && currentFolder.canModify()) {\\n\\t\\t\\timportMenu.addTitle(_(\\\"Import To \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\timportMenu.add(new AppAction(_(\\\"Import Incollector Data...\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tImportExport.importIncollector();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\timportMenu.addSeparator();\\n\\t\\t\\tEditorPlugin plugin;\\n\\t\\t\\tEditorPlugin.FileType[] types;\\n\\t\\t\\tString text;\\n\\t\\t\\tfor (PluginInfo i : PluginManager.getInfos(Pluggable.EDITOR)) {\\n\\t\\t\\t\\tplugin = EditorPlugin.fromInfo(i);\\n\\t\\t\\t\\ttypes = plugin.importTypes.get();\\n\\t\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\t\\tAppAction importAction = new ImportExport.ImportAction(plugin, i.toString(), types);\\n\\t\\t\\t\\t\\timportAction.setIcon(i.getIcon());\\n\\t\\t\\t\\t\\timportMenu.add(importAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.IMPORT_MENU, importMenu);\\n\\t\\tif (importMenu.isEmpty())\\n\\t\\t\\timportMenu.addTitle(_(\\\"No folder selected or import is not supported\\\"));\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tmenuBar.getSelectionModel().addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (LiveTutorial.isActive())\\n\\t\\t\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tfileMenu.setSplitMenu(true);\\n\\t\\ttreeMenu = new MMenu(_(\\\"Tree\\\"), \\\"ui/detailedview\\\");\\n\\t\\ttreeMenu.setToolTipText(_(\\\"This menu allows you to modify all the files and folders.\\\"));\\n\\t\\ttreeMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu m = (MMenu)e.getSource();\\n\\t\\t\\t\\tif (m.isEmpty())\\n\\t\\t\\t\\t\\tTreePanel.getInstance().createTreeMenu(m);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(treeMenu);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tfileMenu.add(previousAction);\\n\\t\\tfileMenu.add(nextAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new MMenu(_(\\\"Import\\\"));\\n\\t\\timportMenu.setToolTipText(_(\\\"Imports a selected files to the Tree.\\\"));\\n\\t\\timportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitImportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active tab.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tcloseMenu = tabs.createCloseMenu();\\n\\t\\tfileMenu.add(closeMenu);\\n\\t\\tfileMenu.add(quitAction);\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\t\\t\\tviewModeMenu = new MMenu(_(\\\"View Mode\\\"));\\n\\t\\tfullAction =  new AppAction(_(\\\"Full\\\"), null, VK_1, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(true);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tfullAction.setHTMLHelp(_(\\\"Show sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(fullAction);\\n\\t\\tminimalAction = new AppAction(_(\\\"Minimal\\\"), null, VK_2, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(false);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tminimalAction.setHTMLHelp(_(\\\"Hide sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(minimalAction);\\n\\t\\tviewMenu.add(viewModeMenu);\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tviewMenu.add(showHideSidebarAction);\\n\\t\\tMMenuItem menuItem = viewMenu.add(toggleDesktopAction);\\n\\t\\tviewMenu.add(toggleDesignerAction);\\n\\t\\tviewMenu.add(new FullScreenAction());\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, true);\\n\\t\\tviewMenu.addCheckBox(showHideMainToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideEditorToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideStatusBarAction);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new MMenu(_(\\\"&Bookmarks\\\"), FS.getSmallIcon(\\\"ui/bookmark\\\"));\\n\\t\\tbookmarksMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tBookmarks.updateMenu(bookmarksMenu);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\ttoolsMenu.setSplitMenu(true);\\n\\t\\ttoolsMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\ttoolsMenu.add(internetSearchAction);\\n\\t\\ttoolsMenu.add(searchAction);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, true);\\n\\t\\ttoolsMenu.add(new ConsoleAction());\\n\\t\\ttoolsMenu.addTitle(_(\\\"Configure\\\"));\\n\\t\\ttoolsMenu.add(new ConfigureAction());\\n\\t\\ttoolsMenu.add(new ConfigurePluginsAction());\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\thelpMenu.add(new LiveTutorialAction());\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tSize.setPreferredHeight(menuBar, Math.min(menuItem.getPreferredSize().height, 32));\\n\\t\\tsetJMenuBar(menuBar);\\n\\t\\t\\t\\tUI.connect(menuBar, UI.WHEN_IN_FOCUSED_WINDOW, new QuickSaveAction());\\n\\t}\\n\\tprivate void initPlugins() {\\n\\t\\tfinal PluginManager plugins = PluginManager.getInstance();\\n\\t\\t\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/image\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/link\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/notepad\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/text\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/todo\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/feeds\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/search\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/trash\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/backup\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/update\\\");\\n\\t}\\n\\tprivate void initStatusBar() {\\n\\t\\tfinal MStatusBar statusBar = getStatusBar();\\n\\t\\teditorStatusText = new MLabel();\\n\\t\\teditorStatusText.setBorder(BorderFactory.createLoweredBevelBorder());\\n\\t\\tstatusBar.addStretch();\\n\\t\\tstatusBar.add(editorStatusText);\\n\\t\\tstatusBar.add(BackgroundTaskManager.getInstance());\\n\\t\\tstatusBar.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\tif (e.getPropertyName().equals(MStatusBar.CLOSED_PROPERTY))\\n\\t\\t\\t\\t\\tshowHideStatusBarAction.setSelected(!(Boolean)e.getNewValue());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\tprivate void navigate(final boolean next) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> currentEditor = tabs.getSelectedTab();\\n\\t\\tif (currentEditor == null)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo currentFile = currentEditor.getMetaInfo();\\n\\t\\tMetaInfo[] files = currentFile.getParentFolder().getSubMetaInfos(true);\\n\\t\\tif (files.length < 2)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo newFile = null;\\n\\t\\t\\t\\tif (next) {\\n\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (newFile != null) {\\n\\t\\t\\tint index = tabs.findEditor(currentFile);\\n\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(index, Tabs.REMOVE_TAB | Tabs.SAVE_TO_FILE);\\n\\t\\t\\t\\t\\t\\tTree.getInstance().open(newFile);\\n\\t\\t}\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\tapplySettings();\\n\\t\\tsetSize(\\n\\t\\t\\tMath.max(MIN_WIDTH, config.readInt(\\\"Window.width\\\", DEFAULT_WIDTH)),\\n\\t\\t\\tMath.max(MIN_HEIGHT, config.readInt(\\\"Window.height\\\", DEFAULT_HEIGHT))\\n\\t\\t);\\n\\t\\tsetLocationByPlatform(true); \\t\\tif (firstRun) {\\n\\t\\t\\tsetLocationRelativeTo(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tsetLocation(\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.x\\\", 0),\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.y\\\", 0)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", -1);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tMStatusBar.getGlobal().setClosed(!config.read(\\\"StatusBar.enabled\\\", false));\\n\\t\\tshowHideEditorToolBarAction.setSelected(config.read(\\\"ToolBar.Editor.enabled\\\", true));\\n\\t\\tshowHideMainToolBarAction.setSelected(config.read(\\\"ToolBar.Main.enabled\\\", true));\\n\\t\\tmainToolBar.setVisible(showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tif (Application.isSafeMode()) {\\n\\t\\t\\tconfig.write(\\\"safeMode\\\", false);\\n\\t\\t\\tconfig.save();\\n\\t\\t}\\n\\t\\t\\t\\tTree.getInstance().restoreAll();\\n\\t\\t\\t\\tDesktopPanel.getInstance().restoreSession();\\n\\t}\\n\\tprivate void setViewMode(final boolean full) {\\n\\t\\tmainSplitPane.setSidebarVisible(full);\\n\\t\\t\\t\\tshowHideMainToolBarAction.setSelected(full);\\n\\t\\tmainToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideEditorToolBarAction.setSelected(full);\\n\\t\\tif (editorToolBar != null)\\n\\t\\t\\teditorToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideStatusBarAction.setSelected(full);\\n\\t\\tMStatusBar.getGlobal().setVisible(full);\\n\\t}\\n\\tprivate void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tDesigner designer = null;\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\teditMenu.removeAll();\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\t\\t\\t\\tAppAction closeAction = tabs.getCloseAction();\\n\\t\\t\\tcloseMenu.setEnabled(closeAction.isEnabled());\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\tif ((editor != null) && !isDesktop()) {\\n\\t\\t\\t\\t\\t\\t\\t\\tboolean hasNext = false;\\n\\t\\t\\t\\tboolean hasPrevious = false;\\n\\t\\t\\t\\tMetaInfo parentFolder = metaInfo.getParentFolder();\\n\\t\\t\\t\\tif (parentFolder != null) {\\n\\t\\t\\t\\t\\tMetaInfo[] files = parentFolder.getSubMetaInfos(true);\\n\\t\\t\\t\\t\\tif (files.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasNext = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasPrevious = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpreviousAction.setEnabled(hasPrevious);\\n\\t\\t\\t\\tnextAction.setEnabled(hasNext);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance())\\n\\t\\t\\t\\t\\tDesktopToolBar.getInstance().setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tviewMenu.addSeparator();\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomAction(EditorZoom.ZoomType.IN);\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomAction(EditorZoom.ZoomType.OUT);\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.VIEW_MENU_EDITOR, viewMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tdesigner = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\teditorPanel.addNorth(editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\t\\tprintAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditorToolBar.add(printAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tupdateToolBar(PluginManager.getInfos(), editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomInAction);\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomOutAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (lockAction == null)\\n\\t\\t\\t\\t\\tlockAction = new LockAction();\\n\\t\\t\\t\\tlockAction.setMetaInfo(metaInfo);\\n\\t\\t\\t\\teditorToolBar.add(lockAction);\\n\\t\\t\\t\\teditorToolBar.setVisible(showHideEditorToolBarAction.isSelected());\\n\\t\\t\\t\\teditorToolBar.revalidate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t\\t\\tsetEditorStatusText(editor.getStatusText());\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tpreviousAction.setEnabled(false);\\n\\t\\t\\t\\tnextAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance()) {\\n\\t\\t\\t\\t\\tfinal DesktopToolBar desktopToolBar = DesktopToolBar.getInstance();\\n\\t\\t\\t\\t\\tdesktopToolBar.setVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tLocationBar.getInstance().setVisible(false);\\n\\t\\t\\t\\teditorStatusText.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tsetEditorStatusText(null);\\n\\t\\t\\t}\\n\\t\\t\\teditMenu.setEnabled(!editMenu.isEmpty());\\n\\t\\t\\t\\t\\t\\tif (EditorQuickFind.isInstance() && editorPanel.isAncestorOf(EditorQuickFind.getInstance()))\\n\\t\\t\\t\\teditorPanel.remove(EditorQuickFind.getInstance());\\n\\t\\t\\t\\t\\t\\tif (designer == null) {\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), false);\\n\\t\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\t\\tsidebar.goTo(SidebarTab.TREE, false);\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsidebar.setComponentAt(SidebarTab.DESIGNER.ordinal(), designer);\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), true);\\n\\t\\t\\t\\tdesigner.repaint(); \\t\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\t\\tdesigner.setReadOnly(!editor.getMetaInfo().canModify());\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(true);\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tsetTitle(\\n\\t\\t\\t(metaInfo == null) || isDesktop()\\n\\t\\t\\t? AppInfo.fullName.get()\\n\\t\\t\\t: (metaInfo.getNicePath() + \\\" - \\\" + AppInfo.fullName)\\n\\t\\t);\\n\\t}\\n\\tprivate static final class AboutAction extends ScriptAction {\\n\\t\\tpublic AboutAction() {\\n\\t\\t\\tsuper(\\\"about\\\", _(\\\"About {0}\\\", AppInfo.fullName), \\\"makagiga\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the information about this application.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class ConfigureAction extends AppAction {\\n\\t\\tpublic ConfigureAction() {\\n\\t\\t\\tsuper(_(\\\"Options\\\"), \\\"ui/configure\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tAppSettings dialog = new AppSettings(MainWindow.this);\\n\\t\\t\\tif (dialog.exec()) {\\n\\t\\t\\t\\tapplySettings();\\n\\t\\t\\t\\tMSystemTray.setVisible(UI.systemTray.get());\\n\\t\\t\\t\\trepaint();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigurePluginsAction extends AppAction {\\n\\t\\tpublic ConfigurePluginsAction() {\\n\\t\\t\\tsuper(_(\\\"Plugins\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Configure, add or remove plugins.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnew PluginSettings(MainWindow.getInstance()).exec();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConsoleAction extends AppAction {\\n\\t\\tConsoleAction() {\\n\\t\\t\\tsuper(_(\\\"Console\\\"), null, VK_F12, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the <b>Console</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindAction extends AppAction {\\n\\t\\tFindAction() {\\n\\t\\t\\tsuper(_(\\\"Find...\\\"), \\\"find\\\", VK_F, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindNextAction extends AppAction {\\n\\t\\tFindNextAction() {\\n\\t\\t\\tsuper(_(\\\"Find Next...\\\"), null, getFindNextKeyStroke());\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FullScreenAction extends ScriptAction {\\n\\t\\tpublic FullScreenAction() {\\n\\t\\t\\tsuper(\\\"full-screen\\\", _(\\\"Full Screen\\\"), VK_F11);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends ScriptAction {\\n\\t\\tpublic HelpAction() {\\n\\t\\t\\tsuper(\\\"help\\\", _(\\\"Help\\\"), \\\"ui/question\\\", VK_F1);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the <b>Help</b> in the <b>Browser</b>.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class InternetSearchAction extends ScriptAction {\\n\\t\\tpublic InternetSearchAction() {\\n\\t\\t\\tsuper(\\\"internet-search\\\", _(\\\"Internet Search...\\\"), \\\"network\\\", VK_K, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Internet search.<br><b>Tip:</b> Select text (or item) in the active editor<br>to search for it.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LiveTutorialAction extends AppAction {\\n\\t\\tpublic LiveTutorialAction() {\\n\\t\\t\\tsuper(_(\\\"Live Tutorial\\\"), null, VK_F1, SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Live Tutorial</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LockAction extends AppAction {\\n\\t\\tprivate MetaInfo metaInfo;\\n\\t\\tpublic LockAction() {\\n\\t\\t\\tsuper(_(\\\"Lock\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Click to lock/unlock the active tab.<br>Locked file cannot be modified.\\\"));\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmetaInfo.setLocked(!isSelected());\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t\\tgetInstance().updateComponents(false, true, metaInfo);\\n\\t\\t}\\n\\t\\tpublic void setMetaInfo(final MetaInfo value) {\\n\\t\\t\\tmetaInfo = value;\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t}\\n\\t\\tprivate void updateState(final boolean locked) {\\n\\t\\t\\tsetEnabled(!metaInfo.isVirtualFile() && metaInfo.isWriteable());\\n\\t\\t\\tsetIcon(locked ? \\\"ui/locked\\\" : \\\"ui/unlocked\\\");\\n\\t\\t\\tsetSelected(locked);\\n\\t\\t}\\n\\t}\\n\\tprivate final class NextAction extends AppAction {\\n\\t\\tNextAction() {\\n\\t\\t\\tsuper(_(\\\"Next\\\"), \\\"ui/right\\\", VK_RIGHT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the next file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class PreviousAction extends AppAction {\\n\\t\\tPreviousAction() {\\n\\t\\t\\tsuper(_(\\\"Previous\\\"), \\\"ui/left\\\", VK_LEFT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the previous file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PrintAction extends AppAction {\\n\\t\\tpublic PrintAction() {\\n\\t\\t\\tsuper(_(\\\"Print...\\\"), \\\"ui/print\\\", VK_P, CTRL_MASK);\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPrintDialog.exec(Tabs.getInstance().getSelectedTab());\\n\\t\\t}\\n\\t}\\n\\tprivate final class QuickSaveAction extends AppAction {\\n\\t\\tQuickSaveAction() {\\n\\t\\t\\tsuper(\\\"Quick Save\\\", null, VK_S, CTRL_MASK);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuitAction extends AppAction {\\n\\t\\tQuitAction() {\\n\\t\\t\\tsuper(_(\\\"Quit\\\"), \\\"ui/quit\\\", VK_Q, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class SearchAction extends AppAction {\\n\\t\\tSearchAction() {\\n\\t\\t\\tsuper(_(\\\"Find Files...\\\"), null, VK_F7);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for files.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tSearchBar.setQuery(null);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideEditorToolBarAction extends AppAction {\\n\\t\\tShowHideEditorToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Editor Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>editor tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (editorToolBar != null)\\n\\t\\t\\t\\teditorToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideMainToolBarAction extends AppAction {\\n\\t\\tShowHideMainToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Main Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>main tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideSidebarAction extends AppAction {\\n\\t\\tShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Sidebar\\\"), null, VK_F9);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Sidebar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideStatusBarAction extends AppAction {\\n\\t\\tShowHideStatusBarAction() {\\n\\t\\t\\tsuper(_(\\\"Status Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>status bar</b>.\\\"));\\n\\t\\t\\tsetSelected(true);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMStatusBar.getGlobal().setClosed(!isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends AppAction {\\n\\t\\tpublic ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"designer\\\", VK_F4);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Designer</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tshowSidebar();\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\tsidebar.selectLastTab();\\n\\t\\t\\telse\\n\\t\\t\\t\\tSidebar.goTo(SidebarTab.DESIGNER);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ToggleDesktopAction extends AppAction {\\n\\t\\tpublic ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Desktop\\\"), \\\"desktop\\\", VK_F5);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Desktop</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetDesktop(!isDesktop());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ZoomAction extends AppAction {\\n\\t\\tprivate ZoomType type;\\n\\t\\tpublic ZoomAction(final ZoomType type) {\\n\\t\\t\\tsuper();\\n\\t\\t\\tthis.type = type;\\n\\t\\t\\tswitch (type) {\\n\\t\\t\\t\\tcase IN:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_EQUALS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/plus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom In\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase OUT:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_MINUS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/minus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom Out\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\t\\tMainWindow.this.zoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\tMainWindow.this.zoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m13": {
                "content": "The source code of `MainWindow.java` reveals that it serves as the **main application window** and central control hub for the Makagiga application. It integrates various components such as editors, menus, toolbars, and plugins. Here's a breakdown of its key features:\n\n### Key Observations:\n- **Extends `MMainWindow`**: Indicates it is part of a custom UI framework.\n- **Implements Interfaces**:\n  - `Scriptable`, `ScriptExecutor.Initializer`, and `Thread.UncaughtExceptionHandler` \u2013 suggests integration with scripting and global exception handling.\n- **Imports**:\n  - Heavily uses Swing components (`JMenu`, `JToolBar`, `JLabel`, etc.)\n  - Integrates modules like `Editor`, `PluginManager`, `TreePanel`, `Sidebar`, `Tabs`, `SearchBar`, `Console`, and more.\n\n### Core Functionalities:\n- Manages the main user interface (menus, toolbars, status bar).\n- Handles editor tabs via `Tabs.getInstance()`.\n- Coordinates interaction between plugins and UI elements.\n- Supports scripting through `ScriptEngine`.\n- Implements actions like file operations, search, zoom, printing, and help.\n- Maintains session state (window size, open files, preferences).\n\n---\n\n### Impact Analysis Summary\n\nGiven all the data we've gathered:\n\n| Entity | Co-change Support | Confidence | Coupling Dependency | Conceptual Coupling | Call Graph Usage |\n|-------|--------------------|------------|----------------------|---------------------|------------------|\n| `TreePanel.java` | 13 | 0.110 | \u274c No direct coupling | \u2705 0.711 | \u2705 Yes |\n| `PropertiesBar.java` | 9 | 0.076 | \u2014 | \u2014 | \u2705 Yes (via call graph) |\n| `EditorQuickFind.java` | 8 | 0.068 | \u2014 | \u2014 | \u2705 Yes |\n| `ImportExport.java` | 8 | 0.068 | \u2014 | \u2014 | \u2705 Yes |\n| `Main.java` | 8 | 0.068 | \u2014 | \u2014 | \u2014 |\n| `MSystemTray.java` | 7 | 0.059 | \u2014 | \u2014 | \u2014 |\n| `ConfigureAction.java` | 7 | 0.059 | \u2014 | \u2014 | \u2014 |\n| `MMainWindow.java` | 7 | 0.059 | \u2705 Parent class | \u2014 | \u2014 |\n\n---\n\n### Final Recommendation: Entities to Synchronize\nBased on co-change history, conceptual coupling, and call graph analysis, the following entities should be synchronized or reviewed when modifying `MainWindow.java`:\n\n1. **TreePanel.java**  \n   - High co-change confidence and high semantic similarity despite no direct coupling.\n   - Central UI component used by `MainWindow`.\n\n2. **EditorQuickFind.java**  \n   - Frequently changed together and directly used in UI logic.\n\n3. **PropertiesBar.java**  \n   - High co-change support and likely involved in UI layout/state management.\n\n4. **ImportExport.java**  \n   - Directly used in menu and file operations.\n\n5. **PluginSettings.java**, **ImageEditor.java**, **SearchBar.java**, **Sidebar.java**, **Tabs.java**, **DesktopPanel.java**  \n   - All appear in the call graph and are tightly integrated into `MainWindow`'s functionality.\n\nThese files represent both **direct dependencies** and **frequently co-changed entities** due to shared responsibilities in UI, plugin handling, and document management.\n\nWould you like me to provide a summary report or explore any specific entity further?",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m14": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m15": {
                "content": "Title: Diagnosis of starting entity `MainWindow.java`\n\nChange set: [TreePanel, PropertiesBar, EditorQuickFind, ImportExport, Main, MSystemTray, ConfigureAction, MMainWindow, ScriptAction, SearchBar, Editor, PluginException, PluginMenu, TagsMenu, SidebarTab, ScriptExecutor, DesktopPanel, LiveTutorial, InternetSearch, Tree, EditorZoom, ScriptUtils, DesktopToolBar, EditorPrint, AppSettings, PluginSettings, Designer, MetaInfo, ImportExport, Console, PluginManager, PluginInfo, Sidebar, Tabs, Bookmarks, PrintDialog, Elements, AbstractFS, TreeFS, Scriptable, EditorDesigner, Pluggable]\n\nDetails:\n- **TreePanel**: High co-change (support 13), high semantic coupling (0.711), used in UI logic.\n- **PropertiesBar**: High co-change (support 9), likely involved in layout/state management.\n- **EditorQuickFind**: Co-change support 8, appears in call graph and UI.\n- **ImportExport**: Co-change support 8, used in file operations.\n- **Main**: Co-change support 8, central entry point potentially tied to UI lifecycle.\n- **MSystemTray**: Co-change support 7, related to system tray integration.\n- **ConfigureAction**: Co-change support 7, handles settings UI.\n- **MMainWindow**: Direct parent class, structural dependency.\n- **ScriptAction**: Used in menu/tool interactions; appears in imports and call graph.\n- **SearchBar**: Frequently used for search-related features.\n- **Editor**: Central to tabbed document interface.\n- **PluginException**: Related to plugin handling and error reporting.\n- **PluginMenu**: Integrates plugins into UI menus.\n- **TagsMenu**: Tagging functionality tightly integrated with UI.\n- **SidebarTab**: Sidebar navigation component.\n- **ScriptExecutor**: Handles scripting execution environment.\n- **DesktopPanel**: Manages desktop view state.\n- **LiveTutorial**: Guides users through UI workflows.\n- **InternetSearch**: Integrated into tools and menus.\n- **Tree**: Core navigation structure used by MainWindow.\n- **EditorZoom**: Zoom functionality for editors.\n- **ScriptUtils**: Utility functions for scripting support.\n- **DesktopToolBar**: Toolbar customization and visibility control.\n- **EditorPrint**: Printing functionality via actions.\n- **AppSettings**: Application-wide configuration.\n- **PluginSettings**: Configures plugin behavior.\n- **Designer**: UI designer component for active editor.\n- **MetaInfo**: File metadata management.\n- **Console**: Debugging and logging interface.\n- **PluginManager**: Orchestrates plugin loading and lifecycle.\n- **PluginInfo**: Plugin metadata representation.\n- **Sidebar**: Navigation and tool panel.\n- **Tabs**: Tabbed document interface management.\n- **Bookmarks**: Bookmarking functionality for files/folders.\n- **PrintDialog**: Dialog abstraction for printing.\n- **Elements**: Scripting integration for UI components.\n- **AbstractFS**: File system abstraction layer.\n- **TreeFS**: Specific implementation for tree-based file systems.\n- **Scriptable**: Enables script interaction with UI.\n- **EditorDesigner**: Tied to design-time editing capabilities.\n- **Pluggable**: Base type for plugin architecture.\n\nThese entities are included based on co-change history, coupling dependencies, conceptual similarity, and usage in the call graph or source code logic.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}