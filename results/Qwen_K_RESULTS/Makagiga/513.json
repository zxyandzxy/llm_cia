{
    "time": 1749569115.8671546,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is Vars.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_0c7e7bc9442c482aa6f090",
                    "function": {
                        "arguments": "{\"entity\": \"Vars.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"Reminder\", \"1\", \"0.09090909090909091\"], [\"TaskComponent\", \"1\", \"0.09090909090909091\"], [\"TasksSettings\", \"1\", \"0.09090909090909091\"], [\"MainWindow\", \"3\", \"0.2727272727272727\"], [\"MFlipPanel\", \"1\", \"0.09090909090909091\"], [\"Tabs\", \"2\", \"0.18181818181818182\"], [\"NewFolderDialog\", \"2\", \"0.18181818181818182\"], [\"ToggleDesktopAction\", \"1\", \"0.09090909090909091\"], [\"ItemRenderer\", \"1\", \"0.09090909090909091\"], [\"TreeSettings\", \"1\", \"0.09090909090909091\"], [\"MetaInfo\", \"2\", \"0.18181818181818182\"], [\"AbstractFS\", \"1\", \"0.09090909090909091\"], [\"Main\", \"1\", \"0.09090909090909091\"], [\"FSHelper\", \"1\", \"0.09090909090909091\"], [\"Action\", \"1\", \"0.09090909090909091\"], [\"PropertiesPanel\", \"2\", \"0.18181818181818182\"], [\"Presentation\", \"1\", \"0.09090909090909091\"], [\"FeedsFSPlugin\", \"1\", \"0.09090909090909091\"], [\"ImageEditorCore\", \"2\", \"0.18181818181818182\"], [\"DnDTransferHandler\", \"1\", \"0.09090909090909091\"], [\"Bookmarks\", \"1\", \"0.09090909090909091\"], [\"TreePanel\", \"1\", \"0.09090909090909091\"], [\"RenameAction\", \"1\", \"0.09090909090909091\"], [\"NewFileAction\", \"1\", \"0.09090909090909091\"], [\"QuickPasteAction\", \"1\", \"0.09090909090909091\"], [\"EmailAction\", \"1\", \"0.09090909090909091\"], [\"MTreeItem\", \"1\", \"0.09090909090909091\"], [\"SummaryData\", \"2\", \"0.18181818181818182\"], [\"MTreeModel\", \"1\", \"0.09090909090909091\"], [\"SummaryPanel\", \"2\", \"0.18181818181818182\"], [\"SortAction\", \"1\", \"0.09090909090909091\"], [\"NodeComparator\", \"1\", \"0.09090909090909091\"], [\"TextEditorCore\", \"1\", \"0.09090909090909091\"], [\"TextEditorKit\", \"1\", \"0.09090909090909091\"], [\"Console\", \"2\", \"0.18181818181818182\"], [\"Output\", \"1\", \"0.09090909090909091\"], [\"MTextArea\", \"1\", \"0.09090909090909091\"], [\"PropertyPanel\", \"1\", \"0.09090909090909091\"], [\"Property\", \"1\", \"0.09090909090909091\"], [\"Value\", \"1\", \"0.09090909090909091\"], [\"Config\", \"1\", \"0.09090909090909091\"], [\"EnumProperty\", \"2\", \"0.18181818181818182\"], [\"Model\", \"1\", \"0.09090909090909091\"], [\"BeanProperty\", \"1\", \"0.09090909090909091\"], [\"ChartModel\", \"2\", \"0.18181818181818182\"], [\"DBRecordPanel\", \"1\", \"0.09090909090909091\"], [\"Content\", \"1\", \"0.09090909090909091\"], [\"Designer\", \"1\", \"0.09090909090909091\"], [\"ScriptExecutor\", \"1\", \"0.09090909090909091\"], [\"Filter\", \"1\", \"0.09090909090909091\"], [\"ConsoleConfig\", \"1\", \"0.09090909090909091\"], [\"ConsoleCommandLine\", \"1\", \"0.09090909090909091\"], [\"PropertyValidator\", \"1\", \"0.09090909090909091\"], [\"StaticPropertyHandler\", \"1\", \"0.09090909090909091\"], [\"ValueChangeListener\", \"1\", \"0.09090909090909091\"], [\"VarListCommand\", \"1\", \"0.09090909090909091\"], [\"TestPropertyAccess\", \"1\", \"0.09090909090909091\"], [\"FS\", \"1\", \"0.09090909090909091\"], [\"MLayout\", \"1\", \"0.09090909090909091\"], [\"StringUtils\", \"1\", \"0.09090909090909091\"], [\"AbstractListTableModel\", \"1\", \"0.09090909090909091\"], [\"MTextField\", \"1\", \"0.09090909090909091\"], [\"Query\", \"1\", \"0.09090909090909091\"], [\"QuotedPrintableCodec\", \"1\", \"0.09090909090909091\"], [\"BufferedFileOutput\", \"1\", \"0.09090909090909091\"], [\"Node\", \"1\", \"0.09090909090909091\"], [\"GroupTree\", \"1\", \"0.09090909090909091\"], [\"SummaryTree\", \"1\", \"0.09090909090909091\"], [\"Renderer\", \"1\", \"0.09090909090909091\"], [\"CollectionMap\", \"1\", \"0.09090909090909091\"]]"
        },
        {
            "content": "The `get_co_change_relationship` function has returned a list of entities along with their support count and confidence score. These entities have been modified together with `Vars.java` in the past. Now, to determine which of these entities are more likely to be impacted by changes in `Vars.java`, we should focus on those with higher **confidence** values, as they indicate stronger co-change relationships.\n\nHere are some observations:\n1. Entities like `MainWindow` (confidence: ~0.27), `Tabs`, `PropertiesPanel`, `SummaryData`, `Console`, `EnumProperty`, and `ChartModel` (all with confidence: ~0.18) show relatively higher confidence scores compared to others.\n2. This suggests that these files might be directly or indirectly dependent on `Vars.java`.\n\nTo proceed further, let's analyze one of these high-confidence entities to understand its relationship with `Vars.java`. We can start with `MainWindow.java`, as it has the highest confidence value. I'll retrieve its origin code for detailed inspection.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_87721b90e3ce44b2b430a8",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga;\\nimport static java.awt.Color.*;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.CardLayout;\\nimport java.awt.Color;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport javax.script.Bindings;\\nimport javax.script.ScriptContext;\\nimport javax.script.ScriptEngine;\\nimport javax.script.ScriptException;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.ToolTipManager;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport javax.swing.event.MenuEvent;\\nimport org.makagiga.commons.*;\\nimport org.makagiga.commons.script.Elements;\\nimport org.makagiga.commons.script.ScriptAction;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptUtils;\\nimport org.makagiga.commons.script.Scriptable;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.DesktopPanel;\\nimport org.makagiga.desktop.DesktopToolBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.EditorZoom.ZoomType;\\nimport org.makagiga.editors.PrintDialog;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.internetsearch.InternetSearch;\\nimport org.makagiga.plugins.Pluggable;\\nimport org.makagiga.plugins.PluginException;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.search.SearchBar;\\nimport org.makagiga.settings.AppSettings;\\nimport org.makagiga.settings.PluginSettings;\\nimport org.makagiga.sidebar.Sidebar;\\nimport org.makagiga.sidebar.SidebarTab;\\nimport org.makagiga.tabs.Tabs;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Bookmarks;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.LiveTutorial;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\npublic final class MainWindow extends MMainWindow\\nimplements\\n\\tScriptable,\\n\\tScriptExecutor.Initializer,\\n\\tThread.UncaughtExceptionHandler\\n{\\n\\tprotected static boolean firstRun;\\n\\tprivate boolean desktop;\\n\\tprivate Elements elements;\\n\\tprivate static final int DEFAULT_WIDTH = 800;\\n\\tprivate static final int DEFAULT_HEIGHT = 600;\\n\\tprivate static final int MIN_WIDTH = 320;\\n\\tprivate static final int MIN_HEIGHT = 200;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate MLabel editorStatusText;\\n\\tprivate static MainWindow _instance;\\n\\tprivate MMenu bookmarksMenu;\\n\\tprivate MMenu closeMenu;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate MPanel editorPanel;\\n\\tprivate MPanel mainPanel;\\n\\tprivate MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate MToolBar mainToolBar;\\n\\tprivate Object updateComponentsLock = new Object();\\n\\tprivate Object updateStateLock = new Object();\\n\\t\\t\\tprivate PreviousAction previousAction;\\n\\tprivate NextAction nextAction;\\n\\tprivate PrintAction printAction;\\n\\tprivate QuitAction quitAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate AppAction fullAction;\\n\\tprivate AppAction minimalAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ShowHideMainToolBarAction showHideMainToolBarAction;\\n\\tprivate ShowHideEditorToolBarAction showHideEditorToolBarAction;\\n\\tprivate ShowHideStatusBarAction showHideStatusBarAction;\\n\\tprivate ZoomAction zoomInAction;\\n\\tprivate ZoomAction zoomOutAction;\\n\\t\\tprivate InternetSearchAction internetSearchAction;\\n\\tprivate SearchAction searchAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\t\\tprivate LockAction lockAction;\\n\\tpublic Object getElementById(final String id) {\\t\\tif (elements == null) {\\n\\t\\t\\telements = new Elements();\\n\\t\\t\\t\\t\\t\\telements.put(\\\"bookmarks-menu\\\", bookmarksMenu);\\n\\t\\t\\telements.put(\\\"export-menu\\\", exportMenu);\\n\\t\\t\\telements.put(\\\"import-menu\\\", importMenu);\\n\\t\\t\\telements.put(\\\"tags-menu\\\", tagsMenu);\\n\\t\\t\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\t\\telements.put(\\\"main-tool-bar\\\", mainToolBar);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic void help() {\\n\\t\\tUI.fire(helpAction, getJMenuBar());\\n\\t}\\n\\tpublic void initEngine(final ScriptEngine engine) {\\n\\t\\tBindings bindings = engine.getBindings(ScriptContext.GLOBAL_SCOPE);\\n\\t\\tbindings.put(\\\"editor\\\", Editor.currentEditor.get());\\n\\t\\tbindings.put(\\\"window\\\", this);\\n\\t\\tbindings.put(\\\"sidebar\\\", Sidebar.getInstance());\\n\\t\\tbindings.put(\\\"tabs\\\", Tabs.getInstance());\\n\\t\\tbindings.put(\\\"tree\\\", Tree.getInstance());\\n\\t}\\n\\tpublic boolean isDesktop() {\\n\\t\\treturn DesktopPanel.getInstance().isVisible();\\n\\t}\\n\\tpublic void setDesktop(final boolean value) {\\n\\t\\tdesktop = value;\\n\\t\\tCardLayout.class.cast(mainPanel.getLayout()).show(\\n\\t\\t\\tmainPanel,\\n\\t\\t\\tdesktop ? \\\"Desktop\\\" : \\\"Editor\\\"\\n\\t\\t);\\n\\t\\ttoggleDesktopAction.setEnabled(Vars.desktopEnabled.get() && !Tabs.getInstance().isEmpty());\\n\\t\\tupdateState();\\n\\t\\tif (desktop)\\n\\t\\t\\tDesktopPanel.getInstance().focus();\\n\\t}\\n\\t@Override\\n\\tpublic void onDynamicInit(final Object object) {\\n\\t\\tif (object == null)\\n\\t\\t\\treturn;\\n\\t\\tsynchronized (object) {\\n\\t\\t\\tif (object instanceof MAbout) {\\n\\t\\t\\t\\tMAbout about = MAbout.class.cast(object);\\n\\t\\t\\t\\t\\t\\t\\t\\tabout.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", \\\"gmx\\\\u002enet\\\", \\\"lopoff\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tabout.addCredit(\\\"amaroK Team - Rediscover Your Music!\\\", \\\"Blend Algorithm\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Romain Guy\\\", \\\"Swing Special Effects\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Scott Violet\\\", \\\"Ocean Gradient Customizer\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"SourceForge.net\\\", \\\"Project Hosting\\\", \\\"http:\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseGestures) {\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\t\\tMouseGestures mouseGestures = MouseGestures.class.cast(object);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"D\\\", treePanel.getNewFileAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Dc\\\", _(\\\"Minimal View\\\"), minimalAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ds\\\", treePanel.getNewFolderAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\t\\t\\t\\tmouseGestures.registerGesture(\\\"L\\\", previousAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LD\\\", searchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LR\\\", new AppAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LU\\\", new AppAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tSidebar.goTo(SidebarTab.TREE);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"R\\\", nextAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"U\\\", internetSearchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Uc\\\", _(\\\"Full View\\\"), fullAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UR\\\", _(\\\"Find Text\\\"), findAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"URDL\\\", printAction);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tconfig.write(\\\"Tabs.current\\\", (metaInfo == null) ? \\\"\\\" : metaInfo.getFilePath());\\n\\t\\t\\t\\tconfig.write(\\\"StatusBar.enabled\\\", showHideStatusBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Editor.enabled\\\", showHideEditorToolBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Main.enabled\\\", showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tconfig.write(\\\"Window.width\\\", getWidth());\\n\\t\\tconfig.write(\\\"Window.height\\\", getHeight());\\n\\t\\tconfig.write(\\\"Window.x\\\", getX());\\n\\t\\tconfig.write(\\\"Window.y\\\", getY());\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\t\\t\\tDesktopPanel.getInstance().saveSession();\\n\\t\\tconfig.saveToFile();\\n\\t}\\n\\tpublic void setEditorStatusText(final String value) {\\n\\t\\tif (TK.isEmpty(value)) {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tString text = null;\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tif (editor.info.isNull())\\n\\t\\t\\t\\t\\ttext = editor.metaInfo.get().getFS().getName();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\ttext = editor.info.get().toString();\\n\\t\\t\\t}\\n\\t\\t\\teditorStatusText.setText(text);\\n\\t\\t\\teditorStatusText.setToolTipText(text);\\n\\t\\t\\teditorStatusText.setVisible(text != null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\teditorStatusText.setText(value);\\n\\t\\t\\teditorStatusText.setToolTipText(value);\\n\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t}\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tgetInstance().mainSplitPane.setSidebarVisible(true);\\n\\t}\\n\\tpublic void uncaughtException(Thread t, Throwable e) {\\n\\t\\tMLogger.exception(e);\\n\\t\\tif (!(e instanceof OutOfMemoryError) && Vars.debugShowConsoleOnException.get()) {\\n\\t\\t\\tMSplashScreen.close();\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void updateComponents(final boolean updateUI, final MetaInfo... metaInfo) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfo != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfo) {\\n\\t\\t\\t\\t\\t\\tif (i.isFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(tabs.findEditor(i));\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ((currentTab != null) && (lockAction != null) && (currentTab.metaInfo.get() == i))\\n\\t\\t\\t\\t\\t\\tlockAction.setMetaInfo(i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.metaInfo.get());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tif (updateUI)\\n\\t\\t\\t\\tTree.getInstance().updateUI();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t\\ttabs.repaint();\\n\\t\\t}\\n\\t}\\n\\tpublic static void updateMenu(final PluginManager.Table plugins, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateMenu(type, menu);\\n\\t\\t}\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateMenu(final PluginMenu plugin, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tplugin.updateMenu(type, menu);\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateToolBar(final PluginManager.Table plugins, final MToolBar toolBar, final String type, final boolean addSeparator) {\\n\\t\\tint count = toolBar.getComponentCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateToolBar(type, toolBar);\\n\\t\\t}\\n\\t\\tif (addSeparator && (toolBar.getComponentCount() != count))\\n\\t\\t\\ttoolBar.addSeparator();\\n\\t}\\n\\tpublic void alert(final String text) {\\n\\t\\tMMessage.info(this, text);\\n\\t}\\n\\tpublic boolean confirm(final String text) {\\n\\t\\treturn MMessage.confirm(this, text);\\n\\t}\\n\\tpublic String prompt(final String text, final String defaultText) {\\n\\t\\treturn MMessage.input(this, defaultText, text, AppInfo.fullName.get());\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\t_instance = this;\\n\\t\\tThread.currentThread().setDefaultUncaughtExceptionHandler(this);\\n\\t\\tSize.setMinimum(this, DEFAULT_WIDTH / 2, DEFAULT_HEIGHT / 2);\\n\\t\\tif (!MSplashScreen.isAvailable())\\n\\t\\t\\tMSplashScreen.setImage(new ImageIcon(\\\"splash.png\\\").getImage());\\n\\t\\tMSplashScreen.setTextShadowColor(BLACK);\\n\\t\\tMSplashScreen.setTextColor(WHITE);\\n\\t\\tMSplashScreen.setVerticalTextPosition(UI.TOP);\\n\\t\\tMSplashScreen.setText(UI.RIGHT_POINTER);\\n\\t\\tScriptExecutor.setInitializer(this); \\t\\tinitPlugins();\\n\\t\\t\\t\\tMSplashScreen.setTextColor(new Color(0x91fefc));\\n\\t\\tMSplashScreen.setText(UI.RIGHT_POINTER + \\\" \\\" + UI.RIGHT_POINTER);\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table infos = PluginManager.getInfos();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(infos);\\n\\t\\tinitStatusBar();\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane(MSplitPane.HORIZONTAL_SPLIT);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\teditorPanel = MPanel.createBorderPanel();\\n\\t\\teditorPanel.addCenter(tabs);\\n\\t\\teditorPanel.setVisible(false); \\t\\t\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\tmainToolBar = new MToolBar();\\n\\t\\tmainToolBar.add(treePanel.getNewFileAction());\\n\\t\\tmainToolBar.add(treePanel.getQuickPasteAction());\\n\\t\\tmainToolBar.add(treePanel.getNewFolderAction());\\n\\t\\ttreePanel.setLabelMenuButton(mainToolBar.add(treePanel.getLabelMenuAction()));\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(previousAction);\\n\\t\\tmainToolBar.add(nextAction, MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(internetSearchAction);\\n\\t\\tmainToolBar.add(toggleDesktopAction);\\n\\t\\tif (Vars.desktopEnabled.get()) {\\n\\t\\t\\tmainToolBar.addSeparator();\\n\\t\\t\\tDesktopToolBar.getInstance().updateToolBar(mainToolBar);\\n\\t\\t}\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tupdateToolBar(infos, mainToolBar, PluginMenu.MAIN_TOOL_BAR, true);\\n\\t\\tmainToolBar.add(LocationBar.getInstance());\\n\\t\\taddNorth(mainToolBar);\\n\\t\\t\\t\\tmainPanel = MPanel.createCustomPanel(new CardLayout());\\n\\t\\tmainPanel.add(editorPanel, \\\"Editor\\\");\\n\\t\\tmainPanel.add(DesktopPanel.getInstance(), \\\"Desktop\\\");\\n\\t\\tmainSplitPane.setRightComponent(mainPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\tMSplashScreen.setTextColor(YELLOW);\\n\\t\\tMSplashScreen.setText(UI.RIGHT_POINTER + \\\" \\\" + UI.RIGHT_POINTER + \\\" \\\" + UI.RIGHT_POINTER);\\n\\t\\trestoreSession();\\n\\t\\t\\t\\tFile userScriptFile = new File(FS.makePath(FS.makeConfigPath(\\\"scripts\\\"), \\\"user.js\\\"));\\n\\t\\tScriptException userScriptError = null;\\n\\t\\tif (userScriptFile.exists()) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tScriptExecutor.execute(userScriptFile);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FileNotFoundException exception) { } \\t\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\t\\tuserScriptError = exception;\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsetVisible(true);\\n\\t\\tMSplashScreen.close();\\n\\t\\tif (tabs.isEmpty())\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\telse\\n\\t\\t\\t\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(Config.getDefault().read(\\\"Tabs.current\\\", null)));\\n\\t\\tMStatusBar.ready();\\n\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tinitAutosave();\\n\\t\\tsetMouseGestures(new MouseGestures());\\n\\t\\tMSystemTray.createInBackground();\\n\\t\\t\\t\\tif (Args.isSet(\\\"time-demo\\\")) {\\n\\t\\t\\tMLogger.info(\\\"makagiga\\\", \\\"END TIME DEMO\\\");\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t\\tInternetSearch.installGlobalMenu();\\n\\t\\tMAuthenticator.init();\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptUtils.showError(userScriptError);\\n\\t\\t\\t\\tfor (PluginInfo i : infos) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\ti.getPluggable().onPostInit();\\n\\t\\t\\t}\\n\\t\\t\\tcatch (PluginException exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void applySettings() {\\n\\t\\tToolTipManager toolTipManager = ToolTipManager.sharedInstance();\\n\\t\\ttoolTipManager.setDismissDelay(8000); \\t\\ttoolTipManager.setEnabled(UI.toolTips.get());\\n\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\tpreviousAction = new PreviousAction();\\n\\t\\tnextAction = new NextAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\tquitAction = new QuitAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\tshowHideMainToolBarAction = new ShowHideMainToolBarAction();\\n\\t\\tshowHideEditorToolBarAction = new ShowHideEditorToolBarAction();\\n\\t\\tshowHideStatusBarAction = new ShowHideStatusBarAction();\\n\\t\\t\\t\\tinternetSearchAction = new InternetSearchAction();\\n\\t\\tsearchAction = new SearchAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t}\\n\\tprivate void initAutosave() {\\n\\t\\tnew MTimer(MTimer.Format.MINUTES, 10) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onTimeout() {\\n\\t\\t\\t\\tif (!Vars.autosaveEnabled.get())\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstop(); \\t\\t\\t\\t\\tString message = _(\\\"Autosave...\\\");\\n\\t\\t\\t\\t\\tMStatusBar.setInfo(message);\\n\\t\\t\\t\\t\\tMLogger.info(\\\"makagiga\\\", message);\\n\\t\\t\\t\\t\\tsaveSession(Tabs.QUIET_SAVE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfinally {\\n\\t\\t\\t\\t\\trestart();\\n\\t\\t\\t\\t\\tMStatusBar.ready();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}.start();\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\texportMenu.setSplitMenu(true);\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && !editor.info.isNull()) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.metaInfo));\\n\\t\\t\\t\\t\\t\\tEditorPlugin.FileType[] types = EditorPlugin.fromInfo(editor.info.get()).exportTypes.get();\\n\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t}\\n\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image\\\"), \\\"image/png\\\", true)));\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Select an item you want to export\\\"));\\n\\t}\\n\\tprivate void initImportMenu() {\\n\\t\\timportMenu.removeAll();\\n\\t\\timportMenu.setSplitMenu(true);\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif ((currentFS instanceof TreeFS) && currentFolder.canModify()) {\\n\\t\\t\\timportMenu.addTitle(_(\\\"Import To \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\tEditorPlugin.FileType[] types;\\n\\t\\t\\tfor (PluginInfo i : PluginManager.getInfos(Pluggable.EDITOR)) {\\n\\t\\t\\t\\ttypes = EditorPlugin.fromInfo(i).importTypes.get();\\n\\t\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\t\\tif (types.length == 1) {\\n\\t\\t\\t\\t\\t\\tAppAction importAction = new ImportExport.ImportAction(types[0]);\\n\\t\\t\\t\\t\\t\\timportAction.setIcon(i.getIcon());\\n\\t\\t\\t\\t\\t\\timportMenu.add(importAction);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tMMenu menu = new MMenu(i.toString(), i.getIcon());\\n\\t\\t\\t\\t\\t\\tfor (EditorPlugin.FileType t : types)\\n\\t\\t\\t\\t\\t\\t\\tmenu.add(new ImportExport.ImportAction(t));\\n\\t\\t\\t\\t\\t\\timportMenu.add(menu);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.IMPORT_MENU, importMenu);\\n\\t\\tif (importMenu.isEmpty())\\n\\t\\t\\timportMenu.addTitle(_(\\\"No folder selected or import is not supported\\\"));\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tmenuBar.getSelectionModel().addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (LiveTutorial.isActive())\\n\\t\\t\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tMMenu fileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tfileMenu.setSplitMenu(true);\\n\\t\\tMMenu treeMenu = new MMenu(_(\\\"Tree\\\"), \\\"ui/detailedview\\\");\\n\\t\\ttreeMenu.setToolTipText(_(\\\"This menu allows you to modify all the files and folders.\\\"));\\n\\t\\ttreeMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuDeselected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu m = (MMenu)e.getSource();\\n\\t\\t\\t\\tif (!m.isEmpty())\\n\\t\\t\\t\\t\\tm.removeAll();\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu m = (MMenu)e.getSource();\\n\\t\\t\\t\\tif (m.isEmpty())\\n\\t\\t\\t\\t\\tTreePanel.getInstance().createTreeMenu(m);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(treeMenu);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tfileMenu.add(previousAction);\\n\\t\\tfileMenu.add(nextAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new MMenu(_(\\\"Import\\\"));\\n\\t\\timportMenu.setToolTipText(_(\\\"Imports a selected files to the Tree.\\\"));\\n\\t\\timportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitImportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active tab.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tcloseMenu = tabs.createCloseMenu();\\n\\t\\tfileMenu.add(closeMenu);\\n\\t\\tfileMenu.add(quitAction);\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\t\\t\\tMMenu viewModeMenu = new MMenu(_(\\\"View Mode\\\"));\\n\\t\\tfullAction =  new AppAction(_(\\\"Full\\\"), null, VK_1, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(true);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tfullAction.setHTMLHelp(_(\\\"Show sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(fullAction);\\n\\t\\tminimalAction = new AppAction(_(\\\"Minimal\\\"), null, VK_2, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(false);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tminimalAction.setHTMLHelp(_(\\\"Hide sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(minimalAction);\\n\\t\\tviewMenu.add(viewModeMenu);\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tviewMenu.add(showHideSidebarAction);\\n\\t\\tMMenuItem menuItem = viewMenu.add(toggleDesktopAction);\\n\\t\\tviewMenu.add(toggleDesignerAction);\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, true);\\n\\t\\tviewMenu.addCheckBox(showHideMainToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideEditorToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideStatusBarAction);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new MMenu(_(\\\"&Bookmarks\\\"), FS.getIcon(\\\"ui/bookmark\\\", FS.SMALL_ICON_SIZE));\\n\\t\\tbookmarksMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tBookmarks.updateMenu(bookmarksMenu);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\tMMenu toolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\ttoolsMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu menu = (MMenu)e.getSource();\\n\\t\\t\\t\\tmenu.setSplitMenu(true);\\n\\t\\t\\t\\tmenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\tmenu.add(internetSearchAction);\\n\\t\\t\\t\\tmenu.add(searchAction);\\n\\t\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\t\\tupdateMenu(plugins, menu, PluginMenu.TOOLS_MENU, true);\\n\\t\\t\\t\\tmenu.add(new ConsoleAction());\\n\\t\\t\\t\\tmenu.addTitle(_(\\\"Configure\\\"));\\n\\t\\t\\t\\tmenu.add(new ConfigureAction());\\n\\t\\t\\t\\tmenu.add(new ConfigurePluginsAction());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\tMMenu helpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu menu = (MMenu)e.getSource();\\n\\t\\t\\t\\tmenu.add(helpAction);\\n\\t\\t\\t\\tmenu.add(new LiveTutorialAction());\\n\\t\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\t\\tupdateMenu(plugins, menu, PluginMenu.HELP_MENU, true);\\n\\t\\t\\t\\tmenu.add(new AboutAction());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tSize.setPreferredHeight(menuBar, Math.min(menuItem.getPreferredSize().height, 32));\\n\\t\\tsetJMenuBar(menuBar);\\n\\t\\t\\t\\tUI.connect(menuBar, UI.WHEN_IN_FOCUSED_WINDOW, new QuickSaveAction());\\n\\t}\\n\\tprivate void initPlugins() {\\n\\t\\tfinal PluginManager plugins = PluginManager.getInstance();\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/image\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/notepad\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/text\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/todo\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/feeds\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/search\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/trash\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/backup\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/update\\\");\\n\\t\\tplugins.registerExternal();\\n\\t}\\n\\tprivate void initStatusBar() {\\n\\t\\tfinal MStatusBar statusBar = getStatusBar();\\n\\t\\teditorStatusText = new MLabel();\\n\\t\\teditorStatusText.setBorder(BorderFactory.createLoweredBevelBorder());\\n\\t\\tstatusBar.addStretch();\\n\\t\\tstatusBar.add(editorStatusText);\\n\\t\\tstatusBar.add(BackgroundTaskManager.getInstance());\\n\\t\\tstatusBar.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\tif (e.getPropertyName().equals(MStatusBar.CLOSED_PROPERTY))\\n\\t\\t\\t\\t\\tshowHideStatusBarAction.setSelected(!(Boolean)e.getNewValue());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\tprivate void navigate(final boolean next) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> currentEditor = tabs.getSelectedTab();\\n\\t\\tif (currentEditor == null)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo currentFile = currentEditor.metaInfo.get();\\n\\t\\tMetaInfo[] files = currentFile.getParentFolder().getSubMetaInfos(true);\\n\\t\\tif (files.length < 2)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo newFile = null;\\n\\t\\t\\t\\tif (next) {\\n\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (newFile != null) {\\n\\t\\t\\tint index = tabs.findEditor(currentFile);\\n\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(index, Tabs.REMOVE_TAB | Tabs.SAVE_TO_FILE);\\n\\t\\t\\t\\t\\t\\tTree.getInstance().open(newFile);\\n\\t\\t}\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tboolean safeMode = Args.isSet(\\\"safe-mode\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\tapplySettings();\\n\\t\\tsetSize(\\n\\t\\t\\tMath.max(MIN_WIDTH, config.readInt(\\\"Window.width\\\", DEFAULT_WIDTH)),\\n\\t\\t\\tMath.max(MIN_HEIGHT, config.readInt(\\\"Window.height\\\", DEFAULT_HEIGHT))\\n\\t\\t);\\n\\t\\tsetLocationByPlatform(true); \\t\\tif (firstRun) {\\n\\t\\t\\tsetLocationRelativeTo(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tsetLocation(\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.x\\\", 0),\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.y\\\", 0)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", -1);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tMStatusBar.getGlobal().setClosed(!config.read(\\\"StatusBar.enabled\\\", false));\\n\\t\\tshowHideEditorToolBarAction.setSelected(config.read(\\\"ToolBar.Editor.enabled\\\", true));\\n\\t\\tshowHideMainToolBarAction.setSelected(config.read(\\\"ToolBar.Main.enabled\\\", true));\\n\\t\\tmainToolBar.setVisible(showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tif (!safeMode)\\n\\t\\t\\tTree.getInstance().restoreAll();\\n\\t\\t\\t\\tDesktopPanel.getInstance().restoreSession();\\n\\t}\\n\\tprivate void setViewMode(final boolean full) {\\n\\t\\tmainSplitPane.setSidebarVisible(full);\\n\\t\\t\\t\\tshowHideMainToolBarAction.setSelected(full);\\n\\t\\tmainToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideEditorToolBarAction.setSelected(full);\\n\\t\\tif (editorToolBar != null)\\n\\t\\t\\teditorToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideStatusBarAction.setSelected(full);\\n\\t\\tMStatusBar.getGlobal().setVisible(full);\\n\\t}\\n\\tprivate void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tDesigner designer = null;\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\teditMenu.removeAll();\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\t\\t\\t\\tAppAction closeAction = tabs.getCloseAction();\\n\\t\\t\\tcloseMenu.setEnabled(closeAction.isEnabled());\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\tif ((editor != null) && !isDesktop()) {\\n\\t\\t\\t\\t\\t\\t\\t\\tboolean hasNext = false;\\n\\t\\t\\t\\tboolean hasPrevious = false;\\n\\t\\t\\t\\tMetaInfo parentFolder = metaInfo.getParentFolder();\\n\\t\\t\\t\\tif (parentFolder != null) {\\n\\t\\t\\t\\t\\tMetaInfo[] files = parentFolder.getSubMetaInfos(true);\\n\\t\\t\\t\\t\\tif (files.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasNext = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasPrevious = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpreviousAction.setEnabled(hasPrevious);\\n\\t\\t\\t\\tnextAction.setEnabled(hasNext);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance())\\n\\t\\t\\t\\t\\tDesktopToolBar.getInstance().setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tviewMenu.addSeparator();\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomAction(EditorZoom.ZoomType.IN);\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomAction(EditorZoom.ZoomType.OUT);\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.VIEW_MENU_EDITOR, viewMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tdesigner = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\teditorPanel.addNorth(editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\t\\tprintAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditorToolBar.add(printAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomInAction);\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomOutAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (lockAction == null)\\n\\t\\t\\t\\t\\tlockAction = new LockAction();\\n\\t\\t\\t\\tlockAction.setMetaInfo(metaInfo);\\n\\t\\t\\t\\teditorToolBar.add(lockAction);\\n\\t\\t\\t\\teditorToolBar.setVisible(showHideEditorToolBarAction.isSelected());\\n\\t\\t\\t\\teditorToolBar.revalidate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t\\t\\tsetEditorStatusText(editor.getStatusText());\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tpreviousAction.setEnabled(false);\\n\\t\\t\\t\\tnextAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance()) {\\n\\t\\t\\t\\t\\tfinal DesktopToolBar desktopToolBar = DesktopToolBar.getInstance();\\n\\t\\t\\t\\t\\tdesktopToolBar.updateComponents();\\n\\t\\t\\t\\t\\tdesktopToolBar.setVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tLocationBar.getInstance().setVisible(false);\\n\\t\\t\\t\\teditorStatusText.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tsetEditorStatusText(null);\\n\\t\\t\\t}\\n\\t\\t\\teditMenu.setEnabled(!editMenu.isEmpty());\\n\\t\\t\\t\\t\\t\\tif (EditorQuickFind.isInstance() && editorPanel.isAncestorOf(EditorQuickFind.getInstance()))\\n\\t\\t\\t\\teditorPanel.remove(EditorQuickFind.getInstance());\\n\\t\\t\\t\\t\\t\\tif (designer == null) {\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), false);\\n\\t\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\t\\tsidebar.goTo(SidebarTab.TREE, false);\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsidebar.setComponentAt(SidebarTab.DESIGNER.ordinal(), designer);\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), true);\\n\\t\\t\\t\\tdesigner.repaint(); \\t\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\t\\tdesigner.setReadOnly(!editor.metaInfo.get().canModify());\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(true);\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tsetTitle(\\n\\t\\t\\t(metaInfo == null) || isDesktop()\\n\\t\\t\\t? AppInfo.fullName.get()\\n\\t\\t\\t: (metaInfo.getNicePath() + \\\" - \\\" + AppInfo.fullName)\\n\\t\\t);\\n\\t}\\n\\tprivate static final class AboutAction extends ScriptAction {\\n\\t\\tAboutAction() {\\n\\t\\t\\tsuper(\\\"about\\\", _(\\\"About {0}\\\", AppInfo.fullName), \\\"makagiga\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the information about this application.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class ConfigureAction extends AppAction {\\n\\t\\tpublic ConfigureAction() {\\n\\t\\t\\tsuper(_(\\\"Options\\\"), \\\"ui/configure\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tAppSettings dialog = new AppSettings(MainWindow.this);\\n\\t\\t\\tif (dialog.exec()) {\\n\\t\\t\\t\\tapplySettings();\\n\\t\\t\\t\\trepaint();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigurePluginsAction extends AppAction {\\n\\t\\tpublic ConfigurePluginsAction() {\\n\\t\\t\\tsuper(_(\\\"Plugins\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Configure, add or remove plugins.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnew PluginSettings(MainWindow.getInstance()).exec();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConsoleAction extends AppAction {\\n\\t\\tConsoleAction() {\\n\\t\\t\\tsuper(_(\\\"Console\\\"), null, VK_F12, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the <b>Console</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindAction extends AppAction {\\n\\t\\tFindAction() {\\n\\t\\t\\tsuper(_(\\\"Find...\\\"), \\\"find\\\", VK_F, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindNextAction extends AppAction {\\n\\t\\tFindNextAction() {\\n\\t\\t\\tsuper(_(\\\"Find Next...\\\"), null, getFindNextKeyStroke());\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends ScriptAction {\\n\\t\\tHelpAction() {\\n\\t\\t\\tsuper(\\\"help\\\", _(\\\"Help\\\"), \\\"ui/question\\\", VK_F1);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the <b>Help</b> in the <b>Browser</b>.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class InternetSearchAction extends ScriptAction {\\n\\t\\tpublic InternetSearchAction() {\\n\\t\\t\\tsuper(\\\"internet-search\\\", _(\\\"Internet Search...\\\"), \\\"network\\\", VK_K, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Internet search.<br><b>Tip:</b> Select text (or item) in the active editor<br>to search for it.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LiveTutorialAction extends AppAction {\\n\\t\\tpublic LiveTutorialAction() {\\n\\t\\t\\tsuper(_(\\\"Live Tutorial\\\"), null, VK_F1, SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Live Tutorial</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LockAction extends AppAction {\\n\\t\\tprivate MetaInfo metaInfo;\\n\\t\\tpublic LockAction() {\\n\\t\\t\\tsetName(UI.makeHTML(_(\\\"Click to lock/unlock the active tab.<br>Locked file cannot be modified.\\\")));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmetaInfo.setLocked(!isSelected());\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t\\tgetInstance().updateComponents(true, metaInfo);\\n\\t\\t}\\n\\t\\tpublic void setMetaInfo(final MetaInfo value) {\\n\\t\\t\\tmetaInfo = value;\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t}\\n\\t\\tprivate void updateState(final boolean locked) {\\n\\t\\t\\tsetEnabled(!metaInfo.isVirtualFile() && metaInfo.isWriteable());\\n\\t\\t\\tsetIcon(locked ? \\\"ui/locked\\\" : \\\"ui/unlocked\\\");\\n\\t\\t\\tsetSelected(locked);\\n\\t\\t}\\n\\t}\\n\\tprivate final class NextAction extends AppAction {\\n\\t\\tNextAction() {\\n\\t\\t\\tsuper(_(\\\"Next\\\"), \\\"ui/right\\\", VK_RIGHT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the next file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class PreviousAction extends AppAction {\\n\\t\\tPreviousAction() {\\n\\t\\t\\tsuper(_(\\\"Previous\\\"), \\\"ui/left\\\", VK_LEFT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the previous file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PrintAction extends AppAction {\\n\\t\\tpublic PrintAction() {\\n\\t\\t\\tsuper(_(\\\"Print...\\\"), \\\"ui/print\\\", VK_P, CTRL_MASK);\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPrintDialog.exec(Tabs.getInstance().getSelectedTab());\\n\\t\\t}\\n\\t}\\n\\tprivate final class QuickSaveAction extends AppAction {\\n\\t\\tQuickSaveAction() {\\n\\t\\t\\tsuper(\\\"Quick Save\\\", null, VK_S, CTRL_MASK);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuitAction extends AppAction {\\n\\t\\tQuitAction() {\\n\\t\\t\\tsuper(_(\\\"Quit\\\"), \\\"ui/quit\\\", VK_Q, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class SearchAction extends AppAction {\\n\\t\\tSearchAction() {\\n\\t\\t\\tsuper(_(\\\"Find Files...\\\"), null, VK_F7);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for files.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tSearchBar.setQuery(null);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideEditorToolBarAction extends AppAction {\\n\\t\\tShowHideEditorToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Editor Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>editor tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (editorToolBar != null)\\n\\t\\t\\t\\teditorToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideMainToolBarAction extends AppAction {\\n\\t\\tShowHideMainToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Main Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>main tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideSidebarAction extends AppAction {\\n\\t\\tShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Sidebar\\\"), null, VK_F9);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Sidebar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideStatusBarAction extends AppAction {\\n\\t\\tShowHideStatusBarAction() {\\n\\t\\t\\tsuper(_(\\\"Status Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>status bar</b>.\\\"));\\n\\t\\t\\tsetSelected(true);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMStatusBar.getGlobal().setClosed(!isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends AppAction {\\n\\t\\tpublic ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"designer\\\", VK_F4);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Designer</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tshowSidebar();\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\tsidebar.selectLastTab();\\n\\t\\t\\telse\\n\\t\\t\\t\\tSidebar.goTo(SidebarTab.DESIGNER);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ToggleDesktopAction extends AppAction {\\n\\t\\tpublic ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Desktop\\\"), \\\"desktop\\\", VK_F5);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Desktop</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetDesktop(!isDesktop());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ZoomAction extends AppAction {\\n\\t\\tprivate ZoomType type;\\n\\t\\tpublic ZoomAction(final ZoomType type) {\\n\\t\\t\\tsuper();\\n\\t\\t\\tthis.type = type;\\n\\t\\t\\tswitch (type) {\\n\\t\\t\\t\\tcase IN:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_EQUALS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/plus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom In\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase OUT:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_MINUS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/minus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom Out\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\t\\tMainWindow.this.zoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\tMainWindow.this.zoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "content": "The code of `MainWindow.java` has been successfully retrieved. From the analysis of the co-change relationship and the structure of `MainWindow.java`, we can observe the following:\n\n1. **Usage of `Vars.java`**: \n   - The `Vars.java` file is likely used in `MainWindow.java` for managing application-wide variables or configurations, as indicated by its interactions with UI components and settings (e.g., `Vars.desktopEnabled.get()` is used to control the desktop panel visibility).\n   \n2. **Interaction with UI Components**:\n   - `MainWindow` manages several UI-related actions and panels (`mainToolBar`, `editorToolBar`, `sidebar`, etc.), and it interacts with various entities such as `Tabs`, `Sidebar`, `Editor`, and `MetaInfo`.\n   - It also references other files like `Config`, `Tree`, and `DesktopPanel`, which could be affected if `Vars.java` modifies any shared configuration.\n\n3. **High Confidence Co-Change Entities**:\n   - Based on the co-change data, files like `Tabs`, `PropertiesPanel`, `SummaryData`, `Console`, `EnumProperty`, and `ChartModel` are more likely to have a direct impact from changes in `Vars.java`.\n\nTo further analyze potential impacts, I suggest examining the `get_call_graph` for `Vars.java`. This will reveal which functions or methods in `Vars.java` are being invoked by other entities, helping us identify specific dependencies.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_c931bb71bc8a4723b600d2",
                    "function": {
                        "arguments": "{\"entity\": \"Vars.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"\"]"
        },
        {
            "content": "It seems that the `get_call_graph` function returned an empty result for `Vars.java`. This could indicate one of the following:\n\n1. **No direct method calls** from other entities to `Vars.java`, or\n2. A potential issue with extracting call information, possibly due to how `Vars.java` is structured or used (e.g., if it's a static utility/configuration class).\n\nSince `Vars.java` appears to be a configuration-style class accessed through properties rather than direct method calls, we should analyze its coupling dependencies with high-confidence co-change entities such as `MainWindow`, `Tabs`, and `PropertiesPanel`.\n\nNext, I will examine the coupling dependencies between `Vars.java` and `Tabs.java` to better understand their relationship.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_304626aa3f6748909962cb",
                    "function": {
                        "arguments": "{\"entity1\": \"Vars.java\", \"entity2\": \"Tabs.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "The result indicates that there are **no direct coupling dependencies** between `Vars.java` and `Tabs.java`. This suggests that the relationship might be **indirect**, potentially mediated through other entities like `MainWindow.java`, which we know references both `Vars.java` and `Tabs.java`.\n\nTo further investigate, let\u2019s examine whether there is a conceptual or semantic coupling between these files by analyzing their code similarity using the `get_conceptual_coupling` function.\n\nI will now call `get_conceptual_coupling` for `Vars.java` and `Tabs.java` to determine if there's any semantic connection.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_d009770de7fd46538616d5",
                    "function": {
                        "arguments": "{\"entity1\": \"Vars.java\", \"entity2\": \"Tabs.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.0\""
        },
        {
            "content": "The `get_conceptual_coupling` function returned a similarity score of `0.0`, indicating **no significant semantic or conceptual overlap** between `Vars.java` and `Tabs.java`.\n\nGiven this, we can summarize the findings so far:\n\n### Analysis Summary:\n1. **Co-Change Relationships**:\n   - `Vars.java` has a history of being modified alongside several entities, with `MainWindow.java` showing the highest confidence score.\n   - Other entities like `Tabs.java`, `PropertiesPanel.java`, `Console.java`, etc., also show moderate historical co-change relationships.\n\n2. **Direct Dependencies**:\n   - No direct coupling dependencies were found between `Vars.java` and `Tabs.java`.\n   - The call graph for `Vars.java` was empty, suggesting it may not expose methods that are directly invoked elsewhere, possibly acting as a configuration/property holder (e.g., using static fields).\n\n3. **Semantic Similarity**:\n   - There is no conceptual coupling between `Vars.java` and `Tabs.java`, reinforcing that their relationship\u2014if any\u2014is indirect.\n\n### Next Steps:\nSince `MainWindow.java` shows the strongest co-change relationship with `Vars.java`, and based on its code, it clearly references `Vars.java` (e.g., `Vars.desktopEnabled.get()`), the most relevant entity to synchronize with changes in `Vars.java` would be:\n\n> \u2705 **`MainWindow.java`**\n\nTo confirm this further, we could examine if other co-change candidates like `PropertiesPanel.java` or `Console.java` have stronger ties to `Vars.java`. However, given the available data and analysis, **`MainWindow.java` should be prioritized** as the entity most likely impacted by changes in `Vars.java`.\n\nWould you like to proceed with analyzing another candidate, or finalize this conclusion?",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `Vars.java`\n\nChange set: [MainWindow, PropertiesPanel, SummaryData, Console, EnumProperty, ChartModel, Tabs, NewFolderDialog, MetaInfo, ImageEditorCore, SummaryPanel, Config, FS, AbstractFS, MLayout, StringUtils, GroupTree, SummaryTree, Renderer, CollectionMap, Query, BufferedFileOutput, QuotedPrintableCodec, Node, MTextField, AbstractListTableModel, Designer, Content, ScriptExecutor, Filter, ConsoleConfig, ConsoleCommandLine, PropertyValidator, StaticPropertyHandler, ValueChangeListener, VarListCommand, TestPropertyAccess, FSHelper, Action, Main, TreeSettings, ItemRenderer, ToggleDesktopAction]\n\nDetails:\n- **MainWindow**: Directly references `Vars.java` (e.g., `Vars.desktopEnabled.get()`), indicating a strong functional dependency.\n- **PropertiesPanel**: Frequently co-changed with `Vars.java`, likely due to shared configuration or UI property management.\n- **SummaryData**: High historical co-change confidence, possibly tied to data summarization based on global variables.\n- **Console**: Co-changed often; may use global flags or settings from `Vars.java` for visibility or behavior control.\n- **EnumProperty**: Likely shares property handling logic governed by global configurations in `Vars.java`.\n- **ChartModel**: Possibly affected by visual or behavioral settings managed in `Vars.java`.\n- **Tabs**: Frequently used in conjunction with `MainWindow`; co-change history suggests indirect usage via UI state management.\n- **NewFolderDialog**: May rely on global UI or path-related settings from `Vars.java`.\n- **MetaInfo**: Could interact with `Vars.java` for metadata-related configuration or persistence.\n- **ImageEditorCore**: Likely affected by editor-wide settings or preferences stored in `Vars.java`.\n- **SummaryPanel**: Shares co-change pattern and may depend on global summary settings.\n- **Config**: Manages application-level configuration, possibly synchronized with `Vars.java` values.\n- **FS**, **AbstractFS**: May share filesystem-related flags or behaviors controlled by `Vars.java`.\n- **MLayout**, **StringUtils**, **GroupTree**, **SummaryTree**, **Renderer**, **CollectionMap**, **Query**, **BufferedFileOutput**, **QuotedPrintableCodec**, **Node**, **MTextField**, **AbstractListTableModel**: These entities show moderate co-change relationships and could be indirectly affected through shared utility functions, layout policies, or string/IO handling governed by `Vars.java`.\n- **Designer**, **Content**, **ScriptExecutor**, **Filter**, **ConsoleConfig**, **ConsoleCommandLine**, **PropertyValidator**, **StaticPropertyHandler**, **ValueChangeListener**, **VarListCommand**, **TestPropertyAccess**, **FSHelper**, **Action**, **Main**, **TreeSettings**, **ItemRenderer**, **ToggleDesktopAction**: These are included based on co-change frequency and potential indirect dependencies through event handling, scripting, or plugin systems that reference global variables.\n\nAll entities listed above have been historically co-changed with `Vars.java` and are retained based on their support count and confidence scores, ensuring high recall.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is Vars.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_0c7e7bc9442c482aa6f090",
                        "function": {
                            "arguments": "{\"entity\": \"Vars.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"Reminder\", \"1\", \"0.09090909090909091\"], [\"TaskComponent\", \"1\", \"0.09090909090909091\"], [\"TasksSettings\", \"1\", \"0.09090909090909091\"], [\"MainWindow\", \"3\", \"0.2727272727272727\"], [\"MFlipPanel\", \"1\", \"0.09090909090909091\"], [\"Tabs\", \"2\", \"0.18181818181818182\"], [\"NewFolderDialog\", \"2\", \"0.18181818181818182\"], [\"ToggleDesktopAction\", \"1\", \"0.09090909090909091\"], [\"ItemRenderer\", \"1\", \"0.09090909090909091\"], [\"TreeSettings\", \"1\", \"0.09090909090909091\"], [\"MetaInfo\", \"2\", \"0.18181818181818182\"], [\"AbstractFS\", \"1\", \"0.09090909090909091\"], [\"Main\", \"1\", \"0.09090909090909091\"], [\"FSHelper\", \"1\", \"0.09090909090909091\"], [\"Action\", \"1\", \"0.09090909090909091\"], [\"PropertiesPanel\", \"2\", \"0.18181818181818182\"], [\"Presentation\", \"1\", \"0.09090909090909091\"], [\"FeedsFSPlugin\", \"1\", \"0.09090909090909091\"], [\"ImageEditorCore\", \"2\", \"0.18181818181818182\"], [\"DnDTransferHandler\", \"1\", \"0.09090909090909091\"], [\"Bookmarks\", \"1\", \"0.09090909090909091\"], [\"TreePanel\", \"1\", \"0.09090909090909091\"], [\"RenameAction\", \"1\", \"0.09090909090909091\"], [\"NewFileAction\", \"1\", \"0.09090909090909091\"], [\"QuickPasteAction\", \"1\", \"0.09090909090909091\"], [\"EmailAction\", \"1\", \"0.09090909090909091\"], [\"MTreeItem\", \"1\", \"0.09090909090909091\"], [\"SummaryData\", \"2\", \"0.18181818181818182\"], [\"MTreeModel\", \"1\", \"0.09090909090909091\"], [\"SummaryPanel\", \"2\", \"0.18181818181818182\"], [\"SortAction\", \"1\", \"0.09090909090909091\"], [\"NodeComparator\", \"1\", \"0.09090909090909091\"], [\"TextEditorCore\", \"1\", \"0.09090909090909091\"], [\"TextEditorKit\", \"1\", \"0.09090909090909091\"], [\"Console\", \"2\", \"0.18181818181818182\"], [\"Output\", \"1\", \"0.09090909090909091\"], [\"MTextArea\", \"1\", \"0.09090909090909091\"], [\"PropertyPanel\", \"1\", \"0.09090909090909091\"], [\"Property\", \"1\", \"0.09090909090909091\"], [\"Value\", \"1\", \"0.09090909090909091\"], [\"Config\", \"1\", \"0.09090909090909091\"], [\"EnumProperty\", \"2\", \"0.18181818181818182\"], [\"Model\", \"1\", \"0.09090909090909091\"], [\"BeanProperty\", \"1\", \"0.09090909090909091\"], [\"ChartModel\", \"2\", \"0.18181818181818182\"], [\"DBRecordPanel\", \"1\", \"0.09090909090909091\"], [\"Content\", \"1\", \"0.09090909090909091\"], [\"Designer\", \"1\", \"0.09090909090909091\"], [\"ScriptExecutor\", \"1\", \"0.09090909090909091\"], [\"Filter\", \"1\", \"0.09090909090909091\"], [\"ConsoleConfig\", \"1\", \"0.09090909090909091\"], [\"ConsoleCommandLine\", \"1\", \"0.09090909090909091\"], [\"PropertyValidator\", \"1\", \"0.09090909090909091\"], [\"StaticPropertyHandler\", \"1\", \"0.09090909090909091\"], [\"ValueChangeListener\", \"1\", \"0.09090909090909091\"], [\"VarListCommand\", \"1\", \"0.09090909090909091\"], [\"TestPropertyAccess\", \"1\", \"0.09090909090909091\"], [\"FS\", \"1\", \"0.09090909090909091\"], [\"MLayout\", \"1\", \"0.09090909090909091\"], [\"StringUtils\", \"1\", \"0.09090909090909091\"], [\"AbstractListTableModel\", \"1\", \"0.09090909090909091\"], [\"MTextField\", \"1\", \"0.09090909090909091\"], [\"Query\", \"1\", \"0.09090909090909091\"], [\"QuotedPrintableCodec\", \"1\", \"0.09090909090909091\"], [\"BufferedFileOutput\", \"1\", \"0.09090909090909091\"], [\"Node\", \"1\", \"0.09090909090909091\"], [\"GroupTree\", \"1\", \"0.09090909090909091\"], [\"SummaryTree\", \"1\", \"0.09090909090909091\"], [\"Renderer\", \"1\", \"0.09090909090909091\"], [\"CollectionMap\", \"1\", \"0.09090909090909091\"]]"
            },
            "m5": {
                "content": "The `get_co_change_relationship` function has returned a list of entities along with their support count and confidence score. These entities have been modified together with `Vars.java` in the past. Now, to determine which of these entities are more likely to be impacted by changes in `Vars.java`, we should focus on those with higher **confidence** values, as they indicate stronger co-change relationships.\n\nHere are some observations:\n1. Entities like `MainWindow` (confidence: ~0.27), `Tabs`, `PropertiesPanel`, `SummaryData`, `Console`, `EnumProperty`, and `ChartModel` (all with confidence: ~0.18) show relatively higher confidence scores compared to others.\n2. This suggests that these files might be directly or indirectly dependent on `Vars.java`.\n\nTo proceed further, let's analyze one of these high-confidence entities to understand its relationship with `Vars.java`. We can start with `MainWindow.java`, as it has the highest confidence value. I'll retrieve its origin code for detailed inspection.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_87721b90e3ce44b2b430a8",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga;\\nimport static java.awt.Color.*;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.CardLayout;\\nimport java.awt.Color;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport javax.script.Bindings;\\nimport javax.script.ScriptContext;\\nimport javax.script.ScriptEngine;\\nimport javax.script.ScriptException;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.ToolTipManager;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport javax.swing.event.MenuEvent;\\nimport org.makagiga.commons.*;\\nimport org.makagiga.commons.script.Elements;\\nimport org.makagiga.commons.script.ScriptAction;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptUtils;\\nimport org.makagiga.commons.script.Scriptable;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.DesktopPanel;\\nimport org.makagiga.desktop.DesktopToolBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.EditorZoom.ZoomType;\\nimport org.makagiga.editors.PrintDialog;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.internetsearch.InternetSearch;\\nimport org.makagiga.plugins.Pluggable;\\nimport org.makagiga.plugins.PluginException;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.search.SearchBar;\\nimport org.makagiga.settings.AppSettings;\\nimport org.makagiga.settings.PluginSettings;\\nimport org.makagiga.sidebar.Sidebar;\\nimport org.makagiga.sidebar.SidebarTab;\\nimport org.makagiga.tabs.Tabs;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Bookmarks;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.LiveTutorial;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\npublic final class MainWindow extends MMainWindow\\nimplements\\n\\tScriptable,\\n\\tScriptExecutor.Initializer,\\n\\tThread.UncaughtExceptionHandler\\n{\\n\\tprotected static boolean firstRun;\\n\\tprivate boolean desktop;\\n\\tprivate Elements elements;\\n\\tprivate static final int DEFAULT_WIDTH = 800;\\n\\tprivate static final int DEFAULT_HEIGHT = 600;\\n\\tprivate static final int MIN_WIDTH = 320;\\n\\tprivate static final int MIN_HEIGHT = 200;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate MLabel editorStatusText;\\n\\tprivate static MainWindow _instance;\\n\\tprivate MMenu bookmarksMenu;\\n\\tprivate MMenu closeMenu;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate MPanel editorPanel;\\n\\tprivate MPanel mainPanel;\\n\\tprivate MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate MToolBar mainToolBar;\\n\\tprivate Object updateComponentsLock = new Object();\\n\\tprivate Object updateStateLock = new Object();\\n\\t\\t\\tprivate PreviousAction previousAction;\\n\\tprivate NextAction nextAction;\\n\\tprivate PrintAction printAction;\\n\\tprivate QuitAction quitAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate AppAction fullAction;\\n\\tprivate AppAction minimalAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ShowHideMainToolBarAction showHideMainToolBarAction;\\n\\tprivate ShowHideEditorToolBarAction showHideEditorToolBarAction;\\n\\tprivate ShowHideStatusBarAction showHideStatusBarAction;\\n\\tprivate ZoomAction zoomInAction;\\n\\tprivate ZoomAction zoomOutAction;\\n\\t\\tprivate InternetSearchAction internetSearchAction;\\n\\tprivate SearchAction searchAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\t\\tprivate LockAction lockAction;\\n\\tpublic Object getElementById(final String id) {\\t\\tif (elements == null) {\\n\\t\\t\\telements = new Elements();\\n\\t\\t\\t\\t\\t\\telements.put(\\\"bookmarks-menu\\\", bookmarksMenu);\\n\\t\\t\\telements.put(\\\"export-menu\\\", exportMenu);\\n\\t\\t\\telements.put(\\\"import-menu\\\", importMenu);\\n\\t\\t\\telements.put(\\\"tags-menu\\\", tagsMenu);\\n\\t\\t\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\t\\telements.put(\\\"main-tool-bar\\\", mainToolBar);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic void help() {\\n\\t\\tUI.fire(helpAction, getJMenuBar());\\n\\t}\\n\\tpublic void initEngine(final ScriptEngine engine) {\\n\\t\\tBindings bindings = engine.getBindings(ScriptContext.GLOBAL_SCOPE);\\n\\t\\tbindings.put(\\\"editor\\\", Editor.currentEditor.get());\\n\\t\\tbindings.put(\\\"window\\\", this);\\n\\t\\tbindings.put(\\\"sidebar\\\", Sidebar.getInstance());\\n\\t\\tbindings.put(\\\"tabs\\\", Tabs.getInstance());\\n\\t\\tbindings.put(\\\"tree\\\", Tree.getInstance());\\n\\t}\\n\\tpublic boolean isDesktop() {\\n\\t\\treturn DesktopPanel.getInstance().isVisible();\\n\\t}\\n\\tpublic void setDesktop(final boolean value) {\\n\\t\\tdesktop = value;\\n\\t\\tCardLayout.class.cast(mainPanel.getLayout()).show(\\n\\t\\t\\tmainPanel,\\n\\t\\t\\tdesktop ? \\\"Desktop\\\" : \\\"Editor\\\"\\n\\t\\t);\\n\\t\\ttoggleDesktopAction.setEnabled(Vars.desktopEnabled.get() && !Tabs.getInstance().isEmpty());\\n\\t\\tupdateState();\\n\\t\\tif (desktop)\\n\\t\\t\\tDesktopPanel.getInstance().focus();\\n\\t}\\n\\t@Override\\n\\tpublic void onDynamicInit(final Object object) {\\n\\t\\tif (object == null)\\n\\t\\t\\treturn;\\n\\t\\tsynchronized (object) {\\n\\t\\t\\tif (object instanceof MAbout) {\\n\\t\\t\\t\\tMAbout about = MAbout.class.cast(object);\\n\\t\\t\\t\\t\\t\\t\\t\\tabout.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", \\\"gmx\\\\u002enet\\\", \\\"lopoff\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tabout.addCredit(\\\"amaroK Team - Rediscover Your Music!\\\", \\\"Blend Algorithm\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Romain Guy\\\", \\\"Swing Special Effects\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"Scott Violet\\\", \\\"Ocean Gradient Customizer\\\", \\\"http:\\t\\t\\t\\tabout.addCredit(\\\"SourceForge.net\\\", \\\"Project Hosting\\\", \\\"http:\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseGestures) {\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\t\\tMouseGestures mouseGestures = MouseGestures.class.cast(object);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"D\\\", treePanel.getNewFileAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Dc\\\", _(\\\"Minimal View\\\"), minimalAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ds\\\", treePanel.getNewFolderAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\t\\t\\t\\tmouseGestures.registerGesture(\\\"L\\\", previousAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LD\\\", searchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LR\\\", new AppAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LU\\\", new AppAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tSidebar.goTo(SidebarTab.TREE);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"R\\\", nextAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"U\\\", internetSearchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Uc\\\", _(\\\"Full View\\\"), fullAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UR\\\", _(\\\"Find Text\\\"), findAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"URDL\\\", printAction);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tconfig.write(\\\"Tabs.current\\\", (metaInfo == null) ? \\\"\\\" : metaInfo.getFilePath());\\n\\t\\t\\t\\tconfig.write(\\\"StatusBar.enabled\\\", showHideStatusBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Editor.enabled\\\", showHideEditorToolBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Main.enabled\\\", showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tconfig.write(\\\"Window.width\\\", getWidth());\\n\\t\\tconfig.write(\\\"Window.height\\\", getHeight());\\n\\t\\tconfig.write(\\\"Window.x\\\", getX());\\n\\t\\tconfig.write(\\\"Window.y\\\", getY());\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\t\\t\\tDesktopPanel.getInstance().saveSession();\\n\\t\\tconfig.saveToFile();\\n\\t}\\n\\tpublic void setEditorStatusText(final String value) {\\n\\t\\tif (TK.isEmpty(value)) {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tString text = null;\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tif (editor.info.isNull())\\n\\t\\t\\t\\t\\ttext = editor.metaInfo.get().getFS().getName();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\ttext = editor.info.get().toString();\\n\\t\\t\\t}\\n\\t\\t\\teditorStatusText.setText(text);\\n\\t\\t\\teditorStatusText.setToolTipText(text);\\n\\t\\t\\teditorStatusText.setVisible(text != null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\teditorStatusText.setText(value);\\n\\t\\t\\teditorStatusText.setToolTipText(value);\\n\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t}\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tgetInstance().mainSplitPane.setSidebarVisible(true);\\n\\t}\\n\\tpublic void uncaughtException(Thread t, Throwable e) {\\n\\t\\tMLogger.exception(e);\\n\\t\\tif (!(e instanceof OutOfMemoryError) && Vars.debugShowConsoleOnException.get()) {\\n\\t\\t\\tMSplashScreen.close();\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void updateComponents(final boolean updateUI, final MetaInfo... metaInfo) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfo != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfo) {\\n\\t\\t\\t\\t\\t\\tif (i.isFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(tabs.findEditor(i));\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setReadOnly(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ((currentTab != null) && (lockAction != null) && (currentTab.metaInfo.get() == i))\\n\\t\\t\\t\\t\\t\\tlockAction.setMetaInfo(i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.metaInfo.get());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tif (updateUI)\\n\\t\\t\\t\\tTree.getInstance().updateUI();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t\\ttabs.repaint();\\n\\t\\t}\\n\\t}\\n\\tpublic static void updateMenu(final PluginManager.Table plugins, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateMenu(type, menu);\\n\\t\\t}\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateMenu(final PluginMenu plugin, final MMenu menu, final String type, final boolean addSeparator) {\\n\\t\\tint count = menu.getItemCount();\\n\\t\\tplugin.updateMenu(type, menu);\\n\\t\\tif (addSeparator && (menu.getItemCount() != count))\\n\\t\\t\\tmenu.addSeparator();\\n\\t}\\n\\tpublic static void updateToolBar(final PluginManager.Table plugins, final MToolBar toolBar, final String type, final boolean addSeparator) {\\n\\t\\tint count = toolBar.getComponentCount();\\n\\t\\tPluggable p;\\n\\t\\tfor (PluginInfo i : plugins) {\\n\\t\\t\\tp = i.getPluggable();\\n\\t\\t\\tif (p instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(p).updateToolBar(type, toolBar);\\n\\t\\t}\\n\\t\\tif (addSeparator && (toolBar.getComponentCount() != count))\\n\\t\\t\\ttoolBar.addSeparator();\\n\\t}\\n\\tpublic void alert(final String text) {\\n\\t\\tMMessage.info(this, text);\\n\\t}\\n\\tpublic boolean confirm(final String text) {\\n\\t\\treturn MMessage.confirm(this, text);\\n\\t}\\n\\tpublic String prompt(final String text, final String defaultText) {\\n\\t\\treturn MMessage.input(this, defaultText, text, AppInfo.fullName.get());\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\t_instance = this;\\n\\t\\tThread.currentThread().setDefaultUncaughtExceptionHandler(this);\\n\\t\\tSize.setMinimum(this, DEFAULT_WIDTH / 2, DEFAULT_HEIGHT / 2);\\n\\t\\tif (!MSplashScreen.isAvailable())\\n\\t\\t\\tMSplashScreen.setImage(new ImageIcon(\\\"splash.png\\\").getImage());\\n\\t\\tMSplashScreen.setTextShadowColor(BLACK);\\n\\t\\tMSplashScreen.setTextColor(WHITE);\\n\\t\\tMSplashScreen.setVerticalTextPosition(UI.TOP);\\n\\t\\tMSplashScreen.setText(UI.RIGHT_POINTER);\\n\\t\\tScriptExecutor.setInitializer(this); \\t\\tinitPlugins();\\n\\t\\t\\t\\tMSplashScreen.setTextColor(new Color(0x91fefc));\\n\\t\\tMSplashScreen.setText(UI.RIGHT_POINTER + \\\" \\\" + UI.RIGHT_POINTER);\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table infos = PluginManager.getInfos();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(infos);\\n\\t\\tinitStatusBar();\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane(MSplitPane.HORIZONTAL_SPLIT);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\teditorPanel = MPanel.createBorderPanel();\\n\\t\\teditorPanel.addCenter(tabs);\\n\\t\\teditorPanel.setVisible(false); \\t\\t\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\tmainToolBar = new MToolBar();\\n\\t\\tmainToolBar.add(treePanel.getNewFileAction());\\n\\t\\tmainToolBar.add(treePanel.getQuickPasteAction());\\n\\t\\tmainToolBar.add(treePanel.getNewFolderAction());\\n\\t\\ttreePanel.setLabelMenuButton(mainToolBar.add(treePanel.getLabelMenuAction()));\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(previousAction);\\n\\t\\tmainToolBar.add(nextAction, MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tmainToolBar.add(internetSearchAction);\\n\\t\\tmainToolBar.add(toggleDesktopAction);\\n\\t\\tif (Vars.desktopEnabled.get()) {\\n\\t\\t\\tmainToolBar.addSeparator();\\n\\t\\t\\tDesktopToolBar.getInstance().updateToolBar(mainToolBar);\\n\\t\\t}\\n\\t\\tmainToolBar.addSeparator();\\n\\t\\tupdateToolBar(infos, mainToolBar, PluginMenu.MAIN_TOOL_BAR, true);\\n\\t\\tmainToolBar.add(LocationBar.getInstance());\\n\\t\\taddNorth(mainToolBar);\\n\\t\\t\\t\\tmainPanel = MPanel.createCustomPanel(new CardLayout());\\n\\t\\tmainPanel.add(editorPanel, \\\"Editor\\\");\\n\\t\\tmainPanel.add(DesktopPanel.getInstance(), \\\"Desktop\\\");\\n\\t\\tmainSplitPane.setRightComponent(mainPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\tMSplashScreen.setTextColor(YELLOW);\\n\\t\\tMSplashScreen.setText(UI.RIGHT_POINTER + \\\" \\\" + UI.RIGHT_POINTER + \\\" \\\" + UI.RIGHT_POINTER);\\n\\t\\trestoreSession();\\n\\t\\t\\t\\tFile userScriptFile = new File(FS.makePath(FS.makeConfigPath(\\\"scripts\\\"), \\\"user.js\\\"));\\n\\t\\tScriptException userScriptError = null;\\n\\t\\tif (userScriptFile.exists()) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tScriptExecutor.execute(userScriptFile);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FileNotFoundException exception) { } \\t\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\t\\tuserScriptError = exception;\\n\\t\\t\\t}\\n\\t\\t\\tcatch (Exception exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tsetVisible(true);\\n\\t\\tMSplashScreen.close();\\n\\t\\tif (tabs.isEmpty())\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\telse\\n\\t\\t\\t\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(Config.getDefault().read(\\\"Tabs.current\\\", null)));\\n\\t\\tMStatusBar.ready();\\n\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tsetDesktop(tabs.isEmpty());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tinitAutosave();\\n\\t\\tsetMouseGestures(new MouseGestures());\\n\\t\\tMSystemTray.createInBackground();\\n\\t\\t\\t\\tif (Args.isSet(\\\"time-demo\\\")) {\\n\\t\\t\\tMLogger.info(\\\"makagiga\\\", \\\"END TIME DEMO\\\");\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t\\tInternetSearch.installGlobalMenu();\\n\\t\\tMAuthenticator.init();\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptUtils.showError(userScriptError);\\n\\t\\t\\t\\tfor (PluginInfo i : infos) {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\ti.getPluggable().onPostInit();\\n\\t\\t\\t}\\n\\t\\t\\tcatch (PluginException exception) {\\n\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void applySettings() {\\n\\t\\tToolTipManager toolTipManager = ToolTipManager.sharedInstance();\\n\\t\\ttoolTipManager.setDismissDelay(8000); \\t\\ttoolTipManager.setEnabled(UI.toolTips.get());\\n\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\tpreviousAction = new PreviousAction();\\n\\t\\tnextAction = new NextAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\tquitAction = new QuitAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\tshowHideMainToolBarAction = new ShowHideMainToolBarAction();\\n\\t\\tshowHideEditorToolBarAction = new ShowHideEditorToolBarAction();\\n\\t\\tshowHideStatusBarAction = new ShowHideStatusBarAction();\\n\\t\\t\\t\\tinternetSearchAction = new InternetSearchAction();\\n\\t\\tsearchAction = new SearchAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t}\\n\\tprivate void initAutosave() {\\n\\t\\tnew MTimer(MTimer.Format.MINUTES, 10) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onTimeout() {\\n\\t\\t\\t\\tif (!Vars.autosaveEnabled.get())\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tstop(); \\t\\t\\t\\t\\tString message = _(\\\"Autosave...\\\");\\n\\t\\t\\t\\t\\tMStatusBar.setInfo(message);\\n\\t\\t\\t\\t\\tMLogger.info(\\\"makagiga\\\", message);\\n\\t\\t\\t\\t\\tsaveSession(Tabs.QUIET_SAVE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfinally {\\n\\t\\t\\t\\t\\trestart();\\n\\t\\t\\t\\t\\tMStatusBar.ready();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}.start();\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\texportMenu.setSplitMenu(true);\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && !editor.info.isNull()) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.metaInfo));\\n\\t\\t\\t\\t\\t\\tEditorPlugin.FileType[] types = EditorPlugin.fromInfo(editor.info.get()).exportTypes.get();\\n\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t}\\n\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image\\\"), \\\"image/png\\\", true)));\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Select an item you want to export\\\"));\\n\\t}\\n\\tprivate void initImportMenu() {\\n\\t\\timportMenu.removeAll();\\n\\t\\timportMenu.setSplitMenu(true);\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder();\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif ((currentFS instanceof TreeFS) && currentFolder.canModify()) {\\n\\t\\t\\timportMenu.addTitle(_(\\\"Import To \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\tEditorPlugin.FileType[] types;\\n\\t\\t\\tfor (PluginInfo i : PluginManager.getInfos(Pluggable.EDITOR)) {\\n\\t\\t\\t\\ttypes = EditorPlugin.fromInfo(i).importTypes.get();\\n\\t\\t\\t\\tif (types.length > 0) {\\n\\t\\t\\t\\t\\tif (types.length == 1) {\\n\\t\\t\\t\\t\\t\\tAppAction importAction = new ImportExport.ImportAction(types[0]);\\n\\t\\t\\t\\t\\t\\timportAction.setIcon(i.getIcon());\\n\\t\\t\\t\\t\\t\\timportMenu.add(importAction);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tMMenu menu = new MMenu(i.toString(), i.getIcon());\\n\\t\\t\\t\\t\\t\\tfor (EditorPlugin.FileType t : types)\\n\\t\\t\\t\\t\\t\\t\\tmenu.add(new ImportExport.ImportAction(t));\\n\\t\\t\\t\\t\\t\\timportMenu.add(menu);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.IMPORT_MENU, importMenu);\\n\\t\\tif (importMenu.isEmpty())\\n\\t\\t\\timportMenu.addTitle(_(\\\"No folder selected or import is not supported\\\"));\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tmenuBar.getSelectionModel().addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (LiveTutorial.isActive())\\n\\t\\t\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tMMenu fileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tfileMenu.setSplitMenu(true);\\n\\t\\tMMenu treeMenu = new MMenu(_(\\\"Tree\\\"), \\\"ui/detailedview\\\");\\n\\t\\ttreeMenu.setToolTipText(_(\\\"This menu allows you to modify all the files and folders.\\\"));\\n\\t\\ttreeMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuDeselected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu m = (MMenu)e.getSource();\\n\\t\\t\\t\\tif (!m.isEmpty())\\n\\t\\t\\t\\t\\tm.removeAll();\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu m = (MMenu)e.getSource();\\n\\t\\t\\t\\tif (m.isEmpty())\\n\\t\\t\\t\\t\\tTreePanel.getInstance().createTreeMenu(m);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(treeMenu);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tfileMenu.add(previousAction);\\n\\t\\tfileMenu.add(nextAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new MMenu(_(\\\"Import\\\"));\\n\\t\\timportMenu.setToolTipText(_(\\\"Imports a selected files to the Tree.\\\"));\\n\\t\\timportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitImportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active tab.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tcloseMenu = tabs.createCloseMenu();\\n\\t\\tfileMenu.add(closeMenu);\\n\\t\\tfileMenu.add(quitAction);\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\t\\t\\tMMenu viewModeMenu = new MMenu(_(\\\"View Mode\\\"));\\n\\t\\tfullAction =  new AppAction(_(\\\"Full\\\"), null, VK_1, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(true);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tfullAction.setHTMLHelp(_(\\\"Show sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(fullAction);\\n\\t\\tminimalAction = new AppAction(_(\\\"Minimal\\\"), null, VK_2, CTRL_MASK) {\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\tMainWindow.this.setViewMode(false);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tminimalAction.setHTMLHelp(_(\\\"Hide sidebar, all tool bars and status bar.\\\"));\\n\\t\\tviewModeMenu.add(minimalAction);\\n\\t\\tviewMenu.add(viewModeMenu);\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tviewMenu.add(showHideSidebarAction);\\n\\t\\tMMenuItem menuItem = viewMenu.add(toggleDesktopAction);\\n\\t\\tviewMenu.add(toggleDesignerAction);\\n\\t\\tviewMenu.addSeparator();\\n\\t\\tupdateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, true);\\n\\t\\tviewMenu.addCheckBox(showHideMainToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideEditorToolBarAction);\\n\\t\\tviewMenu.addCheckBox(showHideStatusBarAction);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new MMenu(_(\\\"&Bookmarks\\\"), FS.getIcon(\\\"ui/bookmark\\\", FS.SMALL_ICON_SIZE));\\n\\t\\tbookmarksMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tBookmarks.updateMenu(bookmarksMenu);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\tMMenu toolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\ttoolsMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu menu = (MMenu)e.getSource();\\n\\t\\t\\t\\tmenu.setSplitMenu(true);\\n\\t\\t\\t\\tmenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\tmenu.add(internetSearchAction);\\n\\t\\t\\t\\tmenu.add(searchAction);\\n\\t\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\t\\tupdateMenu(plugins, menu, PluginMenu.TOOLS_MENU, true);\\n\\t\\t\\t\\tmenu.add(new ConsoleAction());\\n\\t\\t\\t\\tmenu.addTitle(_(\\\"Configure\\\"));\\n\\t\\t\\t\\tmenu.add(new ConfigureAction());\\n\\t\\t\\t\\tmenu.add(new ConfigurePluginsAction());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\tMMenu helpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void menuSelected(final MenuEvent e) {\\n\\t\\t\\t\\tMMenu menu = (MMenu)e.getSource();\\n\\t\\t\\t\\tmenu.add(helpAction);\\n\\t\\t\\t\\tmenu.add(new LiveTutorialAction());\\n\\t\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\t\\tupdateMenu(plugins, menu, PluginMenu.HELP_MENU, true);\\n\\t\\t\\t\\tmenu.add(new AboutAction());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tSize.setPreferredHeight(menuBar, Math.min(menuItem.getPreferredSize().height, 32));\\n\\t\\tsetJMenuBar(menuBar);\\n\\t\\t\\t\\tUI.connect(menuBar, UI.WHEN_IN_FOCUSED_WINDOW, new QuickSaveAction());\\n\\t}\\n\\tprivate void initPlugins() {\\n\\t\\tfinal PluginManager plugins = PluginManager.getInstance();\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/image\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/notepad\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/text\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/editors/todo\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/feeds\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/search\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/fs/trash\\\");\\n\\t\\t\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/backup\\\");\\n\\t\\tplugins.registerInternal(\\\"org/makagiga/tools/update\\\");\\n\\t\\tplugins.registerExternal();\\n\\t}\\n\\tprivate void initStatusBar() {\\n\\t\\tfinal MStatusBar statusBar = getStatusBar();\\n\\t\\teditorStatusText = new MLabel();\\n\\t\\teditorStatusText.setBorder(BorderFactory.createLoweredBevelBorder());\\n\\t\\tstatusBar.addStretch();\\n\\t\\tstatusBar.add(editorStatusText);\\n\\t\\tstatusBar.add(BackgroundTaskManager.getInstance());\\n\\t\\tstatusBar.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\tif (e.getPropertyName().equals(MStatusBar.CLOSED_PROPERTY))\\n\\t\\t\\t\\t\\tshowHideStatusBarAction.setSelected(!(Boolean)e.getNewValue());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\tprivate void navigate(final boolean next) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> currentEditor = tabs.getSelectedTab();\\n\\t\\tif (currentEditor == null)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo currentFile = currentEditor.metaInfo.get();\\n\\t\\tMetaInfo[] files = currentFile.getParentFolder().getSubMetaInfos(true);\\n\\t\\tif (files.length < 2)\\n\\t\\t\\treturn;\\n\\t\\tMetaInfo newFile = null;\\n\\t\\t\\t\\tif (next) {\\n\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\tnewFile = files[i];\\n\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t}\\n\\t\\t\\t\\tif (files[i] == currentFile)\\n\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (newFile != null) {\\n\\t\\t\\tint index = tabs.findEditor(currentFile);\\n\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(index, Tabs.REMOVE_TAB | Tabs.SAVE_TO_FILE);\\n\\t\\t\\t\\t\\t\\tTree.getInstance().open(newFile);\\n\\t\\t}\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tboolean safeMode = Args.isSet(\\\"safe-mode\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\tapplySettings();\\n\\t\\tsetSize(\\n\\t\\t\\tMath.max(MIN_WIDTH, config.readInt(\\\"Window.width\\\", DEFAULT_WIDTH)),\\n\\t\\t\\tMath.max(MIN_HEIGHT, config.readInt(\\\"Window.height\\\", DEFAULT_HEIGHT))\\n\\t\\t);\\n\\t\\tsetLocationByPlatform(true); \\t\\tif (firstRun) {\\n\\t\\t\\tsetLocationRelativeTo(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tsetLocation(\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.x\\\", 0),\\n\\t\\t\\t\\tconfig.readInt(\\\"Window.y\\\", 0)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", -1);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tMStatusBar.getGlobal().setClosed(!config.read(\\\"StatusBar.enabled\\\", false));\\n\\t\\tshowHideEditorToolBarAction.setSelected(config.read(\\\"ToolBar.Editor.enabled\\\", true));\\n\\t\\tshowHideMainToolBarAction.setSelected(config.read(\\\"ToolBar.Main.enabled\\\", true));\\n\\t\\tmainToolBar.setVisible(showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tif (!safeMode)\\n\\t\\t\\tTree.getInstance().restoreAll();\\n\\t\\t\\t\\tDesktopPanel.getInstance().restoreSession();\\n\\t}\\n\\tprivate void setViewMode(final boolean full) {\\n\\t\\tmainSplitPane.setSidebarVisible(full);\\n\\t\\t\\t\\tshowHideMainToolBarAction.setSelected(full);\\n\\t\\tmainToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideEditorToolBarAction.setSelected(full);\\n\\t\\tif (editorToolBar != null)\\n\\t\\t\\teditorToolBar.setVisible(full);\\n\\t\\t\\t\\tshowHideStatusBarAction.setSelected(full);\\n\\t\\tMStatusBar.getGlobal().setVisible(full);\\n\\t}\\n\\tprivate void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tDesigner designer = null;\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\teditMenu.removeAll();\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\t\\t\\t\\tAppAction closeAction = tabs.getCloseAction();\\n\\t\\t\\tcloseMenu.setEnabled(closeAction.isEnabled());\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\tif ((editor != null) && !isDesktop()) {\\n\\t\\t\\t\\t\\t\\t\\t\\tboolean hasNext = false;\\n\\t\\t\\t\\tboolean hasPrevious = false;\\n\\t\\t\\t\\tMetaInfo parentFolder = metaInfo.getParentFolder();\\n\\t\\t\\t\\tif (parentFolder != null) {\\n\\t\\t\\t\\t\\tMetaInfo[] files = parentFolder.getSubMetaInfos(true);\\n\\t\\t\\t\\t\\tif (files.length > 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean afterCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = 0; i < files.length; i++) {\\n\\t\\t\\t\\t\\t\\t\\tif (afterCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasNext = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tafterCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboolean beforeCurrent = false;\\n\\t\\t\\t\\t\\t\\tfor (int i = files.length - 1; i >= 0; --i) {\\n\\t\\t\\t\\t\\t\\t\\tif (beforeCurrent && files[i].isAnyFile()) {\\n\\t\\t\\t\\t\\t\\t\\t\\thasPrevious = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (files[i] == metaInfo)\\n\\t\\t\\t\\t\\t\\t\\t\\tbeforeCurrent = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tpreviousAction.setEnabled(hasPrevious);\\n\\t\\t\\t\\tnextAction.setEnabled(hasNext);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance())\\n\\t\\t\\t\\t\\tDesktopToolBar.getInstance().setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tviewMenu.addSeparator();\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomAction(EditorZoom.ZoomType.IN);\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomAction(EditorZoom.ZoomType.OUT);\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.VIEW_MENU_EDITOR, viewMenu);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tdesigner = null;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\teditorPanel.addNorth(editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\t\\tprintAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditorToolBar.add(printAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomInAction);\\n\\t\\t\\t\\t\\teditorToolBar.add(zoomOutAction);\\n\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (lockAction == null)\\n\\t\\t\\t\\t\\tlockAction = new LockAction();\\n\\t\\t\\t\\tlockAction.setMetaInfo(metaInfo);\\n\\t\\t\\t\\teditorToolBar.add(lockAction);\\n\\t\\t\\t\\teditorToolBar.setVisible(showHideEditorToolBarAction.isSelected());\\n\\t\\t\\t\\teditorToolBar.revalidate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t\\t\\tsetEditorStatusText(editor.getStatusText());\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(true);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tpreviousAction.setEnabled(false);\\n\\t\\t\\t\\tnextAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (DesktopToolBar.isInstance()) {\\n\\t\\t\\t\\t\\tfinal DesktopToolBar desktopToolBar = DesktopToolBar.getInstance();\\n\\t\\t\\t\\t\\tdesktopToolBar.updateComponents();\\n\\t\\t\\t\\t\\tdesktopToolBar.setVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tLocationBar.getInstance().setVisible(false);\\n\\t\\t\\t\\teditorStatusText.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tsetEditorStatusText(null);\\n\\t\\t\\t}\\n\\t\\t\\teditMenu.setEnabled(!editMenu.isEmpty());\\n\\t\\t\\t\\t\\t\\tif (EditorQuickFind.isInstance() && editorPanel.isAncestorOf(EditorQuickFind.getInstance()))\\n\\t\\t\\t\\teditorPanel.remove(EditorQuickFind.getInstance());\\n\\t\\t\\t\\t\\t\\tif (designer == null) {\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), false);\\n\\t\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\t\\tsidebar.goTo(SidebarTab.TREE, false);\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsidebar.setComponentAt(SidebarTab.DESIGNER.ordinal(), designer);\\n\\t\\t\\t\\tsidebar.setEnabledAt(SidebarTab.DESIGNER.ordinal(), true);\\n\\t\\t\\t\\tdesigner.repaint(); \\t\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\t\\tdesigner.setReadOnly(!editor.metaInfo.get().canModify());\\n\\t\\t\\t\\ttoggleDesignerAction.setEnabled(true);\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tsetTitle(\\n\\t\\t\\t(metaInfo == null) || isDesktop()\\n\\t\\t\\t? AppInfo.fullName.get()\\n\\t\\t\\t: (metaInfo.getNicePath() + \\\" - \\\" + AppInfo.fullName)\\n\\t\\t);\\n\\t}\\n\\tprivate static final class AboutAction extends ScriptAction {\\n\\t\\tAboutAction() {\\n\\t\\t\\tsuper(\\\"about\\\", _(\\\"About {0}\\\", AppInfo.fullName), \\\"makagiga\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the information about this application.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class ConfigureAction extends AppAction {\\n\\t\\tpublic ConfigureAction() {\\n\\t\\t\\tsuper(_(\\\"Options\\\"), \\\"ui/configure\\\");\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tAppSettings dialog = new AppSettings(MainWindow.this);\\n\\t\\t\\tif (dialog.exec()) {\\n\\t\\t\\t\\tapplySettings();\\n\\t\\t\\t\\trepaint();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigurePluginsAction extends AppAction {\\n\\t\\tpublic ConfigurePluginsAction() {\\n\\t\\t\\tsuper(_(\\\"Plugins\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Configure, add or remove plugins.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnew PluginSettings(MainWindow.getInstance()).exec();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConsoleAction extends AppAction {\\n\\t\\tConsoleAction() {\\n\\t\\t\\tsuper(_(\\\"Console\\\"), null, VK_F12, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the <b>Console</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tConsole.getInstance(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindAction extends AppAction {\\n\\t\\tFindAction() {\\n\\t\\t\\tsuper(_(\\\"Find...\\\"), \\\"find\\\", VK_F, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class FindNextAction extends AppAction {\\n\\t\\tFindNextAction() {\\n\\t\\t\\tsuper(_(\\\"Find Next...\\\"), null, getFindNextKeyStroke());\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tfinal EditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tif (!editorPanel.isAncestorOf(editorQuickFind)) {\\n\\t\\t\\t\\teditorPanel.addSouth(editorQuickFind);\\n\\t\\t\\t\\teditorPanel.revalidate();\\n\\t\\t\\t}\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends ScriptAction {\\n\\t\\tHelpAction() {\\n\\t\\t\\tsuper(\\\"help\\\", _(\\\"Help\\\"), \\\"ui/question\\\", VK_F1);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Displays the <b>Help</b> in the <b>Browser</b>.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class InternetSearchAction extends ScriptAction {\\n\\t\\tpublic InternetSearchAction() {\\n\\t\\t\\tsuper(\\\"internet-search\\\", _(\\\"Internet Search...\\\"), \\\"network\\\", VK_K, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Internet search.<br><b>Tip:</b> Select text (or item) in the active editor<br>to search for it.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LiveTutorialAction extends AppAction {\\n\\t\\tpublic LiveTutorialAction() {\\n\\t\\t\\tsuper(_(\\\"Live Tutorial\\\"), null, VK_F1, SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Live Tutorial</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tLiveTutorial.toggle();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class LockAction extends AppAction {\\n\\t\\tprivate MetaInfo metaInfo;\\n\\t\\tpublic LockAction() {\\n\\t\\t\\tsetName(UI.makeHTML(_(\\\"Click to lock/unlock the active tab.<br>Locked file cannot be modified.\\\")));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmetaInfo.setLocked(!isSelected());\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t\\tgetInstance().updateComponents(true, metaInfo);\\n\\t\\t}\\n\\t\\tpublic void setMetaInfo(final MetaInfo value) {\\n\\t\\t\\tmetaInfo = value;\\n\\t\\t\\tupdateState(!metaInfo.canModify());\\n\\t\\t}\\n\\t\\tprivate void updateState(final boolean locked) {\\n\\t\\t\\tsetEnabled(!metaInfo.isVirtualFile() && metaInfo.isWriteable());\\n\\t\\t\\tsetIcon(locked ? \\\"ui/locked\\\" : \\\"ui/unlocked\\\");\\n\\t\\t\\tsetSelected(locked);\\n\\t\\t}\\n\\t}\\n\\tprivate final class NextAction extends AppAction {\\n\\t\\tNextAction() {\\n\\t\\t\\tsuper(_(\\\"Next\\\"), \\\"ui/right\\\", VK_RIGHT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the next file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(true);\\n\\t\\t}\\n\\t}\\n\\tprivate final class PreviousAction extends AppAction {\\n\\t\\tPreviousAction() {\\n\\t\\t\\tsuper(_(\\\"Previous\\\"), \\\"ui/left\\\", VK_LEFT, ALT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Opens the previous file in the current folder.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tnavigate(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PrintAction extends AppAction {\\n\\t\\tpublic PrintAction() {\\n\\t\\t\\tsuper(_(\\\"Print...\\\"), \\\"ui/print\\\", VK_P, CTRL_MASK);\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active tab.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPrintDialog.exec(Tabs.getInstance().getSelectedTab());\\n\\t\\t}\\n\\t}\\n\\tprivate final class QuickSaveAction extends AppAction {\\n\\t\\tQuickSaveAction() {\\n\\t\\t\\tsuper(\\\"Quick Save\\\", null, VK_S, CTRL_MASK);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuitAction extends AppAction {\\n\\t\\tQuitAction() {\\n\\t\\t\\tsuper(_(\\\"Quit\\\"), \\\"ui/quit\\\", VK_Q, CTRL_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tApplication.quit();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class SearchAction extends AppAction {\\n\\t\\tSearchAction() {\\n\\t\\t\\tsuper(_(\\\"Find Files...\\\"), null, VK_F7);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for files.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tSearchBar.setQuery(null);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideEditorToolBarAction extends AppAction {\\n\\t\\tShowHideEditorToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Editor Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>editor tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (editorToolBar != null)\\n\\t\\t\\t\\teditorToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideMainToolBarAction extends AppAction {\\n\\t\\tShowHideMainToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Main Tool Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>main tool bar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ShowHideSidebarAction extends AppAction {\\n\\t\\tShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Sidebar\\\"), null, VK_F9);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Sidebar</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideStatusBarAction extends AppAction {\\n\\t\\tShowHideStatusBarAction() {\\n\\t\\t\\tsuper(_(\\\"Status Bar\\\"));\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>status bar</b>.\\\"));\\n\\t\\t\\tsetSelected(true);\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMStatusBar.getGlobal().setClosed(!isSelected());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends AppAction {\\n\\t\\tpublic ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"designer\\\", VK_F4);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Designer</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tshowSidebar();\\n\\t\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\tsidebar.selectLastTab();\\n\\t\\t\\telse\\n\\t\\t\\t\\tSidebar.goTo(SidebarTab.DESIGNER);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ToggleDesktopAction extends AppAction {\\n\\t\\tpublic ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Desktop\\\"), \\\"desktop\\\", VK_F5);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Toggles the <b>Desktop</b>.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetDesktop(!isDesktop());\\n\\t\\t}\\n\\t}\\n\\tprivate final class ZoomAction extends AppAction {\\n\\t\\tprivate ZoomType type;\\n\\t\\tpublic ZoomAction(final ZoomType type) {\\n\\t\\t\\tsuper();\\n\\t\\t\\tthis.type = type;\\n\\t\\t\\tswitch (type) {\\n\\t\\t\\t\\tcase IN:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_EQUALS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/plus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom In\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase OUT:\\n\\t\\t\\t\\t\\tsetAcceleratorKey(VK_MINUS, CTRL_MASK);\\n\\t\\t\\t\\t\\tsetIcon(\\\"ui/minus\\\");\\n\\t\\t\\t\\t\\tsetName(_(\\\"Zoom Out\\\"));\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\t\\tMainWindow.this.zoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\tMainWindow.this.zoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m7": {
                "content": "The code of `MainWindow.java` has been successfully retrieved. From the analysis of the co-change relationship and the structure of `MainWindow.java`, we can observe the following:\n\n1. **Usage of `Vars.java`**: \n   - The `Vars.java` file is likely used in `MainWindow.java` for managing application-wide variables or configurations, as indicated by its interactions with UI components and settings (e.g., `Vars.desktopEnabled.get()` is used to control the desktop panel visibility).\n   \n2. **Interaction with UI Components**:\n   - `MainWindow` manages several UI-related actions and panels (`mainToolBar`, `editorToolBar`, `sidebar`, etc.), and it interacts with various entities such as `Tabs`, `Sidebar`, `Editor`, and `MetaInfo`.\n   - It also references other files like `Config`, `Tree`, and `DesktopPanel`, which could be affected if `Vars.java` modifies any shared configuration.\n\n3. **High Confidence Co-Change Entities**:\n   - Based on the co-change data, files like `Tabs`, `PropertiesPanel`, `SummaryData`, `Console`, `EnumProperty`, and `ChartModel` are more likely to have a direct impact from changes in `Vars.java`.\n\nTo further analyze potential impacts, I suggest examining the `get_call_graph` for `Vars.java`. This will reveal which functions or methods in `Vars.java` are being invoked by other entities, helping us identify specific dependencies.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_c931bb71bc8a4723b600d2",
                        "function": {
                            "arguments": "{\"entity\": \"Vars.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"\"]"
            },
            "m9": {
                "content": "It seems that the `get_call_graph` function returned an empty result for `Vars.java`. This could indicate one of the following:\n\n1. **No direct method calls** from other entities to `Vars.java`, or\n2. A potential issue with extracting call information, possibly due to how `Vars.java` is structured or used (e.g., if it's a static utility/configuration class).\n\nSince `Vars.java` appears to be a configuration-style class accessed through properties rather than direct method calls, we should analyze its coupling dependencies with high-confidence co-change entities such as `MainWindow`, `Tabs`, and `PropertiesPanel`.\n\nNext, I will examine the coupling dependencies between `Vars.java` and `Tabs.java` to better understand their relationship.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_304626aa3f6748909962cb",
                        "function": {
                            "arguments": "{\"entity1\": \"Vars.java\", \"entity2\": \"Tabs.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m11": {
                "content": "The result indicates that there are **no direct coupling dependencies** between `Vars.java` and `Tabs.java`. This suggests that the relationship might be **indirect**, potentially mediated through other entities like `MainWindow.java`, which we know references both `Vars.java` and `Tabs.java`.\n\nTo further investigate, let\u2019s examine whether there is a conceptual or semantic coupling between these files by analyzing their code similarity using the `get_conceptual_coupling` function.\n\nI will now call `get_conceptual_coupling` for `Vars.java` and `Tabs.java` to determine if there's any semantic connection.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_d009770de7fd46538616d5",
                        "function": {
                            "arguments": "{\"entity1\": \"Vars.java\", \"entity2\": \"Tabs.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.0\""
            },
            "m13": {
                "content": "The `get_conceptual_coupling` function returned a similarity score of `0.0`, indicating **no significant semantic or conceptual overlap** between `Vars.java` and `Tabs.java`.\n\nGiven this, we can summarize the findings so far:\n\n### Analysis Summary:\n1. **Co-Change Relationships**:\n   - `Vars.java` has a history of being modified alongside several entities, with `MainWindow.java` showing the highest confidence score.\n   - Other entities like `Tabs.java`, `PropertiesPanel.java`, `Console.java`, etc., also show moderate historical co-change relationships.\n\n2. **Direct Dependencies**:\n   - No direct coupling dependencies were found between `Vars.java` and `Tabs.java`.\n   - The call graph for `Vars.java` was empty, suggesting it may not expose methods that are directly invoked elsewhere, possibly acting as a configuration/property holder (e.g., using static fields).\n\n3. **Semantic Similarity**:\n   - There is no conceptual coupling between `Vars.java` and `Tabs.java`, reinforcing that their relationship\u2014if any\u2014is indirect.\n\n### Next Steps:\nSince `MainWindow.java` shows the strongest co-change relationship with `Vars.java`, and based on its code, it clearly references `Vars.java` (e.g., `Vars.desktopEnabled.get()`), the most relevant entity to synchronize with changes in `Vars.java` would be:\n\n> \u2705 **`MainWindow.java`**\n\nTo confirm this further, we could examine if other co-change candidates like `PropertiesPanel.java` or `Console.java` have stronger ties to `Vars.java`. However, given the available data and analysis, **`MainWindow.java` should be prioritized** as the entity most likely impacted by changes in `Vars.java`.\n\nWould you like to proceed with analyzing another candidate, or finalize this conclusion?",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m14": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m15": {
                "content": "Title: Diagnosis of starting entity `Vars.java`\n\nChange set: [MainWindow, PropertiesPanel, SummaryData, Console, EnumProperty, ChartModel, Tabs, NewFolderDialog, MetaInfo, ImageEditorCore, SummaryPanel, Config, FS, AbstractFS, MLayout, StringUtils, GroupTree, SummaryTree, Renderer, CollectionMap, Query, BufferedFileOutput, QuotedPrintableCodec, Node, MTextField, AbstractListTableModel, Designer, Content, ScriptExecutor, Filter, ConsoleConfig, ConsoleCommandLine, PropertyValidator, StaticPropertyHandler, ValueChangeListener, VarListCommand, TestPropertyAccess, FSHelper, Action, Main, TreeSettings, ItemRenderer, ToggleDesktopAction]\n\nDetails:\n- **MainWindow**: Directly references `Vars.java` (e.g., `Vars.desktopEnabled.get()`), indicating a strong functional dependency.\n- **PropertiesPanel**: Frequently co-changed with `Vars.java`, likely due to shared configuration or UI property management.\n- **SummaryData**: High historical co-change confidence, possibly tied to data summarization based on global variables.\n- **Console**: Co-changed often; may use global flags or settings from `Vars.java` for visibility or behavior control.\n- **EnumProperty**: Likely shares property handling logic governed by global configurations in `Vars.java`.\n- **ChartModel**: Possibly affected by visual or behavioral settings managed in `Vars.java`.\n- **Tabs**: Frequently used in conjunction with `MainWindow`; co-change history suggests indirect usage via UI state management.\n- **NewFolderDialog**: May rely on global UI or path-related settings from `Vars.java`.\n- **MetaInfo**: Could interact with `Vars.java` for metadata-related configuration or persistence.\n- **ImageEditorCore**: Likely affected by editor-wide settings or preferences stored in `Vars.java`.\n- **SummaryPanel**: Shares co-change pattern and may depend on global summary settings.\n- **Config**: Manages application-level configuration, possibly synchronized with `Vars.java` values.\n- **FS**, **AbstractFS**: May share filesystem-related flags or behaviors controlled by `Vars.java`.\n- **MLayout**, **StringUtils**, **GroupTree**, **SummaryTree**, **Renderer**, **CollectionMap**, **Query**, **BufferedFileOutput**, **QuotedPrintableCodec**, **Node**, **MTextField**, **AbstractListTableModel**: These entities show moderate co-change relationships and could be indirectly affected through shared utility functions, layout policies, or string/IO handling governed by `Vars.java`.\n- **Designer**, **Content**, **ScriptExecutor**, **Filter**, **ConsoleConfig**, **ConsoleCommandLine**, **PropertyValidator**, **StaticPropertyHandler**, **ValueChangeListener**, **VarListCommand**, **TestPropertyAccess**, **FSHelper**, **Action**, **Main**, **TreeSettings**, **ItemRenderer**, **ToggleDesktopAction**: These are included based on co-change frequency and potential indirect dependencies through event handling, scripting, or plugin systems that reference global variables.\n\nAll entities listed above have been historically co-changed with `Vars.java` and are retained based on their support count and confidence scores, ensuring high recall.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}