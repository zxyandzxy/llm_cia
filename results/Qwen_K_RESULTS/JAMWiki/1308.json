{
    "time": 1749347477.3924632,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `JAMWiki`, a well-known Java open source project. The starting entity you need to deal with is AnsiDataHandler.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_3d2779277e8d46579c38a6",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"Utilities\", \"1\", \"0.03125\"], [\"WikiBase\", \"3\", \"0.09375\"], [\"Environment\", \"2\", \"0.0625\"], [\"WikiDatabase\", \"6\", \"0.1875\"], [\"UpgradeServlet\", \"5\", \"0.15625\"], [\"PersistencyServlet\", \"1\", \"0.03125\"], [\"HSqlQueryHandler\", \"1\", \"0.03125\"], [\"DB2DataHandler\", \"2\", \"0.0625\"], [\"MSSqlDataHandler\", \"2\", \"0.0625\"], [\"HSqlDataHandler\", \"2\", \"0.0625\"], [\"DB2400DataHandler\", \"2\", \"0.0625\"], [\"MySqlDataHandler\", \"2\", \"0.0625\"], [\"OracleDataHandler\", \"2\", \"0.0625\"], [\"PostgresDataHandler\", \"2\", \"0.0625\"], [\"QueryHandler\", \"8\", \"0.25\"], [\"AnsiQueryHandler\", \"14\", \"0.4375\"], [\"MoveServlet\", \"2\", \"0.0625\"], [\"Role\", \"1\", \"0.03125\"], [\"RolesServlet\", \"1\", \"0.03125\"], [\"DatabaseUserHandler\", \"2\", \"0.0625\"], [\"DatabaseUpgrades\", \"6\", \"0.1875\"], [\"DatabaseConnection\", \"3\", \"0.09375\"], [\"LocalDataSource\", \"1\", \"0.03125\"], [\"WikiPreparedStatement\", \"1\", \"0.03125\"], [\"WikiUser\", \"1\", \"0.03125\"], [\"JFlexParser\", \"2\", \"0.0625\"], [\"MigrationUtil\", \"1\", \"0.03125\"], [\"ParserException\", \"1\", \"0.03125\"], [\"JAMWikiModel\", \"1\", \"0.03125\"], [\"JFlexLexer\", \"1\", \"0.03125\"], [\"WikiHeadingTag\", \"1\", \"0.03125\"], [\"TemplateTag\", \"1\", \"0.03125\"], [\"WikiLinkTag\", \"1\", \"0.03125\"], [\"HtmlLinkTag\", \"1\", \"0.03125\"], [\"WikiReferenceTag\", \"1\", \"0.03125\"], [\"JFlexParserTag\", \"1\", \"0.03125\"], [\"WikiSignatureTag\", \"1\", \"0.03125\"], [\"JavascriptTag\", \"1\", \"0.03125\"], [\"WikiReferencesTag\", \"1\", \"0.03125\"], [\"WikiBoldItalicTag\", \"1\", \"0.03125\"], [\"IncludeOnlyTag\", \"1\", \"0.03125\"], [\"NoIncludeTag\", \"1\", \"0.03125\"], [\"BlikiProxyParser\", \"1\", \"0.03125\"], [\"BlikiProxyParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiCrawlHandler\", \"1\", \"0.03125\"], [\"JAMWikiLoadHandler\", \"1\", \"0.03125\"], [\"Main\", \"1\", \"0.03125\"], [\"WikiDistributedCache\", \"1\", \"0.03125\"], [\"JAMWikiAuthenticationConfiguration\", \"1\", \"0.03125\"], [\"AdminServlet\", \"3\", \"0.09375\"], [\"SetupServlet\", \"1\", \"0.03125\"], [\"ImageUtil\", \"3\", \"0.09375\"], [\"ParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiServlet\", \"3\", \"0.09375\"], [\"ImageLinkTag\", \"3\", \"0.09375\"], [\"ServletUtil\", \"2\", \"0.0625\"], [\"LinkTag\", \"1\", \"0.03125\"], [\"JAMWikiUnitTest\", \"1\", \"0.03125\"], [\"AdminVirtualWikiServlet\", \"1\", \"0.03125\"], [\"Topic\", \"1\", \"0.03125\"], [\"LinkUtil\", \"1\", \"0.03125\"], [\"WikiPageInfo\", \"1\", \"0.03125\"], [\"RankingAlgorithmSearchEngine\", \"1\", \"0.03125\"], [\"LuceneSearchEngine\", \"1\", \"0.03125\"], [\"H2DataHandler\", \"1\", \"0.03125\"], [\"SybaseASADataHandler\", \"1\", \"0.03125\"], [\"CacheDataHandler\", \"1\", \"0.03125\"], [\"AnsiDataHandlerTest\", \"1\", \"0.03125\"], [\"StylesheetServlet\", \"1\", \"0.03125\"], [\"WikiCache\", \"1\", \"0.03125\"], [\"WikiCacheTest\", \"1\", \"0.03125\"]]"
        },
        {
            "content": "The co-change relationship analysis for the entity `AnsiDataHandler.java` has returned a list of other entities that have historically been modified together with it. These relationships are expressed in terms of \"support\" (how often they were modified together) and \"confidence\" (the probability that if one is modified, the other will also be modified). \n\nFrom this data, we can identify several entities that have a high likelihood of requiring synchronization:\n\n1. **AnsiQueryHandler.java** - 14 supports with confidence of 0.4375 (highest among the listed).\n2. **QueryHandler.java** - 8 supports with confidence of 0.25.\n3. **WikiDatabase.java** and **DatabaseUpgrades.java** - both have 6 supports with confidence of 0.1875 each.\n\n### Next Steps:\n- To further understand the relationships between `AnsiDataHandler.java` and these top candidates (`AnsiQueryHandler.java`, `QueryHandler.java`, etc.), I will analyze the coupling dependencies between them using the `get_coupling_dependencies` function.\n- This will help determine whether there are direct code-level dependencies between these files that justify their co-changes.\n\nLet me start by analyzing the coupling between `AnsiDataHandler.java` and `AnsiQueryHandler.java`. \n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_bf53924d533e414f951087",
                    "function": {
                        "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "There are no direct coupling dependencies between `AnsiDataHandler.java` and `AnsiQueryHandler.java`. This suggests that although these two entities are frequently co-changed, their relationship may be more conceptual or due to architectural design rather than explicit code-level dependencies.\n\n### Next Step:\nTo further investigate this relationship, I will examine the **conceptual coupling** (semantic similarity) between `AnsiDataHandler.java` and `AnsiQueryHandler.java` using the `get_conceptual_coupling` function. This will help determine if they share similar functionality or logic from a semantic perspective.\n\nLet me proceed with this analysis.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_2c6dc440b7194902826fbb",
                    "function": {
                        "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.87263656\""
        },
        {
            "content": "The conceptual coupling (semantic similarity) between `AnsiDataHandler.java` and `AnsiQueryHandler.java` is **0.8726**, which is quite high. This indicates that, although there are no direct code-level dependencies, the two entities share a significant amount of similar functionality or logic from a semantic standpoint.\n\n### Interpretation:\n- The high semantic similarity explains why these two files are frequently co-changed.\n- It suggests that changes in one often necessitate changes in the other due to their related roles in the system, even if they aren't directly linked via method calls or class inheritance.\n\n### Next Steps:\nTo better understand how `AnsiDataHandler.java` interacts with other components in the system, I will analyze its **call graph** using the `get_call_graph` function. This will reveal which entities are directly used by `AnsiDataHandler.java`, providing more insight into its runtime behavior and potential ripple effects.\n\nLet me now retrieve the call graph for `AnsiDataHandler.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_4b92b5a8eb234560a52e85",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"Encryption\", \"TopicVersion\", \"ParserOutput\", \"WikiLink\", \"WikiUser\", \"DataHandler\", \"WikiMessage\", \"NamespaceHandler\", \"RecentChange\", \"JAMWikiAuthenticationConfiguration\", \"WikiBase\", \"LinkUtil\", \"Topic\", \"WikiGroup\", \"Pagination\", \"VirtualWiki\", \"WikiUtil\", \"WikiCache\", \"WikiException\", \"Role\", \"WikiLogger\", \"Watchlist\", \"WikiUserDetails\", \"Category\", \"RoleMap\", \"WikiFileVersion\", \"ParserUtil\", \"WikiFile\"]"
        },
        {
            "content": "The call graph for `AnsiDataHandler.java` reveals a list of entities that it directly interacts with during execution. These interactions may involve method calls, variable references, or other runtime dependencies. Here are some key observations:\n\n### Key Dependencies:\n- **DataHandler**: As a parent class or interface, this indicates that `AnsiDataHandler` likely extends or implements it.\n- **WikiBase**, **WikiCache**, **WikiLogger**, **WikiUtil**, **WikiException**, **WikiMessage**, **WikiUser**, **VirtualWiki**, **Topic**, **NamespaceHandler**, **LinkUtil**, **JAMWikiAuthenticationConfiguration**: These suggest that `AnsiDataHandler` plays a central role in data handling and interacts heavily with core components of the system.\n\n### Implications:\n- Changes to `AnsiDataHandler.java` could potentially affect all of these dependent entities, especially if they rely on specific behaviors or outputs from it.\n- Some of these entities (e.g., `WikiBase`, `WikiCache`, `WikiUser`) also appeared in the co-change analysis, reinforcing the idea that they are closely related.\n\n### Next Step:\nTo better understand the actual code structure and possible reasons behind these relationships, I will retrieve the source code of `AnsiDataHandler.java` using the `get_origin_code` function.\n\nLet me proceed to fetch its source code.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_621d8be3d4b44db8b8ec3d",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.jamwiki.db;\\nimport java.sql.Connection;\\nimport java.sql.Timestamp;\\nimport java.util.Collection;\\nimport java.util.Iterator;\\nimport java.util.LinkedHashMap;\\nimport java.util.List;\\nimport java.util.Locale;\\nimport java.util.Vector;\\nimport net.sf.ehcache.Element;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.DataHandler;\\nimport org.jamwiki.WikiBase;\\nimport org.jamwiki.WikiException;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.authentication.JAMWikiAuthenticationConfiguration;\\nimport org.jamwiki.authentication.WikiUserDetails;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.RoleMap;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.Watchlist;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.parser.ParserOutput;\\nimport org.jamwiki.parser.ParserUtil;\\nimport org.jamwiki.utils.Encryption;\\nimport org.jamwiki.utils.LinkUtil;\\nimport org.jamwiki.utils.NamespaceHandler;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.WikiCache;\\nimport org.jamwiki.utils.WikiLink;\\nimport org.jamwiki.utils.WikiLogger;\\nimport org.jamwiki.utils.WikiUtil;\\nimport org.springframework.transaction.TransactionStatus;\\npublic class AnsiDataHandler implements DataHandler {\\n\\tprivate static final String CACHE_TOPICS = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS\\\";\\n\\tprivate static final String CACHE_VIRTUAL_WIKI = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_VIRTUAL_WIKI\\\";\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiDataHandler.class.getName());\\n\\t\\tpublic static final String DATA_TOPIC_NAME = \\\"topic_name\\\";\\n\\tpublic static final String DATA_WIKI_USER_ID = \\\"wiki_user_id\\\" ;\\n\\tpublic static final String DATA_GROUP_ID = \\\"group_id\\\";\\n\\tpublic static final String DATA_CATEGORY_NAME = \\\"category_name\\\";\\n\\tpublic static final String DATA_TOPIC_ID = \\\"topic_id\\\";\\n\\tprivate final QueryHandler queryHandler = new AnsiQueryHandler();\\n\\tprivate void addCategory(Category category, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(category.getVirtualWiki());\\n\\t\\tthis.validateCategory(category);\\n\\t\\tthis.queryHandler().insertCategory(category, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addGroupMember(String username, int groupId, Connection conn) throws Exception {\\n\\t\\tint groupMemberId = this.queryHandler().nextGroupMemberId(conn);\\n\\t\\tthis.queryHandler().insertGroupMember(groupMemberId, username, groupId, conn);\\n\\t}\\n\\tprivate void addRecentChange(RecentChange change, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(change.getVirtualWiki());\\n\\t\\tthis.validateRecentChange(change);\\n\\t\\tthis.queryHandler().insertRecentChange(change, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tif (topic.getTopicId() < 1) {\\n\\t\\t\\tint topicId = this.queryHandler().nextTopicId(conn);\\n\\t\\t\\ttopic.setTopicId(topicId);\\n\\t\\t}\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().insertTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopicVersion(TopicVersion topicVersion, Connection conn) throws Exception {\\n\\t\\tif (topicVersion.getTopicVersionId() < 1) {\\n\\t\\t\\tint topicVersionId = this.queryHandler().nextTopicVersionId(conn);\\n\\t\\t\\ttopicVersion.setTopicVersionId(topicVersionId);\\n\\t\\t}\\n\\t\\tif (topicVersion.getEditDate() == null) {\\n\\t\\t\\tTimestamp editDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\ttopicVersion.setEditDate(editDate);\\n\\t\\t}\\n\\t\\tthis.validateTopicVersion(topicVersion);\\n\\t\\tthis.queryHandler().insertTopicVersion(topicVersion, conn);\\n\\t}\\n\\tprivate void addUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().insertUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void addVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tif (virtualWiki.getVirtualWikiId() < 1) {\\n\\t\\t\\tint virtualWikiId = this.queryHandler().nextVirtualWikiId(conn);\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(virtualWikiId);\\n\\t\\t}\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().insertVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void addWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.validateWatchlistEntry(topicName);\\n\\t\\tthis.queryHandler().insertWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tprivate void addWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tif (wikiFile.getFileId() < 1) {\\n\\t\\t\\tint fileId = this.queryHandler().nextWikiFileId(conn);\\n\\t\\t\\twikiFile.setFileId(fileId);\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().insertWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws Exception {\\n\\t\\tif (wikiFileVersion.getFileVersionId() < 1) {\\n\\t\\t\\tint fileVersionId = this.queryHandler().nextWikiFileVersionId(conn);\\n\\t\\t\\twikiFileVersion.setFileVersionId(fileVersionId);\\n\\t\\t}\\n\\t\\tif (wikiFileVersion.getUploadDate() == null) {\\n\\t\\t\\tTimestamp uploadDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\twikiFileVersion.setUploadDate(uploadDate);\\n\\t\\t}\\n\\t\\tthis.validateWikiFileVersion(wikiFileVersion);\\n\\t\\tthis.queryHandler().insertWikiFileVersion(wikiFileVersion, conn);\\n\\t}\\n\\tprivate void addWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tif (group.getGroupId() < 1) {\\n\\t\\t\\tint groupId = this.queryHandler().nextWikiGroupId(conn);\\n\\t\\t\\tgroup.setGroupId(groupId);\\n\\t\\t}\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().insertWikiGroup(group, conn);\\n\\t}\\n\\tprivate void addWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tif (user.getUserId() < 1) {\\n\\t\\t\\tint nextUserId = this.queryHandler().nextWikiUserId(conn);\\n\\t\\t\\tuser.setUserId(nextUserId);\\n\\t\\t}\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().insertWikiUser(user, conn);\\n\\t}\\n\\tpublic boolean authenticate(String username, String password) throws Exception {\\n\\t\\tboolean result = false;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\t\\t\\t\\tif (!StringUtils.isBlank(password)) {\\n\\t\\t\\t\\tString encryptedPassword = Encryption.encrypt(password);\\n\\t\\t\\t\\treturn this.queryHandler().authenticateUser(username, encryptedPassword, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic boolean canMoveTopic(Topic fromTopic, String destination) throws Exception {\\n\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, null);\\n\\t\\tif (toTopic == null || toTopic.getDeleteDate() != null) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (toTopic.getRedirectTo() != null && toTopic.getRedirectTo().equals(fromTopic.getName())) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tprivate static void checkLength(String value, int maxLength) throws WikiException {\\n\\t\\tif (value != null && value.length() > maxLength) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", value, new Integer(maxLength).toString()));\\n\\t\\t}\\n\\t}\\n\\tprivate void deleteRecentChanges(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteRecentChanges(topic.getTopicId(), conn);\\n\\t}\\n\\tpublic void deleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdeleteRecentChanges(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = new ParserOutput();\\n\\t\\t\\ttopic.setDeleteDate(new Timestamp(System.currentTimeMillis()));\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void deleteTopicCategories(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteTopicCategories(topic.getTopicId(), conn);\\n\\t}\\n\\tprivate void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tpublic List getAllCategories(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getCategories(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(rs.getString(DATA_CATEGORY_NAME));\\n\\t\\t\\t\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\t\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllRoles() throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoles();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(this.initRole(rs));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllTopicNames(String virtualWiki) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllTopicNames(virtualWikiId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getAllWikiFileVersions(String virtualWiki, String topicName, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiFile wikiFile = lookupWikiFile(virtualWiki, topicName);\\n\\t\\tif (wikiFile == null) {\\n\\t\\t\\tthrow new Exception(\\\"No topic exists for \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllWikiFileVersions(wikiFile, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(initWikiFileVersion(rs));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(virtualWiki, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, String topicName, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, true, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn all;\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(topic.getTopicId(), pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic Collection getRoleMapByLogin(String loginFragment) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByLogin(loginFragment);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger userId = new Integer(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(userId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(userId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setUserId(userId);\\n\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(userId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Collection getRoleMapByRole(String authority) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByRole(authority);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tint groupId = rs.getInt(DATA_GROUP_ID);\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tString key = userId + \\\"|\\\" + groupId;\\n\\t\\t\\tif (roleMaps.containsKey(key)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(key);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\t\\troleMap.setUserId(new Integer(userId));\\n\\t\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (groupId > 0) {\\n\\t\\t\\t\\t\\troleMap.setGroupId(new Integer(groupId));\\n\\t\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(key, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapGroup(String groupName) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroup(groupName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic Collection getRoleMapGroups() throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroups();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger groupId = new Integer(rs.getInt(DATA_GROUP_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(groupId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(groupId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setGroupId(groupId);\\n\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(groupId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapUser(String login) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapUser(login);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic List getTopicsAdmin(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getTopicsAdmin(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getUserContributions(virtualWiki, userString, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getVirtualWikiList() throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().getVirtualWikis(conn);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tVirtualWiki virtualWiki = initVirtualWiki(rs);\\n\\t\\t\\t\\tresults.add(virtualWiki);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Watchlist getWatchlist(String virtualWiki, int userId) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn new Watchlist(virtualWiki, all);\\n\\t}\\n\\tpublic List getWatchlist(String virtualWiki, int userId, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tprivate RecentChange initRecentChange(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRecentChange change = new RecentChange();\\n\\t\\t\\tchange.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\tchange.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\tchange.setTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tchange.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\tchange.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\tchange.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\tchange.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setAuthorName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tchange.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\tchange.setVirtualWiki(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\treturn change;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing recent change\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Role initRole(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRole role = new Role(rs.getString(\\\"role_name\\\"));\\n\\t\\t\\trole.setDescription(rs.getString(\\\"role_description\\\"));\\n\\t\\t\\treturn role;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing role\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Topic initTopic(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (rs.size() > 1 && rs.getTimestamp(\\\"delete_date\\\") != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\trs.last();\\n\\t\\t\\t}\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tTopic topic = new Topic();\\n\\t\\t\\ttopic.setAdminOnly(rs.getInt(\\\"topic_admin_only\\\") != 0);\\n\\t\\t\\ttopic.setName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\ttopic.setVirtualWiki(virtualWiki);\\n\\t\\t\\tint currentVersionId = rs.getInt(\\\"current_version_id\\\");\\n\\t\\t\\tif (currentVersionId > 0) {\\n\\t\\t\\t\\ttopic.setCurrentVersionId(new Integer(currentVersionId));\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topic.getTopicContent() == null) {\\n\\t\\t\\t\\ttopic.setTopicContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopic.setReadOnly(rs.getInt(\\\"topic_read_only\\\") != 0);\\n\\t\\t\\ttopic.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\ttopic.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\ttopic.setRedirectTo(rs.getString(\\\"redirect_to\\\"));\\n\\t\\t\\treturn topic;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate TopicVersion initTopicVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tTopicVersion topicVersion = new TopicVersion();\\n\\t\\t\\ttopicVersion.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\ttopicVersion.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopicVersion.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\ttopicVersion.setVersionContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topicVersion.getVersionContent() == null) {\\n\\t\\t\\t\\ttopicVersion.setVersionContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\ttopicVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\ttopicVersion.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\ttopicVersion.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\ttopicVersion.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\ttopicVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\treturn topicVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate VirtualWiki initVirtualWiki(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tVirtualWiki virtualWiki = new VirtualWiki();\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(rs.getInt(\\\"virtual_wiki_id\\\"));\\n\\t\\t\\tvirtualWiki.setName(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\tvirtualWiki.setDefaultTopicName(rs.getString(\\\"default_topic_name\\\"));\\n\\t\\t\\treturn virtualWiki;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing virtual wiki\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFile initWikiFile(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tWikiFile wikiFile = new WikiFile();\\n\\t\\t\\twikiFile.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFile.setAdminOnly(rs.getInt(\\\"file_admin_only\\\") != 0);\\n\\t\\t\\twikiFile.setFileName(rs.getString(\\\"file_name\\\"));\\n\\t\\t\\twikiFile.setVirtualWiki(virtualWiki);\\n\\t\\t\\twikiFile.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\twikiFile.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\twikiFile.setReadOnly(rs.getInt(\\\"file_read_only\\\") != 0);\\n\\t\\t\\twikiFile.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\twikiFile.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFile.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFile;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing file\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFileVersion initWikiFileVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiFileVersion wikiFileVersion = new WikiFileVersion();\\n\\t\\t\\twikiFileVersion.setFileVersionId(rs.getInt(\\\"file_version_id\\\"));\\n\\t\\t\\twikiFileVersion.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFileVersion.setUploadComment(rs.getString(\\\"upload_comment\\\"));\\n\\t\\t\\twikiFileVersion.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\twikiFileVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setUploadDate(rs.getTimestamp(\\\"upload_date\\\"));\\n\\t\\t\\twikiFileVersion.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFileVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\twikiFileVersion.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFileVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing wiki file version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiGroup initWikiGroup(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiGroup wikiGroup = new WikiGroup();\\n\\t\\t\\twikiGroup.setGroupId(rs.getInt(\\\"group_id\\\"));\\n\\t\\t\\twikiGroup.setName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\twikiGroup.setDescription(rs.getString(\\\"group_description\\\"));\\n\\t\\t\\treturn wikiGroup;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing group\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiUser initWikiUser(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tString username = rs.getString(\\\"login\\\");\\n\\t\\t\\tWikiUser user = new WikiUser(username);\\n\\t\\t\\tuser.setUserId(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tuser.setDisplayName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tuser.setCreateDate(rs.getTimestamp(\\\"create_date\\\"));\\n\\t\\t\\tuser.setLastLoginDate(rs.getTimestamp(\\\"last_login_date\\\"));\\n\\t\\t\\tuser.setCreateIpAddress(rs.getString(\\\"create_ip_address\\\"));\\n\\t\\t\\tuser.setLastLoginIpAddress(rs.getString(\\\"last_login_ip_address\\\"));\\n\\t\\t\\tuser.setDefaultLocale(rs.getString(\\\"default_locale\\\"));\\n\\t\\t\\tuser.setEmail(rs.getString(\\\"email\\\"));\\n\\t\\t\\tuser.setEditor(rs.getString(\\\"editor\\\"));\\n\\t\\t\\tuser.setSignature(rs.getString(\\\"signature\\\"));\\n\\t\\t\\treturn user;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing user\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tpublic List lookupCategoryTopics(String virtualWiki, String categoryName) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupCategoryTopics(virtualWikiId, categoryName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setChildTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\tcategory.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Topic lookupTopic(String virtualWiki, String topicName, boolean deleteOK, Object transactionObject) throws Exception {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tif (cacheElement != null) {\\n\\t\\t\\t\\tTopic cacheTopic = (Topic)cacheElement.getObjectValue();\\n\\t\\t\\t\\treturn (cacheTopic == null || (!deleteOK && cacheTopic.getDeleteDate() != null)) ? null : new Topic(cacheTopic);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiLink wikiLink = LinkUtil.parseWikiLink(topicName);\\n\\t\\tString namespace = wikiLink.getNamespace();\\n\\t\\tboolean caseSensitive = true;\\n\\t\\tif (namespace != null) {\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_SPECIAL)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_TEMPLATE) || namespace.equals(NamespaceHandler.NAMESPACE_USER) || namespace.equals(NamespaceHandler.NAMESPACE_CATEGORY)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcaseSensitive = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tTopic topic = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopic(virtualWikiId, topicName, caseSensitive, conn);\\n\\t\\t\\tif (rs.size() != 0) {\\n\\t\\t\\t\\ttopic = initTopic(rs);\\n\\t\\t\\t}\\n\\t\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTopic cacheTopic = (topic == null) ? null : new Topic(topic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPICS, key, cacheTopic);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn (topic == null || (!deleteOK && topic.getDeleteDate() != null)) ? null : topic;\\n\\t}\\n\\tpublic int lookupTopicCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"topic_count\\\");\\n\\t}\\n\\tpublic List lookupTopicByType(String virtualWiki, int topicType, Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicByType(virtualWikiId, topicType, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic TopicVersion lookupTopicVersion(int topicVersionId) throws Exception {\\n\\t\\tTopicVersion result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicVersion(topicVersionId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : this.initTopicVersion(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic VirtualWiki lookupVirtualWiki(String virtualWikiName) throws Exception {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiName);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tVirtualWiki virtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getName().equals(virtualWikiName)) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, null);\\n\\t\\treturn null;\\n\\t}\\n\\tprivate int lookupVirtualWikiId(String virtualWikiName) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = this.lookupVirtualWiki(virtualWikiName);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\treturn (virtualWiki == null) ? -1 : virtualWiki.getVirtualWikiId();\\n\\t}\\n\\tprivate String lookupVirtualWikiName(int virtualWikiId) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = null;\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t\\treturn (virtualWiki == null) ? null : virtualWiki.getName();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() == virtualWikiId) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki.getName();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, null);\\n\\t\\treturn null;\\n\\t}\\n\\tpublic WikiFile lookupWikiFile(String virtualWiki, String topicName) throws Exception {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFile(virtualWikiId, topic.getTopicId());\\n\\t\\treturn (rs.size() == 0) ? null : initWikiFile(rs);\\n\\t}\\n\\tpublic int lookupWikiFileCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFileCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"file_count\\\");\\n\\t}\\n\\tpublic WikiGroup lookupWikiGroup(String groupName) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiGroup(groupName);\\n\\t\\treturn (rs.size() == 0) ? null : initWikiGroup(rs);\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(int userId) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(userId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : initWikiUser(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(String username) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(username, conn);\\n\\t\\t\\tif (rs.size() == 0) {\\n\\t\\t\\t\\tresult = null;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\t\\tresult = lookupWikiUser(userId);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupWikiUserCount() throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserCount();\\n\\t\\treturn rs.getInt(\\\"user_count\\\");\\n\\t}\\n\\tpublic String lookupWikiUserEncryptedPassword(String username) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserEncryptedPassword(username);\\n\\t\\treturn (rs.size() == 0) ? null : rs.getString(\\\"password\\\");\\n\\t}\\n\\tpublic List lookupWikiUsers(Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUsers(pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(\\\"login\\\"));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic void moveTopic(Topic fromTopic, TopicVersion fromVersion, String destination) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (!this.canMoveTopic(fromTopic, destination)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"move.exception.destinationexists\\\", destination));\\n\\t\\t\\t}\\n\\t\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, conn);\\n\\t\\t\\tboolean detinationExistsFlag = (toTopic != null && toTopic.getDeleteDate() == null);\\n\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopic(toTopic, null, false);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tString fromTopicName = fromTopic.getName();\\n\\t\\t\\tfromTopic.setName(destination);\\n\\t\\t\\tParserOutput fromParserOutput = ParserUtil.parserOutput(fromTopic.getTopicContent(), fromTopic.getVirtualWiki(), fromTopic.getName());\\n\\t\\t\\twriteTopic(fromTopic, fromVersion, fromParserOutput.getCategories(), fromParserOutput.getLinks(), true);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t\\twriteTopic(toTopic, null, null, null, false);\\n\\t\\t\\t\\tthis.undeleteTopic(toTopic, null, false);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic = fromTopic;\\n\\t\\t\\t\\ttoTopic.setTopicId(-1);\\n\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t}\\n\\t\\t\\tString content = ParserUtil.parserRedirectContent(destination);\\n\\t\\t\\ttoTopic.setRedirectTo(destination);\\n\\t\\t\\ttoTopic.setTopicType(Topic.TYPE_REDIRECT);\\n\\t\\t\\ttoTopic.setTopicContent(content);\\n\\t\\t\\tTopicVersion toVersion = fromVersion;\\n\\t\\t\\ttoVersion.setTopicVersionId(-1);\\n\\t\\t\\ttoVersion.setVersionContent(content);\\n\\t\\t\\tParserOutput toParserOutput = ParserUtil.parserOutput(toTopic.getTopicContent(), toTopic.getVirtualWiki(), toTopic.getName());\\n\\t\\t\\twriteTopic(toTopic, toVersion, toParserOutput.getCategories(), toParserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprotected QueryHandler queryHandler() {\\n\\t\\treturn this.queryHandler;\\n\\t}\\n\\tpublic void reloadRecentChanges() throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().reloadRecentChanges(conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void setup(Locale locale, WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiDatabase.initialize();\\n\\t\\t\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeQuery(WikiDatabase.getExistenceValidationQuery());\\n\\t\\t\\treturn;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\t\\t}\\n\\t\\tWikiDatabase.setup(locale, user, username, encryptedPassword);\\n\\t}\\n\\tpublic void setupSpecialPages(Locale locale, WikiUser user, VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STARTING_POINTS, user, false);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_LEFT_MENU, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_BOTTOM_AREA, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STYLESHEET, user, true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void undeleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\ttopic.setDeleteDate(null);\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void updateSpecialPage(Locale locale, String virtualWiki, String topicName, String ipAddress) throws Exception {\\n\\t\\tlogger.info(\\\"Updating special page \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tString contents = WikiUtil.readSpecialPage(locale, topicName);\\n\\t\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, conn);\\n\\t\\t\\tint charactersChanged = StringUtils.length(contents) - StringUtils.length(topic.getTopicContent());\\n\\t\\t\\ttopic.setTopicContent(contents);\\n\\t\\t\\t\\t\\t\\tTopicVersion topicVersion = new TopicVersion(null, ipAddress, \\\"Automatically updated by system upgrade\\\", contents, charactersChanged);\\n\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), virtualWiki, topicName);\\n\\t\\t\\twriteTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void updateTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().updateTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().updateUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().updateVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void updateWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().updateWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().updateWikiGroup(group, conn);\\n\\t}\\n\\tprivate void updateWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().updateWikiUser(user, conn);\\n\\t}\\n\\tprotected void validateAuthority(String role) throws WikiException {\\n\\t\\tcheckLength(role, 30);\\n\\t}\\n\\tprotected void validateCategory(Category category) throws WikiException {\\n\\t\\tcheckLength(category.getName(), 200);\\n\\t\\tcheckLength(category.getSortKey(), 200);\\n\\t}\\n\\tprotected void validateRecentChange(RecentChange change) throws WikiException {\\n\\t\\tcheckLength(change.getTopicName(), 200);\\n\\t\\tcheckLength(change.getAuthorName(), 200);\\n\\t\\tcheckLength(change.getVirtualWiki(), 100);\\n\\t\\tchange.setEditComment(StringUtils.substring(change.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateRole(Role role) throws WikiException {\\n\\t\\tcheckLength(role.getAuthority(), 30);\\n\\t\\trole.setDescription(StringUtils.substring(role.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateTopic(Topic topic) throws WikiException {\\n\\t\\tcheckLength(topic.getName(), 200);\\n\\t\\tcheckLength(topic.getRedirectTo(), 200);\\n\\t}\\n\\tprotected void validateTopicVersion(TopicVersion topicVersion) throws WikiException {\\n\\t\\tcheckLength(topicVersion.getAuthorIpAddress(), 39);\\n\\t\\ttopicVersion.setEditComment(StringUtils.substring(topicVersion.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateUserDetails(WikiUserDetails userDetails) throws WikiException {\\n\\t\\tcheckLength(userDetails.getUsername(), 100);\\n\\t\\t\\t\\tif (userDetails.getPassword() != null && userDetails.getPassword().length() > 100) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", \\\"-\\\", \\\"100\\\"));\\n\\t\\t}\\n\\t}\\n\\tprotected void validateVirtualWiki(VirtualWiki virtualWiki) throws WikiException {\\n\\t\\tcheckLength(virtualWiki.getName(), 100);\\n\\t\\tcheckLength(virtualWiki.getDefaultTopicName(), 200);\\n\\t}\\n\\tprotected void validateWatchlistEntry(String topicName) throws WikiException {\\n\\t\\tcheckLength(topicName, 200);\\n\\t}\\n\\tprotected void validateWikiFile(WikiFile wikiFile) throws WikiException {\\n\\t\\tcheckLength(wikiFile.getFileName(), 200);\\n\\t\\tcheckLength(wikiFile.getUrl(), 200);\\n\\t\\tcheckLength(wikiFile.getMimeType(), 100);\\n\\t}\\n\\tprotected void validateWikiFileVersion(WikiFileVersion wikiFileVersion) throws WikiException {\\n\\t\\tcheckLength(wikiFileVersion.getUrl(), 200);\\n\\t\\tcheckLength(wikiFileVersion.getMimeType(), 100);\\n\\t\\tcheckLength(wikiFileVersion.getAuthorIpAddress(), 39);\\n\\t\\twikiFileVersion.setUploadComment(StringUtils.substring(wikiFileVersion.getUploadComment(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiGroup(WikiGroup group) throws WikiException {\\n\\t\\tcheckLength(group.getName(), 30);\\n\\t\\tgroup.setDescription(StringUtils.substring(group.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiUser(WikiUser user) throws WikiException {\\n\\t\\tcheckLength(user.getUsername(), 100);\\n\\t\\tcheckLength(user.getDisplayName(), 100);\\n\\t\\tcheckLength(user.getCreateIpAddress(), 39);\\n\\t\\tcheckLength(user.getLastLoginIpAddress(), 39);\\n\\t\\tcheckLength(user.getDefaultLocale(), 8);\\n\\t\\tcheckLength(user.getEmail(), 100);\\n\\t\\tcheckLength(user.getEditor(), 50);\\n\\t\\tcheckLength(user.getSignature(), 255);\\n\\t}\\n\\tpublic void writeFile(WikiFile wikiFile, WikiFileVersion wikiFileVersion) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(wikiFile.getFileName());\\n\\t\\t\\tif (wikiFile.getFileId() <= 0) {\\n\\t\\t\\t\\taddWikiFile(wikiFile, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateWikiFile(wikiFile, conn);\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setFileId(wikiFile.getFileId());\\n\\t\\t\\t\\t\\t\\taddWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRole(Role role, boolean update) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.validateRole(role);\\n\\t\\t\\tif (update) {\\n\\t\\t\\t\\tthis.queryHandler().updateRole(role, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.queryHandler().insertRole(role, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapGroup(int groupId, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteGroupAuthorities(groupId, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertGroupAuthority(groupId, authority, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJAMWikiAuthenticationConfiguration.resetJamwikiAnonymousAuthorities();\\n\\t\\t\\tJAMWikiAuthenticationConfiguration.resetDefaultGroupRoles();\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapUser(String username, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteUserAuthorities(username, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertUserAuthority(username, authority, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeTopic(Topic topic, TopicVersion topicVersion, LinkedHashMap categories, Vector links, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\tWikiCache.removeFromCache(WikiBase.CACHE_PARSED_TOPIC_CONTENT, key);\\n\\t\\t\\tWikiCache.removeFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(topic.getName());\\n\\t\\t\\tif (topic.getTopicId() <= 0) {\\n\\t\\t\\t\\taddTopic(topic, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateTopic(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\tif (topicVersion.getPreviousTopicVersionId() == null && topic.getCurrentVersionId() != null) {\\n\\t\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(topic.getCurrentVersionId());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttopicVersion.setTopicId(topic.getTopicId());\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopicVersion(topicVersion, conn);\\n\\t\\t\\t\\tString authorName = topicVersion.getAuthorIpAddress();\\n\\t\\t\\t\\tInteger authorId = topicVersion.getAuthorId();\\n\\t\\t\\t\\tif (authorId != null) {\\n\\t\\t\\t\\t\\tWikiUser user = this.lookupWikiUser(topicVersion.getAuthorId().intValue());\\n\\t\\t\\t\\t\\tauthorName = user.getUsername();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tRecentChange change = new RecentChange(topic, topicVersion, authorName);\\n\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (categories != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicCategories(topic, conn);\\n\\t\\t\\t\\tfor (Iterator iterator = categories.keySet().iterator(); iterator.hasNext();) {\\n\\t\\t\\t\\t\\tString categoryName = (String)iterator.next();\\n\\t\\t\\t\\t\\tCategory category = new Category();\\n\\t\\t\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\t\\t\\tcategory.setSortKey((String)categories.get(categoryName));\\n\\t\\t\\t\\t\\tcategory.setVirtualWiki(topic.getVirtualWiki());\\n\\t\\t\\t\\t\\tcategory.setChildTopicName(topic.getName());\\n\\t\\t\\t\\t\\tthis.addCategory(category, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (links != null) {\\n\\t\\t\\t\\tWikiBase.getSearchEngine().deleteFromIndex(topic);\\n\\t\\t\\t\\tWikiBase.getSearchEngine().addToIndex(topic, links);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeVirtualWiki(VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(virtualWiki.getName());\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() <= 0) {\\n\\t\\t\\t\\tthis.addVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName());\\n\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId());\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName(), virtualWiki);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId(), virtualWiki);\\n\\t}\\n\\tpublic void writeWatchlistEntry(Watchlist watchlist, String virtualWiki, String topicName, int userId) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tString article = WikiUtil.extractTopicLink(topicName);\\n\\t\\t\\tString comments = WikiUtil.extractCommentsLink(topicName);\\n\\t\\t\\tif (watchlist.containsTopic(topicName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.remove(article);\\n\\t\\t\\t\\twatchlist.remove(comments);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.add(article);\\n\\t\\t\\t\\twatchlist.add(comments);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiGroup(WikiGroup group) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (group.getGroupId() <= 0) {\\n\\t\\t\\t\\tthis.addWikiGroup(group, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateWikiGroup(group, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiUser(WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiUtil.validateUserName(user.getUsername());\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (user.getUserId() <= 0) {\\n\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\tthis.addUserDetails(userDetails, conn);\\n\\t\\t\\t\\tthis.addWikiUser(user, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addGroupMember(user.getUsername(), WikiBase.getGroupRegisteredUser().getGroupId(), conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (!StringUtils.isBlank(encryptedPassword)) {\\n\\t\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\t\\tthis.updateUserDetails(userDetails, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.updateWikiUser(user, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n}\""
        },
        {
            "content": "The source code of `AnsiDataHandler.java` reveals that it is a core component responsible for handling database operations in the JAMWiki system. Here's a breakdown of its structure and responsibilities:\n\n### Key Characteristics:\n- **Implements `DataHandler`**: This class serves as a concrete implementation of the `DataHandler` interface, suggesting it may be part of a family of database handlers (e.g., `DB2DataHandler`, `MySqlDataHandler`, etc.).\n- **Contains Database Logic**:\n  - Performs CRUD operations (`add`, `update`, `delete`, `lookup`) for entities like `Topic`, `VirtualWiki`, `WikiUser`, `WikiFile`, `Category`, etc.\n  - Uses `QueryHandler` (specifically `AnsiQueryHandler`) to execute queries.\n- **Caching Mechanism**:\n  - Uses `WikiCache` to cache frequently accessed data such as topics and virtual wikis.\n- **Transaction Management**:\n  - Wraps most operations inside transactions using `DatabaseConnection`.\n- **Validation & Security**:\n  - Includes validation logic for various entities.\n  - Handles user authentication and role-based access control.\n\n---\n\n### Entities Directly Affected by Changes in `AnsiDataHandler.java`\n\nGiven its central role in data persistence and retrieval, any changes to this file could potentially impact:\n\n1. **All entities it interacts with directly**, including:\n   - `Topic`, `TopicVersion`\n   - `WikiFile`, `WikiFileVersion`\n   - `VirtualWiki`\n   - `WikiUser`, `WikiGroup`, `WikiUserDetails`\n   - `Category`\n   - `Role`, `RoleMap`\n   - `RecentChange`\n   - `Watchlist`\n\n2. **Entities involved in co-change relationships**, especially:\n   - `AnsiQueryHandler.java` \u2013 frequently changed together (high confidence)\n   - `QueryHandler.java`\n   - `WikiDatabase.java`\n   - `DatabaseUpgrades.java`\n   - `WikiBase.java`\n   - `WikiCache.java`\n   - `JAMWikiAuthenticationConfiguration.java`\n\n3. **Infrastructure Classes**:\n   - `DatabaseConnection`\n   - `WikiLogger`\n   - `WikiUtil`\n   - `ParserUtil`\n   - `WikiCache`\n\n---\n\n### Recommendation for Synchronization\n\nBased on CIA analysis, the following entities should be reviewed or synchronized when modifying `AnsiDataHandler.java`:\n\n| Entity | Reason |\n|-------|--------|\n| `AnsiQueryHandler.java` | High semantic similarity and frequent co-change; likely to be affected by structural changes. |\n| `QueryHandler.java` | Base interface used by `AnsiQueryHandler`; changes in method signatures would ripple here. |\n| `WikiBase.java` | Used heavily for caching and special pages; tightly integrated. |\n| `WikiCache.java` | Caching layer used extensively; any change in cached data structures affects this. |\n| `Topic.java`, `TopicVersion.java` | Central domain objects manipulated by `AnsiDataHandler`. |\n| `VirtualWiki.java` | Frequently looked up and stored; changes in DB logic affect it. |\n| `WikiUser.java`, `WikiGroup.java`, `Role.java` | Related to authentication and permissions handled by this class. |\n| `WikiFile.java`, `WikiFileVersion.java` | Managed via file-handling methods in this class. |\n\n---\n\n### Final Thoughts\n\nThis class plays a foundational role in the persistence layer of JAMWiki. Any modifications\u2014especially those involving schema assumptions, transaction behavior, caching strategy, or query execution\u2014should be accompanied by updates or reviews in the above list of entities.\n\nWould you like me to proceed with further investigation into one of these related files? For example, we can look at `AnsiQueryHandler.java` to understand how it collaborates with `AnsiDataHandler.java`.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `AnsiDataHandler`\n\nChange set: [AnsiQueryHandler, QueryHandler, WikiBase, WikiCache, DatabaseUpgrades, WikiDatabase, JAMWikiAuthenticationConfiguration, Topic, TopicVersion, VirtualWiki, WikiFile, WikiFileVersion, WikiUser, WikiGroup, Role, RoleMap, RecentChange, Watchlist, Category, WikiUserDetails, Encryption, ParserOutput, ParserUtil, NamespaceHandler, Pagination, LinkUtil, WikiLink, DataHandler, Utilities, Environment, UpgradeServlet, PersistencyServlet, MoveServlet, AdminServlet, ImageUtil, ServletUtil, JAMWikiServlet, ImageLinkTag, WikiUtil, WikiLogger, WikiException, WikiMessage, DatabaseConnection, LocalDataSource, WikiPreparedStatement, WikiDistributedCache]\n\nDetails:\n- **AnsiQueryHandler**: High co-change confidence (0.4375) and high semantic similarity; collaborates on query execution.\n- **QueryHandler**: Interface used by `AnsiQueryHandler`; changes in method usage affect this.\n- **WikiBase**: Used for special pages, caching, and search integration; tightly integrated.\n- **WikiCache**: Heavily involved in caching topics, virtual wikis, etc.\n- **DatabaseUpgrades**: Related to DB schema logic and versioning.\n- **WikiDatabase**: Core database setup and initialization routines.\n- **JAMWikiAuthenticationConfiguration**: Manages roles and authentication data.\n- **Topic**: Central domain object with many operations in `AnsiDataHandler`.\n- **TopicVersion**: Managed alongside topics during edits and history tracking.\n- **VirtualWiki**: Frequently looked up and stored; core to multi-wiki support.\n- **WikiFile** / **WikiFileVersion**: File management and storage logic.\n- **WikiUser** / **WikiGroup** / **Role** / **RoleMap**: User/group/role management functions.\n- **RecentChange**: Tracks topic edit history.\n- **Watchlist**: Monitors user subscriptions to topics.\n- **Category**: Manages categorization of topics.\n- **WikiUserDetails**: Handles user credential details.\n- **Encryption**: Used for password encryption.\n- **ParserOutput** / **ParserUtil**: Involved in parsing and content processing.\n- **NamespaceHandler**: Manages namespace handling logic.\n- **Pagination**: Supports paginated queries.\n- **LinkUtil** / **WikiLink**: For link resolution and manipulation.\n- **DataHandler**: Base interface implemented by `AnsiDataHandler`.\n- **Utilities**: General utility functions that may be shared.\n- **Environment**: May contain environment-specific configurations.\n- **UpgradeServlet**: Likely interacts with DB upgrade logic.\n- **PersistencyServlet**: Directly related to persistence layer.\n- **MoveServlet**: Involves topic moving logic.\n- **AdminServlet**: Administrative operations involving users/topics.\n- **ImageUtil**: Image-related file handling.\n- **ServletUtil**: Utility methods used across servlets.\n- **JAMWikiServlet**: Base servlet class potentially referencing DB.\n- **ImageLinkTag**: Possibly deals with image topic references.\n- **WikiUtil**: Common utility functions used throughout.\n- **WikiLogger**: Logging framework used heavily.\n- **WikiException**: Error handling infrastructure.\n- **WikiMessage**: Message and i18n handling.\n- **DatabaseConnection**: Transaction and connection management.\n- **LocalDataSource**: Potential alternative DB connection source.\n- **WikiPreparedStatement**: SQL statement handling.\n- **WikiDistributedCache**: Distributed caching if enabled.\n\nThis comprehensive change set reflects entities that are either directly coupled, conceptually similar, or historically co-changed with `AnsiDataHandler.java`. Synchronizing these increases the likelihood of maintaining system consistency after modifications.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `JAMWiki`, a well-known Java open source project. The starting entity you need to deal with is AnsiDataHandler.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_3d2779277e8d46579c38a6",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"Utilities\", \"1\", \"0.03125\"], [\"WikiBase\", \"3\", \"0.09375\"], [\"Environment\", \"2\", \"0.0625\"], [\"WikiDatabase\", \"6\", \"0.1875\"], [\"UpgradeServlet\", \"5\", \"0.15625\"], [\"PersistencyServlet\", \"1\", \"0.03125\"], [\"HSqlQueryHandler\", \"1\", \"0.03125\"], [\"DB2DataHandler\", \"2\", \"0.0625\"], [\"MSSqlDataHandler\", \"2\", \"0.0625\"], [\"HSqlDataHandler\", \"2\", \"0.0625\"], [\"DB2400DataHandler\", \"2\", \"0.0625\"], [\"MySqlDataHandler\", \"2\", \"0.0625\"], [\"OracleDataHandler\", \"2\", \"0.0625\"], [\"PostgresDataHandler\", \"2\", \"0.0625\"], [\"QueryHandler\", \"8\", \"0.25\"], [\"AnsiQueryHandler\", \"14\", \"0.4375\"], [\"MoveServlet\", \"2\", \"0.0625\"], [\"Role\", \"1\", \"0.03125\"], [\"RolesServlet\", \"1\", \"0.03125\"], [\"DatabaseUserHandler\", \"2\", \"0.0625\"], [\"DatabaseUpgrades\", \"6\", \"0.1875\"], [\"DatabaseConnection\", \"3\", \"0.09375\"], [\"LocalDataSource\", \"1\", \"0.03125\"], [\"WikiPreparedStatement\", \"1\", \"0.03125\"], [\"WikiUser\", \"1\", \"0.03125\"], [\"JFlexParser\", \"2\", \"0.0625\"], [\"MigrationUtil\", \"1\", \"0.03125\"], [\"ParserException\", \"1\", \"0.03125\"], [\"JAMWikiModel\", \"1\", \"0.03125\"], [\"JFlexLexer\", \"1\", \"0.03125\"], [\"WikiHeadingTag\", \"1\", \"0.03125\"], [\"TemplateTag\", \"1\", \"0.03125\"], [\"WikiLinkTag\", \"1\", \"0.03125\"], [\"HtmlLinkTag\", \"1\", \"0.03125\"], [\"WikiReferenceTag\", \"1\", \"0.03125\"], [\"JFlexParserTag\", \"1\", \"0.03125\"], [\"WikiSignatureTag\", \"1\", \"0.03125\"], [\"JavascriptTag\", \"1\", \"0.03125\"], [\"WikiReferencesTag\", \"1\", \"0.03125\"], [\"WikiBoldItalicTag\", \"1\", \"0.03125\"], [\"IncludeOnlyTag\", \"1\", \"0.03125\"], [\"NoIncludeTag\", \"1\", \"0.03125\"], [\"BlikiProxyParser\", \"1\", \"0.03125\"], [\"BlikiProxyParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiCrawlHandler\", \"1\", \"0.03125\"], [\"JAMWikiLoadHandler\", \"1\", \"0.03125\"], [\"Main\", \"1\", \"0.03125\"], [\"WikiDistributedCache\", \"1\", \"0.03125\"], [\"JAMWikiAuthenticationConfiguration\", \"1\", \"0.03125\"], [\"AdminServlet\", \"3\", \"0.09375\"], [\"SetupServlet\", \"1\", \"0.03125\"], [\"ImageUtil\", \"3\", \"0.09375\"], [\"ParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiServlet\", \"3\", \"0.09375\"], [\"ImageLinkTag\", \"3\", \"0.09375\"], [\"ServletUtil\", \"2\", \"0.0625\"], [\"LinkTag\", \"1\", \"0.03125\"], [\"JAMWikiUnitTest\", \"1\", \"0.03125\"], [\"AdminVirtualWikiServlet\", \"1\", \"0.03125\"], [\"Topic\", \"1\", \"0.03125\"], [\"LinkUtil\", \"1\", \"0.03125\"], [\"WikiPageInfo\", \"1\", \"0.03125\"], [\"RankingAlgorithmSearchEngine\", \"1\", \"0.03125\"], [\"LuceneSearchEngine\", \"1\", \"0.03125\"], [\"H2DataHandler\", \"1\", \"0.03125\"], [\"SybaseASADataHandler\", \"1\", \"0.03125\"], [\"CacheDataHandler\", \"1\", \"0.03125\"], [\"AnsiDataHandlerTest\", \"1\", \"0.03125\"], [\"StylesheetServlet\", \"1\", \"0.03125\"], [\"WikiCache\", \"1\", \"0.03125\"], [\"WikiCacheTest\", \"1\", \"0.03125\"]]"
            },
            "m5": {
                "content": "The co-change relationship analysis for the entity `AnsiDataHandler.java` has returned a list of other entities that have historically been modified together with it. These relationships are expressed in terms of \"support\" (how often they were modified together) and \"confidence\" (the probability that if one is modified, the other will also be modified). \n\nFrom this data, we can identify several entities that have a high likelihood of requiring synchronization:\n\n1. **AnsiQueryHandler.java** - 14 supports with confidence of 0.4375 (highest among the listed).\n2. **QueryHandler.java** - 8 supports with confidence of 0.25.\n3. **WikiDatabase.java** and **DatabaseUpgrades.java** - both have 6 supports with confidence of 0.1875 each.\n\n### Next Steps:\n- To further understand the relationships between `AnsiDataHandler.java` and these top candidates (`AnsiQueryHandler.java`, `QueryHandler.java`, etc.), I will analyze the coupling dependencies between them using the `get_coupling_dependencies` function.\n- This will help determine whether there are direct code-level dependencies between these files that justify their co-changes.\n\nLet me start by analyzing the coupling between `AnsiDataHandler.java` and `AnsiQueryHandler.java`. \n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_bf53924d533e414f951087",
                        "function": {
                            "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m7": {
                "content": "There are no direct coupling dependencies between `AnsiDataHandler.java` and `AnsiQueryHandler.java`. This suggests that although these two entities are frequently co-changed, their relationship may be more conceptual or due to architectural design rather than explicit code-level dependencies.\n\n### Next Step:\nTo further investigate this relationship, I will examine the **conceptual coupling** (semantic similarity) between `AnsiDataHandler.java` and `AnsiQueryHandler.java` using the `get_conceptual_coupling` function. This will help determine if they share similar functionality or logic from a semantic perspective.\n\nLet me proceed with this analysis.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_2c6dc440b7194902826fbb",
                        "function": {
                            "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.87263656\""
            },
            "m9": {
                "content": "The conceptual coupling (semantic similarity) between `AnsiDataHandler.java` and `AnsiQueryHandler.java` is **0.8726**, which is quite high. This indicates that, although there are no direct code-level dependencies, the two entities share a significant amount of similar functionality or logic from a semantic standpoint.\n\n### Interpretation:\n- The high semantic similarity explains why these two files are frequently co-changed.\n- It suggests that changes in one often necessitate changes in the other due to their related roles in the system, even if they aren't directly linked via method calls or class inheritance.\n\n### Next Steps:\nTo better understand how `AnsiDataHandler.java` interacts with other components in the system, I will analyze its **call graph** using the `get_call_graph` function. This will reveal which entities are directly used by `AnsiDataHandler.java`, providing more insight into its runtime behavior and potential ripple effects.\n\nLet me now retrieve the call graph for `AnsiDataHandler.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_4b92b5a8eb234560a52e85",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"Encryption\", \"TopicVersion\", \"ParserOutput\", \"WikiLink\", \"WikiUser\", \"DataHandler\", \"WikiMessage\", \"NamespaceHandler\", \"RecentChange\", \"JAMWikiAuthenticationConfiguration\", \"WikiBase\", \"LinkUtil\", \"Topic\", \"WikiGroup\", \"Pagination\", \"VirtualWiki\", \"WikiUtil\", \"WikiCache\", \"WikiException\", \"Role\", \"WikiLogger\", \"Watchlist\", \"WikiUserDetails\", \"Category\", \"RoleMap\", \"WikiFileVersion\", \"ParserUtil\", \"WikiFile\"]"
            },
            "m11": {
                "content": "The call graph for `AnsiDataHandler.java` reveals a list of entities that it directly interacts with during execution. These interactions may involve method calls, variable references, or other runtime dependencies. Here are some key observations:\n\n### Key Dependencies:\n- **DataHandler**: As a parent class or interface, this indicates that `AnsiDataHandler` likely extends or implements it.\n- **WikiBase**, **WikiCache**, **WikiLogger**, **WikiUtil**, **WikiException**, **WikiMessage**, **WikiUser**, **VirtualWiki**, **Topic**, **NamespaceHandler**, **LinkUtil**, **JAMWikiAuthenticationConfiguration**: These suggest that `AnsiDataHandler` plays a central role in data handling and interacts heavily with core components of the system.\n\n### Implications:\n- Changes to `AnsiDataHandler.java` could potentially affect all of these dependent entities, especially if they rely on specific behaviors or outputs from it.\n- Some of these entities (e.g., `WikiBase`, `WikiCache`, `WikiUser`) also appeared in the co-change analysis, reinforcing the idea that they are closely related.\n\n### Next Step:\nTo better understand the actual code structure and possible reasons behind these relationships, I will retrieve the source code of `AnsiDataHandler.java` using the `get_origin_code` function.\n\nLet me proceed to fetch its source code.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_621d8be3d4b44db8b8ec3d",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.jamwiki.db;\\nimport java.sql.Connection;\\nimport java.sql.Timestamp;\\nimport java.util.Collection;\\nimport java.util.Iterator;\\nimport java.util.LinkedHashMap;\\nimport java.util.List;\\nimport java.util.Locale;\\nimport java.util.Vector;\\nimport net.sf.ehcache.Element;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.DataHandler;\\nimport org.jamwiki.WikiBase;\\nimport org.jamwiki.WikiException;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.authentication.JAMWikiAuthenticationConfiguration;\\nimport org.jamwiki.authentication.WikiUserDetails;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.RoleMap;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.Watchlist;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.parser.ParserOutput;\\nimport org.jamwiki.parser.ParserUtil;\\nimport org.jamwiki.utils.Encryption;\\nimport org.jamwiki.utils.LinkUtil;\\nimport org.jamwiki.utils.NamespaceHandler;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.WikiCache;\\nimport org.jamwiki.utils.WikiLink;\\nimport org.jamwiki.utils.WikiLogger;\\nimport org.jamwiki.utils.WikiUtil;\\nimport org.springframework.transaction.TransactionStatus;\\npublic class AnsiDataHandler implements DataHandler {\\n\\tprivate static final String CACHE_TOPICS = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS\\\";\\n\\tprivate static final String CACHE_VIRTUAL_WIKI = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_VIRTUAL_WIKI\\\";\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiDataHandler.class.getName());\\n\\t\\tpublic static final String DATA_TOPIC_NAME = \\\"topic_name\\\";\\n\\tpublic static final String DATA_WIKI_USER_ID = \\\"wiki_user_id\\\" ;\\n\\tpublic static final String DATA_GROUP_ID = \\\"group_id\\\";\\n\\tpublic static final String DATA_CATEGORY_NAME = \\\"category_name\\\";\\n\\tpublic static final String DATA_TOPIC_ID = \\\"topic_id\\\";\\n\\tprivate final QueryHandler queryHandler = new AnsiQueryHandler();\\n\\tprivate void addCategory(Category category, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(category.getVirtualWiki());\\n\\t\\tthis.validateCategory(category);\\n\\t\\tthis.queryHandler().insertCategory(category, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addGroupMember(String username, int groupId, Connection conn) throws Exception {\\n\\t\\tint groupMemberId = this.queryHandler().nextGroupMemberId(conn);\\n\\t\\tthis.queryHandler().insertGroupMember(groupMemberId, username, groupId, conn);\\n\\t}\\n\\tprivate void addRecentChange(RecentChange change, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(change.getVirtualWiki());\\n\\t\\tthis.validateRecentChange(change);\\n\\t\\tthis.queryHandler().insertRecentChange(change, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tif (topic.getTopicId() < 1) {\\n\\t\\t\\tint topicId = this.queryHandler().nextTopicId(conn);\\n\\t\\t\\ttopic.setTopicId(topicId);\\n\\t\\t}\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().insertTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopicVersion(TopicVersion topicVersion, Connection conn) throws Exception {\\n\\t\\tif (topicVersion.getTopicVersionId() < 1) {\\n\\t\\t\\tint topicVersionId = this.queryHandler().nextTopicVersionId(conn);\\n\\t\\t\\ttopicVersion.setTopicVersionId(topicVersionId);\\n\\t\\t}\\n\\t\\tif (topicVersion.getEditDate() == null) {\\n\\t\\t\\tTimestamp editDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\ttopicVersion.setEditDate(editDate);\\n\\t\\t}\\n\\t\\tthis.validateTopicVersion(topicVersion);\\n\\t\\tthis.queryHandler().insertTopicVersion(topicVersion, conn);\\n\\t}\\n\\tprivate void addUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().insertUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void addVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tif (virtualWiki.getVirtualWikiId() < 1) {\\n\\t\\t\\tint virtualWikiId = this.queryHandler().nextVirtualWikiId(conn);\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(virtualWikiId);\\n\\t\\t}\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().insertVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void addWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.validateWatchlistEntry(topicName);\\n\\t\\tthis.queryHandler().insertWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tprivate void addWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tif (wikiFile.getFileId() < 1) {\\n\\t\\t\\tint fileId = this.queryHandler().nextWikiFileId(conn);\\n\\t\\t\\twikiFile.setFileId(fileId);\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().insertWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws Exception {\\n\\t\\tif (wikiFileVersion.getFileVersionId() < 1) {\\n\\t\\t\\tint fileVersionId = this.queryHandler().nextWikiFileVersionId(conn);\\n\\t\\t\\twikiFileVersion.setFileVersionId(fileVersionId);\\n\\t\\t}\\n\\t\\tif (wikiFileVersion.getUploadDate() == null) {\\n\\t\\t\\tTimestamp uploadDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\twikiFileVersion.setUploadDate(uploadDate);\\n\\t\\t}\\n\\t\\tthis.validateWikiFileVersion(wikiFileVersion);\\n\\t\\tthis.queryHandler().insertWikiFileVersion(wikiFileVersion, conn);\\n\\t}\\n\\tprivate void addWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tif (group.getGroupId() < 1) {\\n\\t\\t\\tint groupId = this.queryHandler().nextWikiGroupId(conn);\\n\\t\\t\\tgroup.setGroupId(groupId);\\n\\t\\t}\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().insertWikiGroup(group, conn);\\n\\t}\\n\\tprivate void addWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tif (user.getUserId() < 1) {\\n\\t\\t\\tint nextUserId = this.queryHandler().nextWikiUserId(conn);\\n\\t\\t\\tuser.setUserId(nextUserId);\\n\\t\\t}\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().insertWikiUser(user, conn);\\n\\t}\\n\\tpublic boolean authenticate(String username, String password) throws Exception {\\n\\t\\tboolean result = false;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\t\\t\\t\\tif (!StringUtils.isBlank(password)) {\\n\\t\\t\\t\\tString encryptedPassword = Encryption.encrypt(password);\\n\\t\\t\\t\\treturn this.queryHandler().authenticateUser(username, encryptedPassword, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic boolean canMoveTopic(Topic fromTopic, String destination) throws Exception {\\n\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, null);\\n\\t\\tif (toTopic == null || toTopic.getDeleteDate() != null) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (toTopic.getRedirectTo() != null && toTopic.getRedirectTo().equals(fromTopic.getName())) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tprivate static void checkLength(String value, int maxLength) throws WikiException {\\n\\t\\tif (value != null && value.length() > maxLength) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", value, new Integer(maxLength).toString()));\\n\\t\\t}\\n\\t}\\n\\tprivate void deleteRecentChanges(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteRecentChanges(topic.getTopicId(), conn);\\n\\t}\\n\\tpublic void deleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdeleteRecentChanges(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = new ParserOutput();\\n\\t\\t\\ttopic.setDeleteDate(new Timestamp(System.currentTimeMillis()));\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void deleteTopicCategories(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteTopicCategories(topic.getTopicId(), conn);\\n\\t}\\n\\tprivate void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tpublic List getAllCategories(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getCategories(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(rs.getString(DATA_CATEGORY_NAME));\\n\\t\\t\\t\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\t\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllRoles() throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoles();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(this.initRole(rs));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllTopicNames(String virtualWiki) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllTopicNames(virtualWikiId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getAllWikiFileVersions(String virtualWiki, String topicName, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiFile wikiFile = lookupWikiFile(virtualWiki, topicName);\\n\\t\\tif (wikiFile == null) {\\n\\t\\t\\tthrow new Exception(\\\"No topic exists for \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllWikiFileVersions(wikiFile, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(initWikiFileVersion(rs));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(virtualWiki, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, String topicName, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, true, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn all;\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(topic.getTopicId(), pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic Collection getRoleMapByLogin(String loginFragment) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByLogin(loginFragment);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger userId = new Integer(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(userId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(userId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setUserId(userId);\\n\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(userId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Collection getRoleMapByRole(String authority) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByRole(authority);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tint groupId = rs.getInt(DATA_GROUP_ID);\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tString key = userId + \\\"|\\\" + groupId;\\n\\t\\t\\tif (roleMaps.containsKey(key)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(key);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\t\\troleMap.setUserId(new Integer(userId));\\n\\t\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (groupId > 0) {\\n\\t\\t\\t\\t\\troleMap.setGroupId(new Integer(groupId));\\n\\t\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(key, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapGroup(String groupName) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroup(groupName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic Collection getRoleMapGroups() throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroups();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger groupId = new Integer(rs.getInt(DATA_GROUP_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(groupId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(groupId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setGroupId(groupId);\\n\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(groupId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapUser(String login) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapUser(login);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic List getTopicsAdmin(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getTopicsAdmin(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getUserContributions(virtualWiki, userString, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getVirtualWikiList() throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().getVirtualWikis(conn);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tVirtualWiki virtualWiki = initVirtualWiki(rs);\\n\\t\\t\\t\\tresults.add(virtualWiki);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Watchlist getWatchlist(String virtualWiki, int userId) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn new Watchlist(virtualWiki, all);\\n\\t}\\n\\tpublic List getWatchlist(String virtualWiki, int userId, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tprivate RecentChange initRecentChange(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRecentChange change = new RecentChange();\\n\\t\\t\\tchange.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\tchange.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\tchange.setTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tchange.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\tchange.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\tchange.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\tchange.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setAuthorName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tchange.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\tchange.setVirtualWiki(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\treturn change;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing recent change\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Role initRole(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRole role = new Role(rs.getString(\\\"role_name\\\"));\\n\\t\\t\\trole.setDescription(rs.getString(\\\"role_description\\\"));\\n\\t\\t\\treturn role;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing role\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Topic initTopic(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (rs.size() > 1 && rs.getTimestamp(\\\"delete_date\\\") != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\trs.last();\\n\\t\\t\\t}\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tTopic topic = new Topic();\\n\\t\\t\\ttopic.setAdminOnly(rs.getInt(\\\"topic_admin_only\\\") != 0);\\n\\t\\t\\ttopic.setName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\ttopic.setVirtualWiki(virtualWiki);\\n\\t\\t\\tint currentVersionId = rs.getInt(\\\"current_version_id\\\");\\n\\t\\t\\tif (currentVersionId > 0) {\\n\\t\\t\\t\\ttopic.setCurrentVersionId(new Integer(currentVersionId));\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topic.getTopicContent() == null) {\\n\\t\\t\\t\\ttopic.setTopicContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopic.setReadOnly(rs.getInt(\\\"topic_read_only\\\") != 0);\\n\\t\\t\\ttopic.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\ttopic.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\ttopic.setRedirectTo(rs.getString(\\\"redirect_to\\\"));\\n\\t\\t\\treturn topic;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate TopicVersion initTopicVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tTopicVersion topicVersion = new TopicVersion();\\n\\t\\t\\ttopicVersion.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\ttopicVersion.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopicVersion.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\ttopicVersion.setVersionContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topicVersion.getVersionContent() == null) {\\n\\t\\t\\t\\ttopicVersion.setVersionContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\ttopicVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\ttopicVersion.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\ttopicVersion.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\ttopicVersion.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\ttopicVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\treturn topicVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate VirtualWiki initVirtualWiki(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tVirtualWiki virtualWiki = new VirtualWiki();\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(rs.getInt(\\\"virtual_wiki_id\\\"));\\n\\t\\t\\tvirtualWiki.setName(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\tvirtualWiki.setDefaultTopicName(rs.getString(\\\"default_topic_name\\\"));\\n\\t\\t\\treturn virtualWiki;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing virtual wiki\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFile initWikiFile(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tWikiFile wikiFile = new WikiFile();\\n\\t\\t\\twikiFile.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFile.setAdminOnly(rs.getInt(\\\"file_admin_only\\\") != 0);\\n\\t\\t\\twikiFile.setFileName(rs.getString(\\\"file_name\\\"));\\n\\t\\t\\twikiFile.setVirtualWiki(virtualWiki);\\n\\t\\t\\twikiFile.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\twikiFile.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\twikiFile.setReadOnly(rs.getInt(\\\"file_read_only\\\") != 0);\\n\\t\\t\\twikiFile.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\twikiFile.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFile.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFile;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing file\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFileVersion initWikiFileVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiFileVersion wikiFileVersion = new WikiFileVersion();\\n\\t\\t\\twikiFileVersion.setFileVersionId(rs.getInt(\\\"file_version_id\\\"));\\n\\t\\t\\twikiFileVersion.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFileVersion.setUploadComment(rs.getString(\\\"upload_comment\\\"));\\n\\t\\t\\twikiFileVersion.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\twikiFileVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setUploadDate(rs.getTimestamp(\\\"upload_date\\\"));\\n\\t\\t\\twikiFileVersion.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFileVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\twikiFileVersion.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFileVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing wiki file version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiGroup initWikiGroup(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiGroup wikiGroup = new WikiGroup();\\n\\t\\t\\twikiGroup.setGroupId(rs.getInt(\\\"group_id\\\"));\\n\\t\\t\\twikiGroup.setName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\twikiGroup.setDescription(rs.getString(\\\"group_description\\\"));\\n\\t\\t\\treturn wikiGroup;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing group\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiUser initWikiUser(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tString username = rs.getString(\\\"login\\\");\\n\\t\\t\\tWikiUser user = new WikiUser(username);\\n\\t\\t\\tuser.setUserId(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tuser.setDisplayName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tuser.setCreateDate(rs.getTimestamp(\\\"create_date\\\"));\\n\\t\\t\\tuser.setLastLoginDate(rs.getTimestamp(\\\"last_login_date\\\"));\\n\\t\\t\\tuser.setCreateIpAddress(rs.getString(\\\"create_ip_address\\\"));\\n\\t\\t\\tuser.setLastLoginIpAddress(rs.getString(\\\"last_login_ip_address\\\"));\\n\\t\\t\\tuser.setDefaultLocale(rs.getString(\\\"default_locale\\\"));\\n\\t\\t\\tuser.setEmail(rs.getString(\\\"email\\\"));\\n\\t\\t\\tuser.setEditor(rs.getString(\\\"editor\\\"));\\n\\t\\t\\tuser.setSignature(rs.getString(\\\"signature\\\"));\\n\\t\\t\\treturn user;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing user\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tpublic List lookupCategoryTopics(String virtualWiki, String categoryName) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupCategoryTopics(virtualWikiId, categoryName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setChildTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\tcategory.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Topic lookupTopic(String virtualWiki, String topicName, boolean deleteOK, Object transactionObject) throws Exception {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tif (cacheElement != null) {\\n\\t\\t\\t\\tTopic cacheTopic = (Topic)cacheElement.getObjectValue();\\n\\t\\t\\t\\treturn (cacheTopic == null || (!deleteOK && cacheTopic.getDeleteDate() != null)) ? null : new Topic(cacheTopic);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiLink wikiLink = LinkUtil.parseWikiLink(topicName);\\n\\t\\tString namespace = wikiLink.getNamespace();\\n\\t\\tboolean caseSensitive = true;\\n\\t\\tif (namespace != null) {\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_SPECIAL)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_TEMPLATE) || namespace.equals(NamespaceHandler.NAMESPACE_USER) || namespace.equals(NamespaceHandler.NAMESPACE_CATEGORY)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcaseSensitive = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tTopic topic = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopic(virtualWikiId, topicName, caseSensitive, conn);\\n\\t\\t\\tif (rs.size() != 0) {\\n\\t\\t\\t\\ttopic = initTopic(rs);\\n\\t\\t\\t}\\n\\t\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTopic cacheTopic = (topic == null) ? null : new Topic(topic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPICS, key, cacheTopic);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn (topic == null || (!deleteOK && topic.getDeleteDate() != null)) ? null : topic;\\n\\t}\\n\\tpublic int lookupTopicCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"topic_count\\\");\\n\\t}\\n\\tpublic List lookupTopicByType(String virtualWiki, int topicType, Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicByType(virtualWikiId, topicType, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic TopicVersion lookupTopicVersion(int topicVersionId) throws Exception {\\n\\t\\tTopicVersion result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicVersion(topicVersionId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : this.initTopicVersion(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic VirtualWiki lookupVirtualWiki(String virtualWikiName) throws Exception {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiName);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tVirtualWiki virtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getName().equals(virtualWikiName)) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, null);\\n\\t\\treturn null;\\n\\t}\\n\\tprivate int lookupVirtualWikiId(String virtualWikiName) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = this.lookupVirtualWiki(virtualWikiName);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\treturn (virtualWiki == null) ? -1 : virtualWiki.getVirtualWikiId();\\n\\t}\\n\\tprivate String lookupVirtualWikiName(int virtualWikiId) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = null;\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t\\treturn (virtualWiki == null) ? null : virtualWiki.getName();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() == virtualWikiId) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki.getName();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, null);\\n\\t\\treturn null;\\n\\t}\\n\\tpublic WikiFile lookupWikiFile(String virtualWiki, String topicName) throws Exception {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFile(virtualWikiId, topic.getTopicId());\\n\\t\\treturn (rs.size() == 0) ? null : initWikiFile(rs);\\n\\t}\\n\\tpublic int lookupWikiFileCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFileCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"file_count\\\");\\n\\t}\\n\\tpublic WikiGroup lookupWikiGroup(String groupName) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiGroup(groupName);\\n\\t\\treturn (rs.size() == 0) ? null : initWikiGroup(rs);\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(int userId) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(userId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : initWikiUser(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(String username) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(username, conn);\\n\\t\\t\\tif (rs.size() == 0) {\\n\\t\\t\\t\\tresult = null;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\t\\tresult = lookupWikiUser(userId);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupWikiUserCount() throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserCount();\\n\\t\\treturn rs.getInt(\\\"user_count\\\");\\n\\t}\\n\\tpublic String lookupWikiUserEncryptedPassword(String username) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserEncryptedPassword(username);\\n\\t\\treturn (rs.size() == 0) ? null : rs.getString(\\\"password\\\");\\n\\t}\\n\\tpublic List lookupWikiUsers(Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUsers(pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(\\\"login\\\"));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic void moveTopic(Topic fromTopic, TopicVersion fromVersion, String destination) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (!this.canMoveTopic(fromTopic, destination)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"move.exception.destinationexists\\\", destination));\\n\\t\\t\\t}\\n\\t\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, conn);\\n\\t\\t\\tboolean detinationExistsFlag = (toTopic != null && toTopic.getDeleteDate() == null);\\n\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopic(toTopic, null, false);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tString fromTopicName = fromTopic.getName();\\n\\t\\t\\tfromTopic.setName(destination);\\n\\t\\t\\tParserOutput fromParserOutput = ParserUtil.parserOutput(fromTopic.getTopicContent(), fromTopic.getVirtualWiki(), fromTopic.getName());\\n\\t\\t\\twriteTopic(fromTopic, fromVersion, fromParserOutput.getCategories(), fromParserOutput.getLinks(), true);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t\\twriteTopic(toTopic, null, null, null, false);\\n\\t\\t\\t\\tthis.undeleteTopic(toTopic, null, false);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic = fromTopic;\\n\\t\\t\\t\\ttoTopic.setTopicId(-1);\\n\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t}\\n\\t\\t\\tString content = ParserUtil.parserRedirectContent(destination);\\n\\t\\t\\ttoTopic.setRedirectTo(destination);\\n\\t\\t\\ttoTopic.setTopicType(Topic.TYPE_REDIRECT);\\n\\t\\t\\ttoTopic.setTopicContent(content);\\n\\t\\t\\tTopicVersion toVersion = fromVersion;\\n\\t\\t\\ttoVersion.setTopicVersionId(-1);\\n\\t\\t\\ttoVersion.setVersionContent(content);\\n\\t\\t\\tParserOutput toParserOutput = ParserUtil.parserOutput(toTopic.getTopicContent(), toTopic.getVirtualWiki(), toTopic.getName());\\n\\t\\t\\twriteTopic(toTopic, toVersion, toParserOutput.getCategories(), toParserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprotected QueryHandler queryHandler() {\\n\\t\\treturn this.queryHandler;\\n\\t}\\n\\tpublic void reloadRecentChanges() throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().reloadRecentChanges(conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void setup(Locale locale, WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiDatabase.initialize();\\n\\t\\t\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeQuery(WikiDatabase.getExistenceValidationQuery());\\n\\t\\t\\treturn;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\t\\t}\\n\\t\\tWikiDatabase.setup(locale, user, username, encryptedPassword);\\n\\t}\\n\\tpublic void setupSpecialPages(Locale locale, WikiUser user, VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STARTING_POINTS, user, false);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_LEFT_MENU, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_BOTTOM_AREA, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STYLESHEET, user, true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void undeleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\ttopic.setDeleteDate(null);\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void updateSpecialPage(Locale locale, String virtualWiki, String topicName, String ipAddress) throws Exception {\\n\\t\\tlogger.info(\\\"Updating special page \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tString contents = WikiUtil.readSpecialPage(locale, topicName);\\n\\t\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, conn);\\n\\t\\t\\tint charactersChanged = StringUtils.length(contents) - StringUtils.length(topic.getTopicContent());\\n\\t\\t\\ttopic.setTopicContent(contents);\\n\\t\\t\\t\\t\\t\\tTopicVersion topicVersion = new TopicVersion(null, ipAddress, \\\"Automatically updated by system upgrade\\\", contents, charactersChanged);\\n\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), virtualWiki, topicName);\\n\\t\\t\\twriteTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void updateTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().updateTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().updateUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().updateVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void updateWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().updateWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().updateWikiGroup(group, conn);\\n\\t}\\n\\tprivate void updateWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().updateWikiUser(user, conn);\\n\\t}\\n\\tprotected void validateAuthority(String role) throws WikiException {\\n\\t\\tcheckLength(role, 30);\\n\\t}\\n\\tprotected void validateCategory(Category category) throws WikiException {\\n\\t\\tcheckLength(category.getName(), 200);\\n\\t\\tcheckLength(category.getSortKey(), 200);\\n\\t}\\n\\tprotected void validateRecentChange(RecentChange change) throws WikiException {\\n\\t\\tcheckLength(change.getTopicName(), 200);\\n\\t\\tcheckLength(change.getAuthorName(), 200);\\n\\t\\tcheckLength(change.getVirtualWiki(), 100);\\n\\t\\tchange.setEditComment(StringUtils.substring(change.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateRole(Role role) throws WikiException {\\n\\t\\tcheckLength(role.getAuthority(), 30);\\n\\t\\trole.setDescription(StringUtils.substring(role.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateTopic(Topic topic) throws WikiException {\\n\\t\\tcheckLength(topic.getName(), 200);\\n\\t\\tcheckLength(topic.getRedirectTo(), 200);\\n\\t}\\n\\tprotected void validateTopicVersion(TopicVersion topicVersion) throws WikiException {\\n\\t\\tcheckLength(topicVersion.getAuthorIpAddress(), 39);\\n\\t\\ttopicVersion.setEditComment(StringUtils.substring(topicVersion.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateUserDetails(WikiUserDetails userDetails) throws WikiException {\\n\\t\\tcheckLength(userDetails.getUsername(), 100);\\n\\t\\t\\t\\tif (userDetails.getPassword() != null && userDetails.getPassword().length() > 100) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", \\\"-\\\", \\\"100\\\"));\\n\\t\\t}\\n\\t}\\n\\tprotected void validateVirtualWiki(VirtualWiki virtualWiki) throws WikiException {\\n\\t\\tcheckLength(virtualWiki.getName(), 100);\\n\\t\\tcheckLength(virtualWiki.getDefaultTopicName(), 200);\\n\\t}\\n\\tprotected void validateWatchlistEntry(String topicName) throws WikiException {\\n\\t\\tcheckLength(topicName, 200);\\n\\t}\\n\\tprotected void validateWikiFile(WikiFile wikiFile) throws WikiException {\\n\\t\\tcheckLength(wikiFile.getFileName(), 200);\\n\\t\\tcheckLength(wikiFile.getUrl(), 200);\\n\\t\\tcheckLength(wikiFile.getMimeType(), 100);\\n\\t}\\n\\tprotected void validateWikiFileVersion(WikiFileVersion wikiFileVersion) throws WikiException {\\n\\t\\tcheckLength(wikiFileVersion.getUrl(), 200);\\n\\t\\tcheckLength(wikiFileVersion.getMimeType(), 100);\\n\\t\\tcheckLength(wikiFileVersion.getAuthorIpAddress(), 39);\\n\\t\\twikiFileVersion.setUploadComment(StringUtils.substring(wikiFileVersion.getUploadComment(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiGroup(WikiGroup group) throws WikiException {\\n\\t\\tcheckLength(group.getName(), 30);\\n\\t\\tgroup.setDescription(StringUtils.substring(group.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiUser(WikiUser user) throws WikiException {\\n\\t\\tcheckLength(user.getUsername(), 100);\\n\\t\\tcheckLength(user.getDisplayName(), 100);\\n\\t\\tcheckLength(user.getCreateIpAddress(), 39);\\n\\t\\tcheckLength(user.getLastLoginIpAddress(), 39);\\n\\t\\tcheckLength(user.getDefaultLocale(), 8);\\n\\t\\tcheckLength(user.getEmail(), 100);\\n\\t\\tcheckLength(user.getEditor(), 50);\\n\\t\\tcheckLength(user.getSignature(), 255);\\n\\t}\\n\\tpublic void writeFile(WikiFile wikiFile, WikiFileVersion wikiFileVersion) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(wikiFile.getFileName());\\n\\t\\t\\tif (wikiFile.getFileId() <= 0) {\\n\\t\\t\\t\\taddWikiFile(wikiFile, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateWikiFile(wikiFile, conn);\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setFileId(wikiFile.getFileId());\\n\\t\\t\\t\\t\\t\\taddWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRole(Role role, boolean update) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.validateRole(role);\\n\\t\\t\\tif (update) {\\n\\t\\t\\t\\tthis.queryHandler().updateRole(role, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.queryHandler().insertRole(role, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapGroup(int groupId, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteGroupAuthorities(groupId, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertGroupAuthority(groupId, authority, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJAMWikiAuthenticationConfiguration.resetJamwikiAnonymousAuthorities();\\n\\t\\t\\tJAMWikiAuthenticationConfiguration.resetDefaultGroupRoles();\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapUser(String username, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteUserAuthorities(username, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertUserAuthority(username, authority, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeTopic(Topic topic, TopicVersion topicVersion, LinkedHashMap categories, Vector links, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\tWikiCache.removeFromCache(WikiBase.CACHE_PARSED_TOPIC_CONTENT, key);\\n\\t\\t\\tWikiCache.removeFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(topic.getName());\\n\\t\\t\\tif (topic.getTopicId() <= 0) {\\n\\t\\t\\t\\taddTopic(topic, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateTopic(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\tif (topicVersion.getPreviousTopicVersionId() == null && topic.getCurrentVersionId() != null) {\\n\\t\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(topic.getCurrentVersionId());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttopicVersion.setTopicId(topic.getTopicId());\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopicVersion(topicVersion, conn);\\n\\t\\t\\t\\tString authorName = topicVersion.getAuthorIpAddress();\\n\\t\\t\\t\\tInteger authorId = topicVersion.getAuthorId();\\n\\t\\t\\t\\tif (authorId != null) {\\n\\t\\t\\t\\t\\tWikiUser user = this.lookupWikiUser(topicVersion.getAuthorId().intValue());\\n\\t\\t\\t\\t\\tauthorName = user.getUsername();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tRecentChange change = new RecentChange(topic, topicVersion, authorName);\\n\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (categories != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicCategories(topic, conn);\\n\\t\\t\\t\\tfor (Iterator iterator = categories.keySet().iterator(); iterator.hasNext();) {\\n\\t\\t\\t\\t\\tString categoryName = (String)iterator.next();\\n\\t\\t\\t\\t\\tCategory category = new Category();\\n\\t\\t\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\t\\t\\tcategory.setSortKey((String)categories.get(categoryName));\\n\\t\\t\\t\\t\\tcategory.setVirtualWiki(topic.getVirtualWiki());\\n\\t\\t\\t\\t\\tcategory.setChildTopicName(topic.getName());\\n\\t\\t\\t\\t\\tthis.addCategory(category, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (links != null) {\\n\\t\\t\\t\\tWikiBase.getSearchEngine().deleteFromIndex(topic);\\n\\t\\t\\t\\tWikiBase.getSearchEngine().addToIndex(topic, links);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeVirtualWiki(VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(virtualWiki.getName());\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() <= 0) {\\n\\t\\t\\t\\tthis.addVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName());\\n\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId());\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName(), virtualWiki);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId(), virtualWiki);\\n\\t}\\n\\tpublic void writeWatchlistEntry(Watchlist watchlist, String virtualWiki, String topicName, int userId) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tString article = WikiUtil.extractTopicLink(topicName);\\n\\t\\t\\tString comments = WikiUtil.extractCommentsLink(topicName);\\n\\t\\t\\tif (watchlist.containsTopic(topicName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.remove(article);\\n\\t\\t\\t\\twatchlist.remove(comments);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.add(article);\\n\\t\\t\\t\\twatchlist.add(comments);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiGroup(WikiGroup group) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (group.getGroupId() <= 0) {\\n\\t\\t\\t\\tthis.addWikiGroup(group, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateWikiGroup(group, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiUser(WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiUtil.validateUserName(user.getUsername());\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (user.getUserId() <= 0) {\\n\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\tthis.addUserDetails(userDetails, conn);\\n\\t\\t\\t\\tthis.addWikiUser(user, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addGroupMember(user.getUsername(), WikiBase.getGroupRegisteredUser().getGroupId(), conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (!StringUtils.isBlank(encryptedPassword)) {\\n\\t\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\t\\tthis.updateUserDetails(userDetails, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.updateWikiUser(user, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n}\""
            },
            "m13": {
                "content": "The source code of `AnsiDataHandler.java` reveals that it is a core component responsible for handling database operations in the JAMWiki system. Here's a breakdown of its structure and responsibilities:\n\n### Key Characteristics:\n- **Implements `DataHandler`**: This class serves as a concrete implementation of the `DataHandler` interface, suggesting it may be part of a family of database handlers (e.g., `DB2DataHandler`, `MySqlDataHandler`, etc.).\n- **Contains Database Logic**:\n  - Performs CRUD operations (`add`, `update`, `delete`, `lookup`) for entities like `Topic`, `VirtualWiki`, `WikiUser`, `WikiFile`, `Category`, etc.\n  - Uses `QueryHandler` (specifically `AnsiQueryHandler`) to execute queries.\n- **Caching Mechanism**:\n  - Uses `WikiCache` to cache frequently accessed data such as topics and virtual wikis.\n- **Transaction Management**:\n  - Wraps most operations inside transactions using `DatabaseConnection`.\n- **Validation & Security**:\n  - Includes validation logic for various entities.\n  - Handles user authentication and role-based access control.\n\n---\n\n### Entities Directly Affected by Changes in `AnsiDataHandler.java`\n\nGiven its central role in data persistence and retrieval, any changes to this file could potentially impact:\n\n1. **All entities it interacts with directly**, including:\n   - `Topic`, `TopicVersion`\n   - `WikiFile`, `WikiFileVersion`\n   - `VirtualWiki`\n   - `WikiUser`, `WikiGroup`, `WikiUserDetails`\n   - `Category`\n   - `Role`, `RoleMap`\n   - `RecentChange`\n   - `Watchlist`\n\n2. **Entities involved in co-change relationships**, especially:\n   - `AnsiQueryHandler.java` \u2013 frequently changed together (high confidence)\n   - `QueryHandler.java`\n   - `WikiDatabase.java`\n   - `DatabaseUpgrades.java`\n   - `WikiBase.java`\n   - `WikiCache.java`\n   - `JAMWikiAuthenticationConfiguration.java`\n\n3. **Infrastructure Classes**:\n   - `DatabaseConnection`\n   - `WikiLogger`\n   - `WikiUtil`\n   - `ParserUtil`\n   - `WikiCache`\n\n---\n\n### Recommendation for Synchronization\n\nBased on CIA analysis, the following entities should be reviewed or synchronized when modifying `AnsiDataHandler.java`:\n\n| Entity | Reason |\n|-------|--------|\n| `AnsiQueryHandler.java` | High semantic similarity and frequent co-change; likely to be affected by structural changes. |\n| `QueryHandler.java` | Base interface used by `AnsiQueryHandler`; changes in method signatures would ripple here. |\n| `WikiBase.java` | Used heavily for caching and special pages; tightly integrated. |\n| `WikiCache.java` | Caching layer used extensively; any change in cached data structures affects this. |\n| `Topic.java`, `TopicVersion.java` | Central domain objects manipulated by `AnsiDataHandler`. |\n| `VirtualWiki.java` | Frequently looked up and stored; changes in DB logic affect it. |\n| `WikiUser.java`, `WikiGroup.java`, `Role.java` | Related to authentication and permissions handled by this class. |\n| `WikiFile.java`, `WikiFileVersion.java` | Managed via file-handling methods in this class. |\n\n---\n\n### Final Thoughts\n\nThis class plays a foundational role in the persistence layer of JAMWiki. Any modifications\u2014especially those involving schema assumptions, transaction behavior, caching strategy, or query execution\u2014should be accompanied by updates or reviews in the above list of entities.\n\nWould you like me to proceed with further investigation into one of these related files? For example, we can look at `AnsiQueryHandler.java` to understand how it collaborates with `AnsiDataHandler.java`.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m14": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m15": {
                "content": "Title: Diagnosis of starting entity `AnsiDataHandler`\n\nChange set: [AnsiQueryHandler, QueryHandler, WikiBase, WikiCache, DatabaseUpgrades, WikiDatabase, JAMWikiAuthenticationConfiguration, Topic, TopicVersion, VirtualWiki, WikiFile, WikiFileVersion, WikiUser, WikiGroup, Role, RoleMap, RecentChange, Watchlist, Category, WikiUserDetails, Encryption, ParserOutput, ParserUtil, NamespaceHandler, Pagination, LinkUtil, WikiLink, DataHandler, Utilities, Environment, UpgradeServlet, PersistencyServlet, MoveServlet, AdminServlet, ImageUtil, ServletUtil, JAMWikiServlet, ImageLinkTag, WikiUtil, WikiLogger, WikiException, WikiMessage, DatabaseConnection, LocalDataSource, WikiPreparedStatement, WikiDistributedCache]\n\nDetails:\n- **AnsiQueryHandler**: High co-change confidence (0.4375) and high semantic similarity; collaborates on query execution.\n- **QueryHandler**: Interface used by `AnsiQueryHandler`; changes in method usage affect this.\n- **WikiBase**: Used for special pages, caching, and search integration; tightly integrated.\n- **WikiCache**: Heavily involved in caching topics, virtual wikis, etc.\n- **DatabaseUpgrades**: Related to DB schema logic and versioning.\n- **WikiDatabase**: Core database setup and initialization routines.\n- **JAMWikiAuthenticationConfiguration**: Manages roles and authentication data.\n- **Topic**: Central domain object with many operations in `AnsiDataHandler`.\n- **TopicVersion**: Managed alongside topics during edits and history tracking.\n- **VirtualWiki**: Frequently looked up and stored; core to multi-wiki support.\n- **WikiFile** / **WikiFileVersion**: File management and storage logic.\n- **WikiUser** / **WikiGroup** / **Role** / **RoleMap**: User/group/role management functions.\n- **RecentChange**: Tracks topic edit history.\n- **Watchlist**: Monitors user subscriptions to topics.\n- **Category**: Manages categorization of topics.\n- **WikiUserDetails**: Handles user credential details.\n- **Encryption**: Used for password encryption.\n- **ParserOutput** / **ParserUtil**: Involved in parsing and content processing.\n- **NamespaceHandler**: Manages namespace handling logic.\n- **Pagination**: Supports paginated queries.\n- **LinkUtil** / **WikiLink**: For link resolution and manipulation.\n- **DataHandler**: Base interface implemented by `AnsiDataHandler`.\n- **Utilities**: General utility functions that may be shared.\n- **Environment**: May contain environment-specific configurations.\n- **UpgradeServlet**: Likely interacts with DB upgrade logic.\n- **PersistencyServlet**: Directly related to persistence layer.\n- **MoveServlet**: Involves topic moving logic.\n- **AdminServlet**: Administrative operations involving users/topics.\n- **ImageUtil**: Image-related file handling.\n- **ServletUtil**: Utility methods used across servlets.\n- **JAMWikiServlet**: Base servlet class potentially referencing DB.\n- **ImageLinkTag**: Possibly deals with image topic references.\n- **WikiUtil**: Common utility functions used throughout.\n- **WikiLogger**: Logging framework used heavily.\n- **WikiException**: Error handling infrastructure.\n- **WikiMessage**: Message and i18n handling.\n- **DatabaseConnection**: Transaction and connection management.\n- **LocalDataSource**: Potential alternative DB connection source.\n- **WikiPreparedStatement**: SQL statement handling.\n- **WikiDistributedCache**: Distributed caching if enabled.\n\nThis comprehensive change set reflects entities that are either directly coupled, conceptually similar, or historically co-changed with `AnsiDataHandler.java`. Synchronizing these increases the likelihood of maintaining system consistency after modifications.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}