{
    "time": 1749332753.9322827,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `JAMWiki`, a well-known Java open source project. The starting entity you need to deal with is AnsiDataHandler.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_35c71e1abb464ef1954ac3",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"Utilities\", \"1\", \"0.03125\"], [\"WikiBase\", \"3\", \"0.09375\"], [\"Environment\", \"2\", \"0.0625\"], [\"WikiDatabase\", \"6\", \"0.1875\"], [\"UpgradeServlet\", \"5\", \"0.15625\"], [\"PersistencyServlet\", \"1\", \"0.03125\"], [\"HSqlQueryHandler\", \"1\", \"0.03125\"], [\"DB2DataHandler\", \"2\", \"0.0625\"], [\"MSSqlDataHandler\", \"2\", \"0.0625\"], [\"HSqlDataHandler\", \"2\", \"0.0625\"], [\"DB2400DataHandler\", \"2\", \"0.0625\"], [\"MySqlDataHandler\", \"2\", \"0.0625\"], [\"OracleDataHandler\", \"2\", \"0.0625\"], [\"PostgresDataHandler\", \"2\", \"0.0625\"], [\"QueryHandler\", \"8\", \"0.25\"], [\"AnsiQueryHandler\", \"14\", \"0.4375\"], [\"MoveServlet\", \"2\", \"0.0625\"], [\"Role\", \"1\", \"0.03125\"], [\"RolesServlet\", \"1\", \"0.03125\"], [\"DatabaseUserHandler\", \"2\", \"0.0625\"], [\"DatabaseUpgrades\", \"6\", \"0.1875\"], [\"DatabaseConnection\", \"3\", \"0.09375\"], [\"LocalDataSource\", \"1\", \"0.03125\"], [\"WikiPreparedStatement\", \"1\", \"0.03125\"], [\"WikiUser\", \"1\", \"0.03125\"], [\"JFlexParser\", \"2\", \"0.0625\"], [\"MigrationUtil\", \"1\", \"0.03125\"], [\"ParserException\", \"1\", \"0.03125\"], [\"JAMWikiModel\", \"1\", \"0.03125\"], [\"JFlexLexer\", \"1\", \"0.03125\"], [\"WikiHeadingTag\", \"1\", \"0.03125\"], [\"TemplateTag\", \"1\", \"0.03125\"], [\"WikiLinkTag\", \"1\", \"0.03125\"], [\"HtmlLinkTag\", \"1\", \"0.03125\"], [\"WikiReferenceTag\", \"1\", \"0.03125\"], [\"JFlexParserTag\", \"1\", \"0.03125\"], [\"WikiSignatureTag\", \"1\", \"0.03125\"], [\"JavascriptTag\", \"1\", \"0.03125\"], [\"WikiReferencesTag\", \"1\", \"0.03125\"], [\"WikiBoldItalicTag\", \"1\", \"0.03125\"], [\"IncludeOnlyTag\", \"1\", \"0.03125\"], [\"NoIncludeTag\", \"1\", \"0.03125\"], [\"BlikiProxyParser\", \"1\", \"0.03125\"], [\"BlikiProxyParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiCrawlHandler\", \"1\", \"0.03125\"], [\"JAMWikiLoadHandler\", \"1\", \"0.03125\"], [\"Main\", \"1\", \"0.03125\"], [\"WikiDistributedCache\", \"1\", \"0.03125\"], [\"JAMWikiAuthenticationConfiguration\", \"1\", \"0.03125\"], [\"AdminServlet\", \"3\", \"0.09375\"], [\"SetupServlet\", \"1\", \"0.03125\"], [\"ImageUtil\", \"3\", \"0.09375\"], [\"ParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiServlet\", \"3\", \"0.09375\"], [\"ImageLinkTag\", \"3\", \"0.09375\"], [\"ServletUtil\", \"2\", \"0.0625\"], [\"LinkTag\", \"1\", \"0.03125\"], [\"JAMWikiUnitTest\", \"1\", \"0.03125\"], [\"AdminVirtualWikiServlet\", \"1\", \"0.03125\"], [\"Topic\", \"1\", \"0.03125\"], [\"LinkUtil\", \"1\", \"0.03125\"], [\"WikiPageInfo\", \"1\", \"0.03125\"], [\"RankingAlgorithmSearchEngine\", \"1\", \"0.03125\"], [\"LuceneSearchEngine\", \"1\", \"0.03125\"], [\"H2DataHandler\", \"1\", \"0.03125\"], [\"SybaseASADataHandler\", \"1\", \"0.03125\"], [\"CacheDataHandler\", \"1\", \"0.03125\"], [\"AnsiDataHandlerTest\", \"1\", \"0.03125\"], [\"StylesheetServlet\", \"1\", \"0.03125\"], [\"WikiCache\", \"1\", \"0.03125\"], [\"WikiCacheTest\", \"1\", \"0.03125\"]]"
        },
        {
            "content": "The co-change relationship analysis reveals that `AnsiDataHandler.java` has a significant historical correlation with changes in other entities. Here are the key findings:\n\n1. **High Confidence Relationships**:\n   - `AnsiQueryHandler.java`: This entity has the highest support (14) and confidence (0.4375). It is highly likely that changes in `AnsiDataHandler.java` will impact `AnsiQueryHandler.java`.\n   - `QueryHandler.java`: With 8 supports and a confidence of 0.25, this entity also shows a relatively strong co-change relationship.\n\n2. **Moderate Confidence Relationships**:\n   - Entities like `WikiDatabase.java`, `UpgradeServlet.java`, `DB2DataHandler.java`, `MSSqlDataHandler.java`, `HSqlDataHandler.java`, `DB2400DataHandler.java`, `MySqlDataHandler.java`, `OracleDataHandler.java`, `PostgresDataHandler.java`, `DatabaseUpgrades.java`, and `DatabaseConnection.java` show moderate confidence values ranging from 0.09 to 0.18.\n   - These indicate dependencies that should be investigated further for synchronization needs.\n\n3. **Low Confidence Relationships**: \n   - Many entities have lower confidence values (e.g., 0.03125), indicating weaker historical correlations. While these may not require immediate attention, they can be revisited if further analysis suggests potential impacts.\n\nBased on the results, I recommend focusing on `AnsiQueryHandler.java` as the most critical dependent entity. Next, we should analyze coupling dependencies between `AnsiDataHandler.java` and `AnsiQueryHandler.java` to understand their interrelationships better. \n\nProceeding with this, I will call the `get_coupling_dependencies` function for these two entities. \n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_b6b43cffdefc4a7381c9bf",
                    "function": {
                        "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "The coupling dependency analysis between `AnsiDataHandler.java` and `AnsiQueryHandler.java` revealed that there are no direct structural dependencies (such as method calls, inheritance, or interface implementation) between these two entities. This suggests that the co-change relationship observed earlier might be due to other factors, such as shared functionality, similar maintenance tasks, or historical development patterns rather than direct code-level interactions.\n\nGiven this result, it is important to explore alternative means of analyzing their relationship further, especially since the co-change relationship indicates a significant historical correlation. One approach is to examine the semantic similarity between these files to determine whether they share conceptual or functional similarities that could explain the co-change pattern.\n\nTo proceed, I will call the `get_conceptual_coupling` function for `AnsiDataHandler.java` and `AnsiQueryHandler.java`. This will help us understand if there is any meaningful semantic overlap between the two files.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_463bcc3afc6f4c1d83af2a",
                    "function": {
                        "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.87263656\""
        },
        {
            "content": "The conceptual coupling analysis between `AnsiDataHandler.java` and `AnsiQueryHandler.java` returned a high semantic similarity score of **0.8726** (approximately 87.26%). This indicates that, despite the absence of direct structural dependencies, the two entities share significant conceptual or functional similarities.\n\n### Interpretation:\n- The high semantic similarity suggests that both files likely implement related logic or serve similar roles within the system, which could explain their strong co-change relationship.\n- Even though there is no direct method call or inheritance link, changes in one might still influence the other due to shared responsibilities in data handling and query execution.\n\n### Next Steps:\nTo further understand how these entities interact at the code level, I recommend analyzing the **call graph** of `AnsiDataHandler.java`. This will show us which entities are directly invoked or referenced by it and help identify potential indirect relationships.\n\nI will now call the `get_call_graph` function for `AnsiDataHandler.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_1fcff6ef88c246a8a7e987",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"Encryption\", \"TopicVersion\", \"ParserOutput\", \"WikiLink\", \"WikiUser\", \"DataHandler\", \"WikiMessage\", \"NamespaceHandler\", \"RecentChange\", \"JAMWikiAuthenticationConfiguration\", \"WikiBase\", \"LinkUtil\", \"Topic\", \"WikiGroup\", \"Pagination\", \"VirtualWiki\", \"WikiUtil\", \"WikiCache\", \"WikiException\", \"Role\", \"WikiLogger\", \"Watchlist\", \"WikiUserDetails\", \"Category\", \"RoleMap\", \"WikiFileVersion\", \"ParserUtil\", \"WikiFile\"]"
        },
        {
            "content": "The call graph for `AnsiDataHandler.java` reveals that it directly interacts with several entities, such as:\n\n- **DataHandler**: Likely an abstract or base class that `AnsiDataHandler` extends or implements.\n- **WikiBase**, **WikiUtil**, **WikiCache**, **WikiLogger**, **WikiException**, **WikiMessage**, **WikiUser**, **VirtualWiki**, **Topic**, **NamespaceHandler**, **LinkUtil**, **Encryption**, etc.\n\nThese entities represent core components of the JAMWiki system, indicating that `AnsiDataHandler.java` plays a central role in coordinating with various modules related to data management, user handling, caching, logging, and content processing.\n\n### Observations:\n- The strong conceptual coupling with `AnsiQueryHandler.java` (0.8726) and its high co-change support (14 times changed together) suggests that even though there is no direct structural dependency, they likely share similar responsibilities or are part of the same functional domain\u2014possibly SQL/data handling.\n- Since `AnsiDataHandler` does not directly call `AnsiQueryHandler`, any ripple effect would be **indirect**, possibly through shared interfaces like `DataHandler`, or via runtime behavior such as dynamic dispatching or configuration-based routing.\n\n### Recommendation:\nTo better understand whether `AnsiQueryHandler.java` should be synchronized with changes in `AnsiDataHandler.java`, we can examine the **origin code** of both files to look for indirect references, interface implementations, or shared usage patterns.\n\nI will now retrieve the source code for `AnsiDataHandler.java` and `AnsiQueryHandler.java` for comparison.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_ed1eb74e449c40a89bd2b2",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.jamwiki.db;\\nimport java.sql.Connection;\\nimport java.sql.Timestamp;\\nimport java.util.Collection;\\nimport java.util.Iterator;\\nimport java.util.LinkedHashMap;\\nimport java.util.List;\\nimport java.util.Locale;\\nimport java.util.Vector;\\nimport net.sf.ehcache.Element;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.DataHandler;\\nimport org.jamwiki.WikiBase;\\nimport org.jamwiki.WikiException;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.authentication.JAMWikiAuthenticationConfiguration;\\nimport org.jamwiki.authentication.WikiUserDetails;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.RoleMap;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.Watchlist;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.parser.ParserOutput;\\nimport org.jamwiki.parser.ParserUtil;\\nimport org.jamwiki.utils.Encryption;\\nimport org.jamwiki.utils.LinkUtil;\\nimport org.jamwiki.utils.NamespaceHandler;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.WikiCache;\\nimport org.jamwiki.utils.WikiLink;\\nimport org.jamwiki.utils.WikiLogger;\\nimport org.jamwiki.utils.WikiUtil;\\nimport org.springframework.transaction.TransactionStatus;\\npublic class AnsiDataHandler implements DataHandler {\\n\\tprivate static final String CACHE_TOPICS = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS\\\";\\n\\tprivate static final String CACHE_VIRTUAL_WIKI = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_VIRTUAL_WIKI\\\";\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiDataHandler.class.getName());\\n\\t\\tpublic static final String DATA_TOPIC_NAME = \\\"topic_name\\\";\\n\\tpublic static final String DATA_WIKI_USER_ID = \\\"wiki_user_id\\\" ;\\n\\tpublic static final String DATA_GROUP_ID = \\\"group_id\\\";\\n\\tpublic static final String DATA_CATEGORY_NAME = \\\"category_name\\\";\\n\\tpublic static final String DATA_TOPIC_ID = \\\"topic_id\\\";\\n\\tprivate final QueryHandler queryHandler = new AnsiQueryHandler();\\n\\tprivate void addCategory(Category category, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(category.getVirtualWiki());\\n\\t\\tthis.validateCategory(category);\\n\\t\\tthis.queryHandler().insertCategory(category, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addGroupMember(String username, int groupId, Connection conn) throws Exception {\\n\\t\\tint groupMemberId = this.queryHandler().nextGroupMemberId(conn);\\n\\t\\tthis.queryHandler().insertGroupMember(groupMemberId, username, groupId, conn);\\n\\t}\\n\\tprivate void addRecentChange(RecentChange change, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(change.getVirtualWiki());\\n\\t\\tthis.validateRecentChange(change);\\n\\t\\tthis.queryHandler().insertRecentChange(change, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tif (topic.getTopicId() < 1) {\\n\\t\\t\\tint topicId = this.queryHandler().nextTopicId(conn);\\n\\t\\t\\ttopic.setTopicId(topicId);\\n\\t\\t}\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().insertTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopicVersion(TopicVersion topicVersion, Connection conn) throws Exception {\\n\\t\\tif (topicVersion.getTopicVersionId() < 1) {\\n\\t\\t\\tint topicVersionId = this.queryHandler().nextTopicVersionId(conn);\\n\\t\\t\\ttopicVersion.setTopicVersionId(topicVersionId);\\n\\t\\t}\\n\\t\\tif (topicVersion.getEditDate() == null) {\\n\\t\\t\\tTimestamp editDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\ttopicVersion.setEditDate(editDate);\\n\\t\\t}\\n\\t\\tthis.validateTopicVersion(topicVersion);\\n\\t\\tthis.queryHandler().insertTopicVersion(topicVersion, conn);\\n\\t}\\n\\tprivate void addUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().insertUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void addVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tif (virtualWiki.getVirtualWikiId() < 1) {\\n\\t\\t\\tint virtualWikiId = this.queryHandler().nextVirtualWikiId(conn);\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(virtualWikiId);\\n\\t\\t}\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().insertVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void addWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.validateWatchlistEntry(topicName);\\n\\t\\tthis.queryHandler().insertWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tprivate void addWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tif (wikiFile.getFileId() < 1) {\\n\\t\\t\\tint fileId = this.queryHandler().nextWikiFileId(conn);\\n\\t\\t\\twikiFile.setFileId(fileId);\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().insertWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws Exception {\\n\\t\\tif (wikiFileVersion.getFileVersionId() < 1) {\\n\\t\\t\\tint fileVersionId = this.queryHandler().nextWikiFileVersionId(conn);\\n\\t\\t\\twikiFileVersion.setFileVersionId(fileVersionId);\\n\\t\\t}\\n\\t\\tif (wikiFileVersion.getUploadDate() == null) {\\n\\t\\t\\tTimestamp uploadDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\twikiFileVersion.setUploadDate(uploadDate);\\n\\t\\t}\\n\\t\\tthis.validateWikiFileVersion(wikiFileVersion);\\n\\t\\tthis.queryHandler().insertWikiFileVersion(wikiFileVersion, conn);\\n\\t}\\n\\tprivate void addWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tif (group.getGroupId() < 1) {\\n\\t\\t\\tint groupId = this.queryHandler().nextWikiGroupId(conn);\\n\\t\\t\\tgroup.setGroupId(groupId);\\n\\t\\t}\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().insertWikiGroup(group, conn);\\n\\t}\\n\\tprivate void addWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tif (user.getUserId() < 1) {\\n\\t\\t\\tint nextUserId = this.queryHandler().nextWikiUserId(conn);\\n\\t\\t\\tuser.setUserId(nextUserId);\\n\\t\\t}\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().insertWikiUser(user, conn);\\n\\t}\\n\\tpublic boolean authenticate(String username, String password) throws Exception {\\n\\t\\tboolean result = false;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\t\\t\\t\\tif (!StringUtils.isBlank(password)) {\\n\\t\\t\\t\\tString encryptedPassword = Encryption.encrypt(password);\\n\\t\\t\\t\\treturn this.queryHandler().authenticateUser(username, encryptedPassword, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic boolean canMoveTopic(Topic fromTopic, String destination) throws Exception {\\n\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, null);\\n\\t\\tif (toTopic == null || toTopic.getDeleteDate() != null) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (toTopic.getRedirectTo() != null && toTopic.getRedirectTo().equals(fromTopic.getName())) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tprivate static void checkLength(String value, int maxLength) throws WikiException {\\n\\t\\tif (value != null && value.length() > maxLength) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", value, new Integer(maxLength).toString()));\\n\\t\\t}\\n\\t}\\n\\tprivate void deleteRecentChanges(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteRecentChanges(topic.getTopicId(), conn);\\n\\t}\\n\\tpublic void deleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdeleteRecentChanges(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = new ParserOutput();\\n\\t\\t\\ttopic.setDeleteDate(new Timestamp(System.currentTimeMillis()));\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void deleteTopicCategories(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteTopicCategories(topic.getTopicId(), conn);\\n\\t}\\n\\tprivate void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tpublic List getAllCategories(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getCategories(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(rs.getString(DATA_CATEGORY_NAME));\\n\\t\\t\\t\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\t\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllRoles() throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoles();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(this.initRole(rs));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllTopicNames(String virtualWiki) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllTopicNames(virtualWikiId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getAllWikiFileVersions(String virtualWiki, String topicName, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiFile wikiFile = lookupWikiFile(virtualWiki, topicName);\\n\\t\\tif (wikiFile == null) {\\n\\t\\t\\tthrow new Exception(\\\"No topic exists for \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllWikiFileVersions(wikiFile, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(initWikiFileVersion(rs));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(virtualWiki, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, String topicName, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, true, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn all;\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(topic.getTopicId(), pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic Collection getRoleMapByLogin(String loginFragment) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByLogin(loginFragment);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger userId = new Integer(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(userId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(userId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setUserId(userId);\\n\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(userId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Collection getRoleMapByRole(String authority) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByRole(authority);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tint groupId = rs.getInt(DATA_GROUP_ID);\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tString key = userId + \\\"|\\\" + groupId;\\n\\t\\t\\tif (roleMaps.containsKey(key)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(key);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\t\\troleMap.setUserId(new Integer(userId));\\n\\t\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (groupId > 0) {\\n\\t\\t\\t\\t\\troleMap.setGroupId(new Integer(groupId));\\n\\t\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(key, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapGroup(String groupName) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroup(groupName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic Collection getRoleMapGroups() throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroups();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger groupId = new Integer(rs.getInt(DATA_GROUP_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(groupId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(groupId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setGroupId(groupId);\\n\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(groupId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapUser(String login) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapUser(login);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic List getTopicsAdmin(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getTopicsAdmin(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getUserContributions(virtualWiki, userString, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getVirtualWikiList() throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().getVirtualWikis(conn);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tVirtualWiki virtualWiki = initVirtualWiki(rs);\\n\\t\\t\\t\\tresults.add(virtualWiki);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Watchlist getWatchlist(String virtualWiki, int userId) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn new Watchlist(virtualWiki, all);\\n\\t}\\n\\tpublic List getWatchlist(String virtualWiki, int userId, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tprivate RecentChange initRecentChange(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRecentChange change = new RecentChange();\\n\\t\\t\\tchange.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\tchange.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\tchange.setTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tchange.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\tchange.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\tchange.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\tchange.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setAuthorName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tchange.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\tchange.setVirtualWiki(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\treturn change;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing recent change\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Role initRole(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRole role = new Role(rs.getString(\\\"role_name\\\"));\\n\\t\\t\\trole.setDescription(rs.getString(\\\"role_description\\\"));\\n\\t\\t\\treturn role;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing role\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Topic initTopic(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (rs.size() > 1 && rs.getTimestamp(\\\"delete_date\\\") != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\trs.last();\\n\\t\\t\\t}\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tTopic topic = new Topic();\\n\\t\\t\\ttopic.setAdminOnly(rs.getInt(\\\"topic_admin_only\\\") != 0);\\n\\t\\t\\ttopic.setName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\ttopic.setVirtualWiki(virtualWiki);\\n\\t\\t\\tint currentVersionId = rs.getInt(\\\"current_version_id\\\");\\n\\t\\t\\tif (currentVersionId > 0) {\\n\\t\\t\\t\\ttopic.setCurrentVersionId(new Integer(currentVersionId));\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topic.getTopicContent() == null) {\\n\\t\\t\\t\\ttopic.setTopicContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopic.setReadOnly(rs.getInt(\\\"topic_read_only\\\") != 0);\\n\\t\\t\\ttopic.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\ttopic.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\ttopic.setRedirectTo(rs.getString(\\\"redirect_to\\\"));\\n\\t\\t\\treturn topic;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate TopicVersion initTopicVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tTopicVersion topicVersion = new TopicVersion();\\n\\t\\t\\ttopicVersion.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\ttopicVersion.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopicVersion.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\ttopicVersion.setVersionContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topicVersion.getVersionContent() == null) {\\n\\t\\t\\t\\ttopicVersion.setVersionContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\ttopicVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\ttopicVersion.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\ttopicVersion.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\ttopicVersion.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\ttopicVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\treturn topicVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate VirtualWiki initVirtualWiki(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tVirtualWiki virtualWiki = new VirtualWiki();\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(rs.getInt(\\\"virtual_wiki_id\\\"));\\n\\t\\t\\tvirtualWiki.setName(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\tvirtualWiki.setDefaultTopicName(rs.getString(\\\"default_topic_name\\\"));\\n\\t\\t\\treturn virtualWiki;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing virtual wiki\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFile initWikiFile(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tWikiFile wikiFile = new WikiFile();\\n\\t\\t\\twikiFile.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFile.setAdminOnly(rs.getInt(\\\"file_admin_only\\\") != 0);\\n\\t\\t\\twikiFile.setFileName(rs.getString(\\\"file_name\\\"));\\n\\t\\t\\twikiFile.setVirtualWiki(virtualWiki);\\n\\t\\t\\twikiFile.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\twikiFile.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\twikiFile.setReadOnly(rs.getInt(\\\"file_read_only\\\") != 0);\\n\\t\\t\\twikiFile.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\twikiFile.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFile.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFile;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing file\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFileVersion initWikiFileVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiFileVersion wikiFileVersion = new WikiFileVersion();\\n\\t\\t\\twikiFileVersion.setFileVersionId(rs.getInt(\\\"file_version_id\\\"));\\n\\t\\t\\twikiFileVersion.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFileVersion.setUploadComment(rs.getString(\\\"upload_comment\\\"));\\n\\t\\t\\twikiFileVersion.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\twikiFileVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setUploadDate(rs.getTimestamp(\\\"upload_date\\\"));\\n\\t\\t\\twikiFileVersion.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFileVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\twikiFileVersion.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFileVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing wiki file version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiGroup initWikiGroup(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiGroup wikiGroup = new WikiGroup();\\n\\t\\t\\twikiGroup.setGroupId(rs.getInt(\\\"group_id\\\"));\\n\\t\\t\\twikiGroup.setName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\twikiGroup.setDescription(rs.getString(\\\"group_description\\\"));\\n\\t\\t\\treturn wikiGroup;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing group\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiUser initWikiUser(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tString username = rs.getString(\\\"login\\\");\\n\\t\\t\\tWikiUser user = new WikiUser(username);\\n\\t\\t\\tuser.setUserId(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tuser.setDisplayName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tuser.setCreateDate(rs.getTimestamp(\\\"create_date\\\"));\\n\\t\\t\\tuser.setLastLoginDate(rs.getTimestamp(\\\"last_login_date\\\"));\\n\\t\\t\\tuser.setCreateIpAddress(rs.getString(\\\"create_ip_address\\\"));\\n\\t\\t\\tuser.setLastLoginIpAddress(rs.getString(\\\"last_login_ip_address\\\"));\\n\\t\\t\\tuser.setDefaultLocale(rs.getString(\\\"default_locale\\\"));\\n\\t\\t\\tuser.setEmail(rs.getString(\\\"email\\\"));\\n\\t\\t\\tuser.setEditor(rs.getString(\\\"editor\\\"));\\n\\t\\t\\tuser.setSignature(rs.getString(\\\"signature\\\"));\\n\\t\\t\\treturn user;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing user\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tpublic List lookupCategoryTopics(String virtualWiki, String categoryName) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupCategoryTopics(virtualWikiId, categoryName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setChildTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\tcategory.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Topic lookupTopic(String virtualWiki, String topicName, boolean deleteOK, Object transactionObject) throws Exception {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tif (cacheElement != null) {\\n\\t\\t\\t\\tTopic cacheTopic = (Topic)cacheElement.getObjectValue();\\n\\t\\t\\t\\treturn (cacheTopic == null || (!deleteOK && cacheTopic.getDeleteDate() != null)) ? null : new Topic(cacheTopic);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiLink wikiLink = LinkUtil.parseWikiLink(topicName);\\n\\t\\tString namespace = wikiLink.getNamespace();\\n\\t\\tboolean caseSensitive = true;\\n\\t\\tif (namespace != null) {\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_SPECIAL)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_TEMPLATE) || namespace.equals(NamespaceHandler.NAMESPACE_USER) || namespace.equals(NamespaceHandler.NAMESPACE_CATEGORY)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcaseSensitive = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tTopic topic = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopic(virtualWikiId, topicName, caseSensitive, conn);\\n\\t\\t\\tif (rs.size() != 0) {\\n\\t\\t\\t\\ttopic = initTopic(rs);\\n\\t\\t\\t}\\n\\t\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTopic cacheTopic = (topic == null) ? null : new Topic(topic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPICS, key, cacheTopic);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn (topic == null || (!deleteOK && topic.getDeleteDate() != null)) ? null : topic;\\n\\t}\\n\\tpublic int lookupTopicCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"topic_count\\\");\\n\\t}\\n\\tpublic List lookupTopicByType(String virtualWiki, int topicType, Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicByType(virtualWikiId, topicType, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic TopicVersion lookupTopicVersion(int topicVersionId) throws Exception {\\n\\t\\tTopicVersion result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicVersion(topicVersionId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : this.initTopicVersion(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic VirtualWiki lookupVirtualWiki(String virtualWikiName) throws Exception {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiName);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tVirtualWiki virtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getName().equals(virtualWikiName)) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, null);\\n\\t\\treturn null;\\n\\t}\\n\\tprivate int lookupVirtualWikiId(String virtualWikiName) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = this.lookupVirtualWiki(virtualWikiName);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\treturn (virtualWiki == null) ? -1 : virtualWiki.getVirtualWikiId();\\n\\t}\\n\\tprivate String lookupVirtualWikiName(int virtualWikiId) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = null;\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t\\treturn (virtualWiki == null) ? null : virtualWiki.getName();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() == virtualWikiId) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki.getName();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, null);\\n\\t\\treturn null;\\n\\t}\\n\\tpublic WikiFile lookupWikiFile(String virtualWiki, String topicName) throws Exception {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFile(virtualWikiId, topic.getTopicId());\\n\\t\\treturn (rs.size() == 0) ? null : initWikiFile(rs);\\n\\t}\\n\\tpublic int lookupWikiFileCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFileCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"file_count\\\");\\n\\t}\\n\\tpublic WikiGroup lookupWikiGroup(String groupName) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiGroup(groupName);\\n\\t\\treturn (rs.size() == 0) ? null : initWikiGroup(rs);\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(int userId) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(userId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : initWikiUser(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(String username) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(username, conn);\\n\\t\\t\\tif (rs.size() == 0) {\\n\\t\\t\\t\\tresult = null;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\t\\tresult = lookupWikiUser(userId);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupWikiUserCount() throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserCount();\\n\\t\\treturn rs.getInt(\\\"user_count\\\");\\n\\t}\\n\\tpublic String lookupWikiUserEncryptedPassword(String username) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserEncryptedPassword(username);\\n\\t\\treturn (rs.size() == 0) ? null : rs.getString(\\\"password\\\");\\n\\t}\\n\\tpublic List lookupWikiUsers(Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUsers(pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(\\\"login\\\"));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic void moveTopic(Topic fromTopic, TopicVersion fromVersion, String destination) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (!this.canMoveTopic(fromTopic, destination)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"move.exception.destinationexists\\\", destination));\\n\\t\\t\\t}\\n\\t\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, conn);\\n\\t\\t\\tboolean detinationExistsFlag = (toTopic != null && toTopic.getDeleteDate() == null);\\n\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopic(toTopic, null, false);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tString fromTopicName = fromTopic.getName();\\n\\t\\t\\tfromTopic.setName(destination);\\n\\t\\t\\tParserOutput fromParserOutput = ParserUtil.parserOutput(fromTopic.getTopicContent(), fromTopic.getVirtualWiki(), fromTopic.getName());\\n\\t\\t\\twriteTopic(fromTopic, fromVersion, fromParserOutput.getCategories(), fromParserOutput.getLinks(), true);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t\\twriteTopic(toTopic, null, null, null, false);\\n\\t\\t\\t\\tthis.undeleteTopic(toTopic, null, false);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic = fromTopic;\\n\\t\\t\\t\\ttoTopic.setTopicId(-1);\\n\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t}\\n\\t\\t\\tString content = ParserUtil.parserRedirectContent(destination);\\n\\t\\t\\ttoTopic.setRedirectTo(destination);\\n\\t\\t\\ttoTopic.setTopicType(Topic.TYPE_REDIRECT);\\n\\t\\t\\ttoTopic.setTopicContent(content);\\n\\t\\t\\tTopicVersion toVersion = fromVersion;\\n\\t\\t\\ttoVersion.setTopicVersionId(-1);\\n\\t\\t\\ttoVersion.setVersionContent(content);\\n\\t\\t\\tParserOutput toParserOutput = ParserUtil.parserOutput(toTopic.getTopicContent(), toTopic.getVirtualWiki(), toTopic.getName());\\n\\t\\t\\twriteTopic(toTopic, toVersion, toParserOutput.getCategories(), toParserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprotected QueryHandler queryHandler() {\\n\\t\\treturn this.queryHandler;\\n\\t}\\n\\tpublic void reloadRecentChanges() throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().reloadRecentChanges(conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void setup(Locale locale, WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiDatabase.initialize();\\n\\t\\t\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeQuery(WikiDatabase.getExistenceValidationQuery());\\n\\t\\t\\treturn;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\t\\t}\\n\\t\\tWikiDatabase.setup(locale, user, username, encryptedPassword);\\n\\t}\\n\\tpublic void setupSpecialPages(Locale locale, WikiUser user, VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STARTING_POINTS, user, false);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_LEFT_MENU, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_BOTTOM_AREA, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STYLESHEET, user, true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void undeleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\ttopic.setDeleteDate(null);\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void updateSpecialPage(Locale locale, String virtualWiki, String topicName, String ipAddress) throws Exception {\\n\\t\\tlogger.info(\\\"Updating special page \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tString contents = WikiUtil.readSpecialPage(locale, topicName);\\n\\t\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, conn);\\n\\t\\t\\tint charactersChanged = StringUtils.length(contents) - StringUtils.length(topic.getTopicContent());\\n\\t\\t\\ttopic.setTopicContent(contents);\\n\\t\\t\\t\\t\\t\\tTopicVersion topicVersion = new TopicVersion(null, ipAddress, \\\"Automatically updated by system upgrade\\\", contents, charactersChanged);\\n\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), virtualWiki, topicName);\\n\\t\\t\\twriteTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void updateTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().updateTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().updateUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().updateVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void updateWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().updateWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().updateWikiGroup(group, conn);\\n\\t}\\n\\tprivate void updateWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().updateWikiUser(user, conn);\\n\\t}\\n\\tprotected void validateAuthority(String role) throws WikiException {\\n\\t\\tcheckLength(role, 30);\\n\\t}\\n\\tprotected void validateCategory(Category category) throws WikiException {\\n\\t\\tcheckLength(category.getName(), 200);\\n\\t\\tcheckLength(category.getSortKey(), 200);\\n\\t}\\n\\tprotected void validateRecentChange(RecentChange change) throws WikiException {\\n\\t\\tcheckLength(change.getTopicName(), 200);\\n\\t\\tcheckLength(change.getAuthorName(), 200);\\n\\t\\tcheckLength(change.getVirtualWiki(), 100);\\n\\t\\tchange.setEditComment(StringUtils.substring(change.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateRole(Role role) throws WikiException {\\n\\t\\tcheckLength(role.getAuthority(), 30);\\n\\t\\trole.setDescription(StringUtils.substring(role.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateTopic(Topic topic) throws WikiException {\\n\\t\\tcheckLength(topic.getName(), 200);\\n\\t\\tcheckLength(topic.getRedirectTo(), 200);\\n\\t}\\n\\tprotected void validateTopicVersion(TopicVersion topicVersion) throws WikiException {\\n\\t\\tcheckLength(topicVersion.getAuthorIpAddress(), 39);\\n\\t\\ttopicVersion.setEditComment(StringUtils.substring(topicVersion.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateUserDetails(WikiUserDetails userDetails) throws WikiException {\\n\\t\\tcheckLength(userDetails.getUsername(), 100);\\n\\t\\t\\t\\tif (userDetails.getPassword() != null && userDetails.getPassword().length() > 100) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", \\\"-\\\", \\\"100\\\"));\\n\\t\\t}\\n\\t}\\n\\tprotected void validateVirtualWiki(VirtualWiki virtualWiki) throws WikiException {\\n\\t\\tcheckLength(virtualWiki.getName(), 100);\\n\\t\\tcheckLength(virtualWiki.getDefaultTopicName(), 200);\\n\\t}\\n\\tprotected void validateWatchlistEntry(String topicName) throws WikiException {\\n\\t\\tcheckLength(topicName, 200);\\n\\t}\\n\\tprotected void validateWikiFile(WikiFile wikiFile) throws WikiException {\\n\\t\\tcheckLength(wikiFile.getFileName(), 200);\\n\\t\\tcheckLength(wikiFile.getUrl(), 200);\\n\\t\\tcheckLength(wikiFile.getMimeType(), 100);\\n\\t}\\n\\tprotected void validateWikiFileVersion(WikiFileVersion wikiFileVersion) throws WikiException {\\n\\t\\tcheckLength(wikiFileVersion.getUrl(), 200);\\n\\t\\tcheckLength(wikiFileVersion.getMimeType(), 100);\\n\\t\\tcheckLength(wikiFileVersion.getAuthorIpAddress(), 39);\\n\\t\\twikiFileVersion.setUploadComment(StringUtils.substring(wikiFileVersion.getUploadComment(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiGroup(WikiGroup group) throws WikiException {\\n\\t\\tcheckLength(group.getName(), 30);\\n\\t\\tgroup.setDescription(StringUtils.substring(group.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiUser(WikiUser user) throws WikiException {\\n\\t\\tcheckLength(user.getUsername(), 100);\\n\\t\\tcheckLength(user.getDisplayName(), 100);\\n\\t\\tcheckLength(user.getCreateIpAddress(), 39);\\n\\t\\tcheckLength(user.getLastLoginIpAddress(), 39);\\n\\t\\tcheckLength(user.getDefaultLocale(), 8);\\n\\t\\tcheckLength(user.getEmail(), 100);\\n\\t\\tcheckLength(user.getEditor(), 50);\\n\\t\\tcheckLength(user.getSignature(), 255);\\n\\t}\\n\\tpublic void writeFile(WikiFile wikiFile, WikiFileVersion wikiFileVersion) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(wikiFile.getFileName());\\n\\t\\t\\tif (wikiFile.getFileId() <= 0) {\\n\\t\\t\\t\\taddWikiFile(wikiFile, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateWikiFile(wikiFile, conn);\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setFileId(wikiFile.getFileId());\\n\\t\\t\\t\\t\\t\\taddWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRole(Role role, boolean update) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.validateRole(role);\\n\\t\\t\\tif (update) {\\n\\t\\t\\t\\tthis.queryHandler().updateRole(role, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.queryHandler().insertRole(role, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapGroup(int groupId, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteGroupAuthorities(groupId, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertGroupAuthority(groupId, authority, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJAMWikiAuthenticationConfiguration.resetJamwikiAnonymousAuthorities();\\n\\t\\t\\tJAMWikiAuthenticationConfiguration.resetDefaultGroupRoles();\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapUser(String username, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteUserAuthorities(username, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertUserAuthority(username, authority, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeTopic(Topic topic, TopicVersion topicVersion, LinkedHashMap categories, Vector links, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\tWikiCache.removeFromCache(WikiBase.CACHE_PARSED_TOPIC_CONTENT, key);\\n\\t\\t\\tWikiCache.removeFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(topic.getName());\\n\\t\\t\\tif (topic.getTopicId() <= 0) {\\n\\t\\t\\t\\taddTopic(topic, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateTopic(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\tif (topicVersion.getPreviousTopicVersionId() == null && topic.getCurrentVersionId() != null) {\\n\\t\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(topic.getCurrentVersionId());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttopicVersion.setTopicId(topic.getTopicId());\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopicVersion(topicVersion, conn);\\n\\t\\t\\t\\tString authorName = topicVersion.getAuthorIpAddress();\\n\\t\\t\\t\\tInteger authorId = topicVersion.getAuthorId();\\n\\t\\t\\t\\tif (authorId != null) {\\n\\t\\t\\t\\t\\tWikiUser user = this.lookupWikiUser(topicVersion.getAuthorId().intValue());\\n\\t\\t\\t\\t\\tauthorName = user.getUsername();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tRecentChange change = new RecentChange(topic, topicVersion, authorName);\\n\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (categories != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicCategories(topic, conn);\\n\\t\\t\\t\\tfor (Iterator iterator = categories.keySet().iterator(); iterator.hasNext();) {\\n\\t\\t\\t\\t\\tString categoryName = (String)iterator.next();\\n\\t\\t\\t\\t\\tCategory category = new Category();\\n\\t\\t\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\t\\t\\tcategory.setSortKey((String)categories.get(categoryName));\\n\\t\\t\\t\\t\\tcategory.setVirtualWiki(topic.getVirtualWiki());\\n\\t\\t\\t\\t\\tcategory.setChildTopicName(topic.getName());\\n\\t\\t\\t\\t\\tthis.addCategory(category, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (links != null) {\\n\\t\\t\\t\\tWikiBase.getSearchEngine().deleteFromIndex(topic);\\n\\t\\t\\t\\tWikiBase.getSearchEngine().addToIndex(topic, links);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeVirtualWiki(VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(virtualWiki.getName());\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() <= 0) {\\n\\t\\t\\t\\tthis.addVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName());\\n\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId());\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName(), virtualWiki);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId(), virtualWiki);\\n\\t}\\n\\tpublic void writeWatchlistEntry(Watchlist watchlist, String virtualWiki, String topicName, int userId) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tString article = WikiUtil.extractTopicLink(topicName);\\n\\t\\t\\tString comments = WikiUtil.extractCommentsLink(topicName);\\n\\t\\t\\tif (watchlist.containsTopic(topicName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.remove(article);\\n\\t\\t\\t\\twatchlist.remove(comments);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.add(article);\\n\\t\\t\\t\\twatchlist.add(comments);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiGroup(WikiGroup group) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (group.getGroupId() <= 0) {\\n\\t\\t\\t\\tthis.addWikiGroup(group, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateWikiGroup(group, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiUser(WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiUtil.validateUserName(user.getUsername());\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (user.getUserId() <= 0) {\\n\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\tthis.addUserDetails(userDetails, conn);\\n\\t\\t\\t\\tthis.addWikiUser(user, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addGroupMember(user.getUsername(), WikiBase.getGroupRegisteredUser().getGroupId(), conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (!StringUtils.isBlank(encryptedPassword)) {\\n\\t\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\t\\tthis.updateUserDetails(userDetails, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.updateWikiUser(user, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n}\""
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_bc2fbfde56e04067b74e9a",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiQueryHandler.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.jamwiki.db;\\nimport java.sql.Connection;\\nimport java.sql.SQLException;\\nimport java.sql.Types;\\nimport java.util.Properties;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.Environment;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.authentication.WikiUserDetails;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.Utilities;\\nimport org.jamwiki.utils.WikiLogger;\\npublic class AnsiQueryHandler implements QueryHandler {\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiQueryHandler.class.getName());\\n\\tprotected static final String SQL_PROPERTY_FILE_NAME = \\\"sql.ansi.properties\\\";\\n\\tprotected static String STATEMENT_CONNECTION_VALIDATION_QUERY = null;\\n\\tprotected static String STATEMENT_CREATE_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_CATEGORY_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_GROUP_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_GROUP_MEMBERS_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_GROUP_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_RECENT_CHANGE_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_ROLE_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT = null;\\n\\tprotected static String STATEMENT_CREATE_TOPIC_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_TOPIC_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_USERS_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_VIRTUAL_WIKI_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WATCHLIST_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_FILE_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_USER_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX = null;\\n\\tprotected static String STATEMENT_DELETE_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_DELETE_GROUP_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_DELETE_RECENT_CHANGES = null;\\n\\tprotected static String STATEMENT_DELETE_RECENT_CHANGES_TOPIC = null;\\n\\tprotected static String STATEMENT_DELETE_TOPIC_CATEGORIES = null;\\n\\tprotected static String STATEMENT_DELETE_WATCHLIST_ENTRY = null;\\n\\tprotected static String STATEMENT_DROP_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_CATEGORY_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_GROUP_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_GROUP_MEMBERS_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_GROUP_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_RECENT_CHANGE_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_ROLE_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT = null;\\n\\tprotected static String STATEMENT_DROP_TOPIC_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_TOPIC_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_USERS_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_VIRTUAL_WIKI_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WATCHLIST_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_FILE_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_FILE_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_USER_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_USER_LOGIN_INDEX = null;\\n\\tprotected static String STATEMENT_INSERT_AUTHORITY = null;\\n\\tprotected static String STATEMENT_INSERT_CATEGORY = null;\\n\\tprotected static String STATEMENT_INSERT_GROUP = null;\\n\\tprotected static String STATEMENT_INSERT_GROUP_AUTHORITY = null;\\n\\tprotected static String STATEMENT_INSERT_GROUP_MEMBER = null;\\n\\tprotected static String STATEMENT_INSERT_RECENT_CHANGE = null;\\n\\tprotected static String STATEMENT_INSERT_RECENT_CHANGES = null;\\n\\tprotected static String STATEMENT_INSERT_ROLE = null;\\n\\tprotected static String STATEMENT_INSERT_TOPIC = null;\\n\\tprotected static String STATEMENT_INSERT_TOPIC_VERSION = null;\\n\\tprotected static String STATEMENT_INSERT_USER = null;\\n\\tprotected static String STATEMENT_INSERT_VIRTUAL_WIKI = null;\\n\\tprotected static String STATEMENT_INSERT_WATCHLIST_ENTRY = null;\\n\\tprotected static String STATEMENT_INSERT_WIKI_FILE = null;\\n\\tprotected static String STATEMENT_INSERT_WIKI_FILE_VERSION = null;\\n\\tprotected static String STATEMENT_INSERT_WIKI_USER = null;\\n\\tprotected static String STATEMENT_SELECT_AUTHORITIES_AUTHORITY = null;\\n\\tprotected static String STATEMENT_SELECT_AUTHORITIES_LOGIN = null;\\n\\tprotected static String STATEMENT_SELECT_AUTHORITIES_USER = null;\\n\\tprotected static String STATEMENT_SELECT_CATEGORIES = null;\\n\\tprotected static String STATEMENT_SELECT_CATEGORY_TOPICS = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_SELECT_GROUPS_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_RECENT_CHANGES = null;\\n\\tprotected static String STATEMENT_SELECT_RECENT_CHANGES_TOPIC = null;\\n\\tprotected static String STATEMENT_SELECT_ROLES = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_BY_TYPE = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_COUNT = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_LOWER = null;\\n\\tprotected static String STATEMENT_SELECT_TOPICS = null;\\n\\tprotected static String STATEMENT_SELECT_TOPICS_ADMIN = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_VERSION = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_VERSION_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_USERS_AUTHENTICATION = null;\\n\\tprotected static String STATEMENT_SELECT_VIRTUAL_WIKIS = null;\\n\\tprotected static String STATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WATCHLIST = null;\\n\\tprotected static String STATEMENT_SELECT_WATCHLIST_CHANGES = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_COUNT = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_VERSIONS = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_COUNT = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_LOGIN = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USERS = null;\\n\\tprotected static String STATEMENT_UPDATE_GROUP = null;\\n\\tprotected static String STATEMENT_UPDATE_ROLE = null;\\n\\tprotected static String STATEMENT_UPDATE_TOPIC = null;\\n\\tprotected static String STATEMENT_UPDATE_TOPIC_CURRENT_VERSION = null;\\n\\tprotected static String STATEMENT_UPDATE_TOPIC_CURRENT_VERSIONS = null;\\n\\tprotected static String STATEMENT_UPDATE_USER = null;\\n\\tprotected static String STATEMENT_UPDATE_VIRTUAL_WIKI = null;\\n\\tprotected static String STATEMENT_UPDATE_WIKI_FILE = null;\\n\\tprotected static String STATEMENT_UPDATE_WIKI_USER = null;\\n\\tprivate static Properties props = null;\\n\\tprotected AnsiQueryHandler() {\\n\\t\\tprops = Environment.loadProperties(SQL_PROPERTY_FILE_NAME);\\n\\t\\tthis.init(props);\\n\\t}\\n\\tpublic boolean authenticateUser(String username, String encryptedPassword, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_USERS_AUTHENTICATION);\\n\\t\\tstmt.setString(1, username);\\n\\t\\tstmt.setString(2, encryptedPassword);\\n\\t\\treturn (stmt.executeQuery(conn).size() != 0);\\n\\t}\\n\\tpublic String connectionValidationQuery() {\\n\\t\\treturn STATEMENT_CONNECTION_VALIDATION_QUERY;\\n\\t}\\n\\tpublic void createTables(Connection conn) throws SQLException {\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_VIRTUAL_WIKI_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_USERS_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_USER_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_TOPIC_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_TOPIC_VERSION_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_FILE_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_CATEGORY_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_GROUP_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_GROUP_MEMBERS_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_ROLE_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_AUTHORITIES_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_GROUP_AUTHORITIES_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_RECENT_CHANGE_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WATCHLIST_TABLE, conn);\\n\\t}\\n\\tpublic void deleteGroupAuthorities(int groupId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_GROUP_AUTHORITIES);\\n\\t\\tstmt.setInt(1, groupId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteRecentChanges(int topicId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_RECENT_CHANGES_TOPIC);\\n\\t\\tstmt.setInt(1, topicId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteTopicCategories(int childTopicId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_TOPIC_CATEGORIES);\\n\\t\\tstmt.setInt(1, childTopicId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteUserAuthorities(String username, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_AUTHORITIES);\\n\\t\\tstmt.setString(1, username);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_WATCHLIST_ENTRY);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topicName);\\n\\t\\tstmt.setInt(3, userId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void dropTables(Connection conn) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WATCHLIST_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_RECENT_CHANGE_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_GROUP_AUTHORITIES_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_AUTHORITIES_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_ROLE_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_GROUP_MEMBERS_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_GROUP_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_CATEGORY_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_FILE_VERSION_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_FILE_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_TOPIC_VERSION_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_TOPIC_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_USER_LOGIN_INDEX, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_USER_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_USERS_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_VIRTUAL_WIKI_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t}\\n\\tpublic String existenceValidationQuery() {\\n\\t\\treturn STATEMENT_SELECT_VIRTUAL_WIKIS;\\n\\t}\\n\\tpublic WikiResultSet getAllTopicNames(int virtualWikiId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPICS);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getAllWikiFileVersions(WikiFile wikiFile, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_FILE_VERSIONS);\\n\\t\\t\\t\\tstmt.setInt(1, wikiFile.getFileId());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getCategories(int virtualWikiId, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_CATEGORIES);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_RECENT_CHANGES);\\n\\t\\tstmt.setString(1, virtualWiki);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\t\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRecentChanges(int topicId, Pagination pagination, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_RECENT_CHANGES_TOPIC);\\n\\t\\tstmt.setInt(1, topicId);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\t\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapByLogin(String loginFragment) throws SQLException {\\n\\t\\tif (StringUtils.isBlank(loginFragment)) {\\n\\t\\t\\treturn new WikiResultSet();\\n\\t\\t}\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_AUTHORITIES_LOGIN);\\n\\t\\tloginFragment = '%' + loginFragment.toLowerCase() + '%';\\n\\t\\tstmt.setString(1, loginFragment);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapByRole(String authority) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_AUTHORITIES_AUTHORITY);\\n\\t\\tstmt.setString(1, authority);\\n\\t\\tstmt.setString(2, authority);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapGroup(String groupName) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_GROUP_AUTHORITIES);\\n\\t\\tstmt.setString(1, groupName);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapGroups() throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_GROUPS_AUTHORITIES);\\n\\t}\\n\\tpublic WikiResultSet getRoleMapUser(String login) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_AUTHORITIES_USER);\\n\\t\\tstmt.setString(1, login);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoles() throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_ROLES);\\n\\t}\\n\\tpublic WikiResultSet getTopicsAdmin(int virtualWikiId, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPICS_ADMIN);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = null;\\n\\t\\tif (Utilities.isIpAddress(userString)) {\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS);\\n\\t\\t} else {\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN);\\n\\t\\t}\\n\\t\\tstmt.setString(1, virtualWiki);\\n\\t\\tstmt.setString(2, userString);\\n\\t\\tstmt.setInt(3, pagination.getNumResults());\\n\\t\\tstmt.setInt(4, pagination.getOffset());\\n\\t\\t\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getVirtualWikis(Connection conn) throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_VIRTUAL_WIKIS, conn);\\n\\t}\\n\\tpublic WikiResultSet getWatchlist(int virtualWikiId, int userId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WATCHLIST);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, userId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getWatchlist(int virtualWikiId, int userId, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WATCHLIST_CHANGES);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, userId);\\n\\t\\tstmt.setInt(3, pagination.getNumResults());\\n\\t\\tstmt.setInt(4, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tprotected void init(Properties props) {\\n\\t\\tSTATEMENT_CONNECTION_VALIDATION_QUERY    = props.getProperty(\\\"STATEMENT_CONNECTION_VALIDATION_QUERY\\\");\\n\\t\\tSTATEMENT_CREATE_GROUP_TABLE             = props.getProperty(\\\"STATEMENT_CREATE_GROUP_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_ROLE_TABLE              = props.getProperty(\\\"STATEMENT_CREATE_ROLE_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_VIRTUAL_WIKI_TABLE      = props.getProperty(\\\"STATEMENT_CREATE_VIRTUAL_WIKI_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_USER_TABLE         = props.getProperty(\\\"STATEMENT_CREATE_WIKI_USER_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_USER_LOGIN_INDEX   = props.getProperty(\\\"STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX\\\");\\n\\t\\tSTATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT = props.getProperty(\\\"STATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT\\\");\\n\\t\\tSTATEMENT_CREATE_TOPIC_TABLE             = props.getProperty(\\\"STATEMENT_CREATE_TOPIC_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_TOPIC_VERSION_TABLE     = props.getProperty(\\\"STATEMENT_CREATE_TOPIC_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_USERS_TABLE             = props.getProperty(\\\"STATEMENT_CREATE_USERS_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_FILE_TABLE         = props.getProperty(\\\"STATEMENT_CREATE_WIKI_FILE_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_FILE_VERSION_TABLE = props.getProperty(\\\"STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_AUTHORITIES_TABLE       = props.getProperty(\\\"STATEMENT_CREATE_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_CATEGORY_TABLE          = props.getProperty(\\\"STATEMENT_CREATE_CATEGORY_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_GROUP_AUTHORITIES_TABLE = props.getProperty(\\\"STATEMENT_CREATE_GROUP_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_GROUP_MEMBERS_TABLE     = props.getProperty(\\\"STATEMENT_CREATE_GROUP_MEMBERS_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_RECENT_CHANGE_TABLE     = props.getProperty(\\\"STATEMENT_CREATE_RECENT_CHANGE_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WATCHLIST_TABLE         = props.getProperty(\\\"STATEMENT_CREATE_WATCHLIST_TABLE\\\");\\n\\t\\tSTATEMENT_DELETE_AUTHORITIES             = props.getProperty(\\\"STATEMENT_DELETE_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_DELETE_GROUP_AUTHORITIES       = props.getProperty(\\\"STATEMENT_DELETE_GROUP_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_DELETE_RECENT_CHANGES          = props.getProperty(\\\"STATEMENT_DELETE_RECENT_CHANGES\\\");\\n\\t\\tSTATEMENT_DELETE_RECENT_CHANGES_TOPIC    = props.getProperty(\\\"STATEMENT_DELETE_RECENT_CHANGES_TOPIC\\\");\\n\\t\\tSTATEMENT_DELETE_TOPIC_CATEGORIES        = props.getProperty(\\\"STATEMENT_DELETE_TOPIC_CATEGORIES\\\");\\n\\t\\tSTATEMENT_DELETE_WATCHLIST_ENTRY         = props.getProperty(\\\"STATEMENT_DELETE_WATCHLIST_ENTRY\\\");\\n\\t\\tSTATEMENT_DROP_AUTHORITIES_TABLE         = props.getProperty(\\\"STATEMENT_DROP_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_CATEGORY_TABLE            = props.getProperty(\\\"STATEMENT_DROP_CATEGORY_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_GROUP_AUTHORITIES_TABLE   = props.getProperty(\\\"STATEMENT_DROP_GROUP_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_GROUP_MEMBERS_TABLE       = props.getProperty(\\\"STATEMENT_DROP_GROUP_MEMBERS_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_GROUP_TABLE               = props.getProperty(\\\"STATEMENT_DROP_GROUP_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_RECENT_CHANGE_TABLE       = props.getProperty(\\\"STATEMENT_DROP_RECENT_CHANGE_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_ROLE_TABLE                = props.getProperty(\\\"STATEMENT_DROP_ROLE_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT = props.getProperty(\\\"STATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT\\\");\\n\\t\\tSTATEMENT_DROP_TOPIC_TABLE               = props.getProperty(\\\"STATEMENT_DROP_TOPIC_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_TOPIC_VERSION_TABLE       = props.getProperty(\\\"STATEMENT_DROP_TOPIC_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_USERS_TABLE               = props.getProperty(\\\"STATEMENT_DROP_USERS_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_VIRTUAL_WIKI_TABLE        = props.getProperty(\\\"STATEMENT_DROP_VIRTUAL_WIKI_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WATCHLIST_TABLE           = props.getProperty(\\\"STATEMENT_DROP_WATCHLIST_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_USER_LOGIN_INDEX     = props.getProperty(\\\"STATEMENT_DROP_WIKI_USER_LOGIN_INDEX\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_USER_TABLE           = props.getProperty(\\\"STATEMENT_DROP_WIKI_USER_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_FILE_TABLE           = props.getProperty(\\\"STATEMENT_DROP_WIKI_FILE_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_FILE_VERSION_TABLE   = props.getProperty(\\\"STATEMENT_DROP_WIKI_FILE_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_INSERT_AUTHORITY               = props.getProperty(\\\"STATEMENT_INSERT_AUTHORITY\\\");\\n\\t\\tSTATEMENT_INSERT_CATEGORY                = props.getProperty(\\\"STATEMENT_INSERT_CATEGORY\\\");\\n\\t\\tSTATEMENT_INSERT_GROUP                   = props.getProperty(\\\"STATEMENT_INSERT_GROUP\\\");\\n\\t\\tSTATEMENT_INSERT_GROUP_AUTHORITY         = props.getProperty(\\\"STATEMENT_INSERT_GROUP_AUTHORITY\\\");\\n\\t\\tSTATEMENT_INSERT_GROUP_MEMBER            = props.getProperty(\\\"STATEMENT_INSERT_GROUP_MEMBER\\\");\\n\\t\\tSTATEMENT_INSERT_RECENT_CHANGE           = props.getProperty(\\\"STATEMENT_INSERT_RECENT_CHANGE\\\");\\n\\t\\tSTATEMENT_INSERT_RECENT_CHANGES          = props.getProperty(\\\"STATEMENT_INSERT_RECENT_CHANGES\\\");\\n\\t\\tSTATEMENT_INSERT_ROLE                    = props.getProperty(\\\"STATEMENT_INSERT_ROLE\\\");\\n\\t\\tSTATEMENT_INSERT_TOPIC                   = props.getProperty(\\\"STATEMENT_INSERT_TOPIC\\\");\\n\\t\\tSTATEMENT_INSERT_TOPIC_VERSION           = props.getProperty(\\\"STATEMENT_INSERT_TOPIC_VERSION\\\");\\n\\t\\tSTATEMENT_INSERT_USER                    = props.getProperty(\\\"STATEMENT_INSERT_USER\\\");\\n\\t\\tSTATEMENT_INSERT_VIRTUAL_WIKI            = props.getProperty(\\\"STATEMENT_INSERT_VIRTUAL_WIKI\\\");\\n\\t\\tSTATEMENT_INSERT_WATCHLIST_ENTRY         = props.getProperty(\\\"STATEMENT_INSERT_WATCHLIST_ENTRY\\\");\\n\\t\\tSTATEMENT_INSERT_WIKI_FILE               = props.getProperty(\\\"STATEMENT_INSERT_WIKI_FILE\\\");\\n\\t\\tSTATEMENT_INSERT_WIKI_FILE_VERSION       = props.getProperty(\\\"STATEMENT_INSERT_WIKI_FILE_VERSION\\\");\\n\\t\\tSTATEMENT_INSERT_WIKI_USER               = props.getProperty(\\\"STATEMENT_INSERT_WIKI_USER\\\");\\n\\t\\tSTATEMENT_SELECT_AUTHORITIES_AUTHORITY   = props.getProperty(\\\"STATEMENT_SELECT_AUTHORITIES_AUTHORITY\\\");\\n\\t\\tSTATEMENT_SELECT_AUTHORITIES_LOGIN       = props.getProperty(\\\"STATEMENT_SELECT_AUTHORITIES_LOGIN\\\");\\n\\t\\tSTATEMENT_SELECT_AUTHORITIES_USER        = props.getProperty(\\\"STATEMENT_SELECT_AUTHORITIES_USER\\\");\\n\\t\\tSTATEMENT_SELECT_CATEGORIES              = props.getProperty(\\\"STATEMENT_SELECT_CATEGORIES\\\");\\n\\t\\tSTATEMENT_SELECT_CATEGORY_TOPICS         = props.getProperty(\\\"STATEMENT_SELECT_CATEGORY_TOPICS\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP                   = props.getProperty(\\\"STATEMENT_SELECT_GROUP\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP_AUTHORITIES       = props.getProperty(\\\"STATEMENT_SELECT_GROUP_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_SELECT_GROUPS_AUTHORITIES      = props.getProperty(\\\"STATEMENT_SELECT_GROUPS_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE  = props.getProperty(\\\"STATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP_SEQUENCE          = props.getProperty(\\\"STATEMENT_SELECT_GROUP_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_RECENT_CHANGES          = props.getProperty(\\\"STATEMENT_SELECT_RECENT_CHANGES\\\");\\n\\t\\tSTATEMENT_SELECT_RECENT_CHANGES_TOPIC    = props.getProperty(\\\"STATEMENT_SELECT_RECENT_CHANGES_TOPIC\\\");\\n\\t\\tSTATEMENT_SELECT_ROLES                   = props.getProperty(\\\"STATEMENT_SELECT_ROLES\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_BY_TYPE           = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_BY_TYPE\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_COUNT             = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_COUNT\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC                   = props.getProperty(\\\"STATEMENT_SELECT_TOPIC\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_LOWER             = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_LOWER\\\");\\n\\t\\tSTATEMENT_SELECT_TOPICS                  = props.getProperty(\\\"STATEMENT_SELECT_TOPICS\\\");\\n\\t\\tSTATEMENT_SELECT_TOPICS_ADMIN            = props.getProperty(\\\"STATEMENT_SELECT_TOPICS_ADMIN\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_SEQUENCE          = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_VERSION           = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_VERSION\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_VERSION_SEQUENCE  = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_VERSION_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_USERS_AUTHENTICATION    = props.getProperty(\\\"STATEMENT_SELECT_USERS_AUTHENTICATION\\\");\\n\\t\\tSTATEMENT_SELECT_VIRTUAL_WIKIS           = props.getProperty(\\\"STATEMENT_SELECT_VIRTUAL_WIKIS\\\");\\n\\t\\tSTATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE   = props.getProperty(\\\"STATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WATCHLIST               = props.getProperty(\\\"STATEMENT_SELECT_WATCHLIST\\\");\\n\\t\\tSTATEMENT_SELECT_WATCHLIST_CHANGES       = props.getProperty(\\\"STATEMENT_SELECT_WATCHLIST_CHANGES\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE               = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_COUNT         = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_COUNT\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_SEQUENCE      = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_VERSIONS      = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_VERSIONS\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER               = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_COUNT         = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_COUNT\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_LOGIN         = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_LOGIN\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_SEQUENCE      = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USERS              = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USERS\\\");\\n\\t\\tSTATEMENT_UPDATE_GROUP                   = props.getProperty(\\\"STATEMENT_UPDATE_GROUP\\\");\\n\\t\\tSTATEMENT_UPDATE_ROLE                    = props.getProperty(\\\"STATEMENT_UPDATE_ROLE\\\");\\n\\t\\tSTATEMENT_UPDATE_TOPIC                   = props.getProperty(\\\"STATEMENT_UPDATE_TOPIC\\\");\\n\\t\\tSTATEMENT_UPDATE_TOPIC_CURRENT_VERSION   = props.getProperty(\\\"STATEMENT_UPDATE_TOPIC_CURRENT_VERSION\\\");\\n\\t\\tSTATEMENT_UPDATE_TOPIC_CURRENT_VERSIONS  = props.getProperty(\\\"STATEMENT_UPDATE_TOPIC_CURRENT_VERSIONS\\\");\\n\\t\\tSTATEMENT_UPDATE_USER                    = props.getProperty(\\\"STATEMENT_UPDATE_USER\\\");\\n\\t\\tSTATEMENT_UPDATE_VIRTUAL_WIKI            = props.getProperty(\\\"STATEMENT_UPDATE_VIRTUAL_WIKI\\\");\\n\\t\\tSTATEMENT_UPDATE_WIKI_FILE               = props.getProperty(\\\"STATEMENT_UPDATE_WIKI_FILE\\\");\\n\\t\\tSTATEMENT_UPDATE_WIKI_USER               = props.getProperty(\\\"STATEMENT_UPDATE_WIKI_USER\\\");\\n\\t}\\n\\tpublic void insertCategory(Category category, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\t\\t\\tWikiResultSet rs = this.lookupTopic(virtualWikiId, category.getChildTopicName(), false, conn);\\n\\t\\tint topicId = -1;\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tif (rs.getTimestamp(\\\"delete_date\\\") == null) {\\n\\t\\t\\t\\ttopicId = rs.getInt(AnsiDataHandler.DATA_TOPIC_ID);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (topicId == -1) {\\n\\t\\t\\tthrow new SQLException(\\\"Unable to find child topic \\\" + category.getChildTopicName() + \\\" for category \\\" + category.getName());\\n\\t\\t}\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_CATEGORY);\\n\\t\\tstmt.setInt(1, rs.getInt(AnsiDataHandler.DATA_TOPIC_ID));\\n\\t\\tstmt.setString(2, category.getName());\\n\\t\\tstmt.setString(3, category.getSortKey());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertGroupAuthority(int groupId, String authority, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_GROUP_AUTHORITY);\\n\\t\\tstmt.setInt(1, groupId);\\n\\t\\tstmt.setString(2, authority);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertGroupMember(int groupMemberId, String username, int groupId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_GROUP_MEMBER);\\n\\t\\tstmt.setInt(1, groupMemberId);\\n\\t\\tstmt.setString(2, username);\\n\\t\\tstmt.setInt(3, groupId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertRecentChange(RecentChange change, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_RECENT_CHANGE);\\n\\t\\tstmt.setInt(1, change.getTopicVersionId());\\n\\t\\tif (change.getPreviousTopicVersionId() == null) {\\n\\t\\t\\tstmt.setNull(2, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(2, change.getPreviousTopicVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setInt(3, change.getTopicId());\\n\\t\\tstmt.setString(4, change.getTopicName());\\n\\t\\tstmt.setTimestamp(5, change.getEditDate());\\n\\t\\tstmt.setString(6, change.getEditComment());\\n\\t\\tif (change.getAuthorId() == null) {\\n\\t\\t\\tstmt.setNull(7, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(7, change.getAuthorId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setString(8, change.getAuthorName());\\n\\t\\tstmt.setInt(9, change.getEditType());\\n\\t\\tstmt.setInt(10, virtualWikiId);\\n\\t\\tstmt.setString(11, change.getVirtualWiki());\\n\\t\\tstmt.setInt(12, change.getCharactersChanged());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertRole(Role role, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_ROLE);\\n\\t\\tstmt.setString(1, role.getAuthority());\\n\\t\\tstmt.setString(2, role.getDescription());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertTopic(Topic topic, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_TOPIC);\\n\\t\\tstmt.setInt(1, topic.getTopicId());\\n\\t\\tstmt.setInt(2, virtualWikiId);\\n\\t\\tstmt.setString(3, topic.getName());\\n\\t\\tstmt.setInt(4, topic.getTopicType());\\n\\t\\tstmt.setInt(5, (topic.getReadOnly() ? 1 : 0));\\n\\t\\tif (topic.getCurrentVersionId() == null) {\\n\\t\\t\\tstmt.setNull(6, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(6, topic.getCurrentVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setTimestamp(7, topic.getDeleteDate());\\n\\t\\tstmt.setInt(8, (topic.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setString(9, topic.getRedirectTo());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertTopicVersion(TopicVersion topicVersion, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_TOPIC_VERSION);\\n\\t\\tstmt.setInt(1, topicVersion.getTopicVersionId());\\n\\t\\tstmt.setInt(2, topicVersion.getTopicId());\\n\\t\\tstmt.setString(3, topicVersion.getEditComment());\\n\\t\\tstmt.setString(4, topicVersion.getVersionContent());\\n\\t\\tif (topicVersion.getAuthorId() == null) {\\n\\t\\t\\tstmt.setNull(5, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(5, topicVersion.getAuthorId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setInt(6, topicVersion.getEditType());\\n\\t\\tstmt.setString(7, topicVersion.getAuthorIpAddress());\\n\\t\\tstmt.setTimestamp(8, topicVersion.getEditDate());\\n\\t\\tif (topicVersion.getPreviousTopicVersionId() == null) {\\n\\t\\t\\tstmt.setNull(9, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(9, topicVersion.getPreviousTopicVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setInt(10, topicVersion.getCharactersChanged());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t\\tstmt = new WikiPreparedStatement(STATEMENT_UPDATE_TOPIC_CURRENT_VERSION);\\n\\t\\tstmt.setInt(1, topicVersion.getTopicId());\\n\\t\\tstmt.setInt(2, topicVersion.getTopicId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertUserDetails(WikiUserDetails userDetails, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_USER);\\n\\t\\tstmt.setString(1, userDetails.getUsername());\\n\\t\\tstmt.setString(2, userDetails.getPassword());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertUserAuthority(String username, String authority, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_AUTHORITY);\\n\\t\\tstmt.setString(1, username);\\n\\t\\tstmt.setString(2, authority);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_VIRTUAL_WIKI);\\n\\t\\tstmt.setInt(1, virtualWiki.getVirtualWikiId());\\n\\t\\tstmt.setString(2, virtualWiki.getName());\\n\\t\\tstmt.setString(3, virtualWiki.getDefaultTopicName());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WATCHLIST_ENTRY);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topicName);\\n\\t\\tstmt.setInt(3, userId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiFile(WikiFile wikiFile, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WIKI_FILE);\\n\\t\\tstmt.setInt(1, wikiFile.getFileId());\\n\\t\\tstmt.setInt(2, virtualWikiId);\\n\\t\\tstmt.setString(3, wikiFile.getFileName());\\n\\t\\tstmt.setString(4, wikiFile.getUrl());\\n\\t\\tstmt.setString(5, wikiFile.getMimeType());\\n\\t\\tstmt.setInt(6, wikiFile.getTopicId());\\n\\t\\tstmt.setTimestamp(7, wikiFile.getDeleteDate());\\n\\t\\tstmt.setInt(8, (wikiFile.getReadOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(9, (wikiFile.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(10, wikiFile.getFileSize());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WIKI_FILE_VERSION);\\n\\t\\tstmt.setInt(1, wikiFileVersion.getFileVersionId());\\n\\t\\tstmt.setInt(2, wikiFileVersion.getFileId());\\n\\t\\tstmt.setString(3, wikiFileVersion.getUploadComment());\\n\\t\\tstmt.setString(4, wikiFileVersion.getUrl());\\n\\t\\tif (wikiFileVersion.getAuthorId() == null) {\\n\\t\\t\\tstmt.setNull(5, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(5, wikiFileVersion.getAuthorId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setString(6, wikiFileVersion.getAuthorIpAddress());\\n\\t\\tstmt.setTimestamp(7, wikiFileVersion.getUploadDate());\\n\\t\\tstmt.setString(8, wikiFileVersion.getMimeType());\\n\\t\\tstmt.setInt(9, wikiFileVersion.getFileSize());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiGroup(WikiGroup group, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_GROUP);\\n\\t\\tstmt.setInt(1, group.getGroupId());\\n\\t\\tstmt.setString(2, group.getName());\\n\\t\\tstmt.setString(3, group.getDescription());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiUser(WikiUser user, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WIKI_USER);\\n\\t\\tstmt.setInt(1, user.getUserId());\\n\\t\\tstmt.setString(2, user.getUsername());\\n\\t\\tstmt.setString(3, user.getDisplayName());\\n\\t\\tstmt.setTimestamp(4, user.getCreateDate());\\n\\t\\tstmt.setTimestamp(5, user.getLastLoginDate());\\n\\t\\tstmt.setString(6, user.getCreateIpAddress());\\n\\t\\tstmt.setString(7, user.getLastLoginIpAddress());\\n\\t\\tstmt.setString(8, user.getDefaultLocale());\\n\\t\\tstmt.setString(9, user.getEmail());\\n\\t\\tstmt.setString(10, user.getEditor());\\n\\t\\tstmt.setString(11, user.getSignature());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupCategoryTopics(int virtualWikiId, String categoryName) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_CATEGORY_TOPICS);\\n\\t\\t\\t\\tcategoryName = categoryName.toLowerCase();\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, categoryName);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupTopic(int virtualWikiId, String topicName, boolean caseSensitive, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = null;\\n\\t\\tif (caseSensitive) {\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC);\\n\\t\\t} else {\\n\\t\\t\\ttopicName = topicName.toLowerCase();\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_LOWER);\\n\\t\\t}\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topicName);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupTopicByType(int virtualWikiId, int topicType, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_BY_TYPE);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, topicType);\\n\\t\\tstmt.setInt(3, pagination.getNumResults());\\n\\t\\tstmt.setInt(4, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupTopicCount(int virtualWikiId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_COUNT);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupTopicVersion(int topicVersionId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_VERSION);\\n\\t\\tstmt.setInt(1, topicVersionId);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiFile(int virtualWikiId, int topicId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_FILE);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, topicId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiFileCount(int virtualWikiId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_FILE_COUNT);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiGroup(String groupName) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_GROUP);\\n\\t\\tstmt.setString(1, groupName);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUser(int userId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER);\\n\\t\\tstmt.setInt(1, userId);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUser(String username, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_LOGIN);\\n\\t\\tstmt.setString(1, username);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUserCount() throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_USER_COUNT);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUserEncryptedPassword(String username) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD);\\n\\t\\tstmt.setString(1, username);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUsers(Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USERS);\\n\\t\\tstmt.setInt(1, pagination.getNumResults());\\n\\t\\tstmt.setInt(2, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic int nextGroupMemberId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextTopicId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_TOPIC_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(AnsiDataHandler.DATA_TOPIC_ID);\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextTopicVersionId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_TOPIC_VERSION_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"topic_version_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextVirtualWikiId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiFileId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_FILE_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"file_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiFileVersionId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"file_version_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiGroupId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_GROUP_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(AnsiDataHandler.DATA_GROUP_ID);\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiUserId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_USER_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(AnsiDataHandler.DATA_WIKI_USER_ID);\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic void reloadRecentChanges(Connection conn) throws SQLException {\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DELETE_RECENT_CHANGES, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_INSERT_RECENT_CHANGES, conn);\\n\\t}\\n\\tpublic void updateRole(Role role, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_ROLE);\\n\\t\\tstmt.setString(1, role.getDescription());\\n\\t\\tstmt.setString(2, role.getAuthority());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateTopic(Topic topic, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_TOPIC);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topic.getName());\\n\\t\\tstmt.setInt(3, topic.getTopicType());\\n\\t\\tstmt.setInt(4, (topic.getReadOnly() ? 1 : 0));\\n\\t\\tif (topic.getCurrentVersionId() == null) {\\n\\t\\t\\tstmt.setNull(5, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(5, topic.getCurrentVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setTimestamp(6, topic.getDeleteDate());\\n\\t\\tstmt.setInt(7, (topic.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setString(8, topic.getRedirectTo());\\n\\t\\tstmt.setInt(9, topic.getTopicId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_USER);\\n\\t\\tstmt.setString(1, userDetails.getPassword());\\n\\t\\tstmt.setInt(2, 1);\\n\\t\\tstmt.setString(3, userDetails.getUsername());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_VIRTUAL_WIKI);\\n\\t\\tstmt.setString(1, virtualWiki.getDefaultTopicName());\\n\\t\\tstmt.setInt(2, virtualWiki.getVirtualWikiId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateWikiFile(WikiFile wikiFile, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_WIKI_FILE);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, wikiFile.getFileName());\\n\\t\\tstmt.setString(3, wikiFile.getUrl());\\n\\t\\tstmt.setString(4, wikiFile.getMimeType());\\n\\t\\tstmt.setInt(5, wikiFile.getTopicId());\\n\\t\\tstmt.setTimestamp(6, wikiFile.getDeleteDate());\\n\\t\\tstmt.setInt(7, (wikiFile.getReadOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(8, (wikiFile.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(9, wikiFile.getFileSize());\\n\\t\\tstmt.setInt(10, wikiFile.getFileId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateWikiGroup(WikiGroup group, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_GROUP);\\n\\t\\tstmt.setString(1, group.getName());\\n\\t\\tstmt.setString(2, group.getDescription());\\n\\t\\tstmt.setInt(3, group.getGroupId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateWikiUser(WikiUser user, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_WIKI_USER);\\n\\t\\tstmt.setString(1, user.getUsername());\\n\\t\\tstmt.setString(2, user.getDisplayName());\\n\\t\\tstmt.setTimestamp(3, user.getLastLoginDate());\\n\\t\\tstmt.setString(4, user.getLastLoginIpAddress());\\n\\t\\tstmt.setString(5, user.getDefaultLocale());\\n\\t\\tstmt.setString(6, user.getEmail());\\n\\t\\tstmt.setString(7, user.getEditor());\\n\\t\\tstmt.setString(8, user.getSignature());\\n\\t\\tstmt.setInt(9, user.getUserId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n}\""
        },
        {
            "content": "The source code analysis of `AnsiDataHandler.java` and `AnsiQueryHandler.java` reveals the following key insights:\n\n### 1. **Tight Conceptual Coupling**\n- Despite no direct structural coupling (method calls, inheritance, etc.), these two classes are tightly **conceptually coupled** with a semantic similarity score of **0.8726**.\n- This is evident from their shared responsibilities in handling database operations related to topics, users, permissions, and versioning.\n\n### 2. **Design Pattern: Data Access Layer**\n- `AnsiDataHandler` implements business logic for data manipulation and uses an instance of `AnsiQueryHandler` as a data access delegate:\n  ```java\n  private final QueryHandler queryHandler = new AnsiQueryHandler();\n  ```\n- `AnsiQueryHandler` handles **SQL execution**, including queries and updates, while `AnsiDataHandler` manages **transaction control**, object mapping, caching, and higher-level logic.\n\n### 3. **Shared Responsibilities**\n- Both files interact heavily with similar domain objects:\n  - `Topic`, `WikiUser`, `VirtualWiki`, `Category`, `RecentChange`, `WikiFile`, etc.\n- They also work with similar services like `WikiCache`, `DatabaseConnection`, and `Pagination`.\n\n### 4. **Co-Change Justification**\n- The high co-change frequency (`AnsiQueryHandler` appears 14 times with `AnsiDataHandler`) is justified by this tight integration.\n- Changes in SQL structure, schema, or transaction logic in one file often require adjustments in the other.\n\n---\n\n### \u2705 Conclusion: Synchronization Required\n\nBased on:\n- High **co-change support (14)** and confidence (0.4375),\n- Strong **conceptual coupling (0.8726)**,\n- Shared **domain models** and **functional roles**,\n\n**`AnsiQueryHandler.java` should be synchronized whenever `AnsiDataHandler.java` changes.**\n\nThis ensures consistency between the business logic layer (`AnsiDataHandler`) and the SQL/data layer (`AnsiQueryHandler`), especially during schema changes, transaction modifications, or query restructuring.\n\nWould you like me to continue analyzing any additional entities?",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `AnsiDataHandler.java`\n\nChange set: [AnsiQueryHandler, QueryHandler, WikiBase, WikiCache, DatabaseConnection, DataHandler, UpgradeServlet, DB2DataHandler, MSSqlDataHandler, HSqlDataHandler, DB2400DataHandler, MySqlDataHandler, OracleDataHandler, PostgresDataHandler, WikiDatabase, Environment, Utilities, WikiUser, Topic, WikiUtil, ParserUtil, LinkUtil, RecentChange, Category, WikiFile, TopicVersion, VirtualWiki, JAMWikiAuthenticationConfiguration, WikiMessage, WikiLogger, Pagination, NamespaceHandler, WikiGroup, RoleMap, Role, WikiException, WikiFileVersion, WikiPreparedStatement, ServletUtil, WikiUserDetails, DatabaseUpgrades, DatabaseUserHandler]\n\nDetails:\n1. **AnsiQueryHandler**: Tightly coupled as the default query handler used by AnsiDataHandler for SQL execution; co-change support 14.\n2. **QueryHandler**: Interface implemented by AnsiQueryHandler; any API change affects AnsiDataHandler.\n3. **WikiBase**: Used for special pages and search engine integration; frequently interacts with data layer.\n4. **WikiCache**: Heavy cache operations are performed by AnsiDataHandler; changes in caching logic impact both.\n5. **DatabaseConnection**: Manages transactions and connections; shared usage is critical.\n6. **DataHandler**: Base interface for all data handlers; structural changes here affect all subclasses.\n7. **UpgradeServlet**: Handles database upgrades; historically changed together during schema updates.\n8. **DB2DataHandler**: Similar ANSI-compliant SQL structure; shares base logic with AnsiDataHandler.\n9. **MSSqlDataHandler**: Similar to Ansi but with dialect-specific variations; likely to be impacted by similar changes.\n10. **HSqlDataHandler**: Often used for testing; mirrors ANSI behavior closely.\n11. **DB2400DataHandler**: Another ANSI-based handler that may share logic or evolve in sync.\n12. **MySqlDataHandler**: May diverge slightly but often aligned on core concepts and interfaces.\n13. **OracleDataHandler**: Large enterprise use case; aligns structurally with Ansi for complex queries.\n14. **PostgresDataHandler**: High similarity in handling advanced SQL constructs.\n15. **WikiDatabase**: Contains static methods related to database setup; used by both classes.\n16. **Environment**: Loads SQL properties and configuration; tightly linked to AnsiQueryHandler.\n17. **Utilities**: General utility functions used across database handlers.\n18. **WikiUser**: Heavily involved in user management and authentication logic.\n19. **Topic**: Core model entity; manipulated heavily by both classes.\n20. **WikiUtil**: Utility methods for validation and parsing topic names.\n21. **ParserUtil**: Used for parsing content; relies on transactional state and data access.\n22. **LinkUtil**: Link processing that involves topic resolution and lookup.\n23. **RecentChange**: Entity managed by both classes for history tracking.\n24. **Category**: Manipulated via data layer and subject to schema or query changes.\n25. **WikiFile**: File management logic is parallel to topic handling.\n26. **TopicVersion**: Versioning system affected by transaction control and SQL logic.\n27. **VirtualWiki**: Multi-wiki support integrated deeply into both layers.\n28. **JAMWikiAuthenticationConfiguration**: Security-related settings that influence data access.\n29. **WikiMessage**: Error messages and feedback tied to data operations.\n30. **WikiLogger**: Logging infrastructure used consistently across modules.\n31. **Pagination**: Shared across query execution and result retrieval.\n32. **NamespaceHandler**: Influences how topics are parsed and stored.\n33. **WikiGroup**: Group/user/authority model shared between security and data layers.\n34. **RoleMap**: Security mapping handled similarly to user/topic relationships.\n35. **Role**: Authorization model that evolves alongside data access patterns.\n36. **WikiException**: Exception hierarchy used consistently across both files.\n37. **WikiFileVersion**: Similar versioning pattern as TopicVersion.\n38. **WikiPreparedStatement**: Custom prepared statement class used directly.\n39. **ServletUtil**: Utility functions used across servlets that modify data.\n40. **WikiUserDetails**: Security details mapped to user tables.\n\nThese entities were selected based on:\n- Co-change relationship results (support >= 2),\n- Conceptual coupling analysis (high semantic similarity),\n- Call graph and import statements from source code,\n- Structural and functional dependencies revealed through method calls and object interaction.\n\nAll these files should be reviewed synchronously when modifying `AnsiDataHandler.java` to ensure consistency, maintainability, and correctness.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14",
                    "m15",
                    "m16"
                ],
                "response_message": "m17"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `JAMWiki`, a well-known Java open source project. The starting entity you need to deal with is AnsiDataHandler.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_35c71e1abb464ef1954ac3",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"Utilities\", \"1\", \"0.03125\"], [\"WikiBase\", \"3\", \"0.09375\"], [\"Environment\", \"2\", \"0.0625\"], [\"WikiDatabase\", \"6\", \"0.1875\"], [\"UpgradeServlet\", \"5\", \"0.15625\"], [\"PersistencyServlet\", \"1\", \"0.03125\"], [\"HSqlQueryHandler\", \"1\", \"0.03125\"], [\"DB2DataHandler\", \"2\", \"0.0625\"], [\"MSSqlDataHandler\", \"2\", \"0.0625\"], [\"HSqlDataHandler\", \"2\", \"0.0625\"], [\"DB2400DataHandler\", \"2\", \"0.0625\"], [\"MySqlDataHandler\", \"2\", \"0.0625\"], [\"OracleDataHandler\", \"2\", \"0.0625\"], [\"PostgresDataHandler\", \"2\", \"0.0625\"], [\"QueryHandler\", \"8\", \"0.25\"], [\"AnsiQueryHandler\", \"14\", \"0.4375\"], [\"MoveServlet\", \"2\", \"0.0625\"], [\"Role\", \"1\", \"0.03125\"], [\"RolesServlet\", \"1\", \"0.03125\"], [\"DatabaseUserHandler\", \"2\", \"0.0625\"], [\"DatabaseUpgrades\", \"6\", \"0.1875\"], [\"DatabaseConnection\", \"3\", \"0.09375\"], [\"LocalDataSource\", \"1\", \"0.03125\"], [\"WikiPreparedStatement\", \"1\", \"0.03125\"], [\"WikiUser\", \"1\", \"0.03125\"], [\"JFlexParser\", \"2\", \"0.0625\"], [\"MigrationUtil\", \"1\", \"0.03125\"], [\"ParserException\", \"1\", \"0.03125\"], [\"JAMWikiModel\", \"1\", \"0.03125\"], [\"JFlexLexer\", \"1\", \"0.03125\"], [\"WikiHeadingTag\", \"1\", \"0.03125\"], [\"TemplateTag\", \"1\", \"0.03125\"], [\"WikiLinkTag\", \"1\", \"0.03125\"], [\"HtmlLinkTag\", \"1\", \"0.03125\"], [\"WikiReferenceTag\", \"1\", \"0.03125\"], [\"JFlexParserTag\", \"1\", \"0.03125\"], [\"WikiSignatureTag\", \"1\", \"0.03125\"], [\"JavascriptTag\", \"1\", \"0.03125\"], [\"WikiReferencesTag\", \"1\", \"0.03125\"], [\"WikiBoldItalicTag\", \"1\", \"0.03125\"], [\"IncludeOnlyTag\", \"1\", \"0.03125\"], [\"NoIncludeTag\", \"1\", \"0.03125\"], [\"BlikiProxyParser\", \"1\", \"0.03125\"], [\"BlikiProxyParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiCrawlHandler\", \"1\", \"0.03125\"], [\"JAMWikiLoadHandler\", \"1\", \"0.03125\"], [\"Main\", \"1\", \"0.03125\"], [\"WikiDistributedCache\", \"1\", \"0.03125\"], [\"JAMWikiAuthenticationConfiguration\", \"1\", \"0.03125\"], [\"AdminServlet\", \"3\", \"0.09375\"], [\"SetupServlet\", \"1\", \"0.03125\"], [\"ImageUtil\", \"3\", \"0.09375\"], [\"ParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiServlet\", \"3\", \"0.09375\"], [\"ImageLinkTag\", \"3\", \"0.09375\"], [\"ServletUtil\", \"2\", \"0.0625\"], [\"LinkTag\", \"1\", \"0.03125\"], [\"JAMWikiUnitTest\", \"1\", \"0.03125\"], [\"AdminVirtualWikiServlet\", \"1\", \"0.03125\"], [\"Topic\", \"1\", \"0.03125\"], [\"LinkUtil\", \"1\", \"0.03125\"], [\"WikiPageInfo\", \"1\", \"0.03125\"], [\"RankingAlgorithmSearchEngine\", \"1\", \"0.03125\"], [\"LuceneSearchEngine\", \"1\", \"0.03125\"], [\"H2DataHandler\", \"1\", \"0.03125\"], [\"SybaseASADataHandler\", \"1\", \"0.03125\"], [\"CacheDataHandler\", \"1\", \"0.03125\"], [\"AnsiDataHandlerTest\", \"1\", \"0.03125\"], [\"StylesheetServlet\", \"1\", \"0.03125\"], [\"WikiCache\", \"1\", \"0.03125\"], [\"WikiCacheTest\", \"1\", \"0.03125\"]]"
            },
            "m5": {
                "content": "The co-change relationship analysis reveals that `AnsiDataHandler.java` has a significant historical correlation with changes in other entities. Here are the key findings:\n\n1. **High Confidence Relationships**:\n   - `AnsiQueryHandler.java`: This entity has the highest support (14) and confidence (0.4375). It is highly likely that changes in `AnsiDataHandler.java` will impact `AnsiQueryHandler.java`.\n   - `QueryHandler.java`: With 8 supports and a confidence of 0.25, this entity also shows a relatively strong co-change relationship.\n\n2. **Moderate Confidence Relationships**:\n   - Entities like `WikiDatabase.java`, `UpgradeServlet.java`, `DB2DataHandler.java`, `MSSqlDataHandler.java`, `HSqlDataHandler.java`, `DB2400DataHandler.java`, `MySqlDataHandler.java`, `OracleDataHandler.java`, `PostgresDataHandler.java`, `DatabaseUpgrades.java`, and `DatabaseConnection.java` show moderate confidence values ranging from 0.09 to 0.18.\n   - These indicate dependencies that should be investigated further for synchronization needs.\n\n3. **Low Confidence Relationships**: \n   - Many entities have lower confidence values (e.g., 0.03125), indicating weaker historical correlations. While these may not require immediate attention, they can be revisited if further analysis suggests potential impacts.\n\nBased on the results, I recommend focusing on `AnsiQueryHandler.java` as the most critical dependent entity. Next, we should analyze coupling dependencies between `AnsiDataHandler.java` and `AnsiQueryHandler.java` to understand their interrelationships better. \n\nProceeding with this, I will call the `get_coupling_dependencies` function for these two entities. \n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_b6b43cffdefc4a7381c9bf",
                        "function": {
                            "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m7": {
                "content": "The coupling dependency analysis between `AnsiDataHandler.java` and `AnsiQueryHandler.java` revealed that there are no direct structural dependencies (such as method calls, inheritance, or interface implementation) between these two entities. This suggests that the co-change relationship observed earlier might be due to other factors, such as shared functionality, similar maintenance tasks, or historical development patterns rather than direct code-level interactions.\n\nGiven this result, it is important to explore alternative means of analyzing their relationship further, especially since the co-change relationship indicates a significant historical correlation. One approach is to examine the semantic similarity between these files to determine whether they share conceptual or functional similarities that could explain the co-change pattern.\n\nTo proceed, I will call the `get_conceptual_coupling` function for `AnsiDataHandler.java` and `AnsiQueryHandler.java`. This will help us understand if there is any meaningful semantic overlap between the two files.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_463bcc3afc6f4c1d83af2a",
                        "function": {
                            "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.87263656\""
            },
            "m9": {
                "content": "The conceptual coupling analysis between `AnsiDataHandler.java` and `AnsiQueryHandler.java` returned a high semantic similarity score of **0.8726** (approximately 87.26%). This indicates that, despite the absence of direct structural dependencies, the two entities share significant conceptual or functional similarities.\n\n### Interpretation:\n- The high semantic similarity suggests that both files likely implement related logic or serve similar roles within the system, which could explain their strong co-change relationship.\n- Even though there is no direct method call or inheritance link, changes in one might still influence the other due to shared responsibilities in data handling and query execution.\n\n### Next Steps:\nTo further understand how these entities interact at the code level, I recommend analyzing the **call graph** of `AnsiDataHandler.java`. This will show us which entities are directly invoked or referenced by it and help identify potential indirect relationships.\n\nI will now call the `get_call_graph` function for `AnsiDataHandler.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_1fcff6ef88c246a8a7e987",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"Encryption\", \"TopicVersion\", \"ParserOutput\", \"WikiLink\", \"WikiUser\", \"DataHandler\", \"WikiMessage\", \"NamespaceHandler\", \"RecentChange\", \"JAMWikiAuthenticationConfiguration\", \"WikiBase\", \"LinkUtil\", \"Topic\", \"WikiGroup\", \"Pagination\", \"VirtualWiki\", \"WikiUtil\", \"WikiCache\", \"WikiException\", \"Role\", \"WikiLogger\", \"Watchlist\", \"WikiUserDetails\", \"Category\", \"RoleMap\", \"WikiFileVersion\", \"ParserUtil\", \"WikiFile\"]"
            },
            "m11": {
                "content": "The call graph for `AnsiDataHandler.java` reveals that it directly interacts with several entities, such as:\n\n- **DataHandler**: Likely an abstract or base class that `AnsiDataHandler` extends or implements.\n- **WikiBase**, **WikiUtil**, **WikiCache**, **WikiLogger**, **WikiException**, **WikiMessage**, **WikiUser**, **VirtualWiki**, **Topic**, **NamespaceHandler**, **LinkUtil**, **Encryption**, etc.\n\nThese entities represent core components of the JAMWiki system, indicating that `AnsiDataHandler.java` plays a central role in coordinating with various modules related to data management, user handling, caching, logging, and content processing.\n\n### Observations:\n- The strong conceptual coupling with `AnsiQueryHandler.java` (0.8726) and its high co-change support (14 times changed together) suggests that even though there is no direct structural dependency, they likely share similar responsibilities or are part of the same functional domain\u2014possibly SQL/data handling.\n- Since `AnsiDataHandler` does not directly call `AnsiQueryHandler`, any ripple effect would be **indirect**, possibly through shared interfaces like `DataHandler`, or via runtime behavior such as dynamic dispatching or configuration-based routing.\n\n### Recommendation:\nTo better understand whether `AnsiQueryHandler.java` should be synchronized with changes in `AnsiDataHandler.java`, we can examine the **origin code** of both files to look for indirect references, interface implementations, or shared usage patterns.\n\nI will now retrieve the source code for `AnsiDataHandler.java` and `AnsiQueryHandler.java` for comparison.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_ed1eb74e449c40a89bd2b2",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.jamwiki.db;\\nimport java.sql.Connection;\\nimport java.sql.Timestamp;\\nimport java.util.Collection;\\nimport java.util.Iterator;\\nimport java.util.LinkedHashMap;\\nimport java.util.List;\\nimport java.util.Locale;\\nimport java.util.Vector;\\nimport net.sf.ehcache.Element;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.DataHandler;\\nimport org.jamwiki.WikiBase;\\nimport org.jamwiki.WikiException;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.authentication.JAMWikiAuthenticationConfiguration;\\nimport org.jamwiki.authentication.WikiUserDetails;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.RoleMap;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.Watchlist;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.parser.ParserOutput;\\nimport org.jamwiki.parser.ParserUtil;\\nimport org.jamwiki.utils.Encryption;\\nimport org.jamwiki.utils.LinkUtil;\\nimport org.jamwiki.utils.NamespaceHandler;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.WikiCache;\\nimport org.jamwiki.utils.WikiLink;\\nimport org.jamwiki.utils.WikiLogger;\\nimport org.jamwiki.utils.WikiUtil;\\nimport org.springframework.transaction.TransactionStatus;\\npublic class AnsiDataHandler implements DataHandler {\\n\\tprivate static final String CACHE_TOPICS = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS\\\";\\n\\tprivate static final String CACHE_VIRTUAL_WIKI = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_VIRTUAL_WIKI\\\";\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiDataHandler.class.getName());\\n\\t\\tpublic static final String DATA_TOPIC_NAME = \\\"topic_name\\\";\\n\\tpublic static final String DATA_WIKI_USER_ID = \\\"wiki_user_id\\\" ;\\n\\tpublic static final String DATA_GROUP_ID = \\\"group_id\\\";\\n\\tpublic static final String DATA_CATEGORY_NAME = \\\"category_name\\\";\\n\\tpublic static final String DATA_TOPIC_ID = \\\"topic_id\\\";\\n\\tprivate final QueryHandler queryHandler = new AnsiQueryHandler();\\n\\tprivate void addCategory(Category category, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(category.getVirtualWiki());\\n\\t\\tthis.validateCategory(category);\\n\\t\\tthis.queryHandler().insertCategory(category, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addGroupMember(String username, int groupId, Connection conn) throws Exception {\\n\\t\\tint groupMemberId = this.queryHandler().nextGroupMemberId(conn);\\n\\t\\tthis.queryHandler().insertGroupMember(groupMemberId, username, groupId, conn);\\n\\t}\\n\\tprivate void addRecentChange(RecentChange change, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(change.getVirtualWiki());\\n\\t\\tthis.validateRecentChange(change);\\n\\t\\tthis.queryHandler().insertRecentChange(change, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tif (topic.getTopicId() < 1) {\\n\\t\\t\\tint topicId = this.queryHandler().nextTopicId(conn);\\n\\t\\t\\ttopic.setTopicId(topicId);\\n\\t\\t}\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().insertTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addTopicVersion(TopicVersion topicVersion, Connection conn) throws Exception {\\n\\t\\tif (topicVersion.getTopicVersionId() < 1) {\\n\\t\\t\\tint topicVersionId = this.queryHandler().nextTopicVersionId(conn);\\n\\t\\t\\ttopicVersion.setTopicVersionId(topicVersionId);\\n\\t\\t}\\n\\t\\tif (topicVersion.getEditDate() == null) {\\n\\t\\t\\tTimestamp editDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\ttopicVersion.setEditDate(editDate);\\n\\t\\t}\\n\\t\\tthis.validateTopicVersion(topicVersion);\\n\\t\\tthis.queryHandler().insertTopicVersion(topicVersion, conn);\\n\\t}\\n\\tprivate void addUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().insertUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void addVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tif (virtualWiki.getVirtualWikiId() < 1) {\\n\\t\\t\\tint virtualWikiId = this.queryHandler().nextVirtualWikiId(conn);\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(virtualWikiId);\\n\\t\\t}\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().insertVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void addWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.validateWatchlistEntry(topicName);\\n\\t\\tthis.queryHandler().insertWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tprivate void addWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tif (wikiFile.getFileId() < 1) {\\n\\t\\t\\tint fileId = this.queryHandler().nextWikiFileId(conn);\\n\\t\\t\\twikiFile.setFileId(fileId);\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().insertWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void addWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws Exception {\\n\\t\\tif (wikiFileVersion.getFileVersionId() < 1) {\\n\\t\\t\\tint fileVersionId = this.queryHandler().nextWikiFileVersionId(conn);\\n\\t\\t\\twikiFileVersion.setFileVersionId(fileVersionId);\\n\\t\\t}\\n\\t\\tif (wikiFileVersion.getUploadDate() == null) {\\n\\t\\t\\tTimestamp uploadDate = new Timestamp(System.currentTimeMillis());\\n\\t\\t\\twikiFileVersion.setUploadDate(uploadDate);\\n\\t\\t}\\n\\t\\tthis.validateWikiFileVersion(wikiFileVersion);\\n\\t\\tthis.queryHandler().insertWikiFileVersion(wikiFileVersion, conn);\\n\\t}\\n\\tprivate void addWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tif (group.getGroupId() < 1) {\\n\\t\\t\\tint groupId = this.queryHandler().nextWikiGroupId(conn);\\n\\t\\t\\tgroup.setGroupId(groupId);\\n\\t\\t}\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().insertWikiGroup(group, conn);\\n\\t}\\n\\tprivate void addWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tif (user.getUserId() < 1) {\\n\\t\\t\\tint nextUserId = this.queryHandler().nextWikiUserId(conn);\\n\\t\\t\\tuser.setUserId(nextUserId);\\n\\t\\t}\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().insertWikiUser(user, conn);\\n\\t}\\n\\tpublic boolean authenticate(String username, String password) throws Exception {\\n\\t\\tboolean result = false;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\t\\t\\t\\tif (!StringUtils.isBlank(password)) {\\n\\t\\t\\t\\tString encryptedPassword = Encryption.encrypt(password);\\n\\t\\t\\t\\treturn this.queryHandler().authenticateUser(username, encryptedPassword, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic boolean canMoveTopic(Topic fromTopic, String destination) throws Exception {\\n\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, null);\\n\\t\\tif (toTopic == null || toTopic.getDeleteDate() != null) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (toTopic.getRedirectTo() != null && toTopic.getRedirectTo().equals(fromTopic.getName())) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tprivate static void checkLength(String value, int maxLength) throws WikiException {\\n\\t\\tif (value != null && value.length() > maxLength) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", value, new Integer(maxLength).toString()));\\n\\t\\t}\\n\\t}\\n\\tprivate void deleteRecentChanges(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteRecentChanges(topic.getTopicId(), conn);\\n\\t}\\n\\tpublic void deleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdeleteRecentChanges(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = new ParserOutput();\\n\\t\\t\\ttopic.setDeleteDate(new Timestamp(System.currentTimeMillis()));\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void deleteTopicCategories(Topic topic, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteTopicCategories(topic.getTopicId(), conn);\\n\\t}\\n\\tprivate void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws Exception {\\n\\t\\tthis.queryHandler().deleteWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t}\\n\\tpublic List getAllCategories(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getCategories(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(rs.getString(DATA_CATEGORY_NAME));\\n\\t\\t\\t\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\t\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllRoles() throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoles();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(this.initRole(rs));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic List getAllTopicNames(String virtualWiki) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllTopicNames(virtualWikiId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getAllWikiFileVersions(String virtualWiki, String topicName, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiFile wikiFile = lookupWikiFile(virtualWiki, topicName);\\n\\t\\tif (wikiFile == null) {\\n\\t\\t\\tthrow new Exception(\\\"No topic exists for \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getAllWikiFileVersions(wikiFile, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tall.add(initWikiFileVersion(rs));\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(virtualWiki, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getRecentChanges(String virtualWiki, String topicName, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tVector all = new Vector();\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, true, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn all;\\n\\t\\t}\\n\\t\\tWikiResultSet rs = this.queryHandler().getRecentChanges(topic.getTopicId(), pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic Collection getRoleMapByLogin(String loginFragment) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByLogin(loginFragment);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger userId = new Integer(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(userId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(userId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setUserId(userId);\\n\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(userId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Collection getRoleMapByRole(String authority) throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapByRole(authority);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tint groupId = rs.getInt(DATA_GROUP_ID);\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tString key = userId + \\\"|\\\" + groupId;\\n\\t\\t\\tif (roleMaps.containsKey(key)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(key);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\t\\troleMap.setUserId(new Integer(userId));\\n\\t\\t\\t\\t\\troleMap.setUserLogin(rs.getString(\\\"username\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (groupId > 0) {\\n\\t\\t\\t\\t\\troleMap.setGroupId(new Integer(groupId));\\n\\t\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(key, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapGroup(String groupName) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroup(groupName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic Collection getRoleMapGroups() throws Exception {\\n\\t\\tLinkedHashMap roleMaps = new LinkedHashMap();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapGroups();\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tInteger groupId = new Integer(rs.getInt(DATA_GROUP_ID));\\n\\t\\t\\tRoleMap roleMap = new RoleMap();\\n\\t\\t\\tif (roleMaps.containsKey(groupId)) {\\n\\t\\t\\t\\troleMap = (RoleMap)roleMaps.get(groupId);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\troleMap.setGroupId(groupId);\\n\\t\\t\\t\\troleMap.setGroupName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\t}\\n\\t\\t\\troleMap.addRole(rs.getString(\\\"authority\\\"));\\n\\t\\t\\troleMaps.put(groupId, roleMap);\\n\\t\\t}\\n\\t\\treturn roleMaps.values();\\n\\t}\\n\\tpublic Role[] getRoleMapUser(String login) throws Exception {\\n\\t\\tList results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getRoleMapUser(login);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRole role = this.initRole(rs);\\n\\t\\t\\tresults.add(role);\\n\\t\\t}\\n\\t\\treturn (Role[])results.toArray(new Role[0]);\\n\\t}\\n\\tpublic List getTopicsAdmin(String virtualWiki, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getTopicsAdmin(virtualWikiId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().getUserContributions(virtualWiki, userString, pagination, descending);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tpublic List getVirtualWikiList() throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().getVirtualWikis(conn);\\n\\t\\t\\twhile (rs.next()) {\\n\\t\\t\\t\\tVirtualWiki virtualWiki = initVirtualWiki(rs);\\n\\t\\t\\t\\tresults.add(virtualWiki);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Watchlist getWatchlist(String virtualWiki, int userId) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tString topicName = rs.getString(DATA_TOPIC_NAME);\\n\\t\\t\\tall.add(topicName);\\n\\t\\t}\\n\\t\\treturn new Watchlist(virtualWiki, all);\\n\\t}\\n\\tpublic List getWatchlist(String virtualWiki, int userId, Pagination pagination) throws Exception {\\n\\t\\tList all = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().getWatchlist(virtualWikiId, userId, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tRecentChange change = initRecentChange(rs);\\n\\t\\t\\tall.add(change);\\n\\t\\t}\\n\\t\\treturn all;\\n\\t}\\n\\tprivate RecentChange initRecentChange(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRecentChange change = new RecentChange();\\n\\t\\t\\tchange.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\tchange.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\tchange.setTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tchange.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\tchange.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\tchange.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\tchange.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\tchange.setAuthorName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tchange.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\tchange.setVirtualWiki(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\treturn change;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing recent change\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Role initRole(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tRole role = new Role(rs.getString(\\\"role_name\\\"));\\n\\t\\t\\trole.setDescription(rs.getString(\\\"role_description\\\"));\\n\\t\\t\\treturn role;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing role\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate Topic initTopic(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (rs.size() > 1 && rs.getTimestamp(\\\"delete_date\\\") != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\trs.last();\\n\\t\\t\\t}\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tTopic topic = new Topic();\\n\\t\\t\\ttopic.setAdminOnly(rs.getInt(\\\"topic_admin_only\\\") != 0);\\n\\t\\t\\ttopic.setName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\ttopic.setVirtualWiki(virtualWiki);\\n\\t\\t\\tint currentVersionId = rs.getInt(\\\"current_version_id\\\");\\n\\t\\t\\tif (currentVersionId > 0) {\\n\\t\\t\\t\\ttopic.setCurrentVersionId(new Integer(currentVersionId));\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topic.getTopicContent() == null) {\\n\\t\\t\\t\\ttopic.setTopicContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\ttopic.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopic.setReadOnly(rs.getInt(\\\"topic_read_only\\\") != 0);\\n\\t\\t\\ttopic.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\ttopic.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\ttopic.setRedirectTo(rs.getString(\\\"redirect_to\\\"));\\n\\t\\t\\treturn topic;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate TopicVersion initTopicVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tTopicVersion topicVersion = new TopicVersion();\\n\\t\\t\\ttopicVersion.setTopicVersionId(rs.getInt(\\\"topic_version_id\\\"));\\n\\t\\t\\ttopicVersion.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\ttopicVersion.setEditComment(rs.getString(\\\"edit_comment\\\"));\\n\\t\\t\\ttopicVersion.setVersionContent(rs.getString(\\\"version_content\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif (topicVersion.getVersionContent() == null) {\\n\\t\\t\\t\\ttopicVersion.setVersionContent(\\\"\\\");\\n\\t\\t\\t}\\n\\t\\t\\tint previousTopicVersionId = rs.getInt(\\\"previous_topic_version_id\\\");\\n\\t\\t\\tif (previousTopicVersionId > 0) {\\n\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(new Integer(previousTopicVersionId));\\n\\t\\t\\t}\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\ttopicVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\ttopicVersion.setCharactersChanged(rs.getInt(\\\"characters_changed\\\"));\\n\\t\\t\\ttopicVersion.setEditDate(rs.getTimestamp(\\\"edit_date\\\"));\\n\\t\\t\\ttopicVersion.setEditType(rs.getInt(\\\"edit_type\\\"));\\n\\t\\t\\ttopicVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\treturn topicVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing topic version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate VirtualWiki initVirtualWiki(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tVirtualWiki virtualWiki = new VirtualWiki();\\n\\t\\t\\tvirtualWiki.setVirtualWikiId(rs.getInt(\\\"virtual_wiki_id\\\"));\\n\\t\\t\\tvirtualWiki.setName(rs.getString(\\\"virtual_wiki_name\\\"));\\n\\t\\t\\tvirtualWiki.setDefaultTopicName(rs.getString(\\\"default_topic_name\\\"));\\n\\t\\t\\treturn virtualWiki;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing virtual wiki\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFile initWikiFile(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t\\tString virtualWiki = this.lookupVirtualWikiName(virtualWikiId);\\n\\t\\t\\tWikiFile wikiFile = new WikiFile();\\n\\t\\t\\twikiFile.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFile.setAdminOnly(rs.getInt(\\\"file_admin_only\\\") != 0);\\n\\t\\t\\twikiFile.setFileName(rs.getString(\\\"file_name\\\"));\\n\\t\\t\\twikiFile.setVirtualWiki(virtualWiki);\\n\\t\\t\\twikiFile.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\twikiFile.setTopicId(rs.getInt(DATA_TOPIC_ID));\\n\\t\\t\\twikiFile.setReadOnly(rs.getInt(\\\"file_read_only\\\") != 0);\\n\\t\\t\\twikiFile.setDeleteDate(rs.getTimestamp(\\\"delete_date\\\"));\\n\\t\\t\\twikiFile.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFile.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFile;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing file\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiFileVersion initWikiFileVersion(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiFileVersion wikiFileVersion = new WikiFileVersion();\\n\\t\\t\\twikiFileVersion.setFileVersionId(rs.getInt(\\\"file_version_id\\\"));\\n\\t\\t\\twikiFileVersion.setFileId(rs.getInt(\\\"file_id\\\"));\\n\\t\\t\\twikiFileVersion.setUploadComment(rs.getString(\\\"upload_comment\\\"));\\n\\t\\t\\twikiFileVersion.setUrl(rs.getString(\\\"file_url\\\"));\\n\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\tif (userId > 0) {\\n\\t\\t\\t\\twikiFileVersion.setAuthorId(new Integer(userId));\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setUploadDate(rs.getTimestamp(\\\"upload_date\\\"));\\n\\t\\t\\twikiFileVersion.setMimeType(rs.getString(\\\"mime_type\\\"));\\n\\t\\t\\twikiFileVersion.setAuthorIpAddress(rs.getString(\\\"wiki_user_ip_address\\\"));\\n\\t\\t\\twikiFileVersion.setFileSize(rs.getInt(\\\"file_size\\\"));\\n\\t\\t\\treturn wikiFileVersion;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing wiki file version\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiGroup initWikiGroup(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tWikiGroup wikiGroup = new WikiGroup();\\n\\t\\t\\twikiGroup.setGroupId(rs.getInt(\\\"group_id\\\"));\\n\\t\\t\\twikiGroup.setName(rs.getString(\\\"group_name\\\"));\\n\\t\\t\\twikiGroup.setDescription(rs.getString(\\\"group_description\\\"));\\n\\t\\t\\treturn wikiGroup;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing group\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tprivate WikiUser initWikiUser(WikiResultSet rs) {\\n\\t\\ttry {\\n\\t\\t\\tString username = rs.getString(\\\"login\\\");\\n\\t\\t\\tWikiUser user = new WikiUser(username);\\n\\t\\t\\tuser.setUserId(rs.getInt(DATA_WIKI_USER_ID));\\n\\t\\t\\tuser.setDisplayName(rs.getString(\\\"display_name\\\"));\\n\\t\\t\\tuser.setCreateDate(rs.getTimestamp(\\\"create_date\\\"));\\n\\t\\t\\tuser.setLastLoginDate(rs.getTimestamp(\\\"last_login_date\\\"));\\n\\t\\t\\tuser.setCreateIpAddress(rs.getString(\\\"create_ip_address\\\"));\\n\\t\\t\\tuser.setLastLoginIpAddress(rs.getString(\\\"last_login_ip_address\\\"));\\n\\t\\t\\tuser.setDefaultLocale(rs.getString(\\\"default_locale\\\"));\\n\\t\\t\\tuser.setEmail(rs.getString(\\\"email\\\"));\\n\\t\\t\\tuser.setEditor(rs.getString(\\\"editor\\\"));\\n\\t\\t\\tuser.setSignature(rs.getString(\\\"signature\\\"));\\n\\t\\t\\treturn user;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tlogger.severe(\\\"Failure while initializing user\\\", e);\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t}\\n\\tpublic List lookupCategoryTopics(String virtualWiki, String categoryName) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupCategoryTopics(virtualWikiId, categoryName);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tCategory category = new Category();\\n\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\tcategory.setVirtualWiki(virtualWiki);\\n\\t\\t\\tcategory.setChildTopicName(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t\\tcategory.setSortKey(rs.getString(\\\"sort_key\\\"));\\n\\t\\t\\tcategory.setTopicType(rs.getInt(\\\"topic_type\\\"));\\n\\t\\t\\tresults.add(category);\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic Topic lookupTopic(String virtualWiki, String topicName, boolean deleteOK, Object transactionObject) throws Exception {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tif (cacheElement != null) {\\n\\t\\t\\t\\tTopic cacheTopic = (Topic)cacheElement.getObjectValue();\\n\\t\\t\\t\\treturn (cacheTopic == null || (!deleteOK && cacheTopic.getDeleteDate() != null)) ? null : new Topic(cacheTopic);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiLink wikiLink = LinkUtil.parseWikiLink(topicName);\\n\\t\\tString namespace = wikiLink.getNamespace();\\n\\t\\tboolean caseSensitive = true;\\n\\t\\tif (namespace != null) {\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_SPECIAL)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t\\tif (namespace.equals(NamespaceHandler.NAMESPACE_TEMPLATE) || namespace.equals(NamespaceHandler.NAMESPACE_USER) || namespace.equals(NamespaceHandler.NAMESPACE_CATEGORY)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcaseSensitive = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tTopic topic = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopic(virtualWikiId, topicName, caseSensitive, conn);\\n\\t\\t\\tif (rs.size() != 0) {\\n\\t\\t\\t\\ttopic = initTopic(rs);\\n\\t\\t\\t}\\n\\t\\t\\tif (transactionObject == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTopic cacheTopic = (topic == null) ? null : new Topic(topic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPICS, key, cacheTopic);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn (topic == null || (!deleteOK && topic.getDeleteDate() != null)) ? null : topic;\\n\\t}\\n\\tpublic int lookupTopicCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"topic_count\\\");\\n\\t}\\n\\tpublic List lookupTopicByType(String virtualWiki, int topicType, Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicByType(virtualWikiId, topicType, pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(DATA_TOPIC_NAME));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic TopicVersion lookupTopicVersion(int topicVersionId) throws Exception {\\n\\t\\tTopicVersion result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupTopicVersion(topicVersionId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : this.initTopicVersion(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic VirtualWiki lookupVirtualWiki(String virtualWikiName) throws Exception {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiName);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tVirtualWiki virtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getName().equals(virtualWikiName)) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, null);\\n\\t\\treturn null;\\n\\t}\\n\\tprivate int lookupVirtualWikiId(String virtualWikiName) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = this.lookupVirtualWiki(virtualWikiName);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiName, virtualWiki);\\n\\t\\treturn (virtualWiki == null) ? -1 : virtualWiki.getVirtualWikiId();\\n\\t}\\n\\tprivate String lookupVirtualWikiName(int virtualWikiId) throws Exception {\\n\\t\\tVirtualWiki virtualWiki = null;\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI, virtualWikiId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)cacheElement.getObjectValue();\\n\\t\\t\\treturn (virtualWiki == null) ? null : virtualWiki.getName();\\n\\t\\t}\\n\\t\\tList virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (Iterator iterator = virtualWikis.iterator(); iterator.hasNext();) {\\n\\t\\t\\tvirtualWiki = (VirtualWiki)iterator.next();\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() == virtualWikiId) {\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, virtualWiki);\\n\\t\\t\\t\\treturn virtualWiki.getName();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWikiId, null);\\n\\t\\treturn null;\\n\\t}\\n\\tpublic WikiFile lookupWikiFile(String virtualWiki, String topicName) throws Exception {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFile(virtualWikiId, topic.getTopicId());\\n\\t\\treturn (rs.size() == 0) ? null : initWikiFile(rs);\\n\\t}\\n\\tpublic int lookupWikiFileCount(String virtualWiki) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiFileCount(virtualWikiId);\\n\\t\\treturn rs.getInt(\\\"file_count\\\");\\n\\t}\\n\\tpublic WikiGroup lookupWikiGroup(String groupName) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiGroup(groupName);\\n\\t\\treturn (rs.size() == 0) ? null : initWikiGroup(rs);\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(int userId) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(userId, conn);\\n\\t\\t\\tresult = (rs.size() == 0) ? null : initWikiUser(rs);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(String username) throws Exception {\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUser(username, conn);\\n\\t\\t\\tif (rs.size() == 0) {\\n\\t\\t\\t\\tresult = null;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tint userId = rs.getInt(DATA_WIKI_USER_ID);\\n\\t\\t\\t\\tresult = lookupWikiUser(userId);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupWikiUserCount() throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserCount();\\n\\t\\treturn rs.getInt(\\\"user_count\\\");\\n\\t}\\n\\tpublic String lookupWikiUserEncryptedPassword(String username) throws Exception {\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUserEncryptedPassword(username);\\n\\t\\treturn (rs.size() == 0) ? null : rs.getString(\\\"password\\\");\\n\\t}\\n\\tpublic List lookupWikiUsers(Pagination pagination) throws Exception {\\n\\t\\tVector results = new Vector();\\n\\t\\tWikiResultSet rs = this.queryHandler().lookupWikiUsers(pagination);\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tresults.add(rs.getString(\\\"login\\\"));\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\tpublic void moveTopic(Topic fromTopic, TopicVersion fromVersion, String destination) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (!this.canMoveTopic(fromTopic, destination)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"move.exception.destinationexists\\\", destination));\\n\\t\\t\\t}\\n\\t\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, conn);\\n\\t\\t\\tboolean detinationExistsFlag = (toTopic != null && toTopic.getDeleteDate() == null);\\n\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopic(toTopic, null, false);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tString fromTopicName = fromTopic.getName();\\n\\t\\t\\tfromTopic.setName(destination);\\n\\t\\t\\tParserOutput fromParserOutput = ParserUtil.parserOutput(fromTopic.getTopicContent(), fromTopic.getVirtualWiki(), fromTopic.getName());\\n\\t\\t\\twriteTopic(fromTopic, fromVersion, fromParserOutput.getCategories(), fromParserOutput.getLinks(), true);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t\\twriteTopic(toTopic, null, null, null, false);\\n\\t\\t\\t\\tthis.undeleteTopic(toTopic, null, false);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic = fromTopic;\\n\\t\\t\\t\\ttoTopic.setTopicId(-1);\\n\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t}\\n\\t\\t\\tString content = ParserUtil.parserRedirectContent(destination);\\n\\t\\t\\ttoTopic.setRedirectTo(destination);\\n\\t\\t\\ttoTopic.setTopicType(Topic.TYPE_REDIRECT);\\n\\t\\t\\ttoTopic.setTopicContent(content);\\n\\t\\t\\tTopicVersion toVersion = fromVersion;\\n\\t\\t\\ttoVersion.setTopicVersionId(-1);\\n\\t\\t\\ttoVersion.setVersionContent(content);\\n\\t\\t\\tParserOutput toParserOutput = ParserUtil.parserOutput(toTopic.getTopicContent(), toTopic.getVirtualWiki(), toTopic.getName());\\n\\t\\t\\twriteTopic(toTopic, toVersion, toParserOutput.getCategories(), toParserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprotected QueryHandler queryHandler() {\\n\\t\\treturn this.queryHandler;\\n\\t}\\n\\tpublic void reloadRecentChanges() throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().reloadRecentChanges(conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void setup(Locale locale, WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiDatabase.initialize();\\n\\t\\t\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeQuery(WikiDatabase.getExistenceValidationQuery());\\n\\t\\t\\treturn;\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\t\\t\\t}\\n\\t\\tWikiDatabase.setup(locale, user, username, encryptedPassword);\\n\\t}\\n\\tpublic void setupSpecialPages(Locale locale, WikiUser user, VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STARTING_POINTS, user, false);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_LEFT_MENU, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_BOTTOM_AREA, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STYLESHEET, user, true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void undeleteTopic(Topic topic, TopicVersion topicVersion, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\ttopic.setDeleteDate(null);\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), userVisible);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void updateSpecialPage(Locale locale, String virtualWiki, String topicName, String ipAddress) throws Exception {\\n\\t\\tlogger.info(\\\"Updating special page \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tString contents = WikiUtil.readSpecialPage(locale, topicName);\\n\\t\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, conn);\\n\\t\\t\\tint charactersChanged = StringUtils.length(contents) - StringUtils.length(topic.getTopicContent());\\n\\t\\t\\ttopic.setTopicContent(contents);\\n\\t\\t\\t\\t\\t\\tTopicVersion topicVersion = new TopicVersion(null, ipAddress, \\\"Automatically updated by system upgrade\\\", contents, charactersChanged);\\n\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), virtualWiki, topicName);\\n\\t\\t\\twriteTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks(), true);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void updateTopic(Topic topic, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tthis.validateTopic(topic);\\n\\t\\tthis.queryHandler().updateTopic(topic, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws Exception {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\tthis.queryHandler().updateUserDetails(userDetails, conn);\\n\\t}\\n\\tprivate void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws Exception {\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\tthis.queryHandler().updateVirtualWiki(virtualWiki, conn);\\n\\t}\\n\\tprivate void updateWikiFile(WikiFile wikiFile, Connection conn) throws Exception {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\tthis.queryHandler().updateWikiFile(wikiFile, virtualWikiId, conn);\\n\\t}\\n\\tprivate void updateWikiGroup(WikiGroup group, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\tthis.queryHandler().updateWikiGroup(group, conn);\\n\\t}\\n\\tprivate void updateWikiUser(WikiUser user, Connection conn) throws Exception {\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\tthis.queryHandler().updateWikiUser(user, conn);\\n\\t}\\n\\tprotected void validateAuthority(String role) throws WikiException {\\n\\t\\tcheckLength(role, 30);\\n\\t}\\n\\tprotected void validateCategory(Category category) throws WikiException {\\n\\t\\tcheckLength(category.getName(), 200);\\n\\t\\tcheckLength(category.getSortKey(), 200);\\n\\t}\\n\\tprotected void validateRecentChange(RecentChange change) throws WikiException {\\n\\t\\tcheckLength(change.getTopicName(), 200);\\n\\t\\tcheckLength(change.getAuthorName(), 200);\\n\\t\\tcheckLength(change.getVirtualWiki(), 100);\\n\\t\\tchange.setEditComment(StringUtils.substring(change.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateRole(Role role) throws WikiException {\\n\\t\\tcheckLength(role.getAuthority(), 30);\\n\\t\\trole.setDescription(StringUtils.substring(role.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateTopic(Topic topic) throws WikiException {\\n\\t\\tcheckLength(topic.getName(), 200);\\n\\t\\tcheckLength(topic.getRedirectTo(), 200);\\n\\t}\\n\\tprotected void validateTopicVersion(TopicVersion topicVersion) throws WikiException {\\n\\t\\tcheckLength(topicVersion.getAuthorIpAddress(), 39);\\n\\t\\ttopicVersion.setEditComment(StringUtils.substring(topicVersion.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateUserDetails(WikiUserDetails userDetails) throws WikiException {\\n\\t\\tcheckLength(userDetails.getUsername(), 100);\\n\\t\\t\\t\\tif (userDetails.getPassword() != null && userDetails.getPassword().length() > 100) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", \\\"-\\\", \\\"100\\\"));\\n\\t\\t}\\n\\t}\\n\\tprotected void validateVirtualWiki(VirtualWiki virtualWiki) throws WikiException {\\n\\t\\tcheckLength(virtualWiki.getName(), 100);\\n\\t\\tcheckLength(virtualWiki.getDefaultTopicName(), 200);\\n\\t}\\n\\tprotected void validateWatchlistEntry(String topicName) throws WikiException {\\n\\t\\tcheckLength(topicName, 200);\\n\\t}\\n\\tprotected void validateWikiFile(WikiFile wikiFile) throws WikiException {\\n\\t\\tcheckLength(wikiFile.getFileName(), 200);\\n\\t\\tcheckLength(wikiFile.getUrl(), 200);\\n\\t\\tcheckLength(wikiFile.getMimeType(), 100);\\n\\t}\\n\\tprotected void validateWikiFileVersion(WikiFileVersion wikiFileVersion) throws WikiException {\\n\\t\\tcheckLength(wikiFileVersion.getUrl(), 200);\\n\\t\\tcheckLength(wikiFileVersion.getMimeType(), 100);\\n\\t\\tcheckLength(wikiFileVersion.getAuthorIpAddress(), 39);\\n\\t\\twikiFileVersion.setUploadComment(StringUtils.substring(wikiFileVersion.getUploadComment(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiGroup(WikiGroup group) throws WikiException {\\n\\t\\tcheckLength(group.getName(), 30);\\n\\t\\tgroup.setDescription(StringUtils.substring(group.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiUser(WikiUser user) throws WikiException {\\n\\t\\tcheckLength(user.getUsername(), 100);\\n\\t\\tcheckLength(user.getDisplayName(), 100);\\n\\t\\tcheckLength(user.getCreateIpAddress(), 39);\\n\\t\\tcheckLength(user.getLastLoginIpAddress(), 39);\\n\\t\\tcheckLength(user.getDefaultLocale(), 8);\\n\\t\\tcheckLength(user.getEmail(), 100);\\n\\t\\tcheckLength(user.getEditor(), 50);\\n\\t\\tcheckLength(user.getSignature(), 255);\\n\\t}\\n\\tpublic void writeFile(WikiFile wikiFile, WikiFileVersion wikiFileVersion) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(wikiFile.getFileName());\\n\\t\\t\\tif (wikiFile.getFileId() <= 0) {\\n\\t\\t\\t\\taddWikiFile(wikiFile, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateWikiFile(wikiFile, conn);\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setFileId(wikiFile.getFileId());\\n\\t\\t\\t\\t\\t\\taddWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRole(Role role, boolean update) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.validateRole(role);\\n\\t\\t\\tif (update) {\\n\\t\\t\\t\\tthis.queryHandler().updateRole(role, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.queryHandler().insertRole(role, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapGroup(int groupId, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteGroupAuthorities(groupId, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertGroupAuthority(groupId, authority, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJAMWikiAuthenticationConfiguration.resetJamwikiAnonymousAuthorities();\\n\\t\\t\\tJAMWikiAuthenticationConfiguration.resetDefaultGroupRoles();\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapUser(String username, List roles) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteUserAuthorities(username, conn);\\n\\t\\t\\tIterator roleIterator = roles.iterator();\\n\\t\\t\\twhile (roleIterator.hasNext()) {\\n\\t\\t\\t\\tString authority = (String)roleIterator.next();\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertUserAuthority(username, authority, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeTopic(Topic topic, TopicVersion topicVersion, LinkedHashMap categories, Vector links, boolean userVisible) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\tWikiCache.removeFromCache(WikiBase.CACHE_PARSED_TOPIC_CONTENT, key);\\n\\t\\t\\tWikiCache.removeFromCache(CACHE_TOPICS, key);\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(topic.getName());\\n\\t\\t\\tif (topic.getTopicId() <= 0) {\\n\\t\\t\\t\\taddTopic(topic, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateTopic(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (userVisible) {\\n\\t\\t\\t\\tif (topicVersion.getPreviousTopicVersionId() == null && topic.getCurrentVersionId() != null) {\\n\\t\\t\\t\\t\\ttopicVersion.setPreviousTopicVersionId(topic.getCurrentVersionId());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttopicVersion.setTopicId(topic.getTopicId());\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopicVersion(topicVersion, conn);\\n\\t\\t\\t\\tString authorName = topicVersion.getAuthorIpAddress();\\n\\t\\t\\t\\tInteger authorId = topicVersion.getAuthorId();\\n\\t\\t\\t\\tif (authorId != null) {\\n\\t\\t\\t\\t\\tWikiUser user = this.lookupWikiUser(topicVersion.getAuthorId().intValue());\\n\\t\\t\\t\\t\\tauthorName = user.getUsername();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tRecentChange change = new RecentChange(topic, topicVersion, authorName);\\n\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (categories != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicCategories(topic, conn);\\n\\t\\t\\t\\tfor (Iterator iterator = categories.keySet().iterator(); iterator.hasNext();) {\\n\\t\\t\\t\\t\\tString categoryName = (String)iterator.next();\\n\\t\\t\\t\\t\\tCategory category = new Category();\\n\\t\\t\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\t\\t\\tcategory.setSortKey((String)categories.get(categoryName));\\n\\t\\t\\t\\t\\tcategory.setVirtualWiki(topic.getVirtualWiki());\\n\\t\\t\\t\\t\\tcategory.setChildTopicName(topic.getName());\\n\\t\\t\\t\\t\\tthis.addCategory(category, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (links != null) {\\n\\t\\t\\t\\tWikiBase.getSearchEngine().deleteFromIndex(topic);\\n\\t\\t\\t\\tWikiBase.getSearchEngine().addToIndex(topic, links);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeVirtualWiki(VirtualWiki virtualWiki) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(virtualWiki.getName());\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() <= 0) {\\n\\t\\t\\t\\tthis.addVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName());\\n\\t\\tWikiCache.removeFromCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId());\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getName(), virtualWiki);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI, virtualWiki.getVirtualWikiId(), virtualWiki);\\n\\t}\\n\\tpublic void writeWatchlistEntry(Watchlist watchlist, String virtualWiki, String topicName, int userId) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tString article = WikiUtil.extractTopicLink(topicName);\\n\\t\\t\\tString comments = WikiUtil.extractCommentsLink(topicName);\\n\\t\\t\\tif (watchlist.containsTopic(topicName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.remove(article);\\n\\t\\t\\t\\twatchlist.remove(comments);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.add(article);\\n\\t\\t\\t\\twatchlist.add(comments);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiGroup(WikiGroup group) throws Exception {\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (group.getGroupId() <= 0) {\\n\\t\\t\\t\\tthis.addWikiGroup(group, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateWikiGroup(group, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiUser(WikiUser user, String username, String encryptedPassword) throws Exception {\\n\\t\\tWikiUtil.validateUserName(user.getUsername());\\n\\t\\tTransactionStatus status = DatabaseConnection.startTransaction();\\n\\t\\ttry {\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (user.getUserId() <= 0) {\\n\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\tthis.addUserDetails(userDetails, conn);\\n\\t\\t\\t\\tthis.addWikiUser(user, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addGroupMember(user.getUsername(), WikiBase.getGroupRegisteredUser().getGroupId(), conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (!StringUtils.isBlank(encryptedPassword)) {\\n\\t\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword, true, true, true, true, JAMWikiAuthenticationConfiguration.getDefaultGroupRoles());\\n\\t\\t\\t\\t\\tthis.updateUserDetails(userDetails, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.updateWikiUser(user, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (Exception e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (Error err) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, err);\\n\\t\\t\\tthrow err;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n}\""
            },
            "m13": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_bc2fbfde56e04067b74e9a",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiQueryHandler.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m14": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.jamwiki.db;\\nimport java.sql.Connection;\\nimport java.sql.SQLException;\\nimport java.sql.Types;\\nimport java.util.Properties;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.Environment;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.authentication.WikiUserDetails;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.Utilities;\\nimport org.jamwiki.utils.WikiLogger;\\npublic class AnsiQueryHandler implements QueryHandler {\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiQueryHandler.class.getName());\\n\\tprotected static final String SQL_PROPERTY_FILE_NAME = \\\"sql.ansi.properties\\\";\\n\\tprotected static String STATEMENT_CONNECTION_VALIDATION_QUERY = null;\\n\\tprotected static String STATEMENT_CREATE_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_CATEGORY_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_GROUP_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_GROUP_MEMBERS_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_GROUP_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_RECENT_CHANGE_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_ROLE_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT = null;\\n\\tprotected static String STATEMENT_CREATE_TOPIC_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_TOPIC_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_USERS_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_VIRTUAL_WIKI_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WATCHLIST_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_FILE_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_USER_TABLE = null;\\n\\tprotected static String STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX = null;\\n\\tprotected static String STATEMENT_DELETE_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_DELETE_GROUP_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_DELETE_RECENT_CHANGES = null;\\n\\tprotected static String STATEMENT_DELETE_RECENT_CHANGES_TOPIC = null;\\n\\tprotected static String STATEMENT_DELETE_TOPIC_CATEGORIES = null;\\n\\tprotected static String STATEMENT_DELETE_WATCHLIST_ENTRY = null;\\n\\tprotected static String STATEMENT_DROP_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_CATEGORY_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_GROUP_AUTHORITIES_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_GROUP_MEMBERS_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_GROUP_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_RECENT_CHANGE_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_ROLE_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT = null;\\n\\tprotected static String STATEMENT_DROP_TOPIC_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_TOPIC_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_USERS_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_VIRTUAL_WIKI_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WATCHLIST_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_FILE_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_FILE_VERSION_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_USER_TABLE = null;\\n\\tprotected static String STATEMENT_DROP_WIKI_USER_LOGIN_INDEX = null;\\n\\tprotected static String STATEMENT_INSERT_AUTHORITY = null;\\n\\tprotected static String STATEMENT_INSERT_CATEGORY = null;\\n\\tprotected static String STATEMENT_INSERT_GROUP = null;\\n\\tprotected static String STATEMENT_INSERT_GROUP_AUTHORITY = null;\\n\\tprotected static String STATEMENT_INSERT_GROUP_MEMBER = null;\\n\\tprotected static String STATEMENT_INSERT_RECENT_CHANGE = null;\\n\\tprotected static String STATEMENT_INSERT_RECENT_CHANGES = null;\\n\\tprotected static String STATEMENT_INSERT_ROLE = null;\\n\\tprotected static String STATEMENT_INSERT_TOPIC = null;\\n\\tprotected static String STATEMENT_INSERT_TOPIC_VERSION = null;\\n\\tprotected static String STATEMENT_INSERT_USER = null;\\n\\tprotected static String STATEMENT_INSERT_VIRTUAL_WIKI = null;\\n\\tprotected static String STATEMENT_INSERT_WATCHLIST_ENTRY = null;\\n\\tprotected static String STATEMENT_INSERT_WIKI_FILE = null;\\n\\tprotected static String STATEMENT_INSERT_WIKI_FILE_VERSION = null;\\n\\tprotected static String STATEMENT_INSERT_WIKI_USER = null;\\n\\tprotected static String STATEMENT_SELECT_AUTHORITIES_AUTHORITY = null;\\n\\tprotected static String STATEMENT_SELECT_AUTHORITIES_LOGIN = null;\\n\\tprotected static String STATEMENT_SELECT_AUTHORITIES_USER = null;\\n\\tprotected static String STATEMENT_SELECT_CATEGORIES = null;\\n\\tprotected static String STATEMENT_SELECT_CATEGORY_TOPICS = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_SELECT_GROUPS_AUTHORITIES = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_GROUP_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_RECENT_CHANGES = null;\\n\\tprotected static String STATEMENT_SELECT_RECENT_CHANGES_TOPIC = null;\\n\\tprotected static String STATEMENT_SELECT_ROLES = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_BY_TYPE = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_COUNT = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_LOWER = null;\\n\\tprotected static String STATEMENT_SELECT_TOPICS = null;\\n\\tprotected static String STATEMENT_SELECT_TOPICS_ADMIN = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_VERSION = null;\\n\\tprotected static String STATEMENT_SELECT_TOPIC_VERSION_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_USERS_AUTHENTICATION = null;\\n\\tprotected static String STATEMENT_SELECT_VIRTUAL_WIKIS = null;\\n\\tprotected static String STATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WATCHLIST = null;\\n\\tprotected static String STATEMENT_SELECT_WATCHLIST_CHANGES = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_COUNT = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_FILE_VERSIONS = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_COUNT = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_LOGIN = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USER_SEQUENCE = null;\\n\\tprotected static String STATEMENT_SELECT_WIKI_USERS = null;\\n\\tprotected static String STATEMENT_UPDATE_GROUP = null;\\n\\tprotected static String STATEMENT_UPDATE_ROLE = null;\\n\\tprotected static String STATEMENT_UPDATE_TOPIC = null;\\n\\tprotected static String STATEMENT_UPDATE_TOPIC_CURRENT_VERSION = null;\\n\\tprotected static String STATEMENT_UPDATE_TOPIC_CURRENT_VERSIONS = null;\\n\\tprotected static String STATEMENT_UPDATE_USER = null;\\n\\tprotected static String STATEMENT_UPDATE_VIRTUAL_WIKI = null;\\n\\tprotected static String STATEMENT_UPDATE_WIKI_FILE = null;\\n\\tprotected static String STATEMENT_UPDATE_WIKI_USER = null;\\n\\tprivate static Properties props = null;\\n\\tprotected AnsiQueryHandler() {\\n\\t\\tprops = Environment.loadProperties(SQL_PROPERTY_FILE_NAME);\\n\\t\\tthis.init(props);\\n\\t}\\n\\tpublic boolean authenticateUser(String username, String encryptedPassword, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_USERS_AUTHENTICATION);\\n\\t\\tstmt.setString(1, username);\\n\\t\\tstmt.setString(2, encryptedPassword);\\n\\t\\treturn (stmt.executeQuery(conn).size() != 0);\\n\\t}\\n\\tpublic String connectionValidationQuery() {\\n\\t\\treturn STATEMENT_CONNECTION_VALIDATION_QUERY;\\n\\t}\\n\\tpublic void createTables(Connection conn) throws SQLException {\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_VIRTUAL_WIKI_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_USERS_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_USER_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_TOPIC_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_TOPIC_VERSION_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_FILE_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_CATEGORY_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_GROUP_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_GROUP_MEMBERS_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_ROLE_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_AUTHORITIES_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_GROUP_AUTHORITIES_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_RECENT_CHANGE_TABLE, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_CREATE_WATCHLIST_TABLE, conn);\\n\\t}\\n\\tpublic void deleteGroupAuthorities(int groupId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_GROUP_AUTHORITIES);\\n\\t\\tstmt.setInt(1, groupId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteRecentChanges(int topicId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_RECENT_CHANGES_TOPIC);\\n\\t\\tstmt.setInt(1, topicId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteTopicCategories(int childTopicId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_TOPIC_CATEGORIES);\\n\\t\\tstmt.setInt(1, childTopicId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteUserAuthorities(String username, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_AUTHORITIES);\\n\\t\\tstmt.setString(1, username);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_DELETE_WATCHLIST_ENTRY);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topicName);\\n\\t\\tstmt.setInt(3, userId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void dropTables(Connection conn) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WATCHLIST_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_RECENT_CHANGE_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_GROUP_AUTHORITIES_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_AUTHORITIES_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_ROLE_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_GROUP_MEMBERS_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_GROUP_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_CATEGORY_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_FILE_VERSION_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_FILE_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_TOPIC_VERSION_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_TOPIC_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_USER_LOGIN_INDEX, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_WIKI_USER_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_USERS_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t\\ttry {\\n\\t\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DROP_VIRTUAL_WIKI_TABLE, conn);\\n\\t\\t} catch (SQLException e) { logger.severe(e.getMessage()); }\\n\\t}\\n\\tpublic String existenceValidationQuery() {\\n\\t\\treturn STATEMENT_SELECT_VIRTUAL_WIKIS;\\n\\t}\\n\\tpublic WikiResultSet getAllTopicNames(int virtualWikiId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPICS);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getAllWikiFileVersions(WikiFile wikiFile, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_FILE_VERSIONS);\\n\\t\\t\\t\\tstmt.setInt(1, wikiFile.getFileId());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getCategories(int virtualWikiId, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_CATEGORIES);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_RECENT_CHANGES);\\n\\t\\tstmt.setString(1, virtualWiki);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\t\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRecentChanges(int topicId, Pagination pagination, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_RECENT_CHANGES_TOPIC);\\n\\t\\tstmt.setInt(1, topicId);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\t\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapByLogin(String loginFragment) throws SQLException {\\n\\t\\tif (StringUtils.isBlank(loginFragment)) {\\n\\t\\t\\treturn new WikiResultSet();\\n\\t\\t}\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_AUTHORITIES_LOGIN);\\n\\t\\tloginFragment = '%' + loginFragment.toLowerCase() + '%';\\n\\t\\tstmt.setString(1, loginFragment);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapByRole(String authority) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_AUTHORITIES_AUTHORITY);\\n\\t\\tstmt.setString(1, authority);\\n\\t\\tstmt.setString(2, authority);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapGroup(String groupName) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_GROUP_AUTHORITIES);\\n\\t\\tstmt.setString(1, groupName);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoleMapGroups() throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_GROUPS_AUTHORITIES);\\n\\t}\\n\\tpublic WikiResultSet getRoleMapUser(String login) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_AUTHORITIES_USER);\\n\\t\\tstmt.setString(1, login);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getRoles() throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_ROLES);\\n\\t}\\n\\tpublic WikiResultSet getTopicsAdmin(int virtualWikiId, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPICS_ADMIN);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, pagination.getNumResults());\\n\\t\\tstmt.setInt(3, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = null;\\n\\t\\tif (Utilities.isIpAddress(userString)) {\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS);\\n\\t\\t} else {\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN);\\n\\t\\t}\\n\\t\\tstmt.setString(1, virtualWiki);\\n\\t\\tstmt.setString(2, userString);\\n\\t\\tstmt.setInt(3, pagination.getNumResults());\\n\\t\\tstmt.setInt(4, pagination.getOffset());\\n\\t\\t\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getVirtualWikis(Connection conn) throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_VIRTUAL_WIKIS, conn);\\n\\t}\\n\\tpublic WikiResultSet getWatchlist(int virtualWikiId, int userId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WATCHLIST);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, userId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet getWatchlist(int virtualWikiId, int userId, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WATCHLIST_CHANGES);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, userId);\\n\\t\\tstmt.setInt(3, pagination.getNumResults());\\n\\t\\tstmt.setInt(4, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tprotected void init(Properties props) {\\n\\t\\tSTATEMENT_CONNECTION_VALIDATION_QUERY    = props.getProperty(\\\"STATEMENT_CONNECTION_VALIDATION_QUERY\\\");\\n\\t\\tSTATEMENT_CREATE_GROUP_TABLE             = props.getProperty(\\\"STATEMENT_CREATE_GROUP_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_ROLE_TABLE              = props.getProperty(\\\"STATEMENT_CREATE_ROLE_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_VIRTUAL_WIKI_TABLE      = props.getProperty(\\\"STATEMENT_CREATE_VIRTUAL_WIKI_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_USER_TABLE         = props.getProperty(\\\"STATEMENT_CREATE_WIKI_USER_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_USER_LOGIN_INDEX   = props.getProperty(\\\"STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX\\\");\\n\\t\\tSTATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT = props.getProperty(\\\"STATEMENT_CREATE_TOPIC_CURRENT_VERSION_CONSTRAINT\\\");\\n\\t\\tSTATEMENT_CREATE_TOPIC_TABLE             = props.getProperty(\\\"STATEMENT_CREATE_TOPIC_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_TOPIC_VERSION_TABLE     = props.getProperty(\\\"STATEMENT_CREATE_TOPIC_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_USERS_TABLE             = props.getProperty(\\\"STATEMENT_CREATE_USERS_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_FILE_TABLE         = props.getProperty(\\\"STATEMENT_CREATE_WIKI_FILE_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WIKI_FILE_VERSION_TABLE = props.getProperty(\\\"STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_AUTHORITIES_TABLE       = props.getProperty(\\\"STATEMENT_CREATE_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_CATEGORY_TABLE          = props.getProperty(\\\"STATEMENT_CREATE_CATEGORY_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_GROUP_AUTHORITIES_TABLE = props.getProperty(\\\"STATEMENT_CREATE_GROUP_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_GROUP_MEMBERS_TABLE     = props.getProperty(\\\"STATEMENT_CREATE_GROUP_MEMBERS_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_RECENT_CHANGE_TABLE     = props.getProperty(\\\"STATEMENT_CREATE_RECENT_CHANGE_TABLE\\\");\\n\\t\\tSTATEMENT_CREATE_WATCHLIST_TABLE         = props.getProperty(\\\"STATEMENT_CREATE_WATCHLIST_TABLE\\\");\\n\\t\\tSTATEMENT_DELETE_AUTHORITIES             = props.getProperty(\\\"STATEMENT_DELETE_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_DELETE_GROUP_AUTHORITIES       = props.getProperty(\\\"STATEMENT_DELETE_GROUP_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_DELETE_RECENT_CHANGES          = props.getProperty(\\\"STATEMENT_DELETE_RECENT_CHANGES\\\");\\n\\t\\tSTATEMENT_DELETE_RECENT_CHANGES_TOPIC    = props.getProperty(\\\"STATEMENT_DELETE_RECENT_CHANGES_TOPIC\\\");\\n\\t\\tSTATEMENT_DELETE_TOPIC_CATEGORIES        = props.getProperty(\\\"STATEMENT_DELETE_TOPIC_CATEGORIES\\\");\\n\\t\\tSTATEMENT_DELETE_WATCHLIST_ENTRY         = props.getProperty(\\\"STATEMENT_DELETE_WATCHLIST_ENTRY\\\");\\n\\t\\tSTATEMENT_DROP_AUTHORITIES_TABLE         = props.getProperty(\\\"STATEMENT_DROP_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_CATEGORY_TABLE            = props.getProperty(\\\"STATEMENT_DROP_CATEGORY_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_GROUP_AUTHORITIES_TABLE   = props.getProperty(\\\"STATEMENT_DROP_GROUP_AUTHORITIES_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_GROUP_MEMBERS_TABLE       = props.getProperty(\\\"STATEMENT_DROP_GROUP_MEMBERS_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_GROUP_TABLE               = props.getProperty(\\\"STATEMENT_DROP_GROUP_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_RECENT_CHANGE_TABLE       = props.getProperty(\\\"STATEMENT_DROP_RECENT_CHANGE_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_ROLE_TABLE                = props.getProperty(\\\"STATEMENT_DROP_ROLE_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT = props.getProperty(\\\"STATEMENT_DROP_TOPIC_CURRENT_VERSION_CONSTRAINT\\\");\\n\\t\\tSTATEMENT_DROP_TOPIC_TABLE               = props.getProperty(\\\"STATEMENT_DROP_TOPIC_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_TOPIC_VERSION_TABLE       = props.getProperty(\\\"STATEMENT_DROP_TOPIC_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_USERS_TABLE               = props.getProperty(\\\"STATEMENT_DROP_USERS_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_VIRTUAL_WIKI_TABLE        = props.getProperty(\\\"STATEMENT_DROP_VIRTUAL_WIKI_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WATCHLIST_TABLE           = props.getProperty(\\\"STATEMENT_DROP_WATCHLIST_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_USER_LOGIN_INDEX     = props.getProperty(\\\"STATEMENT_DROP_WIKI_USER_LOGIN_INDEX\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_USER_TABLE           = props.getProperty(\\\"STATEMENT_DROP_WIKI_USER_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_FILE_TABLE           = props.getProperty(\\\"STATEMENT_DROP_WIKI_FILE_TABLE\\\");\\n\\t\\tSTATEMENT_DROP_WIKI_FILE_VERSION_TABLE   = props.getProperty(\\\"STATEMENT_DROP_WIKI_FILE_VERSION_TABLE\\\");\\n\\t\\tSTATEMENT_INSERT_AUTHORITY               = props.getProperty(\\\"STATEMENT_INSERT_AUTHORITY\\\");\\n\\t\\tSTATEMENT_INSERT_CATEGORY                = props.getProperty(\\\"STATEMENT_INSERT_CATEGORY\\\");\\n\\t\\tSTATEMENT_INSERT_GROUP                   = props.getProperty(\\\"STATEMENT_INSERT_GROUP\\\");\\n\\t\\tSTATEMENT_INSERT_GROUP_AUTHORITY         = props.getProperty(\\\"STATEMENT_INSERT_GROUP_AUTHORITY\\\");\\n\\t\\tSTATEMENT_INSERT_GROUP_MEMBER            = props.getProperty(\\\"STATEMENT_INSERT_GROUP_MEMBER\\\");\\n\\t\\tSTATEMENT_INSERT_RECENT_CHANGE           = props.getProperty(\\\"STATEMENT_INSERT_RECENT_CHANGE\\\");\\n\\t\\tSTATEMENT_INSERT_RECENT_CHANGES          = props.getProperty(\\\"STATEMENT_INSERT_RECENT_CHANGES\\\");\\n\\t\\tSTATEMENT_INSERT_ROLE                    = props.getProperty(\\\"STATEMENT_INSERT_ROLE\\\");\\n\\t\\tSTATEMENT_INSERT_TOPIC                   = props.getProperty(\\\"STATEMENT_INSERT_TOPIC\\\");\\n\\t\\tSTATEMENT_INSERT_TOPIC_VERSION           = props.getProperty(\\\"STATEMENT_INSERT_TOPIC_VERSION\\\");\\n\\t\\tSTATEMENT_INSERT_USER                    = props.getProperty(\\\"STATEMENT_INSERT_USER\\\");\\n\\t\\tSTATEMENT_INSERT_VIRTUAL_WIKI            = props.getProperty(\\\"STATEMENT_INSERT_VIRTUAL_WIKI\\\");\\n\\t\\tSTATEMENT_INSERT_WATCHLIST_ENTRY         = props.getProperty(\\\"STATEMENT_INSERT_WATCHLIST_ENTRY\\\");\\n\\t\\tSTATEMENT_INSERT_WIKI_FILE               = props.getProperty(\\\"STATEMENT_INSERT_WIKI_FILE\\\");\\n\\t\\tSTATEMENT_INSERT_WIKI_FILE_VERSION       = props.getProperty(\\\"STATEMENT_INSERT_WIKI_FILE_VERSION\\\");\\n\\t\\tSTATEMENT_INSERT_WIKI_USER               = props.getProperty(\\\"STATEMENT_INSERT_WIKI_USER\\\");\\n\\t\\tSTATEMENT_SELECT_AUTHORITIES_AUTHORITY   = props.getProperty(\\\"STATEMENT_SELECT_AUTHORITIES_AUTHORITY\\\");\\n\\t\\tSTATEMENT_SELECT_AUTHORITIES_LOGIN       = props.getProperty(\\\"STATEMENT_SELECT_AUTHORITIES_LOGIN\\\");\\n\\t\\tSTATEMENT_SELECT_AUTHORITIES_USER        = props.getProperty(\\\"STATEMENT_SELECT_AUTHORITIES_USER\\\");\\n\\t\\tSTATEMENT_SELECT_CATEGORIES              = props.getProperty(\\\"STATEMENT_SELECT_CATEGORIES\\\");\\n\\t\\tSTATEMENT_SELECT_CATEGORY_TOPICS         = props.getProperty(\\\"STATEMENT_SELECT_CATEGORY_TOPICS\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP                   = props.getProperty(\\\"STATEMENT_SELECT_GROUP\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP_AUTHORITIES       = props.getProperty(\\\"STATEMENT_SELECT_GROUP_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_SELECT_GROUPS_AUTHORITIES      = props.getProperty(\\\"STATEMENT_SELECT_GROUPS_AUTHORITIES\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE  = props.getProperty(\\\"STATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_GROUP_SEQUENCE          = props.getProperty(\\\"STATEMENT_SELECT_GROUP_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_RECENT_CHANGES          = props.getProperty(\\\"STATEMENT_SELECT_RECENT_CHANGES\\\");\\n\\t\\tSTATEMENT_SELECT_RECENT_CHANGES_TOPIC    = props.getProperty(\\\"STATEMENT_SELECT_RECENT_CHANGES_TOPIC\\\");\\n\\t\\tSTATEMENT_SELECT_ROLES                   = props.getProperty(\\\"STATEMENT_SELECT_ROLES\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_BY_TYPE           = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_BY_TYPE\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_COUNT             = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_COUNT\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC                   = props.getProperty(\\\"STATEMENT_SELECT_TOPIC\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_LOWER             = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_LOWER\\\");\\n\\t\\tSTATEMENT_SELECT_TOPICS                  = props.getProperty(\\\"STATEMENT_SELECT_TOPICS\\\");\\n\\t\\tSTATEMENT_SELECT_TOPICS_ADMIN            = props.getProperty(\\\"STATEMENT_SELECT_TOPICS_ADMIN\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_SEQUENCE          = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_VERSION           = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_VERSION\\\");\\n\\t\\tSTATEMENT_SELECT_TOPIC_VERSION_SEQUENCE  = props.getProperty(\\\"STATEMENT_SELECT_TOPIC_VERSION_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_USERS_AUTHENTICATION    = props.getProperty(\\\"STATEMENT_SELECT_USERS_AUTHENTICATION\\\");\\n\\t\\tSTATEMENT_SELECT_VIRTUAL_WIKIS           = props.getProperty(\\\"STATEMENT_SELECT_VIRTUAL_WIKIS\\\");\\n\\t\\tSTATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE   = props.getProperty(\\\"STATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WATCHLIST               = props.getProperty(\\\"STATEMENT_SELECT_WATCHLIST\\\");\\n\\t\\tSTATEMENT_SELECT_WATCHLIST_CHANGES       = props.getProperty(\\\"STATEMENT_SELECT_WATCHLIST_CHANGES\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE               = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_COUNT         = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_COUNT\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_SEQUENCE      = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_FILE_VERSIONS      = props.getProperty(\\\"STATEMENT_SELECT_WIKI_FILE_VERSIONS\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER               = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_COUNT         = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_COUNT\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_LOGIN         = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_LOGIN\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USER_SEQUENCE      = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USER_SEQUENCE\\\");\\n\\t\\tSTATEMENT_SELECT_WIKI_USERS              = props.getProperty(\\\"STATEMENT_SELECT_WIKI_USERS\\\");\\n\\t\\tSTATEMENT_UPDATE_GROUP                   = props.getProperty(\\\"STATEMENT_UPDATE_GROUP\\\");\\n\\t\\tSTATEMENT_UPDATE_ROLE                    = props.getProperty(\\\"STATEMENT_UPDATE_ROLE\\\");\\n\\t\\tSTATEMENT_UPDATE_TOPIC                   = props.getProperty(\\\"STATEMENT_UPDATE_TOPIC\\\");\\n\\t\\tSTATEMENT_UPDATE_TOPIC_CURRENT_VERSION   = props.getProperty(\\\"STATEMENT_UPDATE_TOPIC_CURRENT_VERSION\\\");\\n\\t\\tSTATEMENT_UPDATE_TOPIC_CURRENT_VERSIONS  = props.getProperty(\\\"STATEMENT_UPDATE_TOPIC_CURRENT_VERSIONS\\\");\\n\\t\\tSTATEMENT_UPDATE_USER                    = props.getProperty(\\\"STATEMENT_UPDATE_USER\\\");\\n\\t\\tSTATEMENT_UPDATE_VIRTUAL_WIKI            = props.getProperty(\\\"STATEMENT_UPDATE_VIRTUAL_WIKI\\\");\\n\\t\\tSTATEMENT_UPDATE_WIKI_FILE               = props.getProperty(\\\"STATEMENT_UPDATE_WIKI_FILE\\\");\\n\\t\\tSTATEMENT_UPDATE_WIKI_USER               = props.getProperty(\\\"STATEMENT_UPDATE_WIKI_USER\\\");\\n\\t}\\n\\tpublic void insertCategory(Category category, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\t\\t\\tWikiResultSet rs = this.lookupTopic(virtualWikiId, category.getChildTopicName(), false, conn);\\n\\t\\tint topicId = -1;\\n\\t\\twhile (rs.next()) {\\n\\t\\t\\tif (rs.getTimestamp(\\\"delete_date\\\") == null) {\\n\\t\\t\\t\\ttopicId = rs.getInt(AnsiDataHandler.DATA_TOPIC_ID);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (topicId == -1) {\\n\\t\\t\\tthrow new SQLException(\\\"Unable to find child topic \\\" + category.getChildTopicName() + \\\" for category \\\" + category.getName());\\n\\t\\t}\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_CATEGORY);\\n\\t\\tstmt.setInt(1, rs.getInt(AnsiDataHandler.DATA_TOPIC_ID));\\n\\t\\tstmt.setString(2, category.getName());\\n\\t\\tstmt.setString(3, category.getSortKey());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertGroupAuthority(int groupId, String authority, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_GROUP_AUTHORITY);\\n\\t\\tstmt.setInt(1, groupId);\\n\\t\\tstmt.setString(2, authority);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertGroupMember(int groupMemberId, String username, int groupId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_GROUP_MEMBER);\\n\\t\\tstmt.setInt(1, groupMemberId);\\n\\t\\tstmt.setString(2, username);\\n\\t\\tstmt.setInt(3, groupId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertRecentChange(RecentChange change, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_RECENT_CHANGE);\\n\\t\\tstmt.setInt(1, change.getTopicVersionId());\\n\\t\\tif (change.getPreviousTopicVersionId() == null) {\\n\\t\\t\\tstmt.setNull(2, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(2, change.getPreviousTopicVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setInt(3, change.getTopicId());\\n\\t\\tstmt.setString(4, change.getTopicName());\\n\\t\\tstmt.setTimestamp(5, change.getEditDate());\\n\\t\\tstmt.setString(6, change.getEditComment());\\n\\t\\tif (change.getAuthorId() == null) {\\n\\t\\t\\tstmt.setNull(7, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(7, change.getAuthorId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setString(8, change.getAuthorName());\\n\\t\\tstmt.setInt(9, change.getEditType());\\n\\t\\tstmt.setInt(10, virtualWikiId);\\n\\t\\tstmt.setString(11, change.getVirtualWiki());\\n\\t\\tstmt.setInt(12, change.getCharactersChanged());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertRole(Role role, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_ROLE);\\n\\t\\tstmt.setString(1, role.getAuthority());\\n\\t\\tstmt.setString(2, role.getDescription());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertTopic(Topic topic, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_TOPIC);\\n\\t\\tstmt.setInt(1, topic.getTopicId());\\n\\t\\tstmt.setInt(2, virtualWikiId);\\n\\t\\tstmt.setString(3, topic.getName());\\n\\t\\tstmt.setInt(4, topic.getTopicType());\\n\\t\\tstmt.setInt(5, (topic.getReadOnly() ? 1 : 0));\\n\\t\\tif (topic.getCurrentVersionId() == null) {\\n\\t\\t\\tstmt.setNull(6, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(6, topic.getCurrentVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setTimestamp(7, topic.getDeleteDate());\\n\\t\\tstmt.setInt(8, (topic.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setString(9, topic.getRedirectTo());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertTopicVersion(TopicVersion topicVersion, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_TOPIC_VERSION);\\n\\t\\tstmt.setInt(1, topicVersion.getTopicVersionId());\\n\\t\\tstmt.setInt(2, topicVersion.getTopicId());\\n\\t\\tstmt.setString(3, topicVersion.getEditComment());\\n\\t\\tstmt.setString(4, topicVersion.getVersionContent());\\n\\t\\tif (topicVersion.getAuthorId() == null) {\\n\\t\\t\\tstmt.setNull(5, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(5, topicVersion.getAuthorId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setInt(6, topicVersion.getEditType());\\n\\t\\tstmt.setString(7, topicVersion.getAuthorIpAddress());\\n\\t\\tstmt.setTimestamp(8, topicVersion.getEditDate());\\n\\t\\tif (topicVersion.getPreviousTopicVersionId() == null) {\\n\\t\\t\\tstmt.setNull(9, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(9, topicVersion.getPreviousTopicVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setInt(10, topicVersion.getCharactersChanged());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t\\tstmt = new WikiPreparedStatement(STATEMENT_UPDATE_TOPIC_CURRENT_VERSION);\\n\\t\\tstmt.setInt(1, topicVersion.getTopicId());\\n\\t\\tstmt.setInt(2, topicVersion.getTopicId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertUserDetails(WikiUserDetails userDetails, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_USER);\\n\\t\\tstmt.setString(1, userDetails.getUsername());\\n\\t\\tstmt.setString(2, userDetails.getPassword());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertUserAuthority(String username, String authority, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_AUTHORITY);\\n\\t\\tstmt.setString(1, username);\\n\\t\\tstmt.setString(2, authority);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_VIRTUAL_WIKI);\\n\\t\\tstmt.setInt(1, virtualWiki.getVirtualWikiId());\\n\\t\\tstmt.setString(2, virtualWiki.getName());\\n\\t\\tstmt.setString(3, virtualWiki.getDefaultTopicName());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WATCHLIST_ENTRY);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topicName);\\n\\t\\tstmt.setInt(3, userId);\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiFile(WikiFile wikiFile, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WIKI_FILE);\\n\\t\\tstmt.setInt(1, wikiFile.getFileId());\\n\\t\\tstmt.setInt(2, virtualWikiId);\\n\\t\\tstmt.setString(3, wikiFile.getFileName());\\n\\t\\tstmt.setString(4, wikiFile.getUrl());\\n\\t\\tstmt.setString(5, wikiFile.getMimeType());\\n\\t\\tstmt.setInt(6, wikiFile.getTopicId());\\n\\t\\tstmt.setTimestamp(7, wikiFile.getDeleteDate());\\n\\t\\tstmt.setInt(8, (wikiFile.getReadOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(9, (wikiFile.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(10, wikiFile.getFileSize());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WIKI_FILE_VERSION);\\n\\t\\tstmt.setInt(1, wikiFileVersion.getFileVersionId());\\n\\t\\tstmt.setInt(2, wikiFileVersion.getFileId());\\n\\t\\tstmt.setString(3, wikiFileVersion.getUploadComment());\\n\\t\\tstmt.setString(4, wikiFileVersion.getUrl());\\n\\t\\tif (wikiFileVersion.getAuthorId() == null) {\\n\\t\\t\\tstmt.setNull(5, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(5, wikiFileVersion.getAuthorId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setString(6, wikiFileVersion.getAuthorIpAddress());\\n\\t\\tstmt.setTimestamp(7, wikiFileVersion.getUploadDate());\\n\\t\\tstmt.setString(8, wikiFileVersion.getMimeType());\\n\\t\\tstmt.setInt(9, wikiFileVersion.getFileSize());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiGroup(WikiGroup group, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_GROUP);\\n\\t\\tstmt.setInt(1, group.getGroupId());\\n\\t\\tstmt.setString(2, group.getName());\\n\\t\\tstmt.setString(3, group.getDescription());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void insertWikiUser(WikiUser user, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_INSERT_WIKI_USER);\\n\\t\\tstmt.setInt(1, user.getUserId());\\n\\t\\tstmt.setString(2, user.getUsername());\\n\\t\\tstmt.setString(3, user.getDisplayName());\\n\\t\\tstmt.setTimestamp(4, user.getCreateDate());\\n\\t\\tstmt.setTimestamp(5, user.getLastLoginDate());\\n\\t\\tstmt.setString(6, user.getCreateIpAddress());\\n\\t\\tstmt.setString(7, user.getLastLoginIpAddress());\\n\\t\\tstmt.setString(8, user.getDefaultLocale());\\n\\t\\tstmt.setString(9, user.getEmail());\\n\\t\\tstmt.setString(10, user.getEditor());\\n\\t\\tstmt.setString(11, user.getSignature());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupCategoryTopics(int virtualWikiId, String categoryName) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_CATEGORY_TOPICS);\\n\\t\\t\\t\\tcategoryName = categoryName.toLowerCase();\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, categoryName);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupTopic(int virtualWikiId, String topicName, boolean caseSensitive, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = null;\\n\\t\\tif (caseSensitive) {\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC);\\n\\t\\t} else {\\n\\t\\t\\ttopicName = topicName.toLowerCase();\\n\\t\\t\\tstmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_LOWER);\\n\\t\\t}\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topicName);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupTopicByType(int virtualWikiId, int topicType, Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_BY_TYPE);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, topicType);\\n\\t\\tstmt.setInt(3, pagination.getNumResults());\\n\\t\\tstmt.setInt(4, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupTopicCount(int virtualWikiId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_COUNT);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupTopicVersion(int topicVersionId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_TOPIC_VERSION);\\n\\t\\tstmt.setInt(1, topicVersionId);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiFile(int virtualWikiId, int topicId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_FILE);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setInt(2, topicId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiFileCount(int virtualWikiId) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_FILE_COUNT);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiGroup(String groupName) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_GROUP);\\n\\t\\tstmt.setString(1, groupName);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUser(int userId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER);\\n\\t\\tstmt.setInt(1, userId);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUser(String username, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_LOGIN);\\n\\t\\tstmt.setString(1, username);\\n\\t\\treturn stmt.executeQuery(conn);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUserCount() throws SQLException {\\n\\t\\treturn DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_USER_COUNT);\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUserEncryptedPassword(String username) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USER_DETAILS_PASSWORD);\\n\\t\\tstmt.setString(1, username);\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic WikiResultSet lookupWikiUsers(Pagination pagination) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_SELECT_WIKI_USERS);\\n\\t\\tstmt.setInt(1, pagination.getNumResults());\\n\\t\\tstmt.setInt(2, pagination.getOffset());\\n\\t\\treturn stmt.executeQuery();\\n\\t}\\n\\tpublic int nextGroupMemberId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_GROUP_MEMBERS_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextTopicId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_TOPIC_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(AnsiDataHandler.DATA_TOPIC_ID);\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextTopicVersionId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_TOPIC_VERSION_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"topic_version_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextVirtualWikiId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_VIRTUAL_WIKI_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"virtual_wiki_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiFileId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_FILE_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"file_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiFileVersionId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_FILE_VERSION_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(\\\"file_version_id\\\");\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiGroupId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_GROUP_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(AnsiDataHandler.DATA_GROUP_ID);\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic int nextWikiUserId(Connection conn) throws SQLException {\\n\\t\\tWikiResultSet rs = DatabaseConnection.executeQuery(STATEMENT_SELECT_WIKI_USER_SEQUENCE, conn);\\n\\t\\tint nextId = 0;\\n\\t\\tif (rs.size() > 0) {\\n\\t\\t\\tnextId = rs.getInt(AnsiDataHandler.DATA_WIKI_USER_ID);\\n\\t\\t}\\n\\t\\t\\t\\treturn nextId + 1;\\n\\t}\\n\\tpublic void reloadRecentChanges(Connection conn) throws SQLException {\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_DELETE_RECENT_CHANGES, conn);\\n\\t\\tDatabaseConnection.executeUpdate(STATEMENT_INSERT_RECENT_CHANGES, conn);\\n\\t}\\n\\tpublic void updateRole(Role role, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_ROLE);\\n\\t\\tstmt.setString(1, role.getDescription());\\n\\t\\tstmt.setString(2, role.getAuthority());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateTopic(Topic topic, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_TOPIC);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, topic.getName());\\n\\t\\tstmt.setInt(3, topic.getTopicType());\\n\\t\\tstmt.setInt(4, (topic.getReadOnly() ? 1 : 0));\\n\\t\\tif (topic.getCurrentVersionId() == null) {\\n\\t\\t\\tstmt.setNull(5, Types.INTEGER);\\n\\t\\t} else {\\n\\t\\t\\tstmt.setInt(5, topic.getCurrentVersionId().intValue());\\n\\t\\t}\\n\\t\\tstmt.setTimestamp(6, topic.getDeleteDate());\\n\\t\\tstmt.setInt(7, (topic.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setString(8, topic.getRedirectTo());\\n\\t\\tstmt.setInt(9, topic.getTopicId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_USER);\\n\\t\\tstmt.setString(1, userDetails.getPassword());\\n\\t\\tstmt.setInt(2, 1);\\n\\t\\tstmt.setString(3, userDetails.getUsername());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_VIRTUAL_WIKI);\\n\\t\\tstmt.setString(1, virtualWiki.getDefaultTopicName());\\n\\t\\tstmt.setInt(2, virtualWiki.getVirtualWikiId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateWikiFile(WikiFile wikiFile, int virtualWikiId, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_WIKI_FILE);\\n\\t\\tstmt.setInt(1, virtualWikiId);\\n\\t\\tstmt.setString(2, wikiFile.getFileName());\\n\\t\\tstmt.setString(3, wikiFile.getUrl());\\n\\t\\tstmt.setString(4, wikiFile.getMimeType());\\n\\t\\tstmt.setInt(5, wikiFile.getTopicId());\\n\\t\\tstmt.setTimestamp(6, wikiFile.getDeleteDate());\\n\\t\\tstmt.setInt(7, (wikiFile.getReadOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(8, (wikiFile.getAdminOnly() ? 1 : 0));\\n\\t\\tstmt.setInt(9, wikiFile.getFileSize());\\n\\t\\tstmt.setInt(10, wikiFile.getFileId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateWikiGroup(WikiGroup group, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_GROUP);\\n\\t\\tstmt.setString(1, group.getName());\\n\\t\\tstmt.setString(2, group.getDescription());\\n\\t\\tstmt.setInt(3, group.getGroupId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n\\tpublic void updateWikiUser(WikiUser user, Connection conn) throws SQLException {\\n\\t\\tWikiPreparedStatement stmt = new WikiPreparedStatement(STATEMENT_UPDATE_WIKI_USER);\\n\\t\\tstmt.setString(1, user.getUsername());\\n\\t\\tstmt.setString(2, user.getDisplayName());\\n\\t\\tstmt.setTimestamp(3, user.getLastLoginDate());\\n\\t\\tstmt.setString(4, user.getLastLoginIpAddress());\\n\\t\\tstmt.setString(5, user.getDefaultLocale());\\n\\t\\tstmt.setString(6, user.getEmail());\\n\\t\\tstmt.setString(7, user.getEditor());\\n\\t\\tstmt.setString(8, user.getSignature());\\n\\t\\tstmt.setInt(9, user.getUserId());\\n\\t\\tstmt.executeUpdate(conn);\\n\\t}\\n}\""
            },
            "m15": {
                "content": "The source code analysis of `AnsiDataHandler.java` and `AnsiQueryHandler.java` reveals the following key insights:\n\n### 1. **Tight Conceptual Coupling**\n- Despite no direct structural coupling (method calls, inheritance, etc.), these two classes are tightly **conceptually coupled** with a semantic similarity score of **0.8726**.\n- This is evident from their shared responsibilities in handling database operations related to topics, users, permissions, and versioning.\n\n### 2. **Design Pattern: Data Access Layer**\n- `AnsiDataHandler` implements business logic for data manipulation and uses an instance of `AnsiQueryHandler` as a data access delegate:\n  ```java\n  private final QueryHandler queryHandler = new AnsiQueryHandler();\n  ```\n- `AnsiQueryHandler` handles **SQL execution**, including queries and updates, while `AnsiDataHandler` manages **transaction control**, object mapping, caching, and higher-level logic.\n\n### 3. **Shared Responsibilities**\n- Both files interact heavily with similar domain objects:\n  - `Topic`, `WikiUser`, `VirtualWiki`, `Category`, `RecentChange`, `WikiFile`, etc.\n- They also work with similar services like `WikiCache`, `DatabaseConnection`, and `Pagination`.\n\n### 4. **Co-Change Justification**\n- The high co-change frequency (`AnsiQueryHandler` appears 14 times with `AnsiDataHandler`) is justified by this tight integration.\n- Changes in SQL structure, schema, or transaction logic in one file often require adjustments in the other.\n\n---\n\n### \u2705 Conclusion: Synchronization Required\n\nBased on:\n- High **co-change support (14)** and confidence (0.4375),\n- Strong **conceptual coupling (0.8726)**,\n- Shared **domain models** and **functional roles**,\n\n**`AnsiQueryHandler.java` should be synchronized whenever `AnsiDataHandler.java` changes.**\n\nThis ensures consistency between the business logic layer (`AnsiDataHandler`) and the SQL/data layer (`AnsiQueryHandler`), especially during schema changes, transaction modifications, or query restructuring.\n\nWould you like me to continue analyzing any additional entities?",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m16": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m17": {
                "content": "Title: Diagnosis of starting entity `AnsiDataHandler.java`\n\nChange set: [AnsiQueryHandler, QueryHandler, WikiBase, WikiCache, DatabaseConnection, DataHandler, UpgradeServlet, DB2DataHandler, MSSqlDataHandler, HSqlDataHandler, DB2400DataHandler, MySqlDataHandler, OracleDataHandler, PostgresDataHandler, WikiDatabase, Environment, Utilities, WikiUser, Topic, WikiUtil, ParserUtil, LinkUtil, RecentChange, Category, WikiFile, TopicVersion, VirtualWiki, JAMWikiAuthenticationConfiguration, WikiMessage, WikiLogger, Pagination, NamespaceHandler, WikiGroup, RoleMap, Role, WikiException, WikiFileVersion, WikiPreparedStatement, ServletUtil, WikiUserDetails, DatabaseUpgrades, DatabaseUserHandler]\n\nDetails:\n1. **AnsiQueryHandler**: Tightly coupled as the default query handler used by AnsiDataHandler for SQL execution; co-change support 14.\n2. **QueryHandler**: Interface implemented by AnsiQueryHandler; any API change affects AnsiDataHandler.\n3. **WikiBase**: Used for special pages and search engine integration; frequently interacts with data layer.\n4. **WikiCache**: Heavy cache operations are performed by AnsiDataHandler; changes in caching logic impact both.\n5. **DatabaseConnection**: Manages transactions and connections; shared usage is critical.\n6. **DataHandler**: Base interface for all data handlers; structural changes here affect all subclasses.\n7. **UpgradeServlet**: Handles database upgrades; historically changed together during schema updates.\n8. **DB2DataHandler**: Similar ANSI-compliant SQL structure; shares base logic with AnsiDataHandler.\n9. **MSSqlDataHandler**: Similar to Ansi but with dialect-specific variations; likely to be impacted by similar changes.\n10. **HSqlDataHandler**: Often used for testing; mirrors ANSI behavior closely.\n11. **DB2400DataHandler**: Another ANSI-based handler that may share logic or evolve in sync.\n12. **MySqlDataHandler**: May diverge slightly but often aligned on core concepts and interfaces.\n13. **OracleDataHandler**: Large enterprise use case; aligns structurally with Ansi for complex queries.\n14. **PostgresDataHandler**: High similarity in handling advanced SQL constructs.\n15. **WikiDatabase**: Contains static methods related to database setup; used by both classes.\n16. **Environment**: Loads SQL properties and configuration; tightly linked to AnsiQueryHandler.\n17. **Utilities**: General utility functions used across database handlers.\n18. **WikiUser**: Heavily involved in user management and authentication logic.\n19. **Topic**: Core model entity; manipulated heavily by both classes.\n20. **WikiUtil**: Utility methods for validation and parsing topic names.\n21. **ParserUtil**: Used for parsing content; relies on transactional state and data access.\n22. **LinkUtil**: Link processing that involves topic resolution and lookup.\n23. **RecentChange**: Entity managed by both classes for history tracking.\n24. **Category**: Manipulated via data layer and subject to schema or query changes.\n25. **WikiFile**: File management logic is parallel to topic handling.\n26. **TopicVersion**: Versioning system affected by transaction control and SQL logic.\n27. **VirtualWiki**: Multi-wiki support integrated deeply into both layers.\n28. **JAMWikiAuthenticationConfiguration**: Security-related settings that influence data access.\n29. **WikiMessage**: Error messages and feedback tied to data operations.\n30. **WikiLogger**: Logging infrastructure used consistently across modules.\n31. **Pagination**: Shared across query execution and result retrieval.\n32. **NamespaceHandler**: Influences how topics are parsed and stored.\n33. **WikiGroup**: Group/user/authority model shared between security and data layers.\n34. **RoleMap**: Security mapping handled similarly to user/topic relationships.\n35. **Role**: Authorization model that evolves alongside data access patterns.\n36. **WikiException**: Exception hierarchy used consistently across both files.\n37. **WikiFileVersion**: Similar versioning pattern as TopicVersion.\n38. **WikiPreparedStatement**: Custom prepared statement class used directly.\n39. **ServletUtil**: Utility functions used across servlets that modify data.\n40. **WikiUserDetails**: Security details mapped to user tables.\n\nThese entities were selected based on:\n- Co-change relationship results (support >= 2),\n- Conceptual coupling analysis (high semantic similarity),\n- Call graph and import statements from source code,\n- Structural and functional dependencies revealed through method calls and object interaction.\n\nAll these files should be reviewed synchronously when modifying `AnsiDataHandler.java` to ensure consistency, maintainability, and correctness.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}