{
    "time": 1749453558.3448489,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `jEdit`, a well-known Java open source project. The starting entity you need to deal with is jEdit.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_99090cf6f0124ec7af9686",
                    "function": {
                        "arguments": "{\"entity\": \"jEdit.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"Entry\", \"16\", \"0.053156146179401995\"], [\"BufferHistory\", \"15\", \"0.04983388704318937\"], [\"EditPane\", \"29\", \"0.09634551495016612\"], [\"RecentHandler\", \"5\", \"0.016611295681063124\"], [\"Buffer\", \"59\", \"0.19601328903654486\"], [\"SearchAndReplace\", \"19\", \"0.06312292358803986\"], [\"View\", \"47\", \"0.15614617940199335\"], [\"EditServer\", \"20\", \"0.0664451827242525\"], [\"WindowHandler\", \"5\", \"0.016611295681063124\"], [\"ActionHandler\", \"48\", \"0.15946843853820597\"], [\"GeneralOptionPane\", \"11\", \"0.036544850498338874\"], [\"JEditActionContext\", \"2\", \"0.006644518272425249\"], [\"ShortcutsOptionPane\", \"7\", \"0.023255813953488372\"], [\"ToolBarEditDialog\", \"9\", \"0.029900332225913623\"], [\"ActionContext\", \"5\", \"0.016611295681063124\"], [\"JEditVisitorAdapter\", \"1\", \"0.0033222591362126247\"], [\"JEditVisitor\", \"1\", \"0.0033222591362126247\"], [\"CompleteWord\", \"17\", \"0.05647840531561462\"], [\"SaveCaretInfoVisitor\", \"1\", \"0.0033222591362126247\"], [\"SetCursorVisitor\", \"1\", \"0.0033222591362126247\"], [\"GUIUtilities\", \"54\", \"0.17940199335548174\"], [\"RolloverButton\", \"3\", \"0.009966777408637873\"], [\"HyperSearchResults\", \"17\", \"0.05647840531561462\"], [\"ExpansionToggleBorder\", \"2\", \"0.006644518272425249\"], [\"PanelWindowContainer\", \"20\", \"0.0664451827242525\"], [\"AbbrevsOptionPane\", \"8\", \"0.026578073089700997\"], [\"FloatingWindowContainer\", \"13\", \"0.04318936877076412\"], [\"ToolBarOptionPane\", \"2\", \"0.006644518272425249\"], [\"PluginsMenuButton\", \"7\", \"0.023255813953488372\"], [\"CommandsMenuButton\", \"2\", \"0.006644518272425249\"], [\"FavoritesMenuButton\", \"4\", \"0.013289036544850499\"], [\"HistoryButton\", \"1\", \"0.0033222591362126247\"], [\"SaveButton\", \"1\", \"0.0033222591362126247\"], [\"ChoosePluginSet\", \"1\", \"0.0033222591362126247\"], [\"RestoreButton\", \"1\", \"0.0033222591362126247\"], [\"ClearPluginSet\", \"1\", \"0.0033222591362126247\"], [\"MouseOverHandler\", \"1\", \"0.0033222591362126247\"], [\"AppearanceOptionPane\", \"15\", \"0.04983388704318937\"], [\"IconTheme\", \"1\", \"0.0033222591362126247\"], [\"Debug\", \"7\", \"0.023255813953488372\"], [\"GrabKeyDialog\", \"5\", \"0.016611295681063124\"], [\"InputHandler\", \"6\", \"0.019933554817275746\"], [\"KeyEventWorkaround\", \"10\", \"0.03322259136212625\"], [\"TextAreaInputHandler\", \"1\", \"0.0033222591362126247\"], [\"KeyEventTranslator\", \"8\", \"0.026578073089700997\"], [\"MyFocusManager\", \"10\", \"0.03322259136212625\"], [\"InputPane\", \"7\", \"0.023255813953488372\"], [\"BufferSet\", \"1\", \"0.0033222591362126247\"], [\"BufferSetListener\", \"1\", \"0.0033222591362126247\"], [\"BufferSetManager\", \"4\", \"0.013289036544850499\"], [\"BufferSwitcher\", \"3\", \"0.009966777408637873\"], [\"BufferSetAdapter\", \"1\", \"0.0033222591362126247\"], [\"ViewOptionPane\", \"4\", \"0.013289036544850499\"], [\"DockableWindowContainer\", \"5\", \"0.016611295681063124\"], [\"DockableWindowManager\", \"51\", \"0.16943521594684385\"], [\"DockableWindowManagerImpl\", \"1\", \"0.0033222591362126247\"], [\"DockingArea\", \"1\", \"0.0033222591362126247\"], [\"DockingLayout\", \"2\", \"0.006644518272425249\"], [\"DockableLayout\", \"8\", \"0.026578073089700997\"], [\"DockBorder\", \"1\", \"0.0033222591362126247\"], [\"ButtonLayout\", \"4\", \"0.013289036544850499\"], [\"ViewConfig\", \"5\", \"0.016611295681063124\"], [\"DockablePanel\", \"3\", \"0.009966777408637873\"], [\"PerspectiveHandler\", \"6\", \"0.019933554817275746\"], [\"DockableWindowFactory\", \"5\", \"0.016611295681063124\"], [\"DockingLayoutManager\", \"2\", \"0.006644518272425249\"], [\"DockingLayoutSetter\", \"1\", \"0.0033222591362126247\"], [\"PerspectiveManager\", \"14\", \"0.046511627906976744\"], [\"SettingsXML\", \"1\", \"0.0033222591362126247\"], [\"DockingOptionPane\", \"2\", \"0.006644518272425249\"], [\"DockableWindowManagerProvider\", \"1\", \"0.0033222591362126247\"], [\"IDockingFrameworkProvider\", \"1\", \"0.0033222591362126247\"], [\"DockableWindowConfig\", \"1\", \"0.0033222591362126247\"], [\"LoadPerspectiveAction\", \"1\", \"0.0033222591362126247\"], [\"CloseDialog\", \"3\", \"0.009966777408637873\"], [\"SaveBackupOptionPane\", \"3\", \"0.009966777408637873\"], [\"Macros\", \"19\", \"0.06312292358803986\"], [\"DraggedURLLoader\", \"1\", \"0.0033222591362126247\"], [\"StringCompare\", \"2\", \"0.006644518272425249\"], [\"VFS\", \"17\", \"0.05647840531561462\"], [\"PluginTableModel\", \"24\", \"0.07973421926910298\"], [\"TableModelHandler\", \"3\", \"0.009966777408637873\"], [\"BufferOptionPane\", \"1\", \"0.0033222591362126247\"], [\"StyleTableModel\", \"6\", \"0.019933554817275746\"], [\"EditingOptionPane\", \"13\", \"0.04318936877076412\"], [\"EncodingsOptionPane\", \"1\", \"0.0033222591362126247\"], [\"ServiceFoldHandlerProvider\", \"1\", \"0.0033222591362126247\"], [\"RemoveButton\", \"7\", \"0.023255813953488372\"], [\"DirectoryProvider\", \"5\", \"0.016611295681063124\"], [\"SendVFSUpdatesSafely\", \"1\", \"0.0033222591362126247\"], [\"Mode\", \"7\", \"0.023255813953488372\"], [\"JEditTextArea\", \"74\", \"0.24584717607973422\"], [\"ParserRuleSet\", \"6\", \"0.019933554817275746\"], [\"VFSBrowser\", \"36\", \"0.11960132890365449\"], [\"HyperSearchResult\", \"7\", \"0.023255813953488372\"], [\"XModeHandler\", \"6\", \"0.019933554817275746\"], [\"DefaultInputHandler\", \"13\", \"0.04318936877076412\"], [\"PastePrevious\", \"3\", \"0.009966777408637873\"], [\"TokenMarker\", \"15\", \"0.04983388704318937\"], [\"JARClassLoader\", \"23\", \"0.07641196013289037\"], [\"PosBottomHalf\", \"4\", \"0.013289036544850499\"], [\"HyperSearchRequest\", \"11\", \"0.036544850498338874\"], [\"TextUtilities\", \"14\", \"0.046511627906976744\"], [\"Token\", \"1\", \"0.0033222591362126247\"], [\"OffsetManager\", \"17\", \"0.05647840531561462\"], [\"ModeOptionPane\", \"4\", \"0.013289036544850499\"], [\"TokenList\", \"1\", \"0.0033222591362126247\"], [\"CurrentDirectoryMenu\", \"2\", \"0.006644518272425249\"], [\"RecentDirectoriesMenu\", \"3\", \"0.009966777408637873\"], [\"ErrorEntry\", \"3\", \"0.009966777408637873\"], [\"MiscUtilities\", \"57\", \"0.1893687707641196\"], [\"OptionsDialog\", \"14\", \"0.046511627906976744\"], [\"FirewallOptionPane\", \"4\", \"0.013289036544850499\"], [\"Dependency\", \"9\", \"0.029900332225913623\"], [\"FirewallAuthenticator\", \"2\", \"0.006644518272425249\"], [\"OverviewOptionPane\", \"6\", \"0.019933554817275746\"], [\"BrowserJTree\", \"8\", \"0.026578073089700997\"], [\"HistoryTextField\", \"4\", \"0.013289036544850499\"], [\"BrowserView\", \"15\", \"0.04983388704318937\"], [\"PluginManagerProgress\", \"12\", \"0.03986710963455149\"], [\"MouseHandler\", \"45\", \"0.14950166112956811\"], [\"OperatingSystem\", \"12\", \"0.03986710963455149\"], [\"VFSManager\", \"3\", \"0.009966777408637873\"], [\"TextAreaPainter\", \"29\", \"0.09634551495016612\"], [\"BufferChangeHandler\", \"23\", \"0.07641196013289037\"], [\"FileVFS\", \"22\", \"0.07308970099667775\"], [\"StatusBar\", \"20\", \"0.0664451827242525\"], [\"SettingsReloader\", \"4\", \"0.013289036544850499\"], [\"LineInfo\", \"4\", \"0.013289036544850499\"], [\"ChunkCache\", \"18\", \"0.059800664451827246\"], [\"KeyHandler\", \"17\", \"0.05647840531561462\"], [\"EnhancedCheckBoxMenuItem\", \"7\", \"0.023255813953488372\"], [\"MarkersMenuItem\", \"2\", \"0.006644518272425249\"], [\"EnhancedMenuItem\", \"9\", \"0.029900332225913623\"], [\"BufferIORequest\", \"28\", \"0.09302325581395349\"], [\"InstallPluginsDialog\", \"14\", \"0.046511627906976744\"], [\"FileCellRenderer\", \"7\", \"0.023255813953488372\"], [\"PaneNameRenderer\", \"2\", \"0.006644518272425249\"], [\"FocusHandler\", \"2\", \"0.006644518272425249\"], [\"FoldVisibilityManager\", \"9\", \"0.029900332225913623\"], [\"Abbrevs\", \"10\", \"0.03322259136212625\"], [\"FavoritesVFS\", \"5\", \"0.016611295681063124\"], [\"CheckBoxListModel\", \"4\", \"0.013289036544850499\"], [\"BeanShell\", \"11\", \"0.036544850498338874\"], [\"MarkerHighlight\", \"3\", \"0.009966777408637873\"], [\"ListHandler\", \"2\", \"0.006644518272425249\"], [\"PluginList\", \"12\", \"0.03986710963455149\"], [\"WrapGuide\", \"2\", \"0.006644518272425249\"], [\"HelpViewer\", \"20\", \"0.0664451827242525\"], [\"BracketHighlight\", \"2\", \"0.006644518272425249\"], [\"AbstractOptionPane\", \"4\", \"0.013289036544850499\"], [\"SearchDialog\", \"18\", \"0.059800664451827246\"], [\"BufferOptions\", \"13\", \"0.04318936877076412\"], [\"ModeProperties\", \"8\", \"0.026578073089700997\"], [\"TOCHandler\", \"5\", \"0.016611295681063124\"], [\"TipOfTheDay\", \"6\", \"0.019933554817275746\"], [\"Gutter\", \"8\", \"0.026578073089700997\"], [\"ParentDirectoryRenderer\", \"3\", \"0.009966777408637873\"], [\"BufferPrintable\", \"8\", \"0.026578073089700997\"], [\"Handler\", \"8\", \"0.026578073089700997\"], [\"Macro\", \"11\", \"0.036544850498338874\"], [\"JAR\", \"18\", \"0.059800664451827246\"], [\"BeanShellHandler\", \"4\", \"0.013289036544850499\"], [\"ComponentHandler\", \"2\", \"0.006644518272425249\"], [\"PluginManager\", \"20\", \"0.0664451827242525\"], [\"JCheckBoxList\", \"4\", \"0.013289036544850499\"], [\"FileRootsVFS\", \"8\", \"0.026578073089700997\"], [\"EnhancedDialog\", \"2\", \"0.006644518272425249\"], [\"PluginListDownloadProgress\", \"2\", \"0.006644518272425249\"], [\"Wrapper\", \"5\", \"0.016611295681063124\"], [\"Rect\", \"7\", \"0.023255813953488372\"], [\"TOCTree\", \"3\", \"0.009966777408637873\"], [\"GlobalOptions\", \"10\", \"0.03322259136212625\"], [\"DownloadThread\", \"4\", \"0.013289036544850499\"], [\"MouseWheelHandler\", \"4\", \"0.013289036544850499\"], [\"BrowserColorsOptionPane\", \"2\", \"0.006644518272425249\"], [\"PropertyChangeHandler\", \"4\", \"0.013289036544850499\"], [\"HelpIndex\", \"10\", \"0.03322259136212625\"], [\"AnimatedIcon\", \"2\", \"0.006644518272425249\"], [\"SplashScreen\", \"7\", \"0.023255813953488372\"], [\"OSTask\", \"4\", \"0.013289036544850499\"], [\"Install\", \"16\", \"0.053156146179401995\"], [\"NonInteractiveInstall\", \"2\", \"0.006644518272425249\"], [\"SwingInstall\", \"4\", \"0.013289036544850499\"], [\"ConsoleInstall\", \"2\", \"0.006644518272425249\"], [\"GenerateTocXML\", \"2\", \"0.006644518272425249\"], [\"HelpTOCPanel\", \"12\", \"0.03986710963455149\"], [\"Chunk\", \"2\", \"0.006644518272425249\"], [\"RecentFilesMenu\", \"5\", \"0.016611295681063124\"], [\"DirectoryMenu\", \"2\", \"0.006644518272425249\"], [\"EnhancedMenu\", \"8\", \"0.026578073089700997\"], [\"MarkersMenu\", \"2\", \"0.006644518272425249\"], [\"MacrosMenu\", \"8\", \"0.026578073089700997\"], [\"HistoryModel\", \"17\", \"0.05647840531561462\"], [\"BeanShellAction\", \"5\", \"0.016611295681063124\"], [\"Registers\", \"18\", \"0.059800664451827246\"], [\"PaintSelection\", \"4\", \"0.013289036544850499\"], [\"RegistersHandler\", \"4\", \"0.013289036544850499\"], [\"TextAreaOptionPane\", \"9\", \"0.029900332225913623\"], [\"ActionTextField\", \"3\", \"0.009966777408637873\"], [\"Autosave\", \"4\", \"0.013289036544850499\"], [\"ActionBar\", \"10\", \"0.03322259136212625\"], [\"ExplicitFoldHandler\", \"2\", \"0.006644518272425249\"], [\"CompletionPopup\", \"6\", \"0.019933554817275746\"], [\"LogViewer\", \"7\", \"0.023255813953488372\"], [\"PaintLineBackground\", \"2\", \"0.006644518272425249\"], [\"Anchor\", \"2\", \"0.006644518272425249\"], [\"BufferChangeListener\", \"4\", \"0.013289036544850499\"], [\"PluginInfoBox\", \"4\", \"0.013289036544850499\"], [\"ListUpdater\", \"4\", \"0.013289036544850499\"], [\"BufferChangeAdapter\", \"4\", \"0.013289036544850499\"], [\"TextRenderer\", \"6\", \"0.019933554817275746\"], [\"InstallPanel\", \"6\", \"0.019933554817275746\"], [\"SizeLabel\", \"6\", \"0.019933554817275746\"], [\"ManagePanel\", \"9\", \"0.029900332225913623\"], [\"DirectoryEntryCompare\", \"4\", \"0.013289036544850499\"], [\"ActionSet\", \"33\", \"0.10963455149501661\"], [\"FirstLine\", \"10\", \"0.03322259136212625\"], [\"StatusBarOptionPane\", \"4\", \"0.013289036544850499\"], [\"LoadSaveOptionPane\", \"2\", \"0.006644518272425249\"], [\"QuickNotepad\", \"2\", \"0.006644518272425249\"], [\"DockableListHandler\", \"14\", \"0.046511627906976744\"], [\"Factory\", \"14\", \"0.046511627906976744\"], [\"ScrollLineCount\", \"2\", \"0.006644518272425249\"], [\"VFSFileNameField\", \"8\", \"0.026578073089700997\"], [\"DisplayManager\", \"12\", \"0.03986710963455149\"], [\"VFSFileChooserDialog\", \"9\", \"0.029900332225913623\"], [\"PluginManagerOptionPane\", \"4\", \"0.013289036544850499\"], [\"MirrorModel\", \"2\", \"0.006644518272425249\"], [\"BrowserOptionPane\", \"2\", \"0.006644518272425249\"], [\"DownloadMirrorsThread\", \"2\", \"0.006644518272425249\"], [\"BrowserHandler\", \"4\", \"0.013289036544850499\"], [\"ResourceCache\", \"9\", \"0.029900332225913623\"], [\"PaintBracketHighlight\", \"2\", \"0.006644518272425249\"], [\"PaintCaret\", \"6\", \"0.019933554817275746\"], [\"PaintText\", \"4\", \"0.013289036544850499\"], [\"PaintWrapGuide\", \"2\", \"0.006644518272425249\"], [\"FoldHandler\", \"4\", \"0.013289036544850499\"], [\"PluginCacheEntry\", \"15\", \"0.04983388704318937\"], [\"ServiceManager\", \"11\", \"0.036544850498338874\"], [\"ServiceListHandler\", \"8\", \"0.026578073089700997\"], [\"EditAction\", \"7\", \"0.023255813953488372\"], [\"Model\", \"3\", \"0.009966777408637873\"], [\"VFSDirectoryEntryTable\", \"5\", \"0.016611295681063124\"], [\"Remove\", \"18\", \"0.059800664451827246\"], [\"TableMouseHandler\", \"3\", \"0.009966777408637873\"], [\"VFSDirectoryEntryTableModel\", \"1\", \"0.0033222591362126247\"], [\"Descriptor\", \"3\", \"0.009966777408637873\"], [\"Deferred\", \"5\", \"0.016611295681063124\"], [\"EnhancedButton\", \"5\", \"0.016611295681063124\"], [\"PluginJAR\", \"65\", \"0.2159468438538206\"], [\"EditPlugin\", \"8\", \"0.026578073089700997\"], [\"Plugin\", \"8\", \"0.026578073089700997\"], [\"EBMessage\", \"4\", \"0.013289036544850499\"], [\"PluginResURLConnection\", \"2\", \"0.006644518272425249\"], [\"HelpButton\", \"11\", \"0.036544850498338874\"], [\"LatestVersionPlugin\", \"2\", \"0.006644518272425249\"], [\"PluginUpdate\", \"6\", \"0.019933554817275746\"], [\"BrowserCommandsMenu\", \"5\", \"0.016611295681063124\"], [\"VariableGridLayout\", \"2\", \"0.006644518272425249\"], [\"SearchBar\", \"5\", \"0.016611295681063124\"], [\"EditBus\", \"3\", \"0.009966777408637873\"], [\"EBPlugin\", \"2\", \"0.006644518272425249\"], [\"ThreadProgress\", \"2\", \"0.006644518272425249\"], [\"MarkersProvider\", \"2\", \"0.006644518272425249\"], [\"RecentDirectoriesProvider\", \"6\", \"0.019933554817275746\"], [\"RecentFilesProvider\", \"4\", \"0.013289036544850499\"], [\"DynamicMenuProvider\", \"2\", \"0.006644518272425249\"], [\"MacrosProvider\", \"2\", \"0.006644518272425249\"], [\"PluginsProvider\", \"2\", \"0.006644518272425249\"], [\"EvalError\", \"2\", \"0.006644518272425249\"], [\"PluginOptions\", \"2\", \"0.006644518272425249\"], [\"Roster\", \"8\", \"0.026578073089700997\"], [\"ScrollLayout\", \"4\", \"0.013289036544850499\"], [\"ExtensionManager\", \"2\", \"0.006644518272425249\"], [\"KillRing\", \"17\", \"0.05647840531561462\"], [\"UndoManager\", \"8\", \"0.026578073089700997\"], [\"Operation\", \"2\", \"0.006644518272425249\"], [\"InstallButton\", \"8\", \"0.026578073089700997\"], [\"RosterThread\", \"2\", \"0.006644518272425249\"], [\"LogList\", \"2\", \"0.006644518272425249\"], [\"IntegerArray\", \"3\", \"0.009966777408637873\"], [\"GutterOptionPane\", \"8\", \"0.026578073089700997\"], [\"EditAbbrevDialog\", \"4\", \"0.013289036544850499\"], [\"AbbrevsModel\", \"4\", \"0.013289036544850499\"], [\"BoyerMooreSearchMatcher\", \"8\", \"0.026578073089700997\"], [\"BrowserIORequest\", \"6\", \"0.019933554817275746\"], [\"EntryCompare\", \"3\", \"0.009966777408637873\"], [\"HeaderMouseHandler\", \"2\", \"0.006644518272425249\"], [\"BufferPrinter1_4\", \"2\", \"0.006644518272425249\"], [\"BufferPrinter1_3\", \"2\", \"0.006644518272425249\"], [\"PrintOptionPane\", \"6\", \"0.019933554817275746\"], [\"UnixWorkaround\", \"4\", \"0.013289036544850499\"], [\"InstallThread\", \"2\", \"0.006644518272425249\"], [\"OptionGroup\", \"2\", \"0.006644518272425249\"], [\"PositionManager\", \"2\", \"0.006644518272425249\"], [\"Highlight\", \"2\", \"0.006644518272425249\"], [\"Match\", \"2\", \"0.006644518272425249\"], [\"RESearchMatcher\", \"3\", \"0.009966777408637873\"], [\"MouseActions\", \"2\", \"0.006644518272425249\"], [\"Insert\", \"2\", \"0.006644518272425249\"], [\"KillRingHandler\", \"5\", \"0.016611295681063124\"], [\"NameSpace\", \"3\", \"0.009966777408637873\"], [\"SettingsActionHandler\", \"5\", \"0.016611295681063124\"], [\"TextAreaTransferHandler\", \"8\", \"0.026578073089700997\"], [\"TextAreaDialog\", \"5\", \"0.016611295681063124\"], [\"BeanShellErrorDialog\", \"2\", \"0.006644518272425249\"], [\"FilesChangedDialog\", \"6\", \"0.019933554817275746\"], [\"Renderer\", \"8\", \"0.026578073089700997\"], [\"TreeHandler\", \"2\", \"0.006644518272425249\"], [\"ButtonActionHandler\", \"2\", \"0.006644518272425249\"], [\"SelectallButton\", \"2\", \"0.006644518272425249\"], [\"RootsEntry\", \"4\", \"0.013289036544850499\"], [\"Delegate\", \"2\", \"0.006644518272425249\"], [\"ResultCellRenderer\", \"8\", \"0.026578073089700997\"], [\"MacOSPlugin\", \"2\", \"0.006644518272425249\"], [\"ErrorListCellRenderer\", \"2\", \"0.006644518272425249\"], [\"ShortcutsModel\", \"7\", \"0.023255813953488372\"], [\"BrowserActionContext\", \"2\", \"0.006644518272425249\"], [\"MemoryStatus\", \"8\", \"0.026578073089700997\"], [\"PropertyManager\", \"2\", \"0.006644518272425249\"], [\"Clock\", \"2\", \"0.006644518272425249\"], [\"DropHandler\", \"2\", \"0.006644518272425249\"], [\"RingListModel\", \"2\", \"0.006644518272425249\"], [\"KeywordMap\", \"2\", \"0.006644518272425249\"], [\"HelpFile\", \"2\", \"0.006644518272425249\"], [\"WorkThreadPool\", \"3\", \"0.009966777408637873\"], [\"DisplayTokenHandler\", \"2\", \"0.006644518272425249\"], [\"Windows\", \"2\", \"0.006644518272425249\"], [\"FontSelectorDialog\", \"3\", \"0.009966777408637873\"], [\"StyleEditor\", \"4\", \"0.013289036544850499\"], [\"SelectLineRange\", \"2\", \"0.006644518272425249\"], [\"ErrorListDialog\", \"2\", \"0.006644518272425249\"], [\"PasteFromListDialog\", \"4\", \"0.013289036544850499\"], [\"ContextAddDialog\", \"6\", \"0.019933554817275746\"], [\"AboutDialog\", \"2\", \"0.006644518272425249\"], [\"ViewRegisters\", \"2\", \"0.006644518272425249\"], [\"AddAbbrevDialog\", \"2\", \"0.006644518272425249\"], [\"ParserRule\", \"5\", \"0.016611295681063124\"], [\"JEditMetalTheme15\", \"2\", \"0.006644518272425249\"], [\"JEditMetalTheme14\", \"2\", \"0.006644518272425249\"], [\"TextAreaDropHandler\", \"2\", \"0.006644518272425249\"], [\"MyFocusTraversalPolicy\", \"2\", \"0.006644518272425249\"], [\"Broken\", \"2\", \"0.006644518272425249\"], [\"MarkerViewer\", \"2\", \"0.006644518272425249\"], [\"RegisterChanged\", \"2\", \"0.006644518272425249\"], [\"RegisterViewer\", \"2\", \"0.006644518272425249\"], [\"GoToNodeAction\", \"2\", \"0.006644518272425249\"], [\"HyperSearchFileNode\", \"2\", \"0.006644518272425249\"], [\"HyperSearchNode\", \"2\", \"0.006644518272425249\"], [\"MutableListModel\", \"2\", \"0.006644518272425249\"], [\"BufferLoadRequest\", \"2\", \"0.006644518272425249\"], [\"OpenBracketIndentRule\", \"2\", \"0.006644518272425249\"], [\"HelpViewerDialog\", \"2\", \"0.006644518272425249\"], [\"HelpViewerInterface\", \"2\", \"0.006644518272425249\"], [\"HelpSearchPanel\", \"2\", \"0.006644518272425249\"], [\"LinkHandler\", \"3\", \"0.009966777408637873\"], [\"BufferChanging\", \"2\", \"0.006644518272425249\"], [\"JEditBuffer\", \"2\", \"0.006644518272425249\"], [\"SegmentCharSequence\", \"2\", \"0.006644518272425249\"], [\"PluginListHandler\", \"2\", \"0.006644518272425249\"], [\"AllBufferSet\", \"2\", \"0.006644518272425249\"], [\"MirrorList\", \"4\", \"0.013289036544850499\"], [\"MirrorListHandler\", \"2\", \"0.006644518272425249\"], [\"SearchMatcher\", \"2\", \"0.006644518272425249\"], [\"DirectoryLoadedAWTRequest\", \"4\", \"0.013289036544850499\"], [\"ActionListHandler\", \"2\", \"0.006644518272425249\"], [\"ModeCatalogHandler\", \"2\", \"0.006644518272425249\"], [\"TagDecl\", \"3\", \"0.009966777408637873\"], [\"ColorEntry\", \"2\", \"0.006644518272425249\"], [\"PatternSearchMatcher\", \"2\", \"0.006644518272425249\"], [\"WindowTableModel\", \"4\", \"0.013289036544850499\"], [\"IOUtilities\", \"2\", \"0.006644518272425249\"], [\"FavoritesProvider\", \"2\", \"0.006644518272425249\"], [\"Branch\", \"2\", \"0.006644518272425249\"], [\"BufferListSet\", \"2\", \"0.006644518272425249\"], [\"StringICaseCompare\", \"3\", \"0.009966777408637873\"], [\"WindowCompare\", \"3\", \"0.009966777408637873\"], [\"AbbrevCompare\", \"3\", \"0.009966777408637873\"], [\"DockableWindowCompare\", \"2\", \"0.006644518272425249\"], [\"MenuItemCompare\", \"4\", \"0.013289036544850499\"], [\"ButtonCompare\", \"4\", \"0.013289036544850499\"], [\"PluginCompare\", \"2\", \"0.006644518272425249\"], [\"Log\", \"2\", \"0.006644518272425249\"], [\"Interpreter\", \"1\", \"0.0033222591362126247\"], [\"VICaretStatus\", \"2\", \"0.006644518272425249\"], [\"WorkThread\", \"3\", \"0.009966777408637873\"], [\"ColorTableModel\", \"4\", \"0.013289036544850499\"], [\"TabbedPane\", \"1\", \"0.0033222591362126247\"], [\"TipPanel\", \"1\", \"0.0033222591362126247\"], [\"StyleRenderer\", \"1\", \"0.0033222591362126247\"], [\"WorkThreadProgressListener\", \"1\", \"0.0033222591362126247\"], [\"WorkThreadHandler\", \"1\", \"0.0033222591362126247\"], [\"TOCCellRenderer\", \"1\", \"0.0033222591362126247\"], [\"HelpNode\", \"1\", \"0.0033222591362126247\"], [\"REMatch\", \"1\", \"0.0033222591362126247\"], [\"Button\", \"2\", \"0.006644518272425249\"], [\"ButtonCellRenderer\", \"1\", \"0.0033222591362126247\"], [\"MenuItem\", \"1\", \"0.0033222591362126247\"], [\"FileCompare\", \"1\", \"0.0033222591362126247\"], [\"FoldListener\", \"1\", \"0.0033222591362126247\"], [\"FoldEventHandler\", \"1\", \"0.0033222591362126247\"], [\"ContentManager\", \"1\", \"0.0033222591362126247\"], [\"ReadWriteLock\", \"1\", \"0.0033222591362126247\"], [\"PosTopHalf\", \"1\", \"0.0033222591362126247\"], [\"AboutPanel\", \"1\", \"0.0033222591362126247\"], [\"CompoundEdit\", \"1\", \"0.0033222591362126247\"], [\"BrowserColorsModel\", \"1\", \"0.0033222591362126247\"], [\"StyleChoice\", \"1\", \"0.0033222591362126247\"], [\"ColorChoice\", \"1\", \"0.0033222591362126247\"], [\"SizeSaver\", \"2\", \"0.006644518272425249\"], [\"MarkersSaveRequest\", \"1\", \"0.0033222591362126247\"], [\"BufferSaveRequest\", \"1\", \"0.0033222591362126247\"], [\"JEditKillRing\", \"1\", \"0.0033222591362126247\"]]"
        },
        {
            "content": "The co-change relationships for the starting entity `jEdit.java` have been retrieved successfully. The results indicate various entities that are frequently changed together with `jEdit.java`, along with their support counts and confidence scores.\n\n### Observations:\n- Entities like `JEditTextArea.java`, `MiscUtilities.java`, `Buffer.java`, `View.java`, and `GUIUtilities.java` show high confidence scores (greater than 0.15), indicating a strong historical correlation in changes.\n- Other entities such as `DockableWindowManager.java`, `ActionHandler.java`, `TextAreaPainter.java`, `EditPane.java`, and `PluginJAR.java` also show moderate to high confidence scores, suggesting they may be impacted by or related to changes in `jEdit.java`.\n\n### Next Steps:\nTo further analyze the impact of changes in `jEdit.java`, we should explore its **call graph** to identify which entities it directly uses or depends on within the system. This will help us understand the direct dependencies beyond historical co-changes.\n\nI will now call the `get_call_graph` function for `jEdit.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_058e234a974f4d1a8ba756",
                    "function": {
                        "arguments": "{\"entity\": \"jEdit.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"\", \"BufferIORequest\", \"PluginManager\", \"KillRing\", \"\", \"HelpViewer\", \"\", \"\", \"SearchAndReplace\", \"\", \"Log\", \"\", \"UtilEvalError\"]"
        },
        {
            "content": "The call graph for `jEdit.java` has been retrieved. It lists several entities that `jEdit.java` directly interacts with or uses, including:\n\n- **BufferIORequest**\n- **PluginManager**\n- **KillRing**\n- **HelpViewer**\n- **SearchAndReplace**\n- **Log**\n- **UtilEvalError**\n\nThese entities represent direct dependencies of `jEdit.java`, meaning changes in `jEdit.java` could potentially impact these components.\n\n### Correlation with Co-Change Results:\nInterestingly, some of these entities (e.g., `PluginManager`, `KillRing`, and `SearchAndReplace`) also appeared in the co-change analysis with relatively high confidence scores, reinforcing their relevance to `jEdit.java`.\n\nTo better understand how `jEdit.java` is related to these entities, we can now analyze its source code to identify key interactions. This will help us determine whether synchronization or coordinated changes are necessary.\n\nNext, I'll retrieve the **source code** of `jEdit.java` using the `get_origin_code` function.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_d9d7e07330e649788b568a",
                    "function": {
                        "arguments": "{\"entity\": \"jEdit.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.gjt.sp.jedit;\\nimport bsh.UtilEvalError;\\nimport com.microstar.xml.*;\\nimport javax.swing.plaf.metal.*;\\nimport javax.swing.*;\\nimport java.awt.event.KeyEvent;\\nimport java.awt.*;\\nimport java.io.*;\\nimport java.net.*;\\nimport java.text.MessageFormat;\\nimport java.util.*;\\nimport org.gjt.sp.jedit.buffer.BufferIORequest;\\nimport org.gjt.sp.jedit.buffer.KillRing;\\nimport org.gjt.sp.jedit.msg.*;\\nimport org.gjt.sp.jedit.gui.*;\\nimport org.gjt.sp.jedit.help.HelpViewer;\\nimport org.gjt.sp.jedit.io.*;\\nimport org.gjt.sp.jedit.pluginmgr.PluginManager;\\nimport org.gjt.sp.jedit.search.SearchAndReplace;\\nimport org.gjt.sp.jedit.syntax.*;\\nimport org.gjt.sp.jedit.textarea.*;\\nimport org.gjt.sp.util.Log;\\npublic class jEdit\\n{\\n\\tpublic static String getVersion()\\n\\t{\\n\\t\\treturn MiscUtilities.buildToVersion(getBuild());\\n\\t} \\n\\tpublic static String getBuild()\\n\\t{\\n\\t\\t\\t\\treturn \\\"04.03.01.00\\\";\\n\\t} \\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\t\\tString javaVersion = System.getProperty(\\\"java.version\\\");\\n\\t\\tif(javaVersion.compareTo(\\\"1.4\\\") < 0)\\n\\t\\t{\\n\\t\\t\\tSystem.err.println(\\\"You are running Java version \\\"\\n\\t\\t\\t\\t+ javaVersion + \\\".\\\");\\n\\t\\t\\tSystem.err.println(\\\"jEdit requires Java 1.4 or later.\\\");\\n\\t\\t\\tSystem.exit(1);\\n\\t\\t} \\n\\t\\t\\t\\t\\t\\tmainThread = Thread.currentThread();\\n\\t\\tsettingsDirectory = \\\".jedit\\\";\\n\\t\\t\\t\\t\\t\\tbackground = OperatingSystem.isMacOS();\\n\\t\\t\\t\\tboolean endOpts = false;\\n\\t\\tint level = Log.WARNING;\\n\\t\\tString portFile = \\\"server\\\";\\n\\t\\tboolean restore = true;\\n\\t\\tboolean newView = true;\\n\\t\\tboolean newPlainView = false;\\n\\t\\tboolean gui = true; \\t\\tboolean loadPlugins = true;\\n\\t\\tboolean runStartupScripts = true;\\n\\t\\tboolean quit = false;\\n\\t\\tboolean wait = false;\\n\\t\\tString userDir = System.getProperty(\\\"user.dir\\\");\\n\\t\\t\\t\\tString scriptFile = null;\\n\\t\\tfor(int i = 0; i < args.length; i++)\\n\\t\\t{\\n\\t\\t\\tString arg = args[i];\\n\\t\\t\\tif(arg == null)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\telse if(arg.length() == 0)\\n\\t\\t\\t\\targs[i] = null;\\n\\t\\t\\telse if(arg.startsWith(\\\"-\\\") && !endOpts)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(arg.equals(\\\"--\\\"))\\n\\t\\t\\t\\t\\tendOpts = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-usage\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tversion();\\n\\t\\t\\t\\t\\tSystem.err.println();\\n\\t\\t\\t\\t\\tusage();\\n\\t\\t\\t\\t\\tSystem.exit(1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(arg.equals(\\\"-version\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tversion();\\n\\t\\t\\t\\t\\tSystem.exit(1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-log=\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tlevel = Integer.parseInt(arg.substring(\\\"-log=\\\".length()));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tSystem.err.println(\\\"Malformed option: \\\" + arg);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(arg.equals(\\\"-nosettings\\\"))\\n\\t\\t\\t\\t\\tsettingsDirectory = null;\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-settings=\\\"))\\n\\t\\t\\t\\t\\tsettingsDirectory = arg.substring(10);\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-noserver\\\"))\\n\\t\\t\\t\\t\\tportFile = null;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-server\\\"))\\n\\t\\t\\t\\t\\tportFile = \\\"server\\\";\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-server=\\\"))\\n\\t\\t\\t\\t\\tportFile = arg.substring(8);\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-background\\\"))\\n\\t\\t\\t\\t\\tbackground = true;\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-nobackground\\\"))\\n\\t\\t\\t\\t\\tbackground = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-gui\\\"))\\n\\t\\t\\t\\t\\tgui = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-nogui\\\"))\\n\\t\\t\\t\\t\\tgui = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-newview\\\"))\\n\\t\\t\\t\\t\\tnewView = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-newplainview\\\"))\\n\\t\\t\\t\\t\\tnewPlainView = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-reuseview\\\"))\\n\\t\\t\\t\\t\\tnewPlainView = newView = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-restore\\\"))\\n\\t\\t\\t\\t\\trestore = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-norestore\\\"))\\n\\t\\t\\t\\t\\trestore = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-plugins\\\"))\\n\\t\\t\\t\\t\\tloadPlugins = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-noplugins\\\"))\\n\\t\\t\\t\\t\\tloadPlugins = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-startupscripts\\\"))\\n\\t\\t\\t\\t\\trunStartupScripts = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-nostartupscripts\\\"))\\n\\t\\t\\t\\t\\trunStartupScripts = false;\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-run=\\\"))\\n\\t\\t\\t\\t\\tscriptFile = arg.substring(5);\\n\\t\\t\\t\\telse if(arg.equals(\\\"-wait\\\"))\\n\\t\\t\\t\\t\\twait = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-quit\\\"))\\n\\t\\t\\t\\t\\tquit = true;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tSystem.err.println(\\\"Unknown option: \\\"\\n\\t\\t\\t\\t\\t\\t+ arg);\\n\\t\\t\\t\\t\\tusage();\\n\\t\\t\\t\\t\\tSystem.exit(1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\targs[i] = null;\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\t\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tsettingsDirectory = MiscUtilities.constructPath(\\n\\t\\t\\t\\tSystem.getProperty(\\\"user.home\\\"),\\n\\t\\t\\t\\tsettingsDirectory);\\n\\t\\t\\tsettingsDirectory = MiscUtilities.resolveSymlinks(\\n\\t\\t\\t\\tsettingsDirectory);\\n\\t\\t}\\n\\t\\tif(settingsDirectory != null && portFile != null)\\n\\t\\t\\tportFile = MiscUtilities.constructPath(settingsDirectory,portFile);\\n\\t\\telse\\n\\t\\t\\tportFile = null;\\n\\t\\tLog.init(true,level);\\n\\t\\t\\t\\tif(portFile != null && new File(portFile).exists())\\n\\t\\t{\\n\\t\\t\\tint port, key;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tBufferedReader in = new BufferedReader(new FileReader(portFile));\\n\\t\\t\\t\\tString check = in.readLine();\\n\\t\\t\\t\\tif(!check.equals(\\\"b\\\"))\\n\\t\\t\\t\\t\\tthrow new Exception(\\\"Wrong port file format\\\");\\n\\t\\t\\t\\tport = Integer.parseInt(in.readLine());\\n\\t\\t\\t\\tkey = Integer.parseInt(in.readLine());\\n\\t\\t\\t\\tSocket socket = new Socket(InetAddress.getByName(\\\"127.0.0.1\\\"),port);\\n\\t\\t\\t\\tDataOutputStream out = new DataOutputStream(\\n\\t\\t\\t\\t\\tsocket.getOutputStream());\\n\\t\\t\\t\\tout.writeInt(key);\\n\\t\\t\\t\\tString script;\\n\\t\\t\\t\\tif(quit)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tscript = \\\"socket.close();\\\\n\\\"\\n\\t\\t\\t\\t\\t\\t+ \\\"jEdit.exit(null,true);\\\\n\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tscript = makeServerScript(wait,restore,\\n\\t\\t\\t\\t\\t\\tnewView,newPlainView,args,\\n\\t\\t\\t\\t\\t\\tscriptFile);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tout.writeUTF(script);\\n\\t\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,\\\"Waiting for server\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tsocket.getInputStream().read();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tin.close();\\n\\t\\t\\t\\tout.close();\\n\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"An error occurred\\\"\\n\\t\\t\\t\\t\\t+ \\\" while connecting to the jEdit server instance.\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"This probably means that\\\"\\n\\t\\t\\t\\t\\t+ \\\" jEdit crashed and/or exited abnormally\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"the last time it was run.\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"If you don't\\\"\\n\\t\\t\\t\\t\\t+ \\\" know what this means, don't worry.\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(quit)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t} \\n\\t\\t\\t\\t\\t\\tif(!new File(settingsDirectory,\\\"nosplash\\\").exists())\\n\\t\\t\\tGUIUtilities.showSplashScreen();\\n\\t\\t\\t\\tWriter stream;\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile _settingsDirectory = new File(settingsDirectory);\\n\\t\\t\\tif(!_settingsDirectory.exists())\\n\\t\\t\\t\\t_settingsDirectory.mkdirs();\\n\\t\\t\\tFile _macrosDirectory = new File(settingsDirectory,\\\"macros\\\");\\n\\t\\t\\tif(!_macrosDirectory.exists())\\n\\t\\t\\t\\t_macrosDirectory.mkdir();\\n\\t\\t\\tString logPath = MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"activity.log\\\");\\n\\t\\t\\tbackupSettingsFile(new File(logPath));\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tstream = new BufferedWriter(new FileWriter(logPath));\\n\\t\\t\\t\\t\\t\\t\\t\\tString lineSep = System.getProperty(\\\"line.separator\\\");\\n\\t\\t\\t\\tstream.write(\\\"Log file created on \\\" + new Date());\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"IMPORTANT:\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"Because updating this file after \\\"\\n\\t\\t\\t\\t\\t+ \\\"every log message would kill\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"performance, it will be *incomplete* \\\"\\n\\t\\t\\t\\t\\t+ \\\"unless you invoke the\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"Utilities->Troubleshooting->Update \\\"\\n\\t\\t\\t\\t\\t+ \\\"Activity Log on Disk command!\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\tstream = null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tstream = null;\\n\\t\\t} \\n\\t\\tLog.setLogWriter(stream);\\n\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"jEdit version \\\" + getVersion());\\n\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"Settings directory is \\\"\\n\\t\\t\\t+ settingsDirectory);\\n\\t\\t\\t\\tinitMisc();\\n\\t\\tinitSystemProperties();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\tGUIUtilities.init();\\n\\t\\tBeanShell.init();\\n\\t\\tif(jEditHome != null)\\n\\t\\t\\tinitSiteProperties();\\n\\t\\tinitUserProperties();\\n\\t\\t\\t\\tif(portFile != null)\\n\\t\\t{\\n\\t\\t\\tserver = new EditServer(portFile);\\n\\t\\t\\tif(!server.isOK())\\n\\t\\t\\t\\tserver = null;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif(background)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbackground = false;\\n\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"You cannot specify both the\\\"\\n\\t\\t\\t\\t\\t+ \\\" -background and -noserver switches\\\");\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\t\\t\\tinitPLAF();\\n\\t\\tVFSManager.init();\\n\\t\\tinitResources();\\n\\t\\tSearchAndReplace.load();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\tif(loadPlugins)\\n\\t\\t\\tinitPlugins();\\n\\t\\tHistoryModel.loadHistory();\\n\\t\\tBufferHistory.load();\\n\\t\\tKillRing.load();\\n\\t\\tpropertiesChanged();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\t\\t\\tsortBuffers = getBooleanProperty(\\\"sortBuffers\\\");\\n\\t\\tsortByName = getBooleanProperty(\\\"sortByName\\\");\\n\\t\\treloadModes();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\t\\t\\tfor(int i = 0; i < jars.size(); i++)\\n\\t\\t{\\n\\t\\t\\t((PluginJAR)jars.elementAt(i)).activatePluginIfNecessary();\\n\\t\\t} \\n\\t\\t\\t\\tMacros.loadMacros();\\n\\t\\tMacros.getMacroActionSet().initKeyBindings();\\n\\t\\tif(runStartupScripts && jEditHome != null)\\n\\t\\t{\\n\\t\\t\\tString path = MiscUtilities.constructPath(jEditHome,\\\"startup\\\");\\n\\t\\t\\tFile file = new File(path);\\n\\t\\t\\tif(file.exists())\\n\\t\\t\\t\\trunStartupScripts(file);\\n\\t\\t}\\n\\t\\tif(runStartupScripts && settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tString path = MiscUtilities.constructPath(settingsDirectory,\\\"startup\\\");\\n\\t\\t\\tFile file = new File(path);\\n\\t\\t\\tif(!file.exists())\\n\\t\\t\\t\\tfile.mkdirs();\\n\\t\\t\\telse\\n\\t\\t\\t\\trunStartupScripts(file);\\n\\t\\t} \\n\\t\\t\\t\\tif(scriptFile != null)\\n\\t\\t{\\n\\t\\t\\tscriptFile = MiscUtilities.constructPath(userDir,scriptFile);\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tBeanShell.getNameSpace().setVariable(\\\"args\\\",args);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(UtilEvalError e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t\\tBeanShell.runScript(null,scriptFile,null,false);\\n\\t\\t} \\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\t\\t\\tfinishStartup(gui,restore,userDir,args);\\n\\t} \\n\\tpublic static final Properties getProperties()\\n\\t{\\n\\t\\treturn propMgr.getProperties();\\n\\t} \\n\\tpublic static final String getProperty(String name)\\n\\t{\\n\\t\\treturn propMgr.getProperty(name);\\n\\t} \\n\\tpublic static final String getProperty(String name, String def)\\n\\t{\\n\\t\\tString value = propMgr.getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t\\treturn value;\\n\\t} \\n\\tpublic static final String getProperty(String name, Object[] args)\\n\\t{\\n\\t\\tif(name == null)\\n\\t\\t\\treturn null;\\n\\t\\tif(args == null)\\n\\t\\t\\treturn getProperty(name);\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tString value = getProperty(name);\\n\\t\\t\\tif(value == null)\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn MessageFormat.format(value,args);\\n\\t\\t}\\n\\t} \\n\\tpublic static final boolean getBooleanProperty(String name)\\n\\t{\\n\\t\\treturn getBooleanProperty(name,false);\\n\\t} \\n\\tpublic static final boolean getBooleanProperty(String name, boolean def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse if(value.equals(\\\"true\\\") || value.equals(\\\"yes\\\")\\n\\t\\t\\t|| value.equals(\\\"on\\\"))\\n\\t\\t\\treturn true;\\n\\t\\telse if(value.equals(\\\"false\\\") || value.equals(\\\"no\\\")\\n\\t\\t\\t|| value.equals(\\\"off\\\"))\\n\\t\\t\\treturn false;\\n\\t\\telse\\n\\t\\t\\treturn def;\\n\\t} \\n\\tpublic static final int getIntegerProperty(String name, int def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn Integer.parseInt(value.trim());\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tpublic static double getDoubleProperty(String name, double def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn Double.parseDouble(value.trim());\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic static final Font getFontProperty(String name)\\n\\t{\\n\\t\\treturn getFontProperty(name,null);\\n\\t} \\n\\tpublic static final Font getFontProperty(String name, Font def)\\n\\t{\\n\\t\\tString family = getProperty(name);\\n\\t\\tString sizeString = getProperty(name + \\\"size\\\");\\n\\t\\tString styleString = getProperty(name + \\\"style\\\");\\n\\t\\tif(family == null || sizeString == null || styleString == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tint size, style;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tsize = Integer.parseInt(sizeString);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tstyle = Integer.parseInt(styleString);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t\\treturn new Font(family,style,size);\\n\\t\\t}\\n\\t} \\n\\tpublic static Color getColorProperty(String name)\\n\\t{\\n\\t\\treturn getColorProperty(name,Color.black);\\n\\t} \\n\\tpublic static Color getColorProperty(String name, Color def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t\\treturn GUIUtilities.parseColor(value,def);\\n\\t} \\n\\tpublic static void setColorProperty(String name, Color value)\\n\\t{\\n\\t\\tsetProperty(name,GUIUtilities.getColorHexString(value));\\n\\t} \\n\\tpublic static final void setProperty(String name, String value)\\n\\t{\\n\\t\\tpropMgr.setProperty(name,value);\\n\\t} \\n\\tpublic static final void setTemporaryProperty(String name, String value)\\n\\t{\\n\\t\\tpropMgr.setTemporaryProperty(name,value);\\n\\t} \\n\\tpublic static final void setBooleanProperty(String name, boolean value)\\n\\t{\\n\\t\\tsetProperty(name,value ? \\\"true\\\" : \\\"false\\\");\\n\\t} \\n\\tpublic static final void setIntegerProperty(String name, int value)\\n\\t{\\n\\t\\tsetProperty(name,String.valueOf(value));\\n\\t} \\n\\t\\tpublic static final void setDoubleProperty(String name, double value)\\n\\t{\\n\\t\\tsetProperty(name,String.valueOf(value));\\n\\t}\\n\\tpublic static final void setFontProperty(String name, Font value)\\n\\t{\\n\\t\\tsetProperty(name,value.getFamily());\\n\\t\\tsetIntegerProperty(name + \\\"size\\\",value.getSize());\\n\\t\\tsetIntegerProperty(name + \\\"style\\\",value.getStyle());\\n\\t} \\n\\tpublic static final void unsetProperty(String name)\\n\\t{\\n\\t\\tpropMgr.unsetProperty(name);\\n\\t} \\n\\tpublic static final void resetProperty(String name)\\n\\t{\\n\\t\\tpropMgr.resetProperty(name);\\n\\t} \\n\\tpublic static void propertiesChanged()\\n\\t{\\n\\t\\tinitKeyBindings();\\n\\t\\tAutosave.setInterval(getIntegerProperty(\\\"autosave\\\",30));\\n\\t\\tsaveCaret = getBooleanProperty(\\\"saveCaret\\\");\\n\\t\\tUIDefaults defaults = UIManager.getDefaults();\\n\\t\\t\\t\\tFont font = getFontProperty(\\\"view.font\\\");\\n\\t\\t\\t\\tdefaults.put(\\\"TextArea.font\\\",font);\\n\\t\\tdefaults.put(\\\"TextPane.font\\\",font);\\n\\t\\t\\t\\tToolTipManager.sharedInstance().setEnabled(\\n\\t\\t\\tjEdit.getBooleanProperty(\\\"showTooltips\\\"));\\n\\t\\tinitProxy();\\n\\t\\t\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tbuffer.resetCachedProperties();\\n\\t\\t\\tbuffer.propertiesChanged();\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tHistoryModel.propertiesChanged();\\n\\t\\tKillRing.propertiesChanged();\\n\\t\\tEditBus.send(new PropertiesChanged(null));\\n\\t} \\n\\tpublic static String[] getNotLoadedPluginJARs()\\n\\t{\\n\\t\\tVector returnValue = new Vector();\\n\\t\\tif(jEditHome != null)\\n\\t\\t{\\n\\t\\t\\tString systemPluginDir = MiscUtilities\\n\\t\\t\\t\\t.constructPath(jEditHome,\\\"jars\\\");\\n\\t\\t\\tString[] list = new File(systemPluginDir).list();\\n\\t\\t\\tif(list != null)\\n\\t\\t\\t\\tgetNotLoadedPluginJARs(returnValue,systemPluginDir,list);\\n\\t\\t}\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tString userPluginDir = MiscUtilities\\n\\t\\t\\t\\t.constructPath(settingsDirectory,\\\"jars\\\");\\n\\t\\t\\tString[] list = new File(userPluginDir).list();\\n\\t\\t\\tif(list != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tgetNotLoadedPluginJARs(returnValue,\\n\\t\\t\\t\\t\\tuserPluginDir,list);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tString[] _returnValue = new String[returnValue.size()];\\n\\t\\treturnValue.copyInto(_returnValue);\\n\\t\\treturn _returnValue;\\n\\t} \\n\\tpublic static EditPlugin getPlugin(String name)\\n\\t{\\n\\t\\treturn getPlugin(name, false);\\n\\t} \\n\\tpublic static EditPlugin getPlugin(String name, boolean loadIfNecessary)\\n\\t{\\n\\t\\tEditPlugin[] plugins = getPlugins();\\n\\t\\tEditPlugin plugin = null;\\n\\t\\tfor(int i = 0; i < plugins.length; i++)\\n\\t\\t{\\n\\t\\t\\tif(plugins[i].getClassName().equals(name))\\n\\t\\t\\t\\tplugin = plugins[i];\\n\\t\\t\\tif(loadIfNecessary)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(plugin instanceof EditPlugin.Deferred)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tplugin.getPluginJAR().activatePlugin();\\n\\t\\t\\t\\t\\tplugin = plugin.getPluginJAR().getPlugin();\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn plugin;\\n\\t} \\n\\tpublic static EditPlugin[] getPlugins()\\n\\t{\\n\\t\\tVector vector = new Vector();\\n\\t\\tfor(int i = 0; i < jars.size(); i++)\\n\\t\\t{\\n\\t\\t\\tEditPlugin plugin = ((PluginJAR)jars.elementAt(i))\\n\\t\\t\\t\\t.getPlugin();\\n\\t\\t\\tif(plugin != null)\\n\\t\\t\\t\\tvector.add(plugin);\\n\\t\\t}\\n\\t\\tEditPlugin[] array = new EditPlugin[vector.size()];\\n\\t\\tvector.copyInto(array);\\n\\t\\treturn array;\\n\\t} \\n\\tpublic static PluginJAR[] getPluginJARs()\\n\\t{\\n\\t\\tPluginJAR[] array = new PluginJAR[jars.size()];\\n\\t\\tjars.copyInto(array);\\n\\t\\treturn array;\\n\\t} \\n\\tpublic static PluginJAR getPluginJAR(String path)\\n\\t{\\n\\t\\tfor(int i = 0; i < jars.size(); i++)\\n\\t\\t{\\n\\t\\t\\tPluginJAR jar = (PluginJAR)jars.elementAt(i);\\n\\t\\t\\tif(jar.getPath().equals(path))\\n\\t\\t\\t\\treturn jar;\\n\\t\\t}\\n\\t\\treturn null;\\n\\t} \\n\\tpublic static void addPluginJAR(String path)\\n\\t{\\n\\t\\tPluginJAR jar = new PluginJAR(new File(path));\\n\\t\\tjars.addElement(jar);\\n\\t\\tjar.init();\\n\\t\\tEditBus.send(new PluginUpdate(jar,PluginUpdate.LOADED,false));\\n\\t\\tif(!isMainThread())\\n\\t\\t{\\n\\t\\t\\tEditBus.send(new DynamicMenuChanged(\\\"plugins\\\"));\\n\\t\\t\\tinitKeyBindings();\\n\\t\\t}\\n\\t} \\n\\tprivate static void addPluginJARsFromDirectory(String directory)\\n\\t{\\n\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"Loading plugins from \\\"\\n\\t\\t\\t+ directory);\\n\\t\\tFile file = new File(directory);\\n\\t\\tif(!(file.exists() && file.isDirectory()))\\n\\t\\t\\treturn;\\n\\t\\tString[] plugins = file.list();\\n\\t\\tif(plugins == null)\\n\\t\\t\\treturn;\\n\\t\\tfor(int i = 0; i < plugins.length; i++)\\n\\t\\t{\\n\\t\\t\\tString plugin = plugins[i];\\n\\t\\t\\tif(!plugin.toLowerCase().endsWith(\\\".jar\\\"))\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\tString path = MiscUtilities.constructPath(directory,plugin);\\n\\t\\t\\t\\t\\t\\tif(plugin.equals(\\\"EditBuddy.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"PluginManager.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"Firewall.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"Tidy.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"DragAndDrop.jar\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tpluginError(path,\\\"plugin-error.obsolete\\\",null);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\taddPluginJAR(path);\\n\\t\\t}\\n\\t} \\n\\tpublic static void removePluginJAR(PluginJAR jar, boolean exit)\\n\\t{\\n\\t\\tif(exit)\\n\\t\\t{\\n\\t\\t\\tjar.uninit(true);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tjar.uninit(false);\\n\\t\\t\\tjars.removeElement(jar);\\n\\t\\t\\tinitKeyBindings();\\n\\t\\t}\\n\\t\\tEditBus.send(new PluginUpdate(jar,PluginUpdate.UNLOADED,exit));\\n\\t\\tif(!isMainThread() && !exit)\\n\\t\\t\\tEditBus.send(new DynamicMenuChanged(\\\"plugins\\\"));\\n\\t} \\n\\tpublic static ActionContext getActionContext()\\n\\t{\\n\\t\\treturn actionContext;\\n\\t} \\n\\tpublic static void addActionSet(ActionSet actionSet)\\n\\t{\\n\\t\\tactionContext.addActionSet(actionSet);\\n\\t} \\n\\tpublic static void removeActionSet(ActionSet actionSet)\\n\\t{\\n\\t\\tactionContext.removeActionSet(actionSet);\\n\\t} \\n\\tpublic static ActionSet getBuiltInActionSet()\\n\\t{\\n\\t\\treturn builtInActionSet;\\n\\t} \\n\\tpublic static ActionSet[] getActionSets()\\n\\t{\\n\\t\\treturn actionContext.getActionSets();\\n\\t} \\n\\tpublic static EditAction getAction(String name)\\n\\t{\\n\\t\\treturn actionContext.getAction(name);\\n\\t} \\n\\tpublic static ActionSet getActionSetForAction(String action)\\n\\t{\\n\\t\\treturn actionContext.getActionSetForAction(action);\\n\\t} \\n\\tpublic static ActionSet getActionSetForAction(EditAction action)\\n\\t{\\n\\t\\treturn actionContext.getActionSetForAction(action.getName());\\n\\t} \\n\\tpublic static EditAction[] getActions()\\n\\t{\\n\\t\\tString[] names = actionContext.getActionNames();\\n\\t\\tEditAction[] actions = new EditAction[names.length];\\n\\t\\tfor(int i = 0; i < actions.length; i++)\\n\\t\\t{\\n\\t\\t\\tactions[i] = actionContext.getAction(names[i]);\\n\\t\\t\\tif(actions[i] == null)\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\\"wtf: \\\" + names[i]);\\n\\t\\t}\\n\\t\\treturn actions;\\n\\t} \\n\\tpublic static String[] getActionNames()\\n\\t{\\n\\t\\treturn actionContext.getActionNames();\\n\\t} \\n\\tpublic static void reloadModes()\\n\\t{\\n\\t\\tmodes = new Vector(50);\\n\\t\\t\\t\\tif(jEditHome == null)\\n\\t\\t\\tloadModeCatalog(\\\"/modes/catalog\\\",true);\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tloadModeCatalog(MiscUtilities.constructPath(jEditHome,\\n\\t\\t\\t\\t\\\"modes\\\",\\\"catalog\\\"),false);\\n\\t\\t} \\n\\t\\t\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile userModeDir = new File(MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"modes\\\"));\\n\\t\\t\\tif(!userModeDir.exists())\\n\\t\\t\\t\\tuserModeDir.mkdirs();\\n\\t\\t\\tFile userCatalog = new File(MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"modes\\\",\\\"catalog\\\"));\\n\\t\\t\\tif(!userCatalog.exists())\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tFileWriter out = null;\\n\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tout = new FileWriter(userCatalog);\\n\\t\\t\\t\\t\\tout.write(jEdit.getProperty(\\\"defaultCatalog\\\"));\\n\\t\\t\\t\\t\\tout.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfinally\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tif(out != null)\\n\\t\\t\\t\\t\\t\\t\\tout.close();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch(IOException e)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tloadModeCatalog(userCatalog.getPath(),false);\\n\\t\\t} \\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbuffer.setMode();\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t} \\n\\tpublic static Mode getMode(String name)\\n\\t{\\n\\t\\tfor(int i = 0; i < modes.size(); i++)\\n\\t\\t{\\n\\t\\t\\tMode mode = (Mode)modes.elementAt(i);\\n\\t\\t\\tif(mode.getName().equals(name))\\n\\t\\t\\t\\treturn mode;\\n\\t\\t}\\n\\t\\treturn null;\\n\\t} \\n\\tpublic static Mode[] getModes()\\n\\t{\\n\\t\\tMode[] array = new Mode[modes.size()];\\n\\t\\tmodes.copyInto(array);\\n\\t\\treturn array;\\n\\t} \\n\\tpublic static Buffer openFiles(View view, String parent, String[] args)\\n\\t{\\n\\t\\tBuffer retVal = null;\\n\\t\\tBuffer lastBuffer = null;\\n\\t\\tfor(int i = 0; i < args.length; i++)\\n\\t\\t{\\n\\t\\t\\tString arg = args[i];\\n\\t\\t\\tif(arg == null)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\telse if(arg.startsWith(\\\"+line:\\\") || arg.startsWith(\\\"+marker:\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(lastBuffer != null)\\n\\t\\t\\t\\t\\tgotoMarker(view,lastBuffer,arg);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tlastBuffer = openFile(null,parent,arg,false,null);\\n\\t\\t\\tif(retVal == null && lastBuffer != null)\\n\\t\\t\\t\\tretVal = lastBuffer;\\n\\t\\t}\\n\\t\\tif(view != null && retVal != null)\\n\\t\\t\\tview.setBuffer(retVal);\\n\\t\\treturn retVal;\\n\\t} \\n\\tpublic static Buffer openFile(View view, String path)\\n\\t{\\n\\t\\treturn openFile(view,null,path,false,new Hashtable());\\n\\t} \\n\\tpublic static Buffer openFile(View view, String parent,\\n\\t\\tString path, boolean readOnly, boolean newFile)\\n\\t{\\n\\t\\treturn openFile(view,parent,path,newFile,new Hashtable());\\n\\t} \\n\\tpublic static Buffer openFile(View view, String parent,\\n\\t\\tString path, boolean readOnly, boolean newFile,\\n\\t\\tHashtable props)\\n\\t{\\n\\t\\treturn openFile(view,parent,path,newFile,props);\\n\\t} \\n\\tpublic static Buffer openFile(View view, String parent,\\n\\t\\tString path, boolean newFile, Hashtable props)\\n\\t{\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\tif(view != null && parent == null)\\n\\t\\t\\tparent = view.getBuffer().getDirectory();\\n\\t\\tif(MiscUtilities.isURL(path))\\n\\t\\t{\\n\\t\\t\\tif(MiscUtilities.getProtocolOfURL(path).equals(\\\"file\\\"))\\n\\t\\t\\t\\tpath = path.substring(5);\\n\\t\\t}\\n\\t\\tpath = MiscUtilities.constructPath(parent,path);\\n\\t\\tBuffer newBuffer;\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tBuffer buffer = getBuffer(path);\\n\\t\\t\\tif(buffer != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(view != null)\\n\\t\\t\\t\\t\\tview.setBuffer(buffer);\\n\\t\\t\\t\\treturn buffer;\\n\\t\\t\\t}\\n\\t\\t\\tif(props == null)\\n\\t\\t\\t\\tprops = new Hashtable();\\n\\t\\t\\tBufferHistory.Entry entry = BufferHistory.getEntry(path);\\n\\t\\t\\tif(entry != null && saveCaret && props.get(Buffer.CARET) == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tprops.put(Buffer.CARET,new Integer(entry.caret));\\n\\t\\t\\t}\\n\\t\\t\\tif(entry != null && props.get(Buffer.ENCODING) == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(entry.encoding != null)\\n\\t\\t\\t\\t\\tprops.put(Buffer.ENCODING,entry.encoding);\\n\\t\\t\\t}\\n\\t\\t\\tnewBuffer = new Buffer(path,newFile,false,props);\\n\\t\\t\\tif(!newBuffer.load(view,false))\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\taddBufferToList(newBuffer);\\n\\t\\t}\\n\\t\\tEditBus.send(new BufferUpdate(newBuffer,view,BufferUpdate.CREATED));\\n\\t\\tif(view != null)\\n\\t\\t\\tview.setBuffer(newBuffer);\\n\\t\\treturn newBuffer;\\n\\t} \\n\\tpublic static Buffer openTemporary(View view, String parent,\\n\\t\\tString path, boolean newFile)\\n\\t{\\n\\t\\tif(view != null && parent == null)\\n\\t\\t\\tparent = view.getBuffer().getDirectory();\\n\\t\\tif(MiscUtilities.isURL(path))\\n\\t\\t{\\n\\t\\t\\tif(MiscUtilities.getProtocolOfURL(path).equals(\\\"file\\\"))\\n\\t\\t\\t\\tpath = path.substring(5);\\n\\t\\t}\\n\\t\\tpath = MiscUtilities.constructPath(parent,path);\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tBuffer buffer = getBuffer(path);\\n\\t\\t\\tif(buffer != null)\\n\\t\\t\\t\\treturn buffer;\\n\\t\\t\\tbuffer = new Buffer(path,newFile,true,new Hashtable());\\n\\t\\t\\tif(!buffer.load(view,false))\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn buffer;\\n\\t\\t}\\n\\t} \\n\\tpublic static void commitTemporary(Buffer buffer)\\n\\t{\\n\\t\\tif(!buffer.isTemporary())\\n\\t\\t\\treturn;\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\taddBufferToList(buffer);\\n\\t\\tbuffer.commitTemporary();\\n\\t\\t\\t\\tEditBus.send(new BufferUpdate(buffer,null,BufferUpdate.CREATED));\\n\\t\\tEditBus.send(new BufferUpdate(buffer,null,BufferUpdate.LOAD_STARTED));\\n\\t\\tEditBus.send(new BufferUpdate(buffer,null,BufferUpdate.LOADED));\\n\\t} \\n\\tpublic static Buffer newFile(View view)\\n\\t{\\n\\t\\tString path;\\n\\t\\tif(view != null && view.getBuffer() != null)\\n\\t\\t{\\n\\t\\t\\tpath = view.getBuffer().getDirectory();\\n\\t\\t\\tVFS vfs = VFSManager.getVFSForPath(path);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif((vfs.getCapabilities() & VFS.WRITE_CAP) == 0)\\n\\t\\t\\t\\tpath = System.getProperty(\\\"user.home\\\");\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tpath = null;\\n\\t\\treturn newFile(view,path);\\n\\t} \\n\\tpublic static Buffer newFile(View view, String dir)\\n\\t{\\n\\t\\t\\t\\t\\t\\tif(dir != null\\n\\t\\t\\t&& buffersFirst != null\\n\\t\\t\\t&& buffersFirst == buffersLast\\n\\t\\t\\t&& buffersFirst.isUntitled()\\n\\t\\t\\t&& !buffersFirst.isDirty())\\n\\t\\t{\\n\\t\\t\\tcloseBuffer(view,buffersFirst);\\n\\t\\t\\t\\t\\t\\treturn buffersFirst;\\n\\t\\t}\\n\\t\\t\\t\\tint untitledCount = 0;\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(buffer.getName().startsWith(\\\"Untitled-\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tuntitledCount = Math.max(untitledCount,\\n\\t\\t\\t\\t\\t\\tInteger.parseInt(buffer.getName()\\n\\t\\t\\t\\t\\t\\t.substring(9)));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\treturn openFile(view,dir,\\\"Untitled-\\\" + (untitledCount+1),true,null);\\n\\t} \\n\\tpublic static boolean closeBuffer(View view, Buffer buffer)\\n\\t{\\n\\t\\t\\t\\tif(buffer.isPerformingIO())\\n\\t\\t{\\n\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\t\\tif(VFSManager.errorOccurred())\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tif(buffer.isDirty())\\n\\t\\t{\\n\\t\\t\\tObject[] args = { buffer.getName() };\\n\\t\\t\\tint result = GUIUtilities.confirm(view,\\\"notsaved\\\",args,\\n\\t\\t\\t\\tJOptionPane.YES_NO_CANCEL_OPTION,\\n\\t\\t\\t\\tJOptionPane.WARNING_MESSAGE);\\n\\t\\t\\tif(result == JOptionPane.YES_OPTION)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(!buffer.save(view,null,true))\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\t\\t\\tif(buffer.getBooleanProperty(BufferIORequest\\n\\t\\t\\t\\t\\t.ERROR_OCCURRED))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse if(result != JOptionPane.NO_OPTION)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\t_closeBuffer(view,buffer);\\n\\t\\treturn true;\\n\\t} \\n\\tpublic static void _closeBuffer(View view, Buffer buffer)\\n\\t{\\n\\t\\tif(buffer.isClosed())\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\tif(!buffer.isNewFile())\\n\\t\\t{\\n\\t\\t\\tif(view != null)\\n\\t\\t\\t\\tview.getEditPane().saveCaretInfo();\\n\\t\\t\\tInteger _caret = (Integer)buffer.getProperty(Buffer.CARET);\\n\\t\\t\\tint caret = (_caret == null ? 0 : _caret.intValue());\\n\\t\\t\\tBufferHistory.setEntry(buffer.getPath(),caret,\\n\\t\\t\\t\\t(Selection[])buffer.getProperty(Buffer.SELECTION),\\n\\t\\t\\t\\tbuffer.getStringProperty(Buffer.ENCODING));\\n\\t\\t}\\n\\t\\tString path = buffer.getSymlinkPath();\\n\\t\\tif((VFSManager.getVFSForPath(path).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t}\\n\\t\\tbufferHash.remove(path);\\n\\t\\tremoveBufferFromList(buffer);\\n\\t\\tbuffer.close();\\n\\t\\tDisplayManager.bufferClosed(buffer);\\n\\t\\tEditBus.send(new BufferUpdate(buffer,view,BufferUpdate.CLOSED));\\n\\t\\t\\t\\tif(buffersFirst == null && buffersLast == null)\\n\\t\\t\\tnewFile(view);\\n\\t} \\n\\tpublic static boolean closeAllBuffers(View view)\\n\\t{\\n\\t\\treturn closeAllBuffers(view,false);\\n\\t} \\n\\tpublic static boolean closeAllBuffers(View view, boolean isExiting)\\n\\t{\\n\\t\\tif(view != null)\\n\\t\\t\\tview.getEditPane().saveCaretInfo();\\n\\t\\tboolean dirty = false;\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(buffer.isDirty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tdirty = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tif(dirty)\\n\\t\\t{\\n\\t\\t\\tboolean ok = new CloseDialog(view).isOK();\\n\\t\\t\\tif(!ok)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\tif(VFSManager.errorOccurred())\\n\\t\\t\\treturn false;\\n\\t\\tbuffer = buffersFirst;\\n\\t\\t\\t\\tbuffersFirst = buffersLast = null;\\n\\t\\tbufferHash.clear();\\n\\t\\tbufferCount = 0;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(!buffer.isNewFile())\\n\\t\\t\\t{\\n\\t\\t\\t\\tInteger _caret = (Integer)buffer.getProperty(Buffer.CARET);\\n\\t\\t\\t\\tint caret = (_caret == null ? 0 : _caret.intValue());\\n\\t\\t\\t\\tBufferHistory.setEntry(buffer.getPath(),caret,\\n\\t\\t\\t\\t\\t(Selection[])buffer.getProperty(Buffer.SELECTION),\\n\\t\\t\\t\\t\\tbuffer.getStringProperty(Buffer.ENCODING));\\n\\t\\t\\t}\\n\\t\\t\\tbuffer.close();\\n\\t\\t\\tDisplayManager.bufferClosed(buffer);\\n\\t\\t\\tif(!isExiting)\\n\\t\\t\\t{\\n\\t\\t\\t\\tEditBus.send(new BufferUpdate(buffer,view,\\n\\t\\t\\t\\t\\tBufferUpdate.CLOSED));\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tif(!isExiting)\\n\\t\\t\\tnewFile(view);\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\treturn true;\\n\\t} \\n\\tpublic static void saveAllBuffers(View view)\\n\\t{\\n\\t\\tsaveAllBuffers(view,jEdit.getBooleanProperty(\\\"confirmSaveAll\\\"));\\n\\t} \\n\\tpublic static void saveAllBuffers(View view, boolean confirm)\\n\\t{\\n\\t\\tif(confirm)\\n\\t\\t{\\n\\t\\t\\tint result = GUIUtilities.confirm(view,\\\"saveall\\\",null,\\n\\t\\t\\t\\tJOptionPane.YES_NO_OPTION,\\n\\t\\t\\t\\tJOptionPane.QUESTION_MESSAGE);\\n\\t\\t\\tif(result != JOptionPane.YES_OPTION)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tBuffer current = view.getBuffer();\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(buffer.isDirty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(buffer.isNewFile())\\n\\t\\t\\t\\t\\tview.setBuffer(buffer);\\n\\t\\t\\t\\tbuffer.save(view,null,true);\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tview.setBuffer(current);\\n\\t} \\n\\tpublic static void reloadAllBuffers(final View view, boolean confirm)\\n\\t{\\n\\t\\tboolean hasDirty = false;\\n\\t\\tBuffer[] buffers = jEdit.getBuffers();\\n\\t\\tfor(int i = 0; i < buffers.length && hasDirty == false; i++)\\n\\t\\t\\thasDirty = buffers[i].isDirty();\\n\\t\\tif(confirm && hasDirty)\\n\\t\\t{\\n\\t\\t\\tint result = GUIUtilities.confirm(view,\\\"reload-all\\\",null,\\n\\t\\t\\t\\tJOptionPane.YES_NO_OPTION,\\n\\t\\t\\t\\tJOptionPane.QUESTION_MESSAGE);\\n\\t\\t\\tif(result != JOptionPane.YES_OPTION)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t\\t\\tView _view = viewsFirst;\\n\\t\\twhile(_view != null)\\n\\t\\t{\\n\\t\\t\\tEditPane[] panes = _view.getEditPanes();\\n\\t\\t\\tfor(int i = 0; i < panes.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tpanes[i].saveCaretInfo();\\n\\t\\t\\t}\\n\\t\\t\\t_view = _view.next;\\n\\t\\t}\\n\\t\\tfor(int i = 0; i < buffers.length; i++)\\n\\t\\t{\\n\\t\\t\\tBuffer buffer = buffers[i];\\n\\t\\t\\tbuffer.load(view,true);\\n\\t\\t}\\n\\t} \\n\\tpublic static Buffer _getBuffer(String path)\\n\\t{\\n\\t\\t\\t\\t\\t\\tif((VFSManager.getVFSForPath(path).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t}\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\treturn (Buffer)bufferHash.get(path);\\n\\t\\t}\\n\\t} \\n\\tpublic static Buffer getBuffer(String path)\\n\\t{\\n\\t\\treturn _getBuffer(MiscUtilities.resolveSymlinks(path));\\n\\t} \\n\\tpublic static Buffer[] getBuffers()\\n\\t{\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tBuffer[] buffers = new Buffer[bufferCount];\\n\\t\\t\\tBuffer buffer = buffersFirst;\\n\\t\\t\\tfor(int i = 0; i < bufferCount; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffers[i] = buffer;\\n\\t\\t\\t\\tbuffer = buffer.next;\\n\\t\\t\\t}\\n\\t\\t\\treturn buffers;\\n\\t\\t}\\n\\t} \\n\\tpublic static int getBufferCount()\\n\\t{\\n\\t\\treturn bufferCount;\\n\\t} \\n\\tpublic static Buffer getFirstBuffer()\\n\\t{\\n\\t\\treturn buffersFirst;\\n\\t} \\n\\tpublic static Buffer getLastBuffer()\\n\\t{\\n\\t\\treturn buffersLast;\\n\\t} \\n\\tpublic static void checkBufferStatus(View view)\\n\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tboolean showDialogSetting = getBooleanProperty(\\n\\t\\t\\t\\\"autoReloadDialog\\\");\\n\\t\\t\\t\\tboolean autoReloadSetting = getBooleanProperty(\\n\\t\\t\\t\\\"autoReload\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tView _view = viewsFirst;\\n\\t\\twhile(_view != null)\\n\\t\\t{\\n\\t\\t\\tEditPane[] editPanes = _view.getEditPanes();\\n\\t\\t\\tfor(int i = 0; i < editPanes.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\teditPanes[i].saveCaretInfo();\\n\\t\\t\\t}\\n\\t\\t\\t_view = _view.next;\\n\\t\\t}\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\tint[] states = new int[bufferCount];\\n\\t\\tint i = 0;\\n\\t\\tboolean show = false;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tstates[i] = buffer.checkFileStatus(view);\\n\\t\\t\\tswitch(states[i])\\n\\t\\t\\t{\\n\\t\\t\\tcase Buffer.FILE_CHANGED:\\n\\t\\t\\t\\tif(autoReloadSetting\\n\\t\\t\\t\\t\\t&& showDialogSetting\\n\\t\\t\\t\\t\\t&& !buffer.isDirty())\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbuffer.load(view,true);\\n\\t\\t\\t\\t}\\n\\t\\t\\tcase Buffer.FILE_DELETED:\\n\\t\\t\\t\\tshow = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tif(show && showDialogSetting)\\n\\t\\t\\tnew FilesChangedDialog(view,states,autoReloadSetting);\\n\\t} \\n\\tpublic static InputHandler getInputHandler()\\n\\t{\\n\\t\\treturn inputHandler;\\n\\t} \\n\\tpublic static View newView(View view)\\n\\t{\\n\\t\\treturn newView(view,null,false);\\n\\t} \\n\\tpublic static View newView(View view, Buffer buffer)\\n\\t{\\n\\t\\treturn newView(view,buffer,false);\\n\\t} \\n\\tpublic static View newView(View view, Buffer buffer, boolean plainView)\\n\\t{\\n\\t\\tView.ViewConfig config;\\n\\t\\tif(view != null && (plainView == view.isPlainView()))\\n\\t\\t\\tconfig = view.getViewConfig();\\n\\t\\telse\\n\\t\\t\\tconfig = new View.ViewConfig(plainView);\\n\\t\\treturn newView(view,buffer,config);\\n\\t} \\n\\tpublic static View newView(View view, Buffer buffer, View.ViewConfig config)\\n\\t{\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tif(view != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tview.showWaitCursor();\\n\\t\\t\\t\\tview.getEditPane().saveCaretInfo();\\n\\t\\t\\t}\\n\\t\\t\\tView newView = new View(buffer,config);\\n\\t\\t\\taddViewToList(newView);\\n\\t\\t\\tif(!config.plainView)\\n\\t\\t\\t{\\n\\t\\t\\t\\tDockableWindowManager wm = newView.getDockableWindowManager();\\n\\t\\t\\t\\tif(config.top != null\\n\\t\\t\\t\\t\\t&& config.top.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.top);\\n\\t\\t\\t\\tif(config.left != null\\n\\t\\t\\t\\t\\t&& config.left.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.left);\\n\\t\\t\\t\\tif(config.bottom != null\\n\\t\\t\\t\\t\\t&& config.bottom.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.bottom);\\n\\t\\t\\t\\tif(config.right != null\\n\\t\\t\\t\\t\\t&& config.right.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.right);\\n\\t\\t\\t}\\n\\t\\t\\tnewView.pack();\\n\\t\\t\\tif(config.width != 0 && config.height != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tRectangle desired = new Rectangle(\\n\\t\\t\\t\\t\\tconfig.x,config.y,config.width,\\n\\t\\t\\t\\t\\tconfig.height);\\n\\t\\t\\t\\tif(OperatingSystem.isX11() && Debug.GEOMETRY_WORKAROUND)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tnew GUIUtilities.UnixWorkaround(newView,\\n\\t\\t\\t\\t\\t\\t\\\"view\\\",desired,config.extState);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tnewView.setBounds(desired);\\n\\t\\t\\t\\t\\tnewView.setExtendedState(config.extState);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tGUIUtilities.centerOnScreen(newView);\\n\\t\\t\\tEditBus.send(new ViewUpdate(newView,ViewUpdate.CREATED));\\n\\t\\t\\tnewView.setVisible(true);\\n\\t\\t\\t\\t\\t\\tif(newView == viewsFirst)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnewView.getTextArea().requestFocus();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif(settingsDirectory != null && getBooleanProperty(\\\"firstTime\\\"))\\n\\t\\t\\t\\t\\tnew HelpViewer();\\n\\t\\t\\t\\telse if(jEdit.getBooleanProperty(\\\"tip.show\\\"))\\n\\t\\t\\t\\t\\tnew TipOfTheDay(newView);\\n\\t\\t\\t\\tsetBooleanProperty(\\\"firstTime\\\",false);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tGUIUtilities.requestFocus(newView,newView.getTextArea());\\n\\t\\t\\treturn newView;\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\tif(view != null)\\n\\t\\t\\t\\tview.hideWaitCursor();\\n\\t\\t}\\n\\t} \\n\\tpublic static void closeView(View view)\\n\\t{\\n\\t\\tcloseView(view,true);\\n\\t} \\n\\tpublic static View[] getViews()\\n\\t{\\n\\t\\tView[] views = new View[viewCount];\\n\\t\\tView view = viewsFirst;\\n\\t\\tfor(int i = 0; i < viewCount; i++)\\n\\t\\t{\\n\\t\\t\\tviews[i] = view;\\n\\t\\t\\tview = view.next;\\n\\t\\t}\\n\\t\\treturn views;\\n\\t} \\n\\tpublic static int getViewCount()\\n\\t{\\n\\t\\treturn viewCount;\\n\\t} \\n\\tpublic static View getFirstView()\\n\\t{\\n\\t\\treturn viewsFirst;\\n\\t} \\n\\tpublic static View getLastView()\\n\\t{\\n\\t\\treturn viewsLast;\\n\\t} \\n\\tpublic static View getActiveView()\\n\\t{\\n\\t\\tif(activeView == null)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\treturn viewsFirst;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\treturn activeView;\\n\\t} \\n\\tpublic static boolean isMainThread()\\n\\t{\\n\\t\\treturn (Thread.currentThread() == mainThread);\\n\\t} \\n\\tpublic static boolean isBackgroundModeEnabled()\\n\\t{\\n\\t\\treturn background;\\n\\t} \\n\\tpublic static void showMemoryDialog(View view)\\n\\t{\\n\\t\\tRuntime rt = Runtime.getRuntime();\\n\\t\\tint before = (int) (rt.freeMemory() / 1024);\\n\\t\\tSystem.gc();\\n\\t\\tint after = (int) (rt.freeMemory() / 1024);\\n\\t\\tint total = (int) (rt.totalMemory() / 1024);\\n\\t\\tJProgressBar progress = new JProgressBar(0,total);\\n\\t\\tprogress.setValue(total - after);\\n\\t\\tprogress.setStringPainted(true);\\n\\t\\tprogress.setString(jEdit.getProperty(\\\"memory-status.use\\\",\\n\\t\\t\\tnew Object[] { new Integer(total - after),\\n\\t\\t\\tnew Integer(total) }));\\n\\t\\tObject[] message = new Object[4];\\n\\t\\tmessage[0] = getProperty(\\\"memory-status.gc\\\",\\n\\t\\t\\tnew Object[] { new Integer(after - before) });\\n\\t\\tmessage[1] = Box.createVerticalStrut(12);\\n\\t\\tmessage[2] = progress;\\n\\t\\tmessage[3] = Box.createVerticalStrut(6);\\n\\t\\tJOptionPane.showMessageDialog(view,message,\\n\\t\\t\\tjEdit.getProperty(\\\"memory-status.title\\\"),\\n\\t\\t\\tJOptionPane.INFORMATION_MESSAGE);\\n\\t} \\n\\tpublic static String getJEditHome()\\n\\t{\\n\\t\\treturn jEditHome;\\n\\t} \\n\\tpublic static String getSettingsDirectory()\\n\\t{\\n\\t\\treturn settingsDirectory;\\n\\t} \\n\\tpublic static String getJARCacheDirectory()\\n\\t{\\n\\t\\treturn jarCacheDirectory;\\n\\t} \\n\\tpublic static void backupSettingsFile(File file)\\n\\t{\\n\\t\\tif(settingsDirectory == null)\\n\\t\\t\\treturn;\\n\\t\\tString backupDir = MiscUtilities.constructPath(\\n\\t\\t\\tsettingsDirectory,\\\"settings-backup\\\");\\n\\t\\tFile dir = new File(backupDir);\\n\\t\\tif(!dir.exists())\\n\\t\\t\\tdir.mkdirs();\\n\\t\\tMiscUtilities.saveBackup(file,5,null,\\\"~\\\",backupDir);\\n\\t} \\n\\tpublic static void saveSettings()\\n\\t{\\n\\t\\tif(settingsDirectory == null)\\n\\t\\t\\treturn;\\n\\t\\tAbbrevs.save();\\n\\t\\tFavoritesVFS.saveFavorites();\\n\\t\\tHistoryModel.saveHistory();\\n\\t\\tRegisters.saveRegisters();\\n\\t\\tSearchAndReplace.save();\\n\\t\\tBufferHistory.save();\\n\\t\\tKillRing.save();\\n\\t\\tFile file1 = new File(MiscUtilities.constructPath(\\n\\t\\t\\tsettingsDirectory,\\\"#properties#save#\\\"));\\n\\t\\tFile file2 = new File(MiscUtilities.constructPath(\\n\\t\\t\\tsettingsDirectory,\\\"properties\\\"));\\n\\t\\tif(file2.exists() && file2.lastModified() != propsModTime)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.WARNING,jEdit.class,file2 + \\\" changed\\\"\\n\\t\\t\\t\\t+ \\\" on disk; will not save user properties\\\");\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tbackupSettingsFile(file2);\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tOutputStream out = new FileOutputStream(file1);\\n\\t\\t\\t\\tpropMgr.saveUserProps(out);\\n\\t\\t\\t\\tfile2.delete();\\n\\t\\t\\t\\tfile1.renameTo(file2);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t}\\n\\t\\t\\tpropsModTime = file2.lastModified();\\n\\t\\t}\\n\\t} \\n\\tpublic static void exit(View view, boolean reallyExit)\\n\\t{\\n\\t\\t\\t\\tif(view == null)\\n\\t\\t\\tview = activeView;\\n\\t\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\t\\t\\tEditBus.send(new EditorExitRequested(view));\\n\\t\\t\\t\\t\\t\\treallyExit |= !background;\\n\\t\\tPerspectiveManager.savePerspective(false);\\n\\t\\t\\t\\tif(!closeAllBuffers(view,reallyExit))\\n\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\tif(!reallyExit)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tview = viewsFirst;\\n\\t\\t\\twhile(view != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tcloseView(view,false);\\n\\t\\t\\t\\tview = view.next;\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsaveSettings();\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\tif(view != null)\\n\\t\\t\\t\\tview.close();\\n\\t\\t\\t\\t\\t\\tAutosave.stop();\\n\\t\\t\\t\\t\\t\\tif(server != null)\\n\\t\\t\\t\\tserver.stopServer();\\n\\t\\t\\t\\t\\t\\tPluginJAR[] plugins = getPluginJARs();\\n\\t\\t\\tfor(int i = 0; i < plugins.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tremovePluginJAR(plugins[i],true);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tEditBus.send(new EditorExiting(null));\\n\\t\\t\\t\\t\\t\\tsaveSettings();\\n\\t\\t\\t\\t\\t\\tLog.closeStream();\\n\\t\\t\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t}\\n\\t} \\n\\tpublic static EditServer getEditServer()\\n\\t{\\n\\t\\treturn server;\\n\\t} \\n\\tstatic void updatePosition(String oldPath, Buffer buffer)\\n\\t{\\n\\t\\tif((VFSManager.getVFSForPath(oldPath).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\toldPath = oldPath.toLowerCase();\\n\\t\\t}\\n\\t\\tbufferHash.remove(oldPath);\\n\\t\\tString path = buffer.getSymlinkPath();\\n\\t\\tif((VFSManager.getVFSForPath(path).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t}\\n\\t\\tbufferHash.put(path,buffer);\\n\\t\\tif(sortBuffers)\\n\\t\\t{\\n\\t\\t\\tremoveBufferFromList(buffer);\\n\\t\\t\\taddBufferToList(buffer);\\n\\t\\t}\\n\\t} \\n\\tpublic static void addMode(Mode mode)\\n\\t{\\n\\t\\tmodes.addElement(mode);\\n\\t} \\n\\t static void loadMode(Mode mode)\\n\\t{\\n\\t\\tfinal String fileName = (String)mode.getProperty(\\\"file\\\");\\n\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"Loading edit mode \\\" + fileName);\\n\\t\\tfinal XmlParser parser = new XmlParser();\\n\\t\\tXModeHandler xmh = new XModeHandler(mode.getName())\\n\\t\\t{\\n\\t\\t\\tpublic void error(String what, Object subst)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint line = parser.getLineNumber();\\n\\t\\t\\t\\tint column = parser.getColumnNumber();\\n\\t\\t\\t\\tString msg;\\n\\t\\t\\t\\tif(subst == null)\\n\\t\\t\\t\\t\\tmsg = jEdit.getProperty(\\\"xmode-error.\\\" + what);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmsg = jEdit.getProperty(\\\"xmode-error.\\\" + what,\\n\\t\\t\\t\\t\\t\\tnew String[] { subst.toString() });\\n\\t\\t\\t\\t\\tif(subst instanceof Throwable)\\n\\t\\t\\t\\t\\t\\tLog.log(Log.ERROR,this,subst);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tObject[] args = { fileName, new Integer(line),\\n\\t\\t\\t\\t\\tnew Integer(column), msg };\\n\\t\\t\\t\\tGUIUtilities.error(null,\\\"xmode-error\\\",args);\\n\\t\\t\\t}\\n\\t\\t\\tpublic TokenMarker getTokenMarker(String modeName)\\n\\t\\t\\t{\\n\\t\\t\\t\\tMode mode = getMode(modeName);\\n\\t\\t\\t\\tif(mode == null)\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\treturn mode.getTokenMarker();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tmode.setTokenMarker(xmh.getTokenMarker());\\n\\t\\tReader grammar = null;\\n\\t\\tparser.setHandler(xmh);\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tgrammar = new BufferedReader(new FileReader(fileName));\\n\\t\\t\\tparser.parse(null, null, grammar);\\n\\t\\t\\tmode.setProperties(xmh.getModeProperties());\\n\\t\\t}\\n\\t\\tcatch (Throwable e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR, jEdit.class, e);\\n\\t\\t\\tif (e instanceof XmlException)\\n\\t\\t\\t{\\n\\t\\t\\t\\tXmlException xe = (XmlException) e;\\n\\t\\t\\t\\tint line = xe.getLine();\\n\\t\\t\\t\\tString message = xe.getMessage();\\n\\t\\t\\t\\tObject[] args = { fileName, new Integer(line), null,\\n\\t\\t\\t\\t\\tmessage };\\n\\t\\t\\t\\tGUIUtilities.error(null,\\\"xmode-error\\\",args);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(grammar != null)\\n\\t\\t\\t\\t\\tgrammar.close();\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tstatic void addPluginProps(Properties map)\\n\\t{\\n\\t\\tpropMgr.addPluginProps(map);\\n\\t} \\n\\t\\tstatic void removePluginProps(Properties map)\\n\\t{\\n\\t\\tpropMgr.removePluginProps(map);\\n\\t} \\n\\t\\tstatic void pluginError(String path, String messageProp,\\n\\t\\tObject[] args)\\n\\t{\\n\\t\\tsynchronized(pluginErrorLock)\\n\\t\\t{\\n\\t\\t\\tif(pluginErrors == null)\\n\\t\\t\\t\\tpluginErrors = new Vector();\\n\\t\\t\\tErrorListDialog.ErrorEntry newEntry =\\n\\t\\t\\t\\tnew ErrorListDialog.ErrorEntry(\\n\\t\\t\\t\\tpath,messageProp,args);\\n\\t\\t\\tfor(int i = 0; i < pluginErrors.size(); i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(pluginErrors.get(i).equals(newEntry))\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tpluginErrors.addElement(newEntry);\\n\\t\\t\\tif(startupDone)\\n\\t\\t\\t{\\n\\t\\t\\t\\tSwingUtilities.invokeLater(new Runnable()\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tpublic void run()\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tshowPluginErrorDialog();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tstatic void setActiveView(View view)\\n\\t{\\n\\t\\tjEdit.activeView = view;\\n\\t} \\n\\t\\tprivate static String jEditHome;\\n\\tprivate static String settingsDirectory;\\n\\tprivate static String jarCacheDirectory;\\n\\tprivate static long propsModTime;\\n\\tprivate static PropertyManager propMgr;\\n\\tprivate static EditServer server;\\n\\tprivate static boolean background;\\n\\tprivate static ActionContext actionContext;\\n\\tprivate static ActionSet builtInActionSet;\\n\\tprivate static Vector pluginErrors;\\n\\tprivate static Object pluginErrorLock = new Object();\\n\\tprivate static Vector jars;\\n\\tprivate static Vector modes;\\n\\tprivate static boolean saveCaret;\\n\\tprivate static InputHandler inputHandler;\\n\\t\\tprivate static boolean sortBuffers;\\n\\tprivate static boolean sortByName;\\n\\tprivate static int bufferCount;\\n\\tprivate static Buffer buffersFirst;\\n\\tprivate static Buffer buffersLast;\\n\\tprivate static Map bufferHash;\\n\\t\\tprivate static Object bufferListLock = new Object();\\n\\t\\tprivate static int viewCount;\\n\\tprivate static View viewsFirst;\\n\\tprivate static View viewsLast;\\n\\tprivate static View activeView;\\n\\tprivate static boolean startupDone;\\n\\tprivate static Thread mainThread;\\n\\tprivate jEdit() {}\\n\\t\\tprivate static void usage()\\n\\t{\\n\\t\\tSystem.out.println(\\\"Usage: jedit [<options>] [<files>]\\\");\\n\\t\\tSystem.out.println(\\\"\\t<file> +marker:<marker>: Positions caret\\\"\\n\\t\\t\\t+ \\\" at marker <marker>\\\");\\n\\t\\tSystem.out.println(\\\"\\t<file> +line:<line>: Positions caret\\\"\\n\\t\\t\\t+ \\\" at line number <line>\\\");\\n\\t\\tSystem.out.println(\\\"\\t--: End of options\\\");\\n\\t\\tSystem.out.println(\\\"\\t-background: Run in background mode\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nobackground: Disable background mode (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-gui: Only if running in background mode; open initial view (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nogui: Only if running in background mode; don't open initial view\\\");\\n\\t\\tSystem.out.println(\\\"\\t-log=<level>: Log messages with level equal to or higher than this to\\\");\\n\\t\\tSystem.out.println(\\\"\\t standard error. <level> must be between 1 and 9. Default is 7.\\\");\\n\\t\\tSystem.out.println(\\\"\\t-newplainview: Client instance opens a new plain view\\\");\\n\\t\\tSystem.out.println(\\\"\\t-newview: Client instance opens a new view (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-plugins: Load plugins (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-noplugins: Don't load any plugins\\\");\\n\\t\\tSystem.out.println(\\\"\\t-restore: Restore previously open files (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-norestore: Don't restore previously open files\\\");\\n\\t\\tSystem.out.println(\\\"\\t-reuseview: Client instance reuses existing view\\\");\\n\\t\\tSystem.out.println(\\\"\\t-quit: Quit a running instance\\\");\\n\\t\\tSystem.out.println(\\\"\\t-run=<script>: Run the specified BeanShell script\\\");\\n\\t\\tSystem.out.println(\\\"\\t-server: Read/write server info from/to $HOME/.jedit/server (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-server=<name>: Read/write server info from/to $HOME/.jedit/<name>\\\");\\n\\t\\tSystem.out.println(\\\"\\t-noserver: Don't start edit server\\\");\\n\\t\\tSystem.out.println(\\\"\\t-settings=<path>: Load user-specific settings from <path>\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nosettings: Don't load user-specific settings\\\");\\n\\t\\tSystem.out.println(\\\"\\t-startupscripts: Run startup scripts (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nostartupscripts: Don't run startup scripts\\\");\\n\\t\\tSystem.out.println(\\\"\\t-usage: Print this message and exit\\\");\\n\\t\\tSystem.out.println(\\\"\\t-version: Print jEdit version and exit\\\");\\n\\t\\tSystem.out.println(\\\"\\t-wait: Wait until the user closes the specified buffer in the server\\\");\\n\\t\\tSystem.out.println(\\\"\\t instance. Does nothing if passed to the initial jEdit instance.\\\");\\n\\t\\tSystem.out.println();\\n\\t\\tSystem.out.println(\\\"Report bugs to Slava Pestov <slava@jedit.org>.\\\");\\n\\t} \\n\\t\\tprivate static void version()\\n\\t{\\n\\t\\tSystem.out.println(\\\"jEdit \\\" + getVersion());\\n\\t} \\n\\tprivate static String makeServerScript(boolean wait,\\n\\t\\tboolean restore, boolean newView,\\n\\t\\tboolean newPlainView, String[] args,\\n\\t\\tString scriptFile)\\n\\t{\\n\\t\\tStringBuffer script = new StringBuffer();\\n\\t\\tString userDir = System.getProperty(\\\"user.dir\\\");\\n\\t\\tscript.append(\\\"parent = \\\\\\\"\\\");\\n\\t\\tscript.append(MiscUtilities.charsToEscapes(userDir));\\n\\t\\tscript.append(\\\"\\\\\\\";\\\\n\\\");\\n\\t\\tscript.append(\\\"args = new String[\\\");\\n\\t\\tscript.append(args.length);\\n\\t\\tscript.append(\\\"];\\\\n\\\");\\n\\t\\tfor(int i = 0; i < args.length; i++)\\n\\t\\t{\\n\\t\\t\\tscript.append(\\\"args[\\\");\\n\\t\\t\\tscript.append(i);\\n\\t\\t\\tscript.append(\\\"] = \\\");\\n\\t\\t\\tif(args[i] == null)\\n\\t\\t\\t\\tscript.append(\\\"null\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tscript.append('\\\"');\\n\\t\\t\\t\\tscript.append(MiscUtilities.charsToEscapes(args[i]));\\n\\t\\t\\t\\tscript.append('\\\"');\\n\\t\\t\\t}\\n\\t\\t\\tscript.append(\\\";\\\\n\\\");\\n\\t\\t}\\n\\t\\tscript.append(\\\"view = jEdit.getLastView();\\\\n\\\");\\n\\t\\tscript.append(\\\"buffer = EditServer.handleClient(\\\"\\n\\t\\t\\t+ restore + \\\",\\\" + newView + \\\",\\\" + newPlainView +\\n\\t\\t\\t\\\",parent,args);\\\\n\\\");\\n\\t\\tscript.append(\\\"if(buffer != null && \\\" + wait + \\\") {\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tbuffer.setWaitSocket(socket);\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tdoNotCloseSocket = true;\\\\n\\\");\\n\\t\\tscript.append(\\\"}\\\\n\\\");\\n\\t\\tscript.append(\\\"if(view != jEdit.getLastView() && \\\" + wait + \\\") {\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tjEdit.getLastView().setWaitSocket(socket);\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tdoNotCloseSocket = true;\\\\n\\\");\\n\\t\\tscript.append(\\\"}\\\\n\\\");\\n\\t\\tscript.append(\\\"if(doNotCloseSocket == void)\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tsocket.close();\\\\n\\\");\\n\\t\\tif(scriptFile != null)\\n\\t\\t{\\n\\t\\t\\tscriptFile = MiscUtilities.constructPath(userDir,scriptFile);\\n\\t\\t\\tscript.append(\\\"BeanShell.runScript(view,\\\\\\\"\\\"\\n\\t\\t\\t\\t+ MiscUtilities.charsToEscapes(scriptFile)\\n\\t\\t\\t\\t+ \\\"\\\\\\\",null,this.namespace);\\\\n\\\");\\n\\t\\t}\\n\\t\\treturn script.toString();\\n\\t} \\n\\tprivate static void initMisc()\\n\\t{\\n\\t\\tjars = new Vector();\\n\\t\\tactionContext = new ActionContext()\\n\\t\\t{\\n\\t\\t\\tpublic void invokeAction(EventObject evt,\\n\\t\\t\\t\\tEditAction action)\\n\\t\\t\\t{\\n\\t\\t\\t\\tView view = GUIUtilities.getView(\\n\\t\\t\\t\\t\\t(Component)evt.getSource());\\n\\t\\t\\t\\tboolean actionBarVisible;\\n\\t\\t\\t\\tif(view.getActionBar() == null\\n\\t\\t\\t\\t\\t|| !view.getActionBar().isShowing())\\n\\t\\t\\t\\t\\tactionBarVisible = false;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tactionBarVisible = view.getActionBar()\\n\\t\\t\\t\\t\\t\\t.isVisible();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tview.getInputHandler().invokeAction(action);\\n\\t\\t\\t\\tif(actionBarVisible)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tActionBar actionBar = view\\n\\t\\t\\t\\t\\t\\t.getActionBar();\\n\\t\\t\\t\\t\\tif(actionBar != null)\\n\\t\\t\\t\\t\\t\\tview.removeToolBar(actionBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tbufferHash = new HashMap();\\n\\t\\tinputHandler = new DefaultInputHandler(null);\\n\\t\\t\\t\\tSystem.getProperties().put(\\\"java.protocol.handler.pkgs\\\",\\n\\t\\t\\t\\\"org.gjt.sp.jedit.proto|\\\" +\\n\\t\\t\\tSystem.getProperty(\\\"java.protocol.handler.pkgs\\\",\\\"\\\"));\\n\\t\\t\\t\\tString userAgent = \\\"jEdit/\\\" + getVersion()\\n\\t\\t\\t+ \\\" (Java \\\" + System.getProperty(\\\"java.version\\\")\\n\\t\\t\\t+ \\\". \\\" + System.getProperty(\\\"java.vendor\\\")\\n\\t\\t\\t+ \\\"; \\\" + System.getProperty(\\\"os.arch\\\") + \\\")\\\";\\n\\t\\tSystem.getProperties().put(\\\"http.agent\\\",userAgent);\\n\\t\\tjEditHome = System.getProperty(\\\"jedit.home\\\");\\n\\t\\tif(jEditHome == null)\\n\\t\\t{\\n\\t\\t\\tString classpath = System\\n\\t\\t\\t\\t.getProperty(\\\"java.class.path\\\");\\n\\t\\t\\tint index = classpath.toLowerCase()\\n\\t\\t\\t\\t.indexOf(\\\"jedit.jar\\\");\\n\\t\\t\\tint start = classpath.lastIndexOf(File\\n\\t\\t\\t\\t.pathSeparator,index) + 1;\\n\\t\\t\\t\\t\\t\\t if(classpath.equalsIgnoreCase(\\\"jedit.jar\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tjEditHome = System.getProperty(\\\"user.dir\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse if(index > start)\\n\\t\\t\\t{\\n\\t\\t\\t\\tjEditHome = classpath.substring(start,\\n\\t\\t\\t\\t\\tindex - 1);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tjEditHome = System.getProperty(\\\"user.dir\\\");\\n\\t\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"jedit.jar not in class path!\\\");\\n\\t\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"Assuming jEdit is installed in \\\"\\n\\t\\t\\t\\t\\t\\t+ jEditHome + \\\".\\\");\\n\\t\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"Override with jedit.home \\\"\\n\\t\\t\\t\\t\\t\\t+ \\\"system property.\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tjEditHome = MiscUtilities.resolveSymlinks(jEditHome);\\n\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"jEdit home directory is \\\" + jEditHome);\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tjarCacheDirectory = MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"jars-cache\\\");\\n\\t\\t\\tnew File(jarCacheDirectory).mkdirs();\\n\\t\\t}\\n\\t\\t\\t\\t\\t\\tEditBus.addToBus(new SettingsReloader());\\n\\t\\t\\t\\t\\t\\tSwingUtilities.invokeLater(new Runnable()\\n\\t\\t{\\n\\t\\t\\tpublic void run()\\n\\t\\t\\t{\\n\\t\\t\\t\\tThread.currentThread().setContextClassLoader(\\n\\t\\t\\t\\t\\tnew JARClassLoader());\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} \\n\\tprivate static void initSystemProperties()\\n\\t{\\n\\t\\tpropMgr = new PropertyManager();\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tpropMgr.loadSystemProps(jEdit.class.getResourceAsStream(\\n\\t\\t\\t\\t\\\"/org/gjt/sp/jedit/jedit.props\\\"));\\n\\t\\t\\tpropMgr.loadSystemProps(jEdit.class.getResourceAsStream(\\n\\t\\t\\t\\t\\\"/org/gjt/sp/jedit/jedit_gui.props\\\"));\\n\\t\\t\\tpropMgr.loadSystemProps(jEdit.class.getResourceAsStream(\\n\\t\\t\\t\\t\\\"/org/gjt/sp/jedit/jedit_keys.props\\\"));\\n\\t\\t}\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\n\\t\\t\\t\\t\\\"Error while loading system properties!\\\");\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\n\\t\\t\\t\\t\\\"One of the following property files could not be loaded:\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"- jedit.props\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"- jedit_gui.props\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"- jedit_keys.props\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"jedit.jar is probably corrupt.\\\");\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\tSystem.exit(1);\\n\\t\\t}\\n\\t} \\n\\tprivate static void initSiteProperties()\\n\\t{\\n\\t\\tString siteSettingsDirectory = MiscUtilities.constructPath(\\n\\t\\t\\tjEditHome, \\\"properties\\\");\\n\\t\\tFile siteSettings = new File(siteSettingsDirectory);\\n\\t\\tif (!(siteSettings.exists() && siteSettings.isDirectory()))\\n\\t\\t\\treturn;\\n\\t\\tString[] snippets = siteSettings.list();\\n\\t\\tif (snippets == null)\\n\\t\\t\\treturn;\\n\\t\\tMiscUtilities.quicksort(snippets,\\n\\t\\t\\tnew MiscUtilities.StringICaseCompare());\\n\\t\\tfor (int i = 0; i < snippets.length; ++i)\\n\\t\\t{\\n\\t\\t\\tString snippet = snippets[i];\\n\\t\\t\\tif(!snippet.toLowerCase().endsWith(\\\".props\\\"))\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tString path = MiscUtilities.constructPath(\\n\\t\\t\\t\\t\\tsiteSettingsDirectory,snippet);\\n\\t\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,\\n\\t\\t\\t\\t\\t\\\"Loading site snippet: \\\" + path);\\n\\t\\t\\t\\tpropMgr.loadSiteProps(new FileInputStream(new File(path)));\\n\\t\\t\\t}\\n\\t\\t\\tcatch(FileNotFoundException fnf)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,fnf);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\\"Cannot load site snippet \\\"\\n\\t\\t\\t\\t\\t+ snippet);\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void initResources()\\n\\t{\\n\\t\\tbuiltInActionSet = new ActionSet(null,null,null,\\n\\t\\t\\tjEdit.class.getResource(\\\"actions.xml\\\"));\\n\\t\\tbuiltInActionSet.setLabel(getProperty(\\\"action-set.jEdit\\\"));\\n\\t\\tbuiltInActionSet.load();\\n\\t\\tactionContext.addActionSet(builtInActionSet);\\n\\t\\tDockableWindowManager.loadDockableWindows(null,\\n\\t\\t\\tjEdit.class.getResource(\\\"dockables.xml\\\"),\\n\\t\\t\\tnull);\\n\\t\\tServiceManager.loadServices(null,\\n\\t\\t\\tjEdit.class.getResource(\\\"services.xml\\\"),\\n\\t\\t\\tnull);\\n\\t} \\n\\tprivate static void initPlugins()\\n\\t{\\n\\t\\tif(jEditHome != null)\\n\\t\\t{\\n\\t\\t\\taddPluginJARsFromDirectory(MiscUtilities.constructPath(\\n\\t\\t\\t\\tjEditHome,\\\"jars\\\"));\\n\\t\\t}\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile jarsDirectory = new File(settingsDirectory,\\\"jars\\\");\\n\\t\\t\\tif(!jarsDirectory.exists())\\n\\t\\t\\t\\tjarsDirectory.mkdir();\\n\\t\\t\\taddPluginJARsFromDirectory(jarsDirectory.getPath());\\n\\t\\t}\\n\\t\\tPluginJAR[] jars = getPluginJARs();\\n\\t\\tfor(int i = 0; i < jars.length; i++)\\n\\t\\t{\\n\\t\\t\\tjars[i].checkDependencies();\\n\\t\\t}\\n\\t} \\n\\tprivate static void initUserProperties()\\n\\t{\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile file = new File(MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"properties\\\"));\\n\\t\\t\\tpropsModTime = file.lastModified();\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tpropMgr.loadUserProps(\\n\\t\\t\\t\\t\\tnew FileInputStream(file));\\n\\t\\t\\t}\\n\\t\\t\\tcatch(FileNotFoundException fnf)\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static String fontStyleToString(int style)\\n\\t{\\n\\t\\tif(style == 0)\\n\\t\\t\\treturn \\\"PLAIN\\\";\\n\\t\\telse if(style == Font.BOLD)\\n\\t\\t\\treturn \\\"BOLD\\\";\\n\\t\\telse if(style == Font.ITALIC)\\n\\t\\t\\treturn \\\"ITALIC\\\";\\n\\t\\telse if(style == (Font.BOLD | Font.ITALIC))\\n\\t\\t\\treturn \\\"BOLDITALIC\\\";\\n\\t\\telse\\n\\t\\t\\tthrow new RuntimeException(\\\"Invalid style: \\\" + style);\\n\\t} \\n\\t\\tprivate static String fontToString(Font font)\\n\\t{\\n\\t\\treturn font.getFamily()\\n\\t\\t\\t+ \\\"-\\\"\\n\\t\\t\\t+ fontStyleToString(font.getStyle())\\n\\t\\t\\t+ \\\"-\\\"\\n\\t\\t\\t+ font.getSize();\\n\\t} \\t\\n\\tprivate static void initPLAF()\\n\\t{\\n\\t\\tFont primaryFont = jEdit.getFontProperty(\\n\\t\\t\\t\\\"metal.primary.font\\\");\\n\\t\\tif(primaryFont != null)\\n\\t\\t{\\n\\t\\t\\tString primaryFontString =\\n\\t\\t\\t\\tfontToString(primaryFont);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.controlFont\\\",\\n\\t\\t\\t\\tprimaryFontString);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.menuFont\\\",\\n\\t\\t\\t\\tprimaryFontString);\\n\\t\\t}\\n\\t\\tFont secondaryFont = jEdit.getFontProperty(\\n\\t\\t\\t\\\"metal.secondary.font\\\");\\n\\t\\tif(secondaryFont != null)\\n\\t\\t{\\n\\t\\t\\tString secondaryFontString =\\n\\t\\t\\t\\tfontToString(secondaryFont);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.systemFont\\\",\\n\\t\\t\\t\\tsecondaryFontString);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.userFont\\\",\\n\\t\\t\\t\\tsecondaryFontString);\\n\\t\\t}\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tString lf = getProperty(\\\"lookAndFeel\\\");\\n\\t\\t\\tif(lf != null && lf.length() != 0)\\n\\t\\t\\t\\tUIManager.setLookAndFeel(lf);\\n\\t\\t\\telse if(OperatingSystem.isMacOS())\\n\\t\\t\\t{\\n\\t\\t\\t\\tUIManager.setLookAndFeel(UIManager\\n\\t\\t\\t\\t\\t.getSystemLookAndFeelClassName());\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tUIManager.setLookAndFeel(UIManager\\n\\t\\t\\t\\t\\t.getCrossPlatformLookAndFeelClassName());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t}\\n\\t\\tUIDefaults defaults = UIManager.getDefaults();\\n\\t\\t\\t\\tif(jEdit.getBooleanProperty(\\\"textColors\\\"))\\n\\t\\t{\\n\\t\\t\\tColor background = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.bgColor\\\"));\\n\\t\\t\\tColor foreground = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.fgColor\\\"));\\n\\t\\t\\tColor caretColor = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.caretColor\\\"));\\n\\t\\t\\tColor selectionColor = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.selectionColor\\\"));\\n\\t\\t\\tString[] prefixes = { \\\"TextField\\\", \\\"TextArea\\\", \\\"List\\\", \\\"Table\\\" };\\n\\t\\t\\tfor(int i = 0; i < prefixes.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tString prefix = prefixes[i];\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".disabledBackground\\\",background);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".background\\\",background);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".disabledForeground\\\",foreground);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".foreground\\\",foreground);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".caretForeground\\\",caretColor);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".selectionForeground\\\",foreground);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".selectionBackground\\\",selectionColor);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\tdefaults.put(\\\"Tree.background\\\",background);\\n\\t\\t\\tdefaults.put(\\\"Tree.foreground\\\",foreground);\\n\\t\\t\\tdefaults.put(\\\"Tree.textBackground\\\",background);\\n\\t\\t\\tdefaults.put(\\\"Tree.textForeground\\\",foreground);\\n\\t\\t\\tdefaults.put(\\\"Tree.selectionForeground\\\",foreground);\\n\\t\\t\\tdefaults.put(\\\"Tree.selectionBackground\\\",selectionColor);\\n\\t\\t}\\n\\t\\tdefaults.remove(\\\"SplitPane.border\\\");\\n\\t\\tdefaults.remove(\\\"SplitPaneDivider.border\\\");\\n\\t\\tJFrame.setDefaultLookAndFeelDecorated(\\n\\t\\t\\tgetBooleanProperty(\\\"decorate.frames\\\"));\\n\\t\\tJDialog.setDefaultLookAndFeelDecorated(\\n\\t\\t\\tgetBooleanProperty(\\\"decorate.dialogs\\\"));\\n\\t\\tKeyboardFocusManager.setCurrentKeyboardFocusManager(\\n\\t\\t\\tnew MyFocusManager());\\n\\t} \\n\\tprivate static void runStartupScripts(File directory)\\n\\t{\\n\\t\\tif (!directory.isDirectory())\\n\\t\\t\\treturn;\\n\\t\\tFile[] snippets = directory.listFiles();\\n\\t\\tif (snippets == null)\\n\\t\\t\\treturn;\\n\\t\\tMiscUtilities.quicksort(snippets,\\n\\t\\t\\tnew MiscUtilities.StringICaseCompare());\\n\\t\\tfor(int i = 0; i < snippets.length; ++i)\\n\\t\\t{\\n\\t\\t\\tFile snippet = snippets[i];\\n\\t\\t\\tMacros.Handler handler = Macros.getHandlerForPathName(\\n\\t\\t\\t\\tsnippet.getPath());\\n\\t\\t\\tif(handler == null)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tMacros.Macro newMacro = handler.createMacro(\\n\\t\\t\\t\\t\\tsnippet.getName(),\\n\\t\\t\\t\\t\\tsnippet.getPath());\\n\\t\\t\\t\\thandler.runMacro(null,newMacro,false);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void initProxy()\\n\\t{\\n\\t\\tboolean socksEnabled = jEdit.getBooleanProperty(\\\"socks.enabled\\\");\\n\\t\\tif(!socksEnabled)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,\\\"SOCKS proxy disabled\\\");\\n                        System.getProperties().remove(\\\"socksProxyHost\\\");\\n                        System.getProperties().remove(\\\"socksProxyPort\\\");\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tString socksHost = jEdit.getProperty(\\\"firewall.socks.host\\\");\\n\\t\\t\\tif( socksHost != null )\\n\\t\\t\\t{\\n\\t\\t\\t\\tSystem.setProperty(\\\"socksProxyHost\\\", socksHost);\\n\\t\\t\\t\\tLog.log(Log.DEBUG, jEdit.class,\\n\\t\\t\\t\\t\\t\\\"SOCKS proxy enabled: \\\" + socksHost);\\n                        }\\n\\t\\t\\tString socksPort =  jEdit.getProperty(\\\"firewall.socks.port\\\");\\n\\t\\t\\tif(socksPort != null)\\n\\t\\t\\t\\tSystem.setProperty(\\\"socksProxyPort\\\", socksPort);\\n\\t\\t}\\n\\t\\tboolean httpEnabled = jEdit.getBooleanProperty(\\\"firewall.enabled\\\");\\n\\t\\tif (!httpEnabled)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy disabled\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"proxySet\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"proxyHost\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"proxyPort\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"http.proxyHost\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"http.proxyPort\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"http.nonProxyHosts\\\");\\n\\t\\t\\tAuthenticator.setDefault(null);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\tString host = jEdit.getProperty(\\\"firewall.host\\\");\\n\\t\\t\\tif (host == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tSystem.setProperty(\\\"http.proxyHost\\\", host);\\n\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy enabled: \\\" + host);\\n\\t\\t\\t\\t\\t\\tString port = jEdit.getProperty(\\\"firewall.port\\\");\\n\\t\\t\\tif (port != null)\\n\\t\\t\\t\\tSystem.setProperty(\\\"http.proxyPort\\\", port);\\n\\t\\t\\t\\t\\t\\tString nonProxyHosts = jEdit.getProperty(\\\"firewall.nonProxyHosts\\\");\\n\\t\\t\\tif (nonProxyHosts != null)\\n\\t\\t\\t\\tSystem.setProperty(\\\"http.nonProxyHosts\\\", nonProxyHosts);\\n\\t\\t\\t\\t\\t\\tString username = jEdit.getProperty(\\\"firewall.user\\\");\\n\\t\\t\\tString password = jEdit.getProperty(\\\"firewall.password\\\");\\n\\t\\t\\t\\t\\t\\tif(password == null)\\n\\t\\t\\t\\tpassword = \\\"\\\";\\n\\t\\t\\tif(username == null || username.length()==0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy without user\\\");\\n\\t\\t\\t\\tAuthenticator.setDefault(new FirewallAuthenticator(null));\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy user: \\\" + username);\\n\\t\\t\\t\\tPasswordAuthentication pw = new PasswordAuthentication(\\n\\t\\t\\t\\t\\tusername,password.toCharArray()\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tAuthenticator.setDefault(new FirewallAuthenticator(pw));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tstatic class FirewallAuthenticator extends Authenticator\\n\\t{\\n\\t\\tPasswordAuthentication pw;\\n\\t\\tpublic FirewallAuthenticator(PasswordAuthentication pw)\\n\\t\\t{\\n\\t\\t\\tthis.pw = pw;\\n\\t\\t}\\n\\t\\tprotected PasswordAuthentication getPasswordAuthentication()\\n\\t\\t{\\n\\t\\t\\treturn pw;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void finishStartup(final boolean gui, final boolean restore,\\n\\t\\tfinal String userDir, final String[] args)\\n\\t{\\n\\t\\tSwingUtilities.invokeLater(new Runnable() {\\n\\t\\t\\tpublic void run()\\n\\t\\t\\t{\\n\\t\\t\\t\\tBuffer buffer = openFiles(null,userDir,args);\\n\\t\\t\\t\\tint count = getBufferCount();\\n\\t\\t\\t\\tif(count == 0)\\n\\t\\t\\t\\t\\tnewFile(null);\\n\\t\\t\\t\\tView view = null;\\n\\t\\t\\t\\tboolean restoreFiles = restore\\n\\t\\t\\t\\t\\t&& jEdit.getBooleanProperty(\\\"restore\\\")\\n\\t\\t\\t\\t\\t&& (getBufferCount() == 0 ||\\n\\t\\t\\t\\t\\tjEdit.getBooleanProperty(\\\"restore.cli\\\"));\\n\\t\\t\\t\\tif(gui || count != 0)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tview = PerspectiveManager\\n\\t\\t\\t\\t\\t\\t.loadPerspective(\\n\\t\\t\\t\\t\\t\\trestoreFiles);\\n\\t\\t\\t\\t\\tif(view == null)\\n\\t\\t\\t\\t\\t\\tview = newView(null,buffer);\\n\\t\\t\\t\\t\\telse if(buffer != null)\\n\\t\\t\\t\\t\\t\\tview.setBuffer(buffer);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tEditBus.send(new EditorStarted(null));\\n\\t\\t\\t\\tVFSManager.start();\\n\\t\\t\\t\\t\\t\\t\\t\\tif(server != null)\\n\\t\\t\\t\\t\\tserver.start();\\n\\t\\t\\t\\tGUIUtilities.hideSplashScreen();\\n\\t\\t\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"Startup \\\"\\n\\t\\t\\t\\t\\t+ \\\"complete\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tif(pluginErrors != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tshowPluginErrorDialog();\\n\\t\\t\\t\\t} \\n\\t\\t\\t\\tstartupDone = true;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tToolkit.getDefaultToolkit();\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} \\n\\t\\tprivate static void showPluginErrorDialog()\\n\\t{\\n\\t\\tif(pluginErrors == null)\\n\\t\\t\\treturn;\\n\\t\\tString caption = getProperty(\\n\\t\\t\\t\\\"plugin-error.caption\\\" + (pluginErrors.size() == 1\\n\\t\\t\\t? \\\"-1\\\" : \\\"\\\"));\\n\\t\\tFrame frame = (PluginManager.getInstance() == null\\n\\t\\t\\t? (Frame)viewsFirst\\n\\t\\t\\t: (Frame)PluginManager.getInstance());\\n\\t\\tnew ErrorListDialog(frame,\\n\\t\\t\\tgetProperty(\\\"plugin-error.title\\\"),\\n\\t\\t\\tcaption,pluginErrors,true);\\n\\t\\tpluginErrors = null;\\n\\t} \\n\\t\\tprivate static void getNotLoadedPluginJARs(Vector returnValue,\\n\\t\\tString dir, String[] list)\\n\\t{\\nloop:\\t\\tfor(int i = 0; i < list.length; i++)\\n\\t\\t{\\n\\t\\t\\tString name = list[i];\\n\\t\\t\\tif(!name.toLowerCase().endsWith(\\\".jar\\\"))\\n\\t\\t\\t\\tcontinue loop;\\n\\t\\t\\tString path = MiscUtilities.constructPath(dir,name);\\n\\t\\t\\tfor(int j = 0; j < jars.size(); j++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tPluginJAR jar = (PluginJAR)\\n\\t\\t\\t\\t\\tjars.elementAt(j);\\n\\t\\t\\t\\tString jarPath = jar.getPath();\\n\\t\\t\\t\\tString jarName = MiscUtilities.getFileName(jarPath);\\n\\t\\t\\t\\tif(path.equals(jarPath))\\n\\t\\t\\t\\t\\tcontinue loop;\\n\\t\\t\\t\\telse if(!new File(jarPath).exists()\\n\\t\\t\\t\\t\\t&& name.equals(jarName))\\n\\t\\t\\t\\t\\tcontinue loop;\\n\\t\\t\\t}\\n\\t\\t\\treturnValue.addElement(path);\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void gotoMarker(final View view, final Buffer buffer,\\n\\t\\tfinal String marker)\\n\\t{\\n\\t\\tVFSManager.runInAWTThread(new Runnable()\\n\\t\\t{\\n\\t\\t\\tpublic void run()\\n\\t\\t\\t{\\n\\t\\t\\t\\tint pos;\\n\\t\\t\\t\\t\\t\\t\\t\\tif(marker.startsWith(\\\"+line:\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tint line = Integer.parseInt(marker.substring(6));\\n\\t\\t\\t\\t\\t\\tpos = buffer.getLineStartOffset(line - 1);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse if(marker.startsWith(\\\"+marker:\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif(marker.length() != 9)\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\tMarker m = buffer.getMarker(marker.charAt(8));\\n\\t\\t\\t\\t\\tif(m == null)\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\tpos = m.getPosition();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tthrow new InternalError();\\n\\t\\t\\t\\tif(view != null && view.getBuffer() == buffer)\\n\\t\\t\\t\\t\\tview.getTextArea().setCaretPosition(pos);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbuffer.setIntegerProperty(Buffer.CARET,pos);\\n\\t\\t\\t\\t\\tbuffer.unsetProperty(Buffer.SCROLL_VERT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} \\n\\t\\tprivate static void addBufferToList(Buffer buffer)\\n\\t{\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tString symlinkPath = buffer.getSymlinkPath();\\n\\t\\t\\tif((VFSManager.getVFSForPath(symlinkPath).getCapabilities()\\n\\t\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tsymlinkPath = symlinkPath.toLowerCase();\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif(viewCount <= 1 && buffersFirst != null\\n\\t\\t\\t\\t&& buffersFirst == buffersLast\\n\\t\\t\\t\\t&& buffersFirst.isUntitled()\\n\\t\\t\\t\\t&& !buffersFirst.isDirty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tBuffer oldBuffersFirst = buffersFirst;\\n\\t\\t\\t\\tbuffersFirst = buffersLast = buffer;\\n\\t\\t\\t\\tDisplayManager.bufferClosed(oldBuffersFirst);\\n\\t\\t\\t\\tEditBus.send(new BufferUpdate(oldBuffersFirst,\\n\\t\\t\\t\\t\\tnull,BufferUpdate.CLOSED));\\n\\t\\t\\t\\tbufferHash.clear();\\n\\t\\t\\t\\tbufferHash.put(symlinkPath,buffer);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tbufferCount++;\\n\\t\\t\\tbufferHash.put(symlinkPath,buffer);\\n\\t\\t\\tif(buffersFirst == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersFirst = buffersLast = buffer;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if(sortBuffers)\\n\\t\\t\\t{\\n\\t\\t\\t\\tString str11, str12;\\n\\t\\t\\t\\tif(sortByName)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstr11 = buffer.getName();\\n\\t\\t\\t\\t\\tstr12 = buffer.getDirectory();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstr11 = buffer.getDirectory();\\n\\t\\t\\t\\t\\tstr12 = buffer.getName();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tBuffer _buffer = buffersFirst;\\n\\t\\t\\t\\twhile(_buffer != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tString str21, str22;\\n\\t\\t\\t\\t\\tif(sortByName)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tstr21 = _buffer.getName();\\n\\t\\t\\t\\t\\t\\tstr22 = _buffer.getDirectory();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tstr21 = _buffer.getDirectory();\\n\\t\\t\\t\\t\\t\\tstr22 = _buffer.getName();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tint comp = MiscUtilities.compareStrings(str11,str21,true);\\n\\t\\t\\t\\t\\tif(comp < 0 || (comp == 0 && MiscUtilities.compareStrings(str12,str22,true) < 0))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tbuffer.next = _buffer;\\n\\t\\t\\t\\t\\t\\tbuffer.prev = _buffer.prev;\\n\\t\\t\\t\\t\\t\\t_buffer.prev = buffer;\\n\\t\\t\\t\\t\\t\\tif(_buffer != buffersFirst)\\n\\t\\t\\t\\t\\t\\t\\tbuffer.prev.next = buffer;\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\tbuffersFirst = buffer;\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t_buffer = _buffer.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} \\n\\t\\t\\tbuffer.prev = buffersLast;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbuffer.next = null;\\n\\t\\t\\tbuffersLast.next = buffer;\\n\\t\\t\\tbuffersLast = buffer;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void removeBufferFromList(Buffer buffer)\\n\\t{\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tbufferCount--;\\n\\t\\t\\tboolean caseInsensitiveFilesystem =\\n\\t\\t\\t\\tOperatingSystem.isDOSDerived()\\n\\t\\t\\t\\t|| OperatingSystem.isMacOS();\\n\\t\\t\\tString path = buffer.getPath();\\n\\t\\t\\tif(caseInsensitiveFilesystem)\\n\\t\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t\\tbufferHash.remove(path);\\n\\t\\t\\tif(buffer == buffersFirst && buffer == buffersLast)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersFirst = buffersLast = null;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tif(buffer == buffersFirst)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersFirst = buffer.next;\\n\\t\\t\\t\\tbuffer.next.prev = null;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffer.prev.next = buffer.next;\\n\\t\\t\\t}\\n\\t\\t\\tif(buffer == buffersLast)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersLast = buffersLast.prev;\\n\\t\\t\\t\\tbuffer.prev.next = null;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffer.next.prev = buffer.prev;\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbuffer.next = buffer.prev = null;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void addViewToList(View view)\\n\\t{\\n\\t\\tviewCount++;\\n\\t\\tif(viewsFirst == null)\\n\\t\\t\\tviewsFirst = viewsLast = view;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tview.prev = viewsLast;\\n\\t\\t\\tviewsLast.next = view;\\n\\t\\t\\tviewsLast = view;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void removeViewFromList(View view)\\n\\t{\\n\\t\\tviewCount--;\\n\\t\\tif(viewsFirst == viewsLast)\\n\\t\\t{\\n\\t\\t\\tviewsFirst = viewsLast = null;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(view == viewsFirst)\\n\\t\\t{\\n\\t\\t\\tviewsFirst = view.next;\\n\\t\\t\\tview.next.prev = null;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tview.prev.next = view.next;\\n\\t\\t}\\n\\t\\tif(view == viewsLast)\\n\\t\\t{\\n\\t\\t\\tviewsLast = viewsLast.prev;\\n\\t\\t\\tview.prev.next = null;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tview.next.prev = view.prev;\\n\\t\\t}\\n\\t} \\n\\tprivate static void closeView(View view, boolean callExit)\\n\\t{\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\tif(viewsFirst == viewsLast && callExit)\\n\\t\\t\\texit(view,false); \\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tEditBus.send(new ViewUpdate(view,ViewUpdate.CLOSED));\\n\\t\\t\\tview.close();\\n\\t\\t\\tremoveViewFromList(view);\\n\\t\\t\\tif(view == activeView)\\n\\t\\t\\t\\tactiveView = null;\\n\\t\\t}\\n\\t} \\n\\tprivate static void loadModeCatalog(String path, boolean resource)\\n\\t{\\n\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"Loading mode catalog file \\\" + path);\\n\\t\\tModeCatalogHandler handler = new ModeCatalogHandler(\\n\\t\\t\\tMiscUtilities.getParentOfPath(path),resource);\\n\\t\\tXmlParser parser = new XmlParser();\\n\\t\\tparser.setHandler(handler);\\n\\t\\tReader in = null;\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tInputStream _in;\\n\\t\\t\\tif(resource)\\n\\t\\t\\t\\t_in = jEdit.class.getResourceAsStream(path);\\n\\t\\t\\telse\\n\\t\\t\\t\\t_in = new FileInputStream(path);\\n\\t\\t\\tin = new BufferedReader(new InputStreamReader(_in));\\n\\t\\t\\tparser.parse(null, null, in);\\n\\t\\t}\\n\\t\\tcatch(XmlException xe)\\n\\t\\t{\\n\\t\\t\\tint line = xe.getLine();\\n\\t\\t\\tString message = xe.getMessage();\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,path + \\\":\\\" + line\\n\\t\\t\\t\\t+ \\\": \\\" + message);\\n\\t\\t}\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(in != null)\\n\\t\\t\\t\\t\\tin.close();\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\tprivate static void initKeyBindings()\\n\\t{\\n\\t\\tinputHandler.removeAllKeyBindings();\\n\\t\\tActionSet[] actionSets = getActionSets();\\n\\t\\tfor(int i = 0; i < actionSets.length; i++)\\n\\t\\t{\\n\\t\\t\\tactionSets[i].initKeyBindings();\\n\\t\\t}\\n\\t} \\n\\t\\tstatic class MyFocusManager extends DefaultKeyboardFocusManager\\n\\t{\\n\\t\\tMyFocusManager()\\n\\t\\t{\\n\\t\\t\\tsetDefaultFocusTraversalPolicy(new LayoutFocusTraversalPolicy());\\n\\t\\t}\\n\\t\\tpublic boolean postProcessKeyEvent(KeyEvent evt)\\n\\t\\t{\\n\\t\\t\\tif(!evt.isConsumed())\\n\\t\\t\\t{\\n\\t\\t\\t\\tComponent comp = (Component)evt.getSource();\\n\\t\\t\\t\\tif(!comp.isShowing())\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\tfor(;;)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif(comp instanceof View)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t((View)comp).processKeyEvent(evt,\\n\\t\\t\\t\\t\\t\\t\\tView.VIEW);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse if(comp == null || comp instanceof Window\\n\\t\\t\\t\\t\\t\\t|| comp instanceof JEditTextArea)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tcomp = comp.getParent();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn super.postProcessKeyEvent(evt);\\n\\t\\t}\\n\\t} }\""
        },
        {
            "content": "The source code of `jEdit.java` has been successfully retrieved. This class serves as the core entry point for the jEdit application and includes:\n\n- **Initialization logic** (`main`, `initMisc`, `finishStartup`)\n- **Buffer, view, and plugin management**\n- **System-wide properties and configurations**\n- **Event handling and input processing**\n- **Interaction with other components**, such as `BufferIORequest`, `PluginManager`, `KillRing`, `HelpViewer`, etc.\n\n### Key Observations:\n1. **Extensive use of core components**: The class interacts directly with several entities like `Buffer`, `View`, `PluginJAR`, and `ActionContext`, which were also identified in both the co-change and call graph analysis.\n2. **Dependency on Plugin System**: A large portion of the code deals with loading, initializing, and managing plugins via `PluginManager` and `PluginJAR`.\n3. **Configuration Handling**: It manages system-wide settings using `PropertyManager`, indicating that changes to configuration-related logic may impact multiple areas.\n4. **User Interface Management**: It initializes UI elements, handles view creation, and manages docking windows through `DockableWindowManager`.\n\n---\n\n### Next Steps:\nTo determine which entities need to be synchronized with changes made to `jEdit.java`, we should analyze its **conceptual coupling** with other files. This will help us understand semantic dependencies beyond direct method calls or historical co-changes.\n\nI will now call the `get_conceptual_coupling` function between `jEdit.java` and some of the top co-changed files (e.g., `JEditTextArea.java`, `Buffer.java`, `View.java`) to assess their semantic similarity.\n\nLet\u2019s start with `JEditTextArea.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_e27d4b1c22e64544a80255",
                    "function": {
                        "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"JEditTextArea.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.84656894\""
        },
        {
            "content": "The conceptual coupling between `jEdit.java` and `JEditTextArea.java` is **0.8466**, which indicates a **strong semantic relationship**. This suggests that changes in one are likely to affect the other, not only due to direct dependencies but also because of shared functionality or responsibilities in the system.\n\n### Interpretation:\n- A value close to 1 means both files deal with similar concepts\u2014likely involving text editing, user interaction, or UI management.\n- Given that `JEditTextArea` is likely the main text editing component and `jEdit` is the core application managing views and buffers, this tight coupling makes sense from a design perspective.\n\n---\n\n### Next Steps:\nTo build a comprehensive list of entities that should be synchronized when `jEdit.java` changes, we should check the conceptual coupling with other high-confidence co-changed entities like:\n\n- `Buffer.java`\n- `View.java`\n- `PluginManager.java`\n- `DockableWindowManager.java`\n\nLet\u2019s analyze the conceptual coupling of `jEdit.java` with `Buffer.java` next.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_4da159b414b6480ab52ae0",
                    "function": {
                        "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"Buffer.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.84988916\""
        },
        {
            "content": "The conceptual coupling between `jEdit.java` and `Buffer.java` is **0.8499**, which is also a **very strong semantic relationship**.\n\n### Interpretation:\n- This high coupling suggests that both files are deeply involved in similar concerns, such as managing text content, file I/O, or editing state.\n- Since `jEdit` orchestrates buffer creation and management, and `Buffer` represents the actual editable document, their tight integration is expected and reinforces the need to consider them together during changes.\n\n---\n\n### Pattern Observed:\nSo far, we have observed:\n| Entity Pair | Conceptual Coupling |\n|-------------|---------------------|\n| jEdit.java - JEditTextArea.java | 0.8466 |\n| jEdit.java - Buffer.java        | 0.8499 |\n\nBoth values indicate **strong semantic ties**, suggesting these entities should be considered for synchronized updates when changes occur in `jEdit.java`.\n\nLet\u2019s continue by checking coupling with `View.java`, another core UI component frequently co-changed with `jEdit.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_0737405836044e4a90ecba",
                    "function": {
                        "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"View.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.8504748\""
        },
        {
            "content": "The conceptual coupling between `jEdit.java` and `View.java` is **0.8505**, indicating another **very strong semantic relationship**.\n\n### Interpretation:\n- This confirms that `jEdit.java` and `View.java` are tightly integrated, which aligns with their roles: `jEdit` manages application-wide behavior, while `View` represents a window or UI container for editing buffers.\n- A change in how views are initialized or managed in `jEdit.java` could directly affect `View.java`, and vice versa.\n\n---\n\n### Updated Coupling Summary:\n\n| Entity Pair                     | Conceptual Coupling |\n|----------------------------------|---------------------|\n| jEdit.java - JEditTextArea.java  | 0.8466              |\n| jEdit.java - Buffer.java         | 0.8499              |\n| jEdit.java - View.java           | 0.8505              |\n\nThese values consistently show **strong semantic dependencies**, reinforcing the need to consider these files together during development or refactoring tasks.\n\nLet\u2019s continue by analyzing coupling with `PluginManager.java`, since plugin handling is a core concern of `jEdit.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_4a7e291d616b46748d15d2",
                    "function": {
                        "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"PluginManager.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.85484177\""
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `jEdit.java`\n\nChange set: [JEditTextArea.java, Buffer.java, View.java, PluginManager.java, KillRing.java, HelpViewer.java, DockableWindowManager.java, ActionHandler.java, TextAreaPainter.java, SearchAndReplace.java, GUIUtilities.java, PluginJAR.java, MiscUtilities.java, Mode.java, EditPlugin.java, BufferIORequest.java, Log.java, InputHandler.java, DefaultInputHandler.java, UtilEvalError.java, BufferHistory.java, HistoryModel.java, Registers.java, BeanShell.java, VFSManager.java, PropertyManager.java, EditServer.java, DockableWindowManagerImpl.java, PluginListHandler.java, ServiceManager.java, Macros.java, DisplayManager.java, OptionGroup.java, EnhancedDialog.java, FileVFS.java, TextAreaTransferHandler.java, TextAreaDropHandler.java, TextAreaDialog.java, BeanShellAction.java, BeanShellHandler.java, BeanShellErrorDialog.java, Macro.java, Abbrevs.java]\n\nDetails:\n- **JEditTextArea.java (0.8466)**: Strong conceptual coupling; core UI component for text editing.\n- **Buffer.java (0.8499)**: Central to document management; tightly integrated with jEdit's buffer lifecycle.\n- **View.java (0.8505)**: Manages UI windows; frequently co-changed and semantically linked.\n- **PluginManager.java (0.8548)**: Direct call graph dependency; manages plugin loading and activation.\n- **KillRing.java**: Direct call graph usage; involved in clipboard operations.\n- **HelpViewer.java**: Direct call graph reference; provides help system integration.\n- **DockableWindowManager.java**: High co-change confidence (0.17); manages UI layout components.\n- **ActionHandler.java**: Frequently co-changed (confidence 0.1595); handles user actions.\n- **TextAreaPainter.java**: Co-change support (0.0963); visual rendering tied to text area behavior.\n- **SearchAndReplace.java**: Directly used by jEdit; frequent co-change history.\n- **GUIUtilities.java**: Highly co-changed (0.1794); provides UI-related helper functions.\n- **PluginJAR.java**: Direct interaction; manages plugin JAR files.\n- **MiscUtilities.java**: Used heavily in path/file handling; high co-change support (0.1894).\n- **Mode.java**: Syntax mode management is central to file editing.\n- **EditPlugin.java**: Core plugin interface; interacts directly with PluginManager.\n- **BufferIORequest.java**: Direct call from jEdit.java; handles I/O requests.\n- **Log.java**: Logging infrastructure; low-level dependency.\n- **InputHandler.java**: Key input processing; highly coupled.\n- **DefaultInputHandler.java**: Default implementation used by jEdit.\n- **UtilEvalError.java**: Used in scripting context; part of the call graph.\n- **BufferHistory.java**: Tracks file open history; frequent co-change.\n- **HistoryModel.java**: Maintains session history; moderate coupling.\n- **Registers.java**: Stores clipboard registers; co-change support.\n- **BeanShell.java**: Scripting engine; used during startup and macro execution.\n- **VFSManager.java**: Handles virtual file system; key initialization step.\n- **PropertyManager.java**: Manages application properties.\n- **EditServer.java**: Enables multi-instance coordination.\n- **DockableWindowManagerImpl.java**: Implementation class for window docking.\n- **PluginListHandler.java**: Part of plugin management workflow.\n- **ServiceManager.java**: Manages internal services.\n- **Macros.java**: Supports macro recording and playback.\n- **DisplayManager.java**: Coordinates display logic across buffers/views.\n- **OptionGroup.java**: Related to settings and configuration.\n- **EnhancedDialog.java**: UI element used throughout the system.\n- **FileVFS.java**: VFS implementation; core file access.\n- **TextAreaTransferHandler.java**: Drag/drop and clipboard support.\n- **TextAreaDropHandler.java**: Specialized drop handler for text area.\n- **TextAreaDialog.java**: Dialogs tied to text area behavior.\n- **BeanShellAction.java**: Executes BeanShell commands.\n- **BeanShellHandler.java**: Internal handler for script execution.\n- **BeanShellErrorDialog.java**: Error reporting for scripting.\n- **Macro.java**: Macro definition and execution class.\n- **Abbrevs.java**: Text abbreviation expansion; used in editing workflows.\n\nThese entities are selected based on a combination of:\n- **High-confidence co-change relationships**\n- **Call graph dependencies**\n- **Conceptual coupling scores**\n\nModifications to `jEdit.java` should consider synchronized updates to these files to ensure consistency and prevent regression issues.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14",
                    "m15",
                    "m16",
                    "m17"
                ],
                "response_message": "m18"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `jEdit`, a well-known Java open source project. The starting entity you need to deal with is jEdit.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_99090cf6f0124ec7af9686",
                        "function": {
                            "arguments": "{\"entity\": \"jEdit.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"Entry\", \"16\", \"0.053156146179401995\"], [\"BufferHistory\", \"15\", \"0.04983388704318937\"], [\"EditPane\", \"29\", \"0.09634551495016612\"], [\"RecentHandler\", \"5\", \"0.016611295681063124\"], [\"Buffer\", \"59\", \"0.19601328903654486\"], [\"SearchAndReplace\", \"19\", \"0.06312292358803986\"], [\"View\", \"47\", \"0.15614617940199335\"], [\"EditServer\", \"20\", \"0.0664451827242525\"], [\"WindowHandler\", \"5\", \"0.016611295681063124\"], [\"ActionHandler\", \"48\", \"0.15946843853820597\"], [\"GeneralOptionPane\", \"11\", \"0.036544850498338874\"], [\"JEditActionContext\", \"2\", \"0.006644518272425249\"], [\"ShortcutsOptionPane\", \"7\", \"0.023255813953488372\"], [\"ToolBarEditDialog\", \"9\", \"0.029900332225913623\"], [\"ActionContext\", \"5\", \"0.016611295681063124\"], [\"JEditVisitorAdapter\", \"1\", \"0.0033222591362126247\"], [\"JEditVisitor\", \"1\", \"0.0033222591362126247\"], [\"CompleteWord\", \"17\", \"0.05647840531561462\"], [\"SaveCaretInfoVisitor\", \"1\", \"0.0033222591362126247\"], [\"SetCursorVisitor\", \"1\", \"0.0033222591362126247\"], [\"GUIUtilities\", \"54\", \"0.17940199335548174\"], [\"RolloverButton\", \"3\", \"0.009966777408637873\"], [\"HyperSearchResults\", \"17\", \"0.05647840531561462\"], [\"ExpansionToggleBorder\", \"2\", \"0.006644518272425249\"], [\"PanelWindowContainer\", \"20\", \"0.0664451827242525\"], [\"AbbrevsOptionPane\", \"8\", \"0.026578073089700997\"], [\"FloatingWindowContainer\", \"13\", \"0.04318936877076412\"], [\"ToolBarOptionPane\", \"2\", \"0.006644518272425249\"], [\"PluginsMenuButton\", \"7\", \"0.023255813953488372\"], [\"CommandsMenuButton\", \"2\", \"0.006644518272425249\"], [\"FavoritesMenuButton\", \"4\", \"0.013289036544850499\"], [\"HistoryButton\", \"1\", \"0.0033222591362126247\"], [\"SaveButton\", \"1\", \"0.0033222591362126247\"], [\"ChoosePluginSet\", \"1\", \"0.0033222591362126247\"], [\"RestoreButton\", \"1\", \"0.0033222591362126247\"], [\"ClearPluginSet\", \"1\", \"0.0033222591362126247\"], [\"MouseOverHandler\", \"1\", \"0.0033222591362126247\"], [\"AppearanceOptionPane\", \"15\", \"0.04983388704318937\"], [\"IconTheme\", \"1\", \"0.0033222591362126247\"], [\"Debug\", \"7\", \"0.023255813953488372\"], [\"GrabKeyDialog\", \"5\", \"0.016611295681063124\"], [\"InputHandler\", \"6\", \"0.019933554817275746\"], [\"KeyEventWorkaround\", \"10\", \"0.03322259136212625\"], [\"TextAreaInputHandler\", \"1\", \"0.0033222591362126247\"], [\"KeyEventTranslator\", \"8\", \"0.026578073089700997\"], [\"MyFocusManager\", \"10\", \"0.03322259136212625\"], [\"InputPane\", \"7\", \"0.023255813953488372\"], [\"BufferSet\", \"1\", \"0.0033222591362126247\"], [\"BufferSetListener\", \"1\", \"0.0033222591362126247\"], [\"BufferSetManager\", \"4\", \"0.013289036544850499\"], [\"BufferSwitcher\", \"3\", \"0.009966777408637873\"], [\"BufferSetAdapter\", \"1\", \"0.0033222591362126247\"], [\"ViewOptionPane\", \"4\", \"0.013289036544850499\"], [\"DockableWindowContainer\", \"5\", \"0.016611295681063124\"], [\"DockableWindowManager\", \"51\", \"0.16943521594684385\"], [\"DockableWindowManagerImpl\", \"1\", \"0.0033222591362126247\"], [\"DockingArea\", \"1\", \"0.0033222591362126247\"], [\"DockingLayout\", \"2\", \"0.006644518272425249\"], [\"DockableLayout\", \"8\", \"0.026578073089700997\"], [\"DockBorder\", \"1\", \"0.0033222591362126247\"], [\"ButtonLayout\", \"4\", \"0.013289036544850499\"], [\"ViewConfig\", \"5\", \"0.016611295681063124\"], [\"DockablePanel\", \"3\", \"0.009966777408637873\"], [\"PerspectiveHandler\", \"6\", \"0.019933554817275746\"], [\"DockableWindowFactory\", \"5\", \"0.016611295681063124\"], [\"DockingLayoutManager\", \"2\", \"0.006644518272425249\"], [\"DockingLayoutSetter\", \"1\", \"0.0033222591362126247\"], [\"PerspectiveManager\", \"14\", \"0.046511627906976744\"], [\"SettingsXML\", \"1\", \"0.0033222591362126247\"], [\"DockingOptionPane\", \"2\", \"0.006644518272425249\"], [\"DockableWindowManagerProvider\", \"1\", \"0.0033222591362126247\"], [\"IDockingFrameworkProvider\", \"1\", \"0.0033222591362126247\"], [\"DockableWindowConfig\", \"1\", \"0.0033222591362126247\"], [\"LoadPerspectiveAction\", \"1\", \"0.0033222591362126247\"], [\"CloseDialog\", \"3\", \"0.009966777408637873\"], [\"SaveBackupOptionPane\", \"3\", \"0.009966777408637873\"], [\"Macros\", \"19\", \"0.06312292358803986\"], [\"DraggedURLLoader\", \"1\", \"0.0033222591362126247\"], [\"StringCompare\", \"2\", \"0.006644518272425249\"], [\"VFS\", \"17\", \"0.05647840531561462\"], [\"PluginTableModel\", \"24\", \"0.07973421926910298\"], [\"TableModelHandler\", \"3\", \"0.009966777408637873\"], [\"BufferOptionPane\", \"1\", \"0.0033222591362126247\"], [\"StyleTableModel\", \"6\", \"0.019933554817275746\"], [\"EditingOptionPane\", \"13\", \"0.04318936877076412\"], [\"EncodingsOptionPane\", \"1\", \"0.0033222591362126247\"], [\"ServiceFoldHandlerProvider\", \"1\", \"0.0033222591362126247\"], [\"RemoveButton\", \"7\", \"0.023255813953488372\"], [\"DirectoryProvider\", \"5\", \"0.016611295681063124\"], [\"SendVFSUpdatesSafely\", \"1\", \"0.0033222591362126247\"], [\"Mode\", \"7\", \"0.023255813953488372\"], [\"JEditTextArea\", \"74\", \"0.24584717607973422\"], [\"ParserRuleSet\", \"6\", \"0.019933554817275746\"], [\"VFSBrowser\", \"36\", \"0.11960132890365449\"], [\"HyperSearchResult\", \"7\", \"0.023255813953488372\"], [\"XModeHandler\", \"6\", \"0.019933554817275746\"], [\"DefaultInputHandler\", \"13\", \"0.04318936877076412\"], [\"PastePrevious\", \"3\", \"0.009966777408637873\"], [\"TokenMarker\", \"15\", \"0.04983388704318937\"], [\"JARClassLoader\", \"23\", \"0.07641196013289037\"], [\"PosBottomHalf\", \"4\", \"0.013289036544850499\"], [\"HyperSearchRequest\", \"11\", \"0.036544850498338874\"], [\"TextUtilities\", \"14\", \"0.046511627906976744\"], [\"Token\", \"1\", \"0.0033222591362126247\"], [\"OffsetManager\", \"17\", \"0.05647840531561462\"], [\"ModeOptionPane\", \"4\", \"0.013289036544850499\"], [\"TokenList\", \"1\", \"0.0033222591362126247\"], [\"CurrentDirectoryMenu\", \"2\", \"0.006644518272425249\"], [\"RecentDirectoriesMenu\", \"3\", \"0.009966777408637873\"], [\"ErrorEntry\", \"3\", \"0.009966777408637873\"], [\"MiscUtilities\", \"57\", \"0.1893687707641196\"], [\"OptionsDialog\", \"14\", \"0.046511627906976744\"], [\"FirewallOptionPane\", \"4\", \"0.013289036544850499\"], [\"Dependency\", \"9\", \"0.029900332225913623\"], [\"FirewallAuthenticator\", \"2\", \"0.006644518272425249\"], [\"OverviewOptionPane\", \"6\", \"0.019933554817275746\"], [\"BrowserJTree\", \"8\", \"0.026578073089700997\"], [\"HistoryTextField\", \"4\", \"0.013289036544850499\"], [\"BrowserView\", \"15\", \"0.04983388704318937\"], [\"PluginManagerProgress\", \"12\", \"0.03986710963455149\"], [\"MouseHandler\", \"45\", \"0.14950166112956811\"], [\"OperatingSystem\", \"12\", \"0.03986710963455149\"], [\"VFSManager\", \"3\", \"0.009966777408637873\"], [\"TextAreaPainter\", \"29\", \"0.09634551495016612\"], [\"BufferChangeHandler\", \"23\", \"0.07641196013289037\"], [\"FileVFS\", \"22\", \"0.07308970099667775\"], [\"StatusBar\", \"20\", \"0.0664451827242525\"], [\"SettingsReloader\", \"4\", \"0.013289036544850499\"], [\"LineInfo\", \"4\", \"0.013289036544850499\"], [\"ChunkCache\", \"18\", \"0.059800664451827246\"], [\"KeyHandler\", \"17\", \"0.05647840531561462\"], [\"EnhancedCheckBoxMenuItem\", \"7\", \"0.023255813953488372\"], [\"MarkersMenuItem\", \"2\", \"0.006644518272425249\"], [\"EnhancedMenuItem\", \"9\", \"0.029900332225913623\"], [\"BufferIORequest\", \"28\", \"0.09302325581395349\"], [\"InstallPluginsDialog\", \"14\", \"0.046511627906976744\"], [\"FileCellRenderer\", \"7\", \"0.023255813953488372\"], [\"PaneNameRenderer\", \"2\", \"0.006644518272425249\"], [\"FocusHandler\", \"2\", \"0.006644518272425249\"], [\"FoldVisibilityManager\", \"9\", \"0.029900332225913623\"], [\"Abbrevs\", \"10\", \"0.03322259136212625\"], [\"FavoritesVFS\", \"5\", \"0.016611295681063124\"], [\"CheckBoxListModel\", \"4\", \"0.013289036544850499\"], [\"BeanShell\", \"11\", \"0.036544850498338874\"], [\"MarkerHighlight\", \"3\", \"0.009966777408637873\"], [\"ListHandler\", \"2\", \"0.006644518272425249\"], [\"PluginList\", \"12\", \"0.03986710963455149\"], [\"WrapGuide\", \"2\", \"0.006644518272425249\"], [\"HelpViewer\", \"20\", \"0.0664451827242525\"], [\"BracketHighlight\", \"2\", \"0.006644518272425249\"], [\"AbstractOptionPane\", \"4\", \"0.013289036544850499\"], [\"SearchDialog\", \"18\", \"0.059800664451827246\"], [\"BufferOptions\", \"13\", \"0.04318936877076412\"], [\"ModeProperties\", \"8\", \"0.026578073089700997\"], [\"TOCHandler\", \"5\", \"0.016611295681063124\"], [\"TipOfTheDay\", \"6\", \"0.019933554817275746\"], [\"Gutter\", \"8\", \"0.026578073089700997\"], [\"ParentDirectoryRenderer\", \"3\", \"0.009966777408637873\"], [\"BufferPrintable\", \"8\", \"0.026578073089700997\"], [\"Handler\", \"8\", \"0.026578073089700997\"], [\"Macro\", \"11\", \"0.036544850498338874\"], [\"JAR\", \"18\", \"0.059800664451827246\"], [\"BeanShellHandler\", \"4\", \"0.013289036544850499\"], [\"ComponentHandler\", \"2\", \"0.006644518272425249\"], [\"PluginManager\", \"20\", \"0.0664451827242525\"], [\"JCheckBoxList\", \"4\", \"0.013289036544850499\"], [\"FileRootsVFS\", \"8\", \"0.026578073089700997\"], [\"EnhancedDialog\", \"2\", \"0.006644518272425249\"], [\"PluginListDownloadProgress\", \"2\", \"0.006644518272425249\"], [\"Wrapper\", \"5\", \"0.016611295681063124\"], [\"Rect\", \"7\", \"0.023255813953488372\"], [\"TOCTree\", \"3\", \"0.009966777408637873\"], [\"GlobalOptions\", \"10\", \"0.03322259136212625\"], [\"DownloadThread\", \"4\", \"0.013289036544850499\"], [\"MouseWheelHandler\", \"4\", \"0.013289036544850499\"], [\"BrowserColorsOptionPane\", \"2\", \"0.006644518272425249\"], [\"PropertyChangeHandler\", \"4\", \"0.013289036544850499\"], [\"HelpIndex\", \"10\", \"0.03322259136212625\"], [\"AnimatedIcon\", \"2\", \"0.006644518272425249\"], [\"SplashScreen\", \"7\", \"0.023255813953488372\"], [\"OSTask\", \"4\", \"0.013289036544850499\"], [\"Install\", \"16\", \"0.053156146179401995\"], [\"NonInteractiveInstall\", \"2\", \"0.006644518272425249\"], [\"SwingInstall\", \"4\", \"0.013289036544850499\"], [\"ConsoleInstall\", \"2\", \"0.006644518272425249\"], [\"GenerateTocXML\", \"2\", \"0.006644518272425249\"], [\"HelpTOCPanel\", \"12\", \"0.03986710963455149\"], [\"Chunk\", \"2\", \"0.006644518272425249\"], [\"RecentFilesMenu\", \"5\", \"0.016611295681063124\"], [\"DirectoryMenu\", \"2\", \"0.006644518272425249\"], [\"EnhancedMenu\", \"8\", \"0.026578073089700997\"], [\"MarkersMenu\", \"2\", \"0.006644518272425249\"], [\"MacrosMenu\", \"8\", \"0.026578073089700997\"], [\"HistoryModel\", \"17\", \"0.05647840531561462\"], [\"BeanShellAction\", \"5\", \"0.016611295681063124\"], [\"Registers\", \"18\", \"0.059800664451827246\"], [\"PaintSelection\", \"4\", \"0.013289036544850499\"], [\"RegistersHandler\", \"4\", \"0.013289036544850499\"], [\"TextAreaOptionPane\", \"9\", \"0.029900332225913623\"], [\"ActionTextField\", \"3\", \"0.009966777408637873\"], [\"Autosave\", \"4\", \"0.013289036544850499\"], [\"ActionBar\", \"10\", \"0.03322259136212625\"], [\"ExplicitFoldHandler\", \"2\", \"0.006644518272425249\"], [\"CompletionPopup\", \"6\", \"0.019933554817275746\"], [\"LogViewer\", \"7\", \"0.023255813953488372\"], [\"PaintLineBackground\", \"2\", \"0.006644518272425249\"], [\"Anchor\", \"2\", \"0.006644518272425249\"], [\"BufferChangeListener\", \"4\", \"0.013289036544850499\"], [\"PluginInfoBox\", \"4\", \"0.013289036544850499\"], [\"ListUpdater\", \"4\", \"0.013289036544850499\"], [\"BufferChangeAdapter\", \"4\", \"0.013289036544850499\"], [\"TextRenderer\", \"6\", \"0.019933554817275746\"], [\"InstallPanel\", \"6\", \"0.019933554817275746\"], [\"SizeLabel\", \"6\", \"0.019933554817275746\"], [\"ManagePanel\", \"9\", \"0.029900332225913623\"], [\"DirectoryEntryCompare\", \"4\", \"0.013289036544850499\"], [\"ActionSet\", \"33\", \"0.10963455149501661\"], [\"FirstLine\", \"10\", \"0.03322259136212625\"], [\"StatusBarOptionPane\", \"4\", \"0.013289036544850499\"], [\"LoadSaveOptionPane\", \"2\", \"0.006644518272425249\"], [\"QuickNotepad\", \"2\", \"0.006644518272425249\"], [\"DockableListHandler\", \"14\", \"0.046511627906976744\"], [\"Factory\", \"14\", \"0.046511627906976744\"], [\"ScrollLineCount\", \"2\", \"0.006644518272425249\"], [\"VFSFileNameField\", \"8\", \"0.026578073089700997\"], [\"DisplayManager\", \"12\", \"0.03986710963455149\"], [\"VFSFileChooserDialog\", \"9\", \"0.029900332225913623\"], [\"PluginManagerOptionPane\", \"4\", \"0.013289036544850499\"], [\"MirrorModel\", \"2\", \"0.006644518272425249\"], [\"BrowserOptionPane\", \"2\", \"0.006644518272425249\"], [\"DownloadMirrorsThread\", \"2\", \"0.006644518272425249\"], [\"BrowserHandler\", \"4\", \"0.013289036544850499\"], [\"ResourceCache\", \"9\", \"0.029900332225913623\"], [\"PaintBracketHighlight\", \"2\", \"0.006644518272425249\"], [\"PaintCaret\", \"6\", \"0.019933554817275746\"], [\"PaintText\", \"4\", \"0.013289036544850499\"], [\"PaintWrapGuide\", \"2\", \"0.006644518272425249\"], [\"FoldHandler\", \"4\", \"0.013289036544850499\"], [\"PluginCacheEntry\", \"15\", \"0.04983388704318937\"], [\"ServiceManager\", \"11\", \"0.036544850498338874\"], [\"ServiceListHandler\", \"8\", \"0.026578073089700997\"], [\"EditAction\", \"7\", \"0.023255813953488372\"], [\"Model\", \"3\", \"0.009966777408637873\"], [\"VFSDirectoryEntryTable\", \"5\", \"0.016611295681063124\"], [\"Remove\", \"18\", \"0.059800664451827246\"], [\"TableMouseHandler\", \"3\", \"0.009966777408637873\"], [\"VFSDirectoryEntryTableModel\", \"1\", \"0.0033222591362126247\"], [\"Descriptor\", \"3\", \"0.009966777408637873\"], [\"Deferred\", \"5\", \"0.016611295681063124\"], [\"EnhancedButton\", \"5\", \"0.016611295681063124\"], [\"PluginJAR\", \"65\", \"0.2159468438538206\"], [\"EditPlugin\", \"8\", \"0.026578073089700997\"], [\"Plugin\", \"8\", \"0.026578073089700997\"], [\"EBMessage\", \"4\", \"0.013289036544850499\"], [\"PluginResURLConnection\", \"2\", \"0.006644518272425249\"], [\"HelpButton\", \"11\", \"0.036544850498338874\"], [\"LatestVersionPlugin\", \"2\", \"0.006644518272425249\"], [\"PluginUpdate\", \"6\", \"0.019933554817275746\"], [\"BrowserCommandsMenu\", \"5\", \"0.016611295681063124\"], [\"VariableGridLayout\", \"2\", \"0.006644518272425249\"], [\"SearchBar\", \"5\", \"0.016611295681063124\"], [\"EditBus\", \"3\", \"0.009966777408637873\"], [\"EBPlugin\", \"2\", \"0.006644518272425249\"], [\"ThreadProgress\", \"2\", \"0.006644518272425249\"], [\"MarkersProvider\", \"2\", \"0.006644518272425249\"], [\"RecentDirectoriesProvider\", \"6\", \"0.019933554817275746\"], [\"RecentFilesProvider\", \"4\", \"0.013289036544850499\"], [\"DynamicMenuProvider\", \"2\", \"0.006644518272425249\"], [\"MacrosProvider\", \"2\", \"0.006644518272425249\"], [\"PluginsProvider\", \"2\", \"0.006644518272425249\"], [\"EvalError\", \"2\", \"0.006644518272425249\"], [\"PluginOptions\", \"2\", \"0.006644518272425249\"], [\"Roster\", \"8\", \"0.026578073089700997\"], [\"ScrollLayout\", \"4\", \"0.013289036544850499\"], [\"ExtensionManager\", \"2\", \"0.006644518272425249\"], [\"KillRing\", \"17\", \"0.05647840531561462\"], [\"UndoManager\", \"8\", \"0.026578073089700997\"], [\"Operation\", \"2\", \"0.006644518272425249\"], [\"InstallButton\", \"8\", \"0.026578073089700997\"], [\"RosterThread\", \"2\", \"0.006644518272425249\"], [\"LogList\", \"2\", \"0.006644518272425249\"], [\"IntegerArray\", \"3\", \"0.009966777408637873\"], [\"GutterOptionPane\", \"8\", \"0.026578073089700997\"], [\"EditAbbrevDialog\", \"4\", \"0.013289036544850499\"], [\"AbbrevsModel\", \"4\", \"0.013289036544850499\"], [\"BoyerMooreSearchMatcher\", \"8\", \"0.026578073089700997\"], [\"BrowserIORequest\", \"6\", \"0.019933554817275746\"], [\"EntryCompare\", \"3\", \"0.009966777408637873\"], [\"HeaderMouseHandler\", \"2\", \"0.006644518272425249\"], [\"BufferPrinter1_4\", \"2\", \"0.006644518272425249\"], [\"BufferPrinter1_3\", \"2\", \"0.006644518272425249\"], [\"PrintOptionPane\", \"6\", \"0.019933554817275746\"], [\"UnixWorkaround\", \"4\", \"0.013289036544850499\"], [\"InstallThread\", \"2\", \"0.006644518272425249\"], [\"OptionGroup\", \"2\", \"0.006644518272425249\"], [\"PositionManager\", \"2\", \"0.006644518272425249\"], [\"Highlight\", \"2\", \"0.006644518272425249\"], [\"Match\", \"2\", \"0.006644518272425249\"], [\"RESearchMatcher\", \"3\", \"0.009966777408637873\"], [\"MouseActions\", \"2\", \"0.006644518272425249\"], [\"Insert\", \"2\", \"0.006644518272425249\"], [\"KillRingHandler\", \"5\", \"0.016611295681063124\"], [\"NameSpace\", \"3\", \"0.009966777408637873\"], [\"SettingsActionHandler\", \"5\", \"0.016611295681063124\"], [\"TextAreaTransferHandler\", \"8\", \"0.026578073089700997\"], [\"TextAreaDialog\", \"5\", \"0.016611295681063124\"], [\"BeanShellErrorDialog\", \"2\", \"0.006644518272425249\"], [\"FilesChangedDialog\", \"6\", \"0.019933554817275746\"], [\"Renderer\", \"8\", \"0.026578073089700997\"], [\"TreeHandler\", \"2\", \"0.006644518272425249\"], [\"ButtonActionHandler\", \"2\", \"0.006644518272425249\"], [\"SelectallButton\", \"2\", \"0.006644518272425249\"], [\"RootsEntry\", \"4\", \"0.013289036544850499\"], [\"Delegate\", \"2\", \"0.006644518272425249\"], [\"ResultCellRenderer\", \"8\", \"0.026578073089700997\"], [\"MacOSPlugin\", \"2\", \"0.006644518272425249\"], [\"ErrorListCellRenderer\", \"2\", \"0.006644518272425249\"], [\"ShortcutsModel\", \"7\", \"0.023255813953488372\"], [\"BrowserActionContext\", \"2\", \"0.006644518272425249\"], [\"MemoryStatus\", \"8\", \"0.026578073089700997\"], [\"PropertyManager\", \"2\", \"0.006644518272425249\"], [\"Clock\", \"2\", \"0.006644518272425249\"], [\"DropHandler\", \"2\", \"0.006644518272425249\"], [\"RingListModel\", \"2\", \"0.006644518272425249\"], [\"KeywordMap\", \"2\", \"0.006644518272425249\"], [\"HelpFile\", \"2\", \"0.006644518272425249\"], [\"WorkThreadPool\", \"3\", \"0.009966777408637873\"], [\"DisplayTokenHandler\", \"2\", \"0.006644518272425249\"], [\"Windows\", \"2\", \"0.006644518272425249\"], [\"FontSelectorDialog\", \"3\", \"0.009966777408637873\"], [\"StyleEditor\", \"4\", \"0.013289036544850499\"], [\"SelectLineRange\", \"2\", \"0.006644518272425249\"], [\"ErrorListDialog\", \"2\", \"0.006644518272425249\"], [\"PasteFromListDialog\", \"4\", \"0.013289036544850499\"], [\"ContextAddDialog\", \"6\", \"0.019933554817275746\"], [\"AboutDialog\", \"2\", \"0.006644518272425249\"], [\"ViewRegisters\", \"2\", \"0.006644518272425249\"], [\"AddAbbrevDialog\", \"2\", \"0.006644518272425249\"], [\"ParserRule\", \"5\", \"0.016611295681063124\"], [\"JEditMetalTheme15\", \"2\", \"0.006644518272425249\"], [\"JEditMetalTheme14\", \"2\", \"0.006644518272425249\"], [\"TextAreaDropHandler\", \"2\", \"0.006644518272425249\"], [\"MyFocusTraversalPolicy\", \"2\", \"0.006644518272425249\"], [\"Broken\", \"2\", \"0.006644518272425249\"], [\"MarkerViewer\", \"2\", \"0.006644518272425249\"], [\"RegisterChanged\", \"2\", \"0.006644518272425249\"], [\"RegisterViewer\", \"2\", \"0.006644518272425249\"], [\"GoToNodeAction\", \"2\", \"0.006644518272425249\"], [\"HyperSearchFileNode\", \"2\", \"0.006644518272425249\"], [\"HyperSearchNode\", \"2\", \"0.006644518272425249\"], [\"MutableListModel\", \"2\", \"0.006644518272425249\"], [\"BufferLoadRequest\", \"2\", \"0.006644518272425249\"], [\"OpenBracketIndentRule\", \"2\", \"0.006644518272425249\"], [\"HelpViewerDialog\", \"2\", \"0.006644518272425249\"], [\"HelpViewerInterface\", \"2\", \"0.006644518272425249\"], [\"HelpSearchPanel\", \"2\", \"0.006644518272425249\"], [\"LinkHandler\", \"3\", \"0.009966777408637873\"], [\"BufferChanging\", \"2\", \"0.006644518272425249\"], [\"JEditBuffer\", \"2\", \"0.006644518272425249\"], [\"SegmentCharSequence\", \"2\", \"0.006644518272425249\"], [\"PluginListHandler\", \"2\", \"0.006644518272425249\"], [\"AllBufferSet\", \"2\", \"0.006644518272425249\"], [\"MirrorList\", \"4\", \"0.013289036544850499\"], [\"MirrorListHandler\", \"2\", \"0.006644518272425249\"], [\"SearchMatcher\", \"2\", \"0.006644518272425249\"], [\"DirectoryLoadedAWTRequest\", \"4\", \"0.013289036544850499\"], [\"ActionListHandler\", \"2\", \"0.006644518272425249\"], [\"ModeCatalogHandler\", \"2\", \"0.006644518272425249\"], [\"TagDecl\", \"3\", \"0.009966777408637873\"], [\"ColorEntry\", \"2\", \"0.006644518272425249\"], [\"PatternSearchMatcher\", \"2\", \"0.006644518272425249\"], [\"WindowTableModel\", \"4\", \"0.013289036544850499\"], [\"IOUtilities\", \"2\", \"0.006644518272425249\"], [\"FavoritesProvider\", \"2\", \"0.006644518272425249\"], [\"Branch\", \"2\", \"0.006644518272425249\"], [\"BufferListSet\", \"2\", \"0.006644518272425249\"], [\"StringICaseCompare\", \"3\", \"0.009966777408637873\"], [\"WindowCompare\", \"3\", \"0.009966777408637873\"], [\"AbbrevCompare\", \"3\", \"0.009966777408637873\"], [\"DockableWindowCompare\", \"2\", \"0.006644518272425249\"], [\"MenuItemCompare\", \"4\", \"0.013289036544850499\"], [\"ButtonCompare\", \"4\", \"0.013289036544850499\"], [\"PluginCompare\", \"2\", \"0.006644518272425249\"], [\"Log\", \"2\", \"0.006644518272425249\"], [\"Interpreter\", \"1\", \"0.0033222591362126247\"], [\"VICaretStatus\", \"2\", \"0.006644518272425249\"], [\"WorkThread\", \"3\", \"0.009966777408637873\"], [\"ColorTableModel\", \"4\", \"0.013289036544850499\"], [\"TabbedPane\", \"1\", \"0.0033222591362126247\"], [\"TipPanel\", \"1\", \"0.0033222591362126247\"], [\"StyleRenderer\", \"1\", \"0.0033222591362126247\"], [\"WorkThreadProgressListener\", \"1\", \"0.0033222591362126247\"], [\"WorkThreadHandler\", \"1\", \"0.0033222591362126247\"], [\"TOCCellRenderer\", \"1\", \"0.0033222591362126247\"], [\"HelpNode\", \"1\", \"0.0033222591362126247\"], [\"REMatch\", \"1\", \"0.0033222591362126247\"], [\"Button\", \"2\", \"0.006644518272425249\"], [\"ButtonCellRenderer\", \"1\", \"0.0033222591362126247\"], [\"MenuItem\", \"1\", \"0.0033222591362126247\"], [\"FileCompare\", \"1\", \"0.0033222591362126247\"], [\"FoldListener\", \"1\", \"0.0033222591362126247\"], [\"FoldEventHandler\", \"1\", \"0.0033222591362126247\"], [\"ContentManager\", \"1\", \"0.0033222591362126247\"], [\"ReadWriteLock\", \"1\", \"0.0033222591362126247\"], [\"PosTopHalf\", \"1\", \"0.0033222591362126247\"], [\"AboutPanel\", \"1\", \"0.0033222591362126247\"], [\"CompoundEdit\", \"1\", \"0.0033222591362126247\"], [\"BrowserColorsModel\", \"1\", \"0.0033222591362126247\"], [\"StyleChoice\", \"1\", \"0.0033222591362126247\"], [\"ColorChoice\", \"1\", \"0.0033222591362126247\"], [\"SizeSaver\", \"2\", \"0.006644518272425249\"], [\"MarkersSaveRequest\", \"1\", \"0.0033222591362126247\"], [\"BufferSaveRequest\", \"1\", \"0.0033222591362126247\"], [\"JEditKillRing\", \"1\", \"0.0033222591362126247\"]]"
            },
            "m5": {
                "content": "The co-change relationships for the starting entity `jEdit.java` have been retrieved successfully. The results indicate various entities that are frequently changed together with `jEdit.java`, along with their support counts and confidence scores.\n\n### Observations:\n- Entities like `JEditTextArea.java`, `MiscUtilities.java`, `Buffer.java`, `View.java`, and `GUIUtilities.java` show high confidence scores (greater than 0.15), indicating a strong historical correlation in changes.\n- Other entities such as `DockableWindowManager.java`, `ActionHandler.java`, `TextAreaPainter.java`, `EditPane.java`, and `PluginJAR.java` also show moderate to high confidence scores, suggesting they may be impacted by or related to changes in `jEdit.java`.\n\n### Next Steps:\nTo further analyze the impact of changes in `jEdit.java`, we should explore its **call graph** to identify which entities it directly uses or depends on within the system. This will help us understand the direct dependencies beyond historical co-changes.\n\nI will now call the `get_call_graph` function for `jEdit.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_058e234a974f4d1a8ba756",
                        "function": {
                            "arguments": "{\"entity\": \"jEdit.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"\", \"BufferIORequest\", \"PluginManager\", \"KillRing\", \"\", \"HelpViewer\", \"\", \"\", \"SearchAndReplace\", \"\", \"Log\", \"\", \"UtilEvalError\"]"
            },
            "m7": {
                "content": "The call graph for `jEdit.java` has been retrieved. It lists several entities that `jEdit.java` directly interacts with or uses, including:\n\n- **BufferIORequest**\n- **PluginManager**\n- **KillRing**\n- **HelpViewer**\n- **SearchAndReplace**\n- **Log**\n- **UtilEvalError**\n\nThese entities represent direct dependencies of `jEdit.java`, meaning changes in `jEdit.java` could potentially impact these components.\n\n### Correlation with Co-Change Results:\nInterestingly, some of these entities (e.g., `PluginManager`, `KillRing`, and `SearchAndReplace`) also appeared in the co-change analysis with relatively high confidence scores, reinforcing their relevance to `jEdit.java`.\n\nTo better understand how `jEdit.java` is related to these entities, we can now analyze its source code to identify key interactions. This will help us determine whether synchronization or coordinated changes are necessary.\n\nNext, I'll retrieve the **source code** of `jEdit.java` using the `get_origin_code` function.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_d9d7e07330e649788b568a",
                        "function": {
                            "arguments": "{\"entity\": \"jEdit.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.gjt.sp.jedit;\\nimport bsh.UtilEvalError;\\nimport com.microstar.xml.*;\\nimport javax.swing.plaf.metal.*;\\nimport javax.swing.*;\\nimport java.awt.event.KeyEvent;\\nimport java.awt.*;\\nimport java.io.*;\\nimport java.net.*;\\nimport java.text.MessageFormat;\\nimport java.util.*;\\nimport org.gjt.sp.jedit.buffer.BufferIORequest;\\nimport org.gjt.sp.jedit.buffer.KillRing;\\nimport org.gjt.sp.jedit.msg.*;\\nimport org.gjt.sp.jedit.gui.*;\\nimport org.gjt.sp.jedit.help.HelpViewer;\\nimport org.gjt.sp.jedit.io.*;\\nimport org.gjt.sp.jedit.pluginmgr.PluginManager;\\nimport org.gjt.sp.jedit.search.SearchAndReplace;\\nimport org.gjt.sp.jedit.syntax.*;\\nimport org.gjt.sp.jedit.textarea.*;\\nimport org.gjt.sp.util.Log;\\npublic class jEdit\\n{\\n\\tpublic static String getVersion()\\n\\t{\\n\\t\\treturn MiscUtilities.buildToVersion(getBuild());\\n\\t} \\n\\tpublic static String getBuild()\\n\\t{\\n\\t\\t\\t\\treturn \\\"04.03.01.00\\\";\\n\\t} \\n\\tpublic static void main(String[] args)\\n\\t{\\n\\t\\t\\t\\tString javaVersion = System.getProperty(\\\"java.version\\\");\\n\\t\\tif(javaVersion.compareTo(\\\"1.4\\\") < 0)\\n\\t\\t{\\n\\t\\t\\tSystem.err.println(\\\"You are running Java version \\\"\\n\\t\\t\\t\\t+ javaVersion + \\\".\\\");\\n\\t\\t\\tSystem.err.println(\\\"jEdit requires Java 1.4 or later.\\\");\\n\\t\\t\\tSystem.exit(1);\\n\\t\\t} \\n\\t\\t\\t\\t\\t\\tmainThread = Thread.currentThread();\\n\\t\\tsettingsDirectory = \\\".jedit\\\";\\n\\t\\t\\t\\t\\t\\tbackground = OperatingSystem.isMacOS();\\n\\t\\t\\t\\tboolean endOpts = false;\\n\\t\\tint level = Log.WARNING;\\n\\t\\tString portFile = \\\"server\\\";\\n\\t\\tboolean restore = true;\\n\\t\\tboolean newView = true;\\n\\t\\tboolean newPlainView = false;\\n\\t\\tboolean gui = true; \\t\\tboolean loadPlugins = true;\\n\\t\\tboolean runStartupScripts = true;\\n\\t\\tboolean quit = false;\\n\\t\\tboolean wait = false;\\n\\t\\tString userDir = System.getProperty(\\\"user.dir\\\");\\n\\t\\t\\t\\tString scriptFile = null;\\n\\t\\tfor(int i = 0; i < args.length; i++)\\n\\t\\t{\\n\\t\\t\\tString arg = args[i];\\n\\t\\t\\tif(arg == null)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\telse if(arg.length() == 0)\\n\\t\\t\\t\\targs[i] = null;\\n\\t\\t\\telse if(arg.startsWith(\\\"-\\\") && !endOpts)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(arg.equals(\\\"--\\\"))\\n\\t\\t\\t\\t\\tendOpts = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-usage\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tversion();\\n\\t\\t\\t\\t\\tSystem.err.println();\\n\\t\\t\\t\\t\\tusage();\\n\\t\\t\\t\\t\\tSystem.exit(1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(arg.equals(\\\"-version\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tversion();\\n\\t\\t\\t\\t\\tSystem.exit(1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-log=\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tlevel = Integer.parseInt(arg.substring(\\\"-log=\\\".length()));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tSystem.err.println(\\\"Malformed option: \\\" + arg);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse if(arg.equals(\\\"-nosettings\\\"))\\n\\t\\t\\t\\t\\tsettingsDirectory = null;\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-settings=\\\"))\\n\\t\\t\\t\\t\\tsettingsDirectory = arg.substring(10);\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-noserver\\\"))\\n\\t\\t\\t\\t\\tportFile = null;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-server\\\"))\\n\\t\\t\\t\\t\\tportFile = \\\"server\\\";\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-server=\\\"))\\n\\t\\t\\t\\t\\tportFile = arg.substring(8);\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-background\\\"))\\n\\t\\t\\t\\t\\tbackground = true;\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-nobackground\\\"))\\n\\t\\t\\t\\t\\tbackground = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-gui\\\"))\\n\\t\\t\\t\\t\\tgui = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-nogui\\\"))\\n\\t\\t\\t\\t\\tgui = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-newview\\\"))\\n\\t\\t\\t\\t\\tnewView = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-newplainview\\\"))\\n\\t\\t\\t\\t\\tnewPlainView = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-reuseview\\\"))\\n\\t\\t\\t\\t\\tnewPlainView = newView = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-restore\\\"))\\n\\t\\t\\t\\t\\trestore = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-norestore\\\"))\\n\\t\\t\\t\\t\\trestore = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-plugins\\\"))\\n\\t\\t\\t\\t\\tloadPlugins = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-noplugins\\\"))\\n\\t\\t\\t\\t\\tloadPlugins = false;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-startupscripts\\\"))\\n\\t\\t\\t\\t\\trunStartupScripts = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-nostartupscripts\\\"))\\n\\t\\t\\t\\t\\trunStartupScripts = false;\\n\\t\\t\\t\\telse if(arg.startsWith(\\\"-run=\\\"))\\n\\t\\t\\t\\t\\tscriptFile = arg.substring(5);\\n\\t\\t\\t\\telse if(arg.equals(\\\"-wait\\\"))\\n\\t\\t\\t\\t\\twait = true;\\n\\t\\t\\t\\telse if(arg.equals(\\\"-quit\\\"))\\n\\t\\t\\t\\t\\tquit = true;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tSystem.err.println(\\\"Unknown option: \\\"\\n\\t\\t\\t\\t\\t\\t+ arg);\\n\\t\\t\\t\\t\\tusage();\\n\\t\\t\\t\\t\\tSystem.exit(1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\targs[i] = null;\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\t\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tsettingsDirectory = MiscUtilities.constructPath(\\n\\t\\t\\t\\tSystem.getProperty(\\\"user.home\\\"),\\n\\t\\t\\t\\tsettingsDirectory);\\n\\t\\t\\tsettingsDirectory = MiscUtilities.resolveSymlinks(\\n\\t\\t\\t\\tsettingsDirectory);\\n\\t\\t}\\n\\t\\tif(settingsDirectory != null && portFile != null)\\n\\t\\t\\tportFile = MiscUtilities.constructPath(settingsDirectory,portFile);\\n\\t\\telse\\n\\t\\t\\tportFile = null;\\n\\t\\tLog.init(true,level);\\n\\t\\t\\t\\tif(portFile != null && new File(portFile).exists())\\n\\t\\t{\\n\\t\\t\\tint port, key;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tBufferedReader in = new BufferedReader(new FileReader(portFile));\\n\\t\\t\\t\\tString check = in.readLine();\\n\\t\\t\\t\\tif(!check.equals(\\\"b\\\"))\\n\\t\\t\\t\\t\\tthrow new Exception(\\\"Wrong port file format\\\");\\n\\t\\t\\t\\tport = Integer.parseInt(in.readLine());\\n\\t\\t\\t\\tkey = Integer.parseInt(in.readLine());\\n\\t\\t\\t\\tSocket socket = new Socket(InetAddress.getByName(\\\"127.0.0.1\\\"),port);\\n\\t\\t\\t\\tDataOutputStream out = new DataOutputStream(\\n\\t\\t\\t\\t\\tsocket.getOutputStream());\\n\\t\\t\\t\\tout.writeInt(key);\\n\\t\\t\\t\\tString script;\\n\\t\\t\\t\\tif(quit)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tscript = \\\"socket.close();\\\\n\\\"\\n\\t\\t\\t\\t\\t\\t+ \\\"jEdit.exit(null,true);\\\\n\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tscript = makeServerScript(wait,restore,\\n\\t\\t\\t\\t\\t\\tnewView,newPlainView,args,\\n\\t\\t\\t\\t\\t\\tscriptFile);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tout.writeUTF(script);\\n\\t\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,\\\"Waiting for server\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tsocket.getInputStream().read();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tin.close();\\n\\t\\t\\t\\tout.close();\\n\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"An error occurred\\\"\\n\\t\\t\\t\\t\\t+ \\\" while connecting to the jEdit server instance.\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"This probably means that\\\"\\n\\t\\t\\t\\t\\t+ \\\" jEdit crashed and/or exited abnormally\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"the last time it was run.\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"If you don't\\\"\\n\\t\\t\\t\\t\\t+ \\\" know what this means, don't worry.\\\");\\n\\t\\t\\t\\tLog.log(Log.NOTICE,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(quit)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t} \\n\\t\\t\\t\\t\\t\\tif(!new File(settingsDirectory,\\\"nosplash\\\").exists())\\n\\t\\t\\tGUIUtilities.showSplashScreen();\\n\\t\\t\\t\\tWriter stream;\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile _settingsDirectory = new File(settingsDirectory);\\n\\t\\t\\tif(!_settingsDirectory.exists())\\n\\t\\t\\t\\t_settingsDirectory.mkdirs();\\n\\t\\t\\tFile _macrosDirectory = new File(settingsDirectory,\\\"macros\\\");\\n\\t\\t\\tif(!_macrosDirectory.exists())\\n\\t\\t\\t\\t_macrosDirectory.mkdir();\\n\\t\\t\\tString logPath = MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"activity.log\\\");\\n\\t\\t\\tbackupSettingsFile(new File(logPath));\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tstream = new BufferedWriter(new FileWriter(logPath));\\n\\t\\t\\t\\t\\t\\t\\t\\tString lineSep = System.getProperty(\\\"line.separator\\\");\\n\\t\\t\\t\\tstream.write(\\\"Log file created on \\\" + new Date());\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"IMPORTANT:\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"Because updating this file after \\\"\\n\\t\\t\\t\\t\\t+ \\\"every log message would kill\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"performance, it will be *incomplete* \\\"\\n\\t\\t\\t\\t\\t+ \\\"unless you invoke the\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t\\tstream.write(\\\"Utilities->Troubleshooting->Update \\\"\\n\\t\\t\\t\\t\\t+ \\\"Activity Log on Disk command!\\\");\\n\\t\\t\\t\\tstream.write(lineSep);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\te.printStackTrace();\\n\\t\\t\\t\\tstream = null;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tstream = null;\\n\\t\\t} \\n\\t\\tLog.setLogWriter(stream);\\n\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"jEdit version \\\" + getVersion());\\n\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"Settings directory is \\\"\\n\\t\\t\\t+ settingsDirectory);\\n\\t\\t\\t\\tinitMisc();\\n\\t\\tinitSystemProperties();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\tGUIUtilities.init();\\n\\t\\tBeanShell.init();\\n\\t\\tif(jEditHome != null)\\n\\t\\t\\tinitSiteProperties();\\n\\t\\tinitUserProperties();\\n\\t\\t\\t\\tif(portFile != null)\\n\\t\\t{\\n\\t\\t\\tserver = new EditServer(portFile);\\n\\t\\t\\tif(!server.isOK())\\n\\t\\t\\t\\tserver = null;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tif(background)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbackground = false;\\n\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"You cannot specify both the\\\"\\n\\t\\t\\t\\t\\t+ \\\" -background and -noserver switches\\\");\\n\\t\\t\\t}\\n\\t\\t} \\n\\t\\t\\t\\tinitPLAF();\\n\\t\\tVFSManager.init();\\n\\t\\tinitResources();\\n\\t\\tSearchAndReplace.load();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\tif(loadPlugins)\\n\\t\\t\\tinitPlugins();\\n\\t\\tHistoryModel.loadHistory();\\n\\t\\tBufferHistory.load();\\n\\t\\tKillRing.load();\\n\\t\\tpropertiesChanged();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\t\\t\\tsortBuffers = getBooleanProperty(\\\"sortBuffers\\\");\\n\\t\\tsortByName = getBooleanProperty(\\\"sortByName\\\");\\n\\t\\treloadModes();\\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\t\\t\\tfor(int i = 0; i < jars.size(); i++)\\n\\t\\t{\\n\\t\\t\\t((PluginJAR)jars.elementAt(i)).activatePluginIfNecessary();\\n\\t\\t} \\n\\t\\t\\t\\tMacros.loadMacros();\\n\\t\\tMacros.getMacroActionSet().initKeyBindings();\\n\\t\\tif(runStartupScripts && jEditHome != null)\\n\\t\\t{\\n\\t\\t\\tString path = MiscUtilities.constructPath(jEditHome,\\\"startup\\\");\\n\\t\\t\\tFile file = new File(path);\\n\\t\\t\\tif(file.exists())\\n\\t\\t\\t\\trunStartupScripts(file);\\n\\t\\t}\\n\\t\\tif(runStartupScripts && settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tString path = MiscUtilities.constructPath(settingsDirectory,\\\"startup\\\");\\n\\t\\t\\tFile file = new File(path);\\n\\t\\t\\tif(!file.exists())\\n\\t\\t\\t\\tfile.mkdirs();\\n\\t\\t\\telse\\n\\t\\t\\t\\trunStartupScripts(file);\\n\\t\\t} \\n\\t\\t\\t\\tif(scriptFile != null)\\n\\t\\t{\\n\\t\\t\\tscriptFile = MiscUtilities.constructPath(userDir,scriptFile);\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tBeanShell.getNameSpace().setVariable(\\\"args\\\",args);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(UtilEvalError e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t\\tBeanShell.runScript(null,scriptFile,null,false);\\n\\t\\t} \\n\\t\\tGUIUtilities.advanceSplashProgress();\\n\\t\\t\\t\\tfinishStartup(gui,restore,userDir,args);\\n\\t} \\n\\tpublic static final Properties getProperties()\\n\\t{\\n\\t\\treturn propMgr.getProperties();\\n\\t} \\n\\tpublic static final String getProperty(String name)\\n\\t{\\n\\t\\treturn propMgr.getProperty(name);\\n\\t} \\n\\tpublic static final String getProperty(String name, String def)\\n\\t{\\n\\t\\tString value = propMgr.getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t\\treturn value;\\n\\t} \\n\\tpublic static final String getProperty(String name, Object[] args)\\n\\t{\\n\\t\\tif(name == null)\\n\\t\\t\\treturn null;\\n\\t\\tif(args == null)\\n\\t\\t\\treturn getProperty(name);\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tString value = getProperty(name);\\n\\t\\t\\tif(value == null)\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn MessageFormat.format(value,args);\\n\\t\\t}\\n\\t} \\n\\tpublic static final boolean getBooleanProperty(String name)\\n\\t{\\n\\t\\treturn getBooleanProperty(name,false);\\n\\t} \\n\\tpublic static final boolean getBooleanProperty(String name, boolean def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse if(value.equals(\\\"true\\\") || value.equals(\\\"yes\\\")\\n\\t\\t\\t|| value.equals(\\\"on\\\"))\\n\\t\\t\\treturn true;\\n\\t\\telse if(value.equals(\\\"false\\\") || value.equals(\\\"no\\\")\\n\\t\\t\\t|| value.equals(\\\"off\\\"))\\n\\t\\t\\treturn false;\\n\\t\\telse\\n\\t\\t\\treturn def;\\n\\t} \\n\\tpublic static final int getIntegerProperty(String name, int def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn Integer.parseInt(value.trim());\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tpublic static double getDoubleProperty(String name, double def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn Double.parseDouble(value.trim());\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic static final Font getFontProperty(String name)\\n\\t{\\n\\t\\treturn getFontProperty(name,null);\\n\\t} \\n\\tpublic static final Font getFontProperty(String name, Font def)\\n\\t{\\n\\t\\tString family = getProperty(name);\\n\\t\\tString sizeString = getProperty(name + \\\"size\\\");\\n\\t\\tString styleString = getProperty(name + \\\"style\\\");\\n\\t\\tif(family == null || sizeString == null || styleString == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tint size, style;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tsize = Integer.parseInt(sizeString);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tstyle = Integer.parseInt(styleString);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn def;\\n\\t\\t\\t}\\n\\t\\t\\treturn new Font(family,style,size);\\n\\t\\t}\\n\\t} \\n\\tpublic static Color getColorProperty(String name)\\n\\t{\\n\\t\\treturn getColorProperty(name,Color.black);\\n\\t} \\n\\tpublic static Color getColorProperty(String name, Color def)\\n\\t{\\n\\t\\tString value = getProperty(name);\\n\\t\\tif(value == null)\\n\\t\\t\\treturn def;\\n\\t\\telse\\n\\t\\t\\treturn GUIUtilities.parseColor(value,def);\\n\\t} \\n\\tpublic static void setColorProperty(String name, Color value)\\n\\t{\\n\\t\\tsetProperty(name,GUIUtilities.getColorHexString(value));\\n\\t} \\n\\tpublic static final void setProperty(String name, String value)\\n\\t{\\n\\t\\tpropMgr.setProperty(name,value);\\n\\t} \\n\\tpublic static final void setTemporaryProperty(String name, String value)\\n\\t{\\n\\t\\tpropMgr.setTemporaryProperty(name,value);\\n\\t} \\n\\tpublic static final void setBooleanProperty(String name, boolean value)\\n\\t{\\n\\t\\tsetProperty(name,value ? \\\"true\\\" : \\\"false\\\");\\n\\t} \\n\\tpublic static final void setIntegerProperty(String name, int value)\\n\\t{\\n\\t\\tsetProperty(name,String.valueOf(value));\\n\\t} \\n\\t\\tpublic static final void setDoubleProperty(String name, double value)\\n\\t{\\n\\t\\tsetProperty(name,String.valueOf(value));\\n\\t}\\n\\tpublic static final void setFontProperty(String name, Font value)\\n\\t{\\n\\t\\tsetProperty(name,value.getFamily());\\n\\t\\tsetIntegerProperty(name + \\\"size\\\",value.getSize());\\n\\t\\tsetIntegerProperty(name + \\\"style\\\",value.getStyle());\\n\\t} \\n\\tpublic static final void unsetProperty(String name)\\n\\t{\\n\\t\\tpropMgr.unsetProperty(name);\\n\\t} \\n\\tpublic static final void resetProperty(String name)\\n\\t{\\n\\t\\tpropMgr.resetProperty(name);\\n\\t} \\n\\tpublic static void propertiesChanged()\\n\\t{\\n\\t\\tinitKeyBindings();\\n\\t\\tAutosave.setInterval(getIntegerProperty(\\\"autosave\\\",30));\\n\\t\\tsaveCaret = getBooleanProperty(\\\"saveCaret\\\");\\n\\t\\tUIDefaults defaults = UIManager.getDefaults();\\n\\t\\t\\t\\tFont font = getFontProperty(\\\"view.font\\\");\\n\\t\\t\\t\\tdefaults.put(\\\"TextArea.font\\\",font);\\n\\t\\tdefaults.put(\\\"TextPane.font\\\",font);\\n\\t\\t\\t\\tToolTipManager.sharedInstance().setEnabled(\\n\\t\\t\\tjEdit.getBooleanProperty(\\\"showTooltips\\\"));\\n\\t\\tinitProxy();\\n\\t\\t\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tbuffer.resetCachedProperties();\\n\\t\\t\\tbuffer.propertiesChanged();\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tHistoryModel.propertiesChanged();\\n\\t\\tKillRing.propertiesChanged();\\n\\t\\tEditBus.send(new PropertiesChanged(null));\\n\\t} \\n\\tpublic static String[] getNotLoadedPluginJARs()\\n\\t{\\n\\t\\tVector returnValue = new Vector();\\n\\t\\tif(jEditHome != null)\\n\\t\\t{\\n\\t\\t\\tString systemPluginDir = MiscUtilities\\n\\t\\t\\t\\t.constructPath(jEditHome,\\\"jars\\\");\\n\\t\\t\\tString[] list = new File(systemPluginDir).list();\\n\\t\\t\\tif(list != null)\\n\\t\\t\\t\\tgetNotLoadedPluginJARs(returnValue,systemPluginDir,list);\\n\\t\\t}\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tString userPluginDir = MiscUtilities\\n\\t\\t\\t\\t.constructPath(settingsDirectory,\\\"jars\\\");\\n\\t\\t\\tString[] list = new File(userPluginDir).list();\\n\\t\\t\\tif(list != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tgetNotLoadedPluginJARs(returnValue,\\n\\t\\t\\t\\t\\tuserPluginDir,list);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tString[] _returnValue = new String[returnValue.size()];\\n\\t\\treturnValue.copyInto(_returnValue);\\n\\t\\treturn _returnValue;\\n\\t} \\n\\tpublic static EditPlugin getPlugin(String name)\\n\\t{\\n\\t\\treturn getPlugin(name, false);\\n\\t} \\n\\tpublic static EditPlugin getPlugin(String name, boolean loadIfNecessary)\\n\\t{\\n\\t\\tEditPlugin[] plugins = getPlugins();\\n\\t\\tEditPlugin plugin = null;\\n\\t\\tfor(int i = 0; i < plugins.length; i++)\\n\\t\\t{\\n\\t\\t\\tif(plugins[i].getClassName().equals(name))\\n\\t\\t\\t\\tplugin = plugins[i];\\n\\t\\t\\tif(loadIfNecessary)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(plugin instanceof EditPlugin.Deferred)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tplugin.getPluginJAR().activatePlugin();\\n\\t\\t\\t\\t\\tplugin = plugin.getPluginJAR().getPlugin();\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn plugin;\\n\\t} \\n\\tpublic static EditPlugin[] getPlugins()\\n\\t{\\n\\t\\tVector vector = new Vector();\\n\\t\\tfor(int i = 0; i < jars.size(); i++)\\n\\t\\t{\\n\\t\\t\\tEditPlugin plugin = ((PluginJAR)jars.elementAt(i))\\n\\t\\t\\t\\t.getPlugin();\\n\\t\\t\\tif(plugin != null)\\n\\t\\t\\t\\tvector.add(plugin);\\n\\t\\t}\\n\\t\\tEditPlugin[] array = new EditPlugin[vector.size()];\\n\\t\\tvector.copyInto(array);\\n\\t\\treturn array;\\n\\t} \\n\\tpublic static PluginJAR[] getPluginJARs()\\n\\t{\\n\\t\\tPluginJAR[] array = new PluginJAR[jars.size()];\\n\\t\\tjars.copyInto(array);\\n\\t\\treturn array;\\n\\t} \\n\\tpublic static PluginJAR getPluginJAR(String path)\\n\\t{\\n\\t\\tfor(int i = 0; i < jars.size(); i++)\\n\\t\\t{\\n\\t\\t\\tPluginJAR jar = (PluginJAR)jars.elementAt(i);\\n\\t\\t\\tif(jar.getPath().equals(path))\\n\\t\\t\\t\\treturn jar;\\n\\t\\t}\\n\\t\\treturn null;\\n\\t} \\n\\tpublic static void addPluginJAR(String path)\\n\\t{\\n\\t\\tPluginJAR jar = new PluginJAR(new File(path));\\n\\t\\tjars.addElement(jar);\\n\\t\\tjar.init();\\n\\t\\tEditBus.send(new PluginUpdate(jar,PluginUpdate.LOADED,false));\\n\\t\\tif(!isMainThread())\\n\\t\\t{\\n\\t\\t\\tEditBus.send(new DynamicMenuChanged(\\\"plugins\\\"));\\n\\t\\t\\tinitKeyBindings();\\n\\t\\t}\\n\\t} \\n\\tprivate static void addPluginJARsFromDirectory(String directory)\\n\\t{\\n\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"Loading plugins from \\\"\\n\\t\\t\\t+ directory);\\n\\t\\tFile file = new File(directory);\\n\\t\\tif(!(file.exists() && file.isDirectory()))\\n\\t\\t\\treturn;\\n\\t\\tString[] plugins = file.list();\\n\\t\\tif(plugins == null)\\n\\t\\t\\treturn;\\n\\t\\tfor(int i = 0; i < plugins.length; i++)\\n\\t\\t{\\n\\t\\t\\tString plugin = plugins[i];\\n\\t\\t\\tif(!plugin.toLowerCase().endsWith(\\\".jar\\\"))\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\tString path = MiscUtilities.constructPath(directory,plugin);\\n\\t\\t\\t\\t\\t\\tif(plugin.equals(\\\"EditBuddy.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"PluginManager.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"Firewall.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"Tidy.jar\\\")\\n\\t\\t\\t\\t|| plugin.equals(\\\"DragAndDrop.jar\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tpluginError(path,\\\"plugin-error.obsolete\\\",null);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\taddPluginJAR(path);\\n\\t\\t}\\n\\t} \\n\\tpublic static void removePluginJAR(PluginJAR jar, boolean exit)\\n\\t{\\n\\t\\tif(exit)\\n\\t\\t{\\n\\t\\t\\tjar.uninit(true);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tjar.uninit(false);\\n\\t\\t\\tjars.removeElement(jar);\\n\\t\\t\\tinitKeyBindings();\\n\\t\\t}\\n\\t\\tEditBus.send(new PluginUpdate(jar,PluginUpdate.UNLOADED,exit));\\n\\t\\tif(!isMainThread() && !exit)\\n\\t\\t\\tEditBus.send(new DynamicMenuChanged(\\\"plugins\\\"));\\n\\t} \\n\\tpublic static ActionContext getActionContext()\\n\\t{\\n\\t\\treturn actionContext;\\n\\t} \\n\\tpublic static void addActionSet(ActionSet actionSet)\\n\\t{\\n\\t\\tactionContext.addActionSet(actionSet);\\n\\t} \\n\\tpublic static void removeActionSet(ActionSet actionSet)\\n\\t{\\n\\t\\tactionContext.removeActionSet(actionSet);\\n\\t} \\n\\tpublic static ActionSet getBuiltInActionSet()\\n\\t{\\n\\t\\treturn builtInActionSet;\\n\\t} \\n\\tpublic static ActionSet[] getActionSets()\\n\\t{\\n\\t\\treturn actionContext.getActionSets();\\n\\t} \\n\\tpublic static EditAction getAction(String name)\\n\\t{\\n\\t\\treturn actionContext.getAction(name);\\n\\t} \\n\\tpublic static ActionSet getActionSetForAction(String action)\\n\\t{\\n\\t\\treturn actionContext.getActionSetForAction(action);\\n\\t} \\n\\tpublic static ActionSet getActionSetForAction(EditAction action)\\n\\t{\\n\\t\\treturn actionContext.getActionSetForAction(action.getName());\\n\\t} \\n\\tpublic static EditAction[] getActions()\\n\\t{\\n\\t\\tString[] names = actionContext.getActionNames();\\n\\t\\tEditAction[] actions = new EditAction[names.length];\\n\\t\\tfor(int i = 0; i < actions.length; i++)\\n\\t\\t{\\n\\t\\t\\tactions[i] = actionContext.getAction(names[i]);\\n\\t\\t\\tif(actions[i] == null)\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\\"wtf: \\\" + names[i]);\\n\\t\\t}\\n\\t\\treturn actions;\\n\\t} \\n\\tpublic static String[] getActionNames()\\n\\t{\\n\\t\\treturn actionContext.getActionNames();\\n\\t} \\n\\tpublic static void reloadModes()\\n\\t{\\n\\t\\tmodes = new Vector(50);\\n\\t\\t\\t\\tif(jEditHome == null)\\n\\t\\t\\tloadModeCatalog(\\\"/modes/catalog\\\",true);\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tloadModeCatalog(MiscUtilities.constructPath(jEditHome,\\n\\t\\t\\t\\t\\\"modes\\\",\\\"catalog\\\"),false);\\n\\t\\t} \\n\\t\\t\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile userModeDir = new File(MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"modes\\\"));\\n\\t\\t\\tif(!userModeDir.exists())\\n\\t\\t\\t\\tuserModeDir.mkdirs();\\n\\t\\t\\tFile userCatalog = new File(MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"modes\\\",\\\"catalog\\\"));\\n\\t\\t\\tif(!userCatalog.exists())\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tFileWriter out = null;\\n\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tout = new FileWriter(userCatalog);\\n\\t\\t\\t\\t\\tout.write(jEdit.getProperty(\\\"defaultCatalog\\\"));\\n\\t\\t\\t\\t\\tout.close();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfinally\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tif(out != null)\\n\\t\\t\\t\\t\\t\\t\\tout.close();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch(IOException e)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tloadModeCatalog(userCatalog.getPath(),false);\\n\\t\\t} \\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbuffer.setMode();\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t} \\n\\tpublic static Mode getMode(String name)\\n\\t{\\n\\t\\tfor(int i = 0; i < modes.size(); i++)\\n\\t\\t{\\n\\t\\t\\tMode mode = (Mode)modes.elementAt(i);\\n\\t\\t\\tif(mode.getName().equals(name))\\n\\t\\t\\t\\treturn mode;\\n\\t\\t}\\n\\t\\treturn null;\\n\\t} \\n\\tpublic static Mode[] getModes()\\n\\t{\\n\\t\\tMode[] array = new Mode[modes.size()];\\n\\t\\tmodes.copyInto(array);\\n\\t\\treturn array;\\n\\t} \\n\\tpublic static Buffer openFiles(View view, String parent, String[] args)\\n\\t{\\n\\t\\tBuffer retVal = null;\\n\\t\\tBuffer lastBuffer = null;\\n\\t\\tfor(int i = 0; i < args.length; i++)\\n\\t\\t{\\n\\t\\t\\tString arg = args[i];\\n\\t\\t\\tif(arg == null)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\telse if(arg.startsWith(\\\"+line:\\\") || arg.startsWith(\\\"+marker:\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(lastBuffer != null)\\n\\t\\t\\t\\t\\tgotoMarker(view,lastBuffer,arg);\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tlastBuffer = openFile(null,parent,arg,false,null);\\n\\t\\t\\tif(retVal == null && lastBuffer != null)\\n\\t\\t\\t\\tretVal = lastBuffer;\\n\\t\\t}\\n\\t\\tif(view != null && retVal != null)\\n\\t\\t\\tview.setBuffer(retVal);\\n\\t\\treturn retVal;\\n\\t} \\n\\tpublic static Buffer openFile(View view, String path)\\n\\t{\\n\\t\\treturn openFile(view,null,path,false,new Hashtable());\\n\\t} \\n\\tpublic static Buffer openFile(View view, String parent,\\n\\t\\tString path, boolean readOnly, boolean newFile)\\n\\t{\\n\\t\\treturn openFile(view,parent,path,newFile,new Hashtable());\\n\\t} \\n\\tpublic static Buffer openFile(View view, String parent,\\n\\t\\tString path, boolean readOnly, boolean newFile,\\n\\t\\tHashtable props)\\n\\t{\\n\\t\\treturn openFile(view,parent,path,newFile,props);\\n\\t} \\n\\tpublic static Buffer openFile(View view, String parent,\\n\\t\\tString path, boolean newFile, Hashtable props)\\n\\t{\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\tif(view != null && parent == null)\\n\\t\\t\\tparent = view.getBuffer().getDirectory();\\n\\t\\tif(MiscUtilities.isURL(path))\\n\\t\\t{\\n\\t\\t\\tif(MiscUtilities.getProtocolOfURL(path).equals(\\\"file\\\"))\\n\\t\\t\\t\\tpath = path.substring(5);\\n\\t\\t}\\n\\t\\tpath = MiscUtilities.constructPath(parent,path);\\n\\t\\tBuffer newBuffer;\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tBuffer buffer = getBuffer(path);\\n\\t\\t\\tif(buffer != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(view != null)\\n\\t\\t\\t\\t\\tview.setBuffer(buffer);\\n\\t\\t\\t\\treturn buffer;\\n\\t\\t\\t}\\n\\t\\t\\tif(props == null)\\n\\t\\t\\t\\tprops = new Hashtable();\\n\\t\\t\\tBufferHistory.Entry entry = BufferHistory.getEntry(path);\\n\\t\\t\\tif(entry != null && saveCaret && props.get(Buffer.CARET) == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tprops.put(Buffer.CARET,new Integer(entry.caret));\\n\\t\\t\\t}\\n\\t\\t\\tif(entry != null && props.get(Buffer.ENCODING) == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(entry.encoding != null)\\n\\t\\t\\t\\t\\tprops.put(Buffer.ENCODING,entry.encoding);\\n\\t\\t\\t}\\n\\t\\t\\tnewBuffer = new Buffer(path,newFile,false,props);\\n\\t\\t\\tif(!newBuffer.load(view,false))\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\taddBufferToList(newBuffer);\\n\\t\\t}\\n\\t\\tEditBus.send(new BufferUpdate(newBuffer,view,BufferUpdate.CREATED));\\n\\t\\tif(view != null)\\n\\t\\t\\tview.setBuffer(newBuffer);\\n\\t\\treturn newBuffer;\\n\\t} \\n\\tpublic static Buffer openTemporary(View view, String parent,\\n\\t\\tString path, boolean newFile)\\n\\t{\\n\\t\\tif(view != null && parent == null)\\n\\t\\t\\tparent = view.getBuffer().getDirectory();\\n\\t\\tif(MiscUtilities.isURL(path))\\n\\t\\t{\\n\\t\\t\\tif(MiscUtilities.getProtocolOfURL(path).equals(\\\"file\\\"))\\n\\t\\t\\t\\tpath = path.substring(5);\\n\\t\\t}\\n\\t\\tpath = MiscUtilities.constructPath(parent,path);\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tBuffer buffer = getBuffer(path);\\n\\t\\t\\tif(buffer != null)\\n\\t\\t\\t\\treturn buffer;\\n\\t\\t\\tbuffer = new Buffer(path,newFile,true,new Hashtable());\\n\\t\\t\\tif(!buffer.load(view,false))\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn buffer;\\n\\t\\t}\\n\\t} \\n\\tpublic static void commitTemporary(Buffer buffer)\\n\\t{\\n\\t\\tif(!buffer.isTemporary())\\n\\t\\t\\treturn;\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\taddBufferToList(buffer);\\n\\t\\tbuffer.commitTemporary();\\n\\t\\t\\t\\tEditBus.send(new BufferUpdate(buffer,null,BufferUpdate.CREATED));\\n\\t\\tEditBus.send(new BufferUpdate(buffer,null,BufferUpdate.LOAD_STARTED));\\n\\t\\tEditBus.send(new BufferUpdate(buffer,null,BufferUpdate.LOADED));\\n\\t} \\n\\tpublic static Buffer newFile(View view)\\n\\t{\\n\\t\\tString path;\\n\\t\\tif(view != null && view.getBuffer() != null)\\n\\t\\t{\\n\\t\\t\\tpath = view.getBuffer().getDirectory();\\n\\t\\t\\tVFS vfs = VFSManager.getVFSForPath(path);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif((vfs.getCapabilities() & VFS.WRITE_CAP) == 0)\\n\\t\\t\\t\\tpath = System.getProperty(\\\"user.home\\\");\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tpath = null;\\n\\t\\treturn newFile(view,path);\\n\\t} \\n\\tpublic static Buffer newFile(View view, String dir)\\n\\t{\\n\\t\\t\\t\\t\\t\\tif(dir != null\\n\\t\\t\\t&& buffersFirst != null\\n\\t\\t\\t&& buffersFirst == buffersLast\\n\\t\\t\\t&& buffersFirst.isUntitled()\\n\\t\\t\\t&& !buffersFirst.isDirty())\\n\\t\\t{\\n\\t\\t\\tcloseBuffer(view,buffersFirst);\\n\\t\\t\\t\\t\\t\\treturn buffersFirst;\\n\\t\\t}\\n\\t\\t\\t\\tint untitledCount = 0;\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(buffer.getName().startsWith(\\\"Untitled-\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tuntitledCount = Math.max(untitledCount,\\n\\t\\t\\t\\t\\t\\tInteger.parseInt(buffer.getName()\\n\\t\\t\\t\\t\\t\\t.substring(9)));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch(NumberFormatException nf)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\treturn openFile(view,dir,\\\"Untitled-\\\" + (untitledCount+1),true,null);\\n\\t} \\n\\tpublic static boolean closeBuffer(View view, Buffer buffer)\\n\\t{\\n\\t\\t\\t\\tif(buffer.isPerformingIO())\\n\\t\\t{\\n\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\t\\tif(VFSManager.errorOccurred())\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tif(buffer.isDirty())\\n\\t\\t{\\n\\t\\t\\tObject[] args = { buffer.getName() };\\n\\t\\t\\tint result = GUIUtilities.confirm(view,\\\"notsaved\\\",args,\\n\\t\\t\\t\\tJOptionPane.YES_NO_CANCEL_OPTION,\\n\\t\\t\\t\\tJOptionPane.WARNING_MESSAGE);\\n\\t\\t\\tif(result == JOptionPane.YES_OPTION)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(!buffer.save(view,null,true))\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\t\\t\\tif(buffer.getBooleanProperty(BufferIORequest\\n\\t\\t\\t\\t\\t.ERROR_OCCURRED))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse if(result != JOptionPane.NO_OPTION)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\t_closeBuffer(view,buffer);\\n\\t\\treturn true;\\n\\t} \\n\\tpublic static void _closeBuffer(View view, Buffer buffer)\\n\\t{\\n\\t\\tif(buffer.isClosed())\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\tif(!buffer.isNewFile())\\n\\t\\t{\\n\\t\\t\\tif(view != null)\\n\\t\\t\\t\\tview.getEditPane().saveCaretInfo();\\n\\t\\t\\tInteger _caret = (Integer)buffer.getProperty(Buffer.CARET);\\n\\t\\t\\tint caret = (_caret == null ? 0 : _caret.intValue());\\n\\t\\t\\tBufferHistory.setEntry(buffer.getPath(),caret,\\n\\t\\t\\t\\t(Selection[])buffer.getProperty(Buffer.SELECTION),\\n\\t\\t\\t\\tbuffer.getStringProperty(Buffer.ENCODING));\\n\\t\\t}\\n\\t\\tString path = buffer.getSymlinkPath();\\n\\t\\tif((VFSManager.getVFSForPath(path).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t}\\n\\t\\tbufferHash.remove(path);\\n\\t\\tremoveBufferFromList(buffer);\\n\\t\\tbuffer.close();\\n\\t\\tDisplayManager.bufferClosed(buffer);\\n\\t\\tEditBus.send(new BufferUpdate(buffer,view,BufferUpdate.CLOSED));\\n\\t\\t\\t\\tif(buffersFirst == null && buffersLast == null)\\n\\t\\t\\tnewFile(view);\\n\\t} \\n\\tpublic static boolean closeAllBuffers(View view)\\n\\t{\\n\\t\\treturn closeAllBuffers(view,false);\\n\\t} \\n\\tpublic static boolean closeAllBuffers(View view, boolean isExiting)\\n\\t{\\n\\t\\tif(view != null)\\n\\t\\t\\tview.getEditPane().saveCaretInfo();\\n\\t\\tboolean dirty = false;\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(buffer.isDirty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tdirty = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tif(dirty)\\n\\t\\t{\\n\\t\\t\\tboolean ok = new CloseDialog(view).isOK();\\n\\t\\t\\tif(!ok)\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\tif(VFSManager.errorOccurred())\\n\\t\\t\\treturn false;\\n\\t\\tbuffer = buffersFirst;\\n\\t\\t\\t\\tbuffersFirst = buffersLast = null;\\n\\t\\tbufferHash.clear();\\n\\t\\tbufferCount = 0;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(!buffer.isNewFile())\\n\\t\\t\\t{\\n\\t\\t\\t\\tInteger _caret = (Integer)buffer.getProperty(Buffer.CARET);\\n\\t\\t\\t\\tint caret = (_caret == null ? 0 : _caret.intValue());\\n\\t\\t\\t\\tBufferHistory.setEntry(buffer.getPath(),caret,\\n\\t\\t\\t\\t\\t(Selection[])buffer.getProperty(Buffer.SELECTION),\\n\\t\\t\\t\\t\\tbuffer.getStringProperty(Buffer.ENCODING));\\n\\t\\t\\t}\\n\\t\\t\\tbuffer.close();\\n\\t\\t\\tDisplayManager.bufferClosed(buffer);\\n\\t\\t\\tif(!isExiting)\\n\\t\\t\\t{\\n\\t\\t\\t\\tEditBus.send(new BufferUpdate(buffer,view,\\n\\t\\t\\t\\t\\tBufferUpdate.CLOSED));\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tif(!isExiting)\\n\\t\\t\\tnewFile(view);\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\treturn true;\\n\\t} \\n\\tpublic static void saveAllBuffers(View view)\\n\\t{\\n\\t\\tsaveAllBuffers(view,jEdit.getBooleanProperty(\\\"confirmSaveAll\\\"));\\n\\t} \\n\\tpublic static void saveAllBuffers(View view, boolean confirm)\\n\\t{\\n\\t\\tif(confirm)\\n\\t\\t{\\n\\t\\t\\tint result = GUIUtilities.confirm(view,\\\"saveall\\\",null,\\n\\t\\t\\t\\tJOptionPane.YES_NO_OPTION,\\n\\t\\t\\t\\tJOptionPane.QUESTION_MESSAGE);\\n\\t\\t\\tif(result != JOptionPane.YES_OPTION)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tBuffer current = view.getBuffer();\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tif(buffer.isDirty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(buffer.isNewFile())\\n\\t\\t\\t\\t\\tview.setBuffer(buffer);\\n\\t\\t\\t\\tbuffer.save(view,null,true);\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t}\\n\\t\\tview.setBuffer(current);\\n\\t} \\n\\tpublic static void reloadAllBuffers(final View view, boolean confirm)\\n\\t{\\n\\t\\tboolean hasDirty = false;\\n\\t\\tBuffer[] buffers = jEdit.getBuffers();\\n\\t\\tfor(int i = 0; i < buffers.length && hasDirty == false; i++)\\n\\t\\t\\thasDirty = buffers[i].isDirty();\\n\\t\\tif(confirm && hasDirty)\\n\\t\\t{\\n\\t\\t\\tint result = GUIUtilities.confirm(view,\\\"reload-all\\\",null,\\n\\t\\t\\t\\tJOptionPane.YES_NO_OPTION,\\n\\t\\t\\t\\tJOptionPane.QUESTION_MESSAGE);\\n\\t\\t\\tif(result != JOptionPane.YES_OPTION)\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t\\t\\tView _view = viewsFirst;\\n\\t\\twhile(_view != null)\\n\\t\\t{\\n\\t\\t\\tEditPane[] panes = _view.getEditPanes();\\n\\t\\t\\tfor(int i = 0; i < panes.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tpanes[i].saveCaretInfo();\\n\\t\\t\\t}\\n\\t\\t\\t_view = _view.next;\\n\\t\\t}\\n\\t\\tfor(int i = 0; i < buffers.length; i++)\\n\\t\\t{\\n\\t\\t\\tBuffer buffer = buffers[i];\\n\\t\\t\\tbuffer.load(view,true);\\n\\t\\t}\\n\\t} \\n\\tpublic static Buffer _getBuffer(String path)\\n\\t{\\n\\t\\t\\t\\t\\t\\tif((VFSManager.getVFSForPath(path).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t}\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\treturn (Buffer)bufferHash.get(path);\\n\\t\\t}\\n\\t} \\n\\tpublic static Buffer getBuffer(String path)\\n\\t{\\n\\t\\treturn _getBuffer(MiscUtilities.resolveSymlinks(path));\\n\\t} \\n\\tpublic static Buffer[] getBuffers()\\n\\t{\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tBuffer[] buffers = new Buffer[bufferCount];\\n\\t\\t\\tBuffer buffer = buffersFirst;\\n\\t\\t\\tfor(int i = 0; i < bufferCount; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffers[i] = buffer;\\n\\t\\t\\t\\tbuffer = buffer.next;\\n\\t\\t\\t}\\n\\t\\t\\treturn buffers;\\n\\t\\t}\\n\\t} \\n\\tpublic static int getBufferCount()\\n\\t{\\n\\t\\treturn bufferCount;\\n\\t} \\n\\tpublic static Buffer getFirstBuffer()\\n\\t{\\n\\t\\treturn buffersFirst;\\n\\t} \\n\\tpublic static Buffer getLastBuffer()\\n\\t{\\n\\t\\treturn buffersLast;\\n\\t} \\n\\tpublic static void checkBufferStatus(View view)\\n\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tboolean showDialogSetting = getBooleanProperty(\\n\\t\\t\\t\\\"autoReloadDialog\\\");\\n\\t\\t\\t\\tboolean autoReloadSetting = getBooleanProperty(\\n\\t\\t\\t\\\"autoReload\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tView _view = viewsFirst;\\n\\t\\twhile(_view != null)\\n\\t\\t{\\n\\t\\t\\tEditPane[] editPanes = _view.getEditPanes();\\n\\t\\t\\tfor(int i = 0; i < editPanes.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\teditPanes[i].saveCaretInfo();\\n\\t\\t\\t}\\n\\t\\t\\t_view = _view.next;\\n\\t\\t}\\n\\t\\tBuffer buffer = buffersFirst;\\n\\t\\tint[] states = new int[bufferCount];\\n\\t\\tint i = 0;\\n\\t\\tboolean show = false;\\n\\t\\twhile(buffer != null)\\n\\t\\t{\\n\\t\\t\\tstates[i] = buffer.checkFileStatus(view);\\n\\t\\t\\tswitch(states[i])\\n\\t\\t\\t{\\n\\t\\t\\tcase Buffer.FILE_CHANGED:\\n\\t\\t\\t\\tif(autoReloadSetting\\n\\t\\t\\t\\t\\t&& showDialogSetting\\n\\t\\t\\t\\t\\t&& !buffer.isDirty())\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbuffer.load(view,true);\\n\\t\\t\\t\\t}\\n\\t\\t\\tcase Buffer.FILE_DELETED:\\n\\t\\t\\t\\tshow = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tbuffer = buffer.next;\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tif(show && showDialogSetting)\\n\\t\\t\\tnew FilesChangedDialog(view,states,autoReloadSetting);\\n\\t} \\n\\tpublic static InputHandler getInputHandler()\\n\\t{\\n\\t\\treturn inputHandler;\\n\\t} \\n\\tpublic static View newView(View view)\\n\\t{\\n\\t\\treturn newView(view,null,false);\\n\\t} \\n\\tpublic static View newView(View view, Buffer buffer)\\n\\t{\\n\\t\\treturn newView(view,buffer,false);\\n\\t} \\n\\tpublic static View newView(View view, Buffer buffer, boolean plainView)\\n\\t{\\n\\t\\tView.ViewConfig config;\\n\\t\\tif(view != null && (plainView == view.isPlainView()))\\n\\t\\t\\tconfig = view.getViewConfig();\\n\\t\\telse\\n\\t\\t\\tconfig = new View.ViewConfig(plainView);\\n\\t\\treturn newView(view,buffer,config);\\n\\t} \\n\\tpublic static View newView(View view, Buffer buffer, View.ViewConfig config)\\n\\t{\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tif(view != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tview.showWaitCursor();\\n\\t\\t\\t\\tview.getEditPane().saveCaretInfo();\\n\\t\\t\\t}\\n\\t\\t\\tView newView = new View(buffer,config);\\n\\t\\t\\taddViewToList(newView);\\n\\t\\t\\tif(!config.plainView)\\n\\t\\t\\t{\\n\\t\\t\\t\\tDockableWindowManager wm = newView.getDockableWindowManager();\\n\\t\\t\\t\\tif(config.top != null\\n\\t\\t\\t\\t\\t&& config.top.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.top);\\n\\t\\t\\t\\tif(config.left != null\\n\\t\\t\\t\\t\\t&& config.left.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.left);\\n\\t\\t\\t\\tif(config.bottom != null\\n\\t\\t\\t\\t\\t&& config.bottom.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.bottom);\\n\\t\\t\\t\\tif(config.right != null\\n\\t\\t\\t\\t\\t&& config.right.length() != 0)\\n\\t\\t\\t\\t\\twm.showDockableWindow(config.right);\\n\\t\\t\\t}\\n\\t\\t\\tnewView.pack();\\n\\t\\t\\tif(config.width != 0 && config.height != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tRectangle desired = new Rectangle(\\n\\t\\t\\t\\t\\tconfig.x,config.y,config.width,\\n\\t\\t\\t\\t\\tconfig.height);\\n\\t\\t\\t\\tif(OperatingSystem.isX11() && Debug.GEOMETRY_WORKAROUND)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tnew GUIUtilities.UnixWorkaround(newView,\\n\\t\\t\\t\\t\\t\\t\\\"view\\\",desired,config.extState);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tnewView.setBounds(desired);\\n\\t\\t\\t\\t\\tnewView.setExtendedState(config.extState);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tGUIUtilities.centerOnScreen(newView);\\n\\t\\t\\tEditBus.send(new ViewUpdate(newView,ViewUpdate.CREATED));\\n\\t\\t\\tnewView.setVisible(true);\\n\\t\\t\\t\\t\\t\\tif(newView == viewsFirst)\\n\\t\\t\\t{\\n\\t\\t\\t\\tnewView.getTextArea().requestFocus();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif(settingsDirectory != null && getBooleanProperty(\\\"firstTime\\\"))\\n\\t\\t\\t\\t\\tnew HelpViewer();\\n\\t\\t\\t\\telse if(jEdit.getBooleanProperty(\\\"tip.show\\\"))\\n\\t\\t\\t\\t\\tnew TipOfTheDay(newView);\\n\\t\\t\\t\\tsetBooleanProperty(\\\"firstTime\\\",false);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tGUIUtilities.requestFocus(newView,newView.getTextArea());\\n\\t\\t\\treturn newView;\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\tif(view != null)\\n\\t\\t\\t\\tview.hideWaitCursor();\\n\\t\\t}\\n\\t} \\n\\tpublic static void closeView(View view)\\n\\t{\\n\\t\\tcloseView(view,true);\\n\\t} \\n\\tpublic static View[] getViews()\\n\\t{\\n\\t\\tView[] views = new View[viewCount];\\n\\t\\tView view = viewsFirst;\\n\\t\\tfor(int i = 0; i < viewCount; i++)\\n\\t\\t{\\n\\t\\t\\tviews[i] = view;\\n\\t\\t\\tview = view.next;\\n\\t\\t}\\n\\t\\treturn views;\\n\\t} \\n\\tpublic static int getViewCount()\\n\\t{\\n\\t\\treturn viewCount;\\n\\t} \\n\\tpublic static View getFirstView()\\n\\t{\\n\\t\\treturn viewsFirst;\\n\\t} \\n\\tpublic static View getLastView()\\n\\t{\\n\\t\\treturn viewsLast;\\n\\t} \\n\\tpublic static View getActiveView()\\n\\t{\\n\\t\\tif(activeView == null)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\treturn viewsFirst;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\treturn activeView;\\n\\t} \\n\\tpublic static boolean isMainThread()\\n\\t{\\n\\t\\treturn (Thread.currentThread() == mainThread);\\n\\t} \\n\\tpublic static boolean isBackgroundModeEnabled()\\n\\t{\\n\\t\\treturn background;\\n\\t} \\n\\tpublic static void showMemoryDialog(View view)\\n\\t{\\n\\t\\tRuntime rt = Runtime.getRuntime();\\n\\t\\tint before = (int) (rt.freeMemory() / 1024);\\n\\t\\tSystem.gc();\\n\\t\\tint after = (int) (rt.freeMemory() / 1024);\\n\\t\\tint total = (int) (rt.totalMemory() / 1024);\\n\\t\\tJProgressBar progress = new JProgressBar(0,total);\\n\\t\\tprogress.setValue(total - after);\\n\\t\\tprogress.setStringPainted(true);\\n\\t\\tprogress.setString(jEdit.getProperty(\\\"memory-status.use\\\",\\n\\t\\t\\tnew Object[] { new Integer(total - after),\\n\\t\\t\\tnew Integer(total) }));\\n\\t\\tObject[] message = new Object[4];\\n\\t\\tmessage[0] = getProperty(\\\"memory-status.gc\\\",\\n\\t\\t\\tnew Object[] { new Integer(after - before) });\\n\\t\\tmessage[1] = Box.createVerticalStrut(12);\\n\\t\\tmessage[2] = progress;\\n\\t\\tmessage[3] = Box.createVerticalStrut(6);\\n\\t\\tJOptionPane.showMessageDialog(view,message,\\n\\t\\t\\tjEdit.getProperty(\\\"memory-status.title\\\"),\\n\\t\\t\\tJOptionPane.INFORMATION_MESSAGE);\\n\\t} \\n\\tpublic static String getJEditHome()\\n\\t{\\n\\t\\treturn jEditHome;\\n\\t} \\n\\tpublic static String getSettingsDirectory()\\n\\t{\\n\\t\\treturn settingsDirectory;\\n\\t} \\n\\tpublic static String getJARCacheDirectory()\\n\\t{\\n\\t\\treturn jarCacheDirectory;\\n\\t} \\n\\tpublic static void backupSettingsFile(File file)\\n\\t{\\n\\t\\tif(settingsDirectory == null)\\n\\t\\t\\treturn;\\n\\t\\tString backupDir = MiscUtilities.constructPath(\\n\\t\\t\\tsettingsDirectory,\\\"settings-backup\\\");\\n\\t\\tFile dir = new File(backupDir);\\n\\t\\tif(!dir.exists())\\n\\t\\t\\tdir.mkdirs();\\n\\t\\tMiscUtilities.saveBackup(file,5,null,\\\"~\\\",backupDir);\\n\\t} \\n\\tpublic static void saveSettings()\\n\\t{\\n\\t\\tif(settingsDirectory == null)\\n\\t\\t\\treturn;\\n\\t\\tAbbrevs.save();\\n\\t\\tFavoritesVFS.saveFavorites();\\n\\t\\tHistoryModel.saveHistory();\\n\\t\\tRegisters.saveRegisters();\\n\\t\\tSearchAndReplace.save();\\n\\t\\tBufferHistory.save();\\n\\t\\tKillRing.save();\\n\\t\\tFile file1 = new File(MiscUtilities.constructPath(\\n\\t\\t\\tsettingsDirectory,\\\"#properties#save#\\\"));\\n\\t\\tFile file2 = new File(MiscUtilities.constructPath(\\n\\t\\t\\tsettingsDirectory,\\\"properties\\\"));\\n\\t\\tif(file2.exists() && file2.lastModified() != propsModTime)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.WARNING,jEdit.class,file2 + \\\" changed\\\"\\n\\t\\t\\t\\t+ \\\" on disk; will not save user properties\\\");\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tbackupSettingsFile(file2);\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tOutputStream out = new FileOutputStream(file1);\\n\\t\\t\\t\\tpropMgr.saveUserProps(out);\\n\\t\\t\\t\\tfile2.delete();\\n\\t\\t\\t\\tfile1.renameTo(file2);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t}\\n\\t\\t\\tpropsModTime = file2.lastModified();\\n\\t\\t}\\n\\t} \\n\\tpublic static void exit(View view, boolean reallyExit)\\n\\t{\\n\\t\\t\\t\\tif(view == null)\\n\\t\\t\\tview = activeView;\\n\\t\\t\\t\\tVFSManager.waitForRequests();\\n\\t\\t\\t\\tEditBus.send(new EditorExitRequested(view));\\n\\t\\t\\t\\t\\t\\treallyExit |= !background;\\n\\t\\tPerspectiveManager.savePerspective(false);\\n\\t\\t\\t\\tif(!closeAllBuffers(view,reallyExit))\\n\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\tif(!reallyExit)\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tview = viewsFirst;\\n\\t\\t\\twhile(view != null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tcloseView(view,false);\\n\\t\\t\\t\\tview = view.next;\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tsaveSettings();\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\tif(view != null)\\n\\t\\t\\t\\tview.close();\\n\\t\\t\\t\\t\\t\\tAutosave.stop();\\n\\t\\t\\t\\t\\t\\tif(server != null)\\n\\t\\t\\t\\tserver.stopServer();\\n\\t\\t\\t\\t\\t\\tPluginJAR[] plugins = getPluginJARs();\\n\\t\\t\\tfor(int i = 0; i < plugins.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tremovePluginJAR(plugins[i],true);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tEditBus.send(new EditorExiting(null));\\n\\t\\t\\t\\t\\t\\tsaveSettings();\\n\\t\\t\\t\\t\\t\\tLog.closeStream();\\n\\t\\t\\t\\t\\t\\tSystem.exit(0);\\n\\t\\t}\\n\\t} \\n\\tpublic static EditServer getEditServer()\\n\\t{\\n\\t\\treturn server;\\n\\t} \\n\\tstatic void updatePosition(String oldPath, Buffer buffer)\\n\\t{\\n\\t\\tif((VFSManager.getVFSForPath(oldPath).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\toldPath = oldPath.toLowerCase();\\n\\t\\t}\\n\\t\\tbufferHash.remove(oldPath);\\n\\t\\tString path = buffer.getSymlinkPath();\\n\\t\\tif((VFSManager.getVFSForPath(path).getCapabilities()\\n\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t{\\n\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t}\\n\\t\\tbufferHash.put(path,buffer);\\n\\t\\tif(sortBuffers)\\n\\t\\t{\\n\\t\\t\\tremoveBufferFromList(buffer);\\n\\t\\t\\taddBufferToList(buffer);\\n\\t\\t}\\n\\t} \\n\\tpublic static void addMode(Mode mode)\\n\\t{\\n\\t\\tmodes.addElement(mode);\\n\\t} \\n\\t static void loadMode(Mode mode)\\n\\t{\\n\\t\\tfinal String fileName = (String)mode.getProperty(\\\"file\\\");\\n\\t\\tLog.log(Log.NOTICE,jEdit.class,\\\"Loading edit mode \\\" + fileName);\\n\\t\\tfinal XmlParser parser = new XmlParser();\\n\\t\\tXModeHandler xmh = new XModeHandler(mode.getName())\\n\\t\\t{\\n\\t\\t\\tpublic void error(String what, Object subst)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint line = parser.getLineNumber();\\n\\t\\t\\t\\tint column = parser.getColumnNumber();\\n\\t\\t\\t\\tString msg;\\n\\t\\t\\t\\tif(subst == null)\\n\\t\\t\\t\\t\\tmsg = jEdit.getProperty(\\\"xmode-error.\\\" + what);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tmsg = jEdit.getProperty(\\\"xmode-error.\\\" + what,\\n\\t\\t\\t\\t\\t\\tnew String[] { subst.toString() });\\n\\t\\t\\t\\t\\tif(subst instanceof Throwable)\\n\\t\\t\\t\\t\\t\\tLog.log(Log.ERROR,this,subst);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tObject[] args = { fileName, new Integer(line),\\n\\t\\t\\t\\t\\tnew Integer(column), msg };\\n\\t\\t\\t\\tGUIUtilities.error(null,\\\"xmode-error\\\",args);\\n\\t\\t\\t}\\n\\t\\t\\tpublic TokenMarker getTokenMarker(String modeName)\\n\\t\\t\\t{\\n\\t\\t\\t\\tMode mode = getMode(modeName);\\n\\t\\t\\t\\tif(mode == null)\\n\\t\\t\\t\\t\\treturn null;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\treturn mode.getTokenMarker();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tmode.setTokenMarker(xmh.getTokenMarker());\\n\\t\\tReader grammar = null;\\n\\t\\tparser.setHandler(xmh);\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tgrammar = new BufferedReader(new FileReader(fileName));\\n\\t\\t\\tparser.parse(null, null, grammar);\\n\\t\\t\\tmode.setProperties(xmh.getModeProperties());\\n\\t\\t}\\n\\t\\tcatch (Throwable e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR, jEdit.class, e);\\n\\t\\t\\tif (e instanceof XmlException)\\n\\t\\t\\t{\\n\\t\\t\\t\\tXmlException xe = (XmlException) e;\\n\\t\\t\\t\\tint line = xe.getLine();\\n\\t\\t\\t\\tString message = xe.getMessage();\\n\\t\\t\\t\\tObject[] args = { fileName, new Integer(line), null,\\n\\t\\t\\t\\t\\tmessage };\\n\\t\\t\\t\\tGUIUtilities.error(null,\\\"xmode-error\\\",args);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(grammar != null)\\n\\t\\t\\t\\t\\tgrammar.close();\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tstatic void addPluginProps(Properties map)\\n\\t{\\n\\t\\tpropMgr.addPluginProps(map);\\n\\t} \\n\\t\\tstatic void removePluginProps(Properties map)\\n\\t{\\n\\t\\tpropMgr.removePluginProps(map);\\n\\t} \\n\\t\\tstatic void pluginError(String path, String messageProp,\\n\\t\\tObject[] args)\\n\\t{\\n\\t\\tsynchronized(pluginErrorLock)\\n\\t\\t{\\n\\t\\t\\tif(pluginErrors == null)\\n\\t\\t\\t\\tpluginErrors = new Vector();\\n\\t\\t\\tErrorListDialog.ErrorEntry newEntry =\\n\\t\\t\\t\\tnew ErrorListDialog.ErrorEntry(\\n\\t\\t\\t\\tpath,messageProp,args);\\n\\t\\t\\tfor(int i = 0; i < pluginErrors.size(); i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(pluginErrors.get(i).equals(newEntry))\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tpluginErrors.addElement(newEntry);\\n\\t\\t\\tif(startupDone)\\n\\t\\t\\t{\\n\\t\\t\\t\\tSwingUtilities.invokeLater(new Runnable()\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tpublic void run()\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tshowPluginErrorDialog();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tstatic void setActiveView(View view)\\n\\t{\\n\\t\\tjEdit.activeView = view;\\n\\t} \\n\\t\\tprivate static String jEditHome;\\n\\tprivate static String settingsDirectory;\\n\\tprivate static String jarCacheDirectory;\\n\\tprivate static long propsModTime;\\n\\tprivate static PropertyManager propMgr;\\n\\tprivate static EditServer server;\\n\\tprivate static boolean background;\\n\\tprivate static ActionContext actionContext;\\n\\tprivate static ActionSet builtInActionSet;\\n\\tprivate static Vector pluginErrors;\\n\\tprivate static Object pluginErrorLock = new Object();\\n\\tprivate static Vector jars;\\n\\tprivate static Vector modes;\\n\\tprivate static boolean saveCaret;\\n\\tprivate static InputHandler inputHandler;\\n\\t\\tprivate static boolean sortBuffers;\\n\\tprivate static boolean sortByName;\\n\\tprivate static int bufferCount;\\n\\tprivate static Buffer buffersFirst;\\n\\tprivate static Buffer buffersLast;\\n\\tprivate static Map bufferHash;\\n\\t\\tprivate static Object bufferListLock = new Object();\\n\\t\\tprivate static int viewCount;\\n\\tprivate static View viewsFirst;\\n\\tprivate static View viewsLast;\\n\\tprivate static View activeView;\\n\\tprivate static boolean startupDone;\\n\\tprivate static Thread mainThread;\\n\\tprivate jEdit() {}\\n\\t\\tprivate static void usage()\\n\\t{\\n\\t\\tSystem.out.println(\\\"Usage: jedit [<options>] [<files>]\\\");\\n\\t\\tSystem.out.println(\\\"\\t<file> +marker:<marker>: Positions caret\\\"\\n\\t\\t\\t+ \\\" at marker <marker>\\\");\\n\\t\\tSystem.out.println(\\\"\\t<file> +line:<line>: Positions caret\\\"\\n\\t\\t\\t+ \\\" at line number <line>\\\");\\n\\t\\tSystem.out.println(\\\"\\t--: End of options\\\");\\n\\t\\tSystem.out.println(\\\"\\t-background: Run in background mode\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nobackground: Disable background mode (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-gui: Only if running in background mode; open initial view (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nogui: Only if running in background mode; don't open initial view\\\");\\n\\t\\tSystem.out.println(\\\"\\t-log=<level>: Log messages with level equal to or higher than this to\\\");\\n\\t\\tSystem.out.println(\\\"\\t standard error. <level> must be between 1 and 9. Default is 7.\\\");\\n\\t\\tSystem.out.println(\\\"\\t-newplainview: Client instance opens a new plain view\\\");\\n\\t\\tSystem.out.println(\\\"\\t-newview: Client instance opens a new view (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-plugins: Load plugins (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-noplugins: Don't load any plugins\\\");\\n\\t\\tSystem.out.println(\\\"\\t-restore: Restore previously open files (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-norestore: Don't restore previously open files\\\");\\n\\t\\tSystem.out.println(\\\"\\t-reuseview: Client instance reuses existing view\\\");\\n\\t\\tSystem.out.println(\\\"\\t-quit: Quit a running instance\\\");\\n\\t\\tSystem.out.println(\\\"\\t-run=<script>: Run the specified BeanShell script\\\");\\n\\t\\tSystem.out.println(\\\"\\t-server: Read/write server info from/to $HOME/.jedit/server (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-server=<name>: Read/write server info from/to $HOME/.jedit/<name>\\\");\\n\\t\\tSystem.out.println(\\\"\\t-noserver: Don't start edit server\\\");\\n\\t\\tSystem.out.println(\\\"\\t-settings=<path>: Load user-specific settings from <path>\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nosettings: Don't load user-specific settings\\\");\\n\\t\\tSystem.out.println(\\\"\\t-startupscripts: Run startup scripts (default)\\\");\\n\\t\\tSystem.out.println(\\\"\\t-nostartupscripts: Don't run startup scripts\\\");\\n\\t\\tSystem.out.println(\\\"\\t-usage: Print this message and exit\\\");\\n\\t\\tSystem.out.println(\\\"\\t-version: Print jEdit version and exit\\\");\\n\\t\\tSystem.out.println(\\\"\\t-wait: Wait until the user closes the specified buffer in the server\\\");\\n\\t\\tSystem.out.println(\\\"\\t instance. Does nothing if passed to the initial jEdit instance.\\\");\\n\\t\\tSystem.out.println();\\n\\t\\tSystem.out.println(\\\"Report bugs to Slava Pestov <slava@jedit.org>.\\\");\\n\\t} \\n\\t\\tprivate static void version()\\n\\t{\\n\\t\\tSystem.out.println(\\\"jEdit \\\" + getVersion());\\n\\t} \\n\\tprivate static String makeServerScript(boolean wait,\\n\\t\\tboolean restore, boolean newView,\\n\\t\\tboolean newPlainView, String[] args,\\n\\t\\tString scriptFile)\\n\\t{\\n\\t\\tStringBuffer script = new StringBuffer();\\n\\t\\tString userDir = System.getProperty(\\\"user.dir\\\");\\n\\t\\tscript.append(\\\"parent = \\\\\\\"\\\");\\n\\t\\tscript.append(MiscUtilities.charsToEscapes(userDir));\\n\\t\\tscript.append(\\\"\\\\\\\";\\\\n\\\");\\n\\t\\tscript.append(\\\"args = new String[\\\");\\n\\t\\tscript.append(args.length);\\n\\t\\tscript.append(\\\"];\\\\n\\\");\\n\\t\\tfor(int i = 0; i < args.length; i++)\\n\\t\\t{\\n\\t\\t\\tscript.append(\\\"args[\\\");\\n\\t\\t\\tscript.append(i);\\n\\t\\t\\tscript.append(\\\"] = \\\");\\n\\t\\t\\tif(args[i] == null)\\n\\t\\t\\t\\tscript.append(\\\"null\\\");\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tscript.append('\\\"');\\n\\t\\t\\t\\tscript.append(MiscUtilities.charsToEscapes(args[i]));\\n\\t\\t\\t\\tscript.append('\\\"');\\n\\t\\t\\t}\\n\\t\\t\\tscript.append(\\\";\\\\n\\\");\\n\\t\\t}\\n\\t\\tscript.append(\\\"view = jEdit.getLastView();\\\\n\\\");\\n\\t\\tscript.append(\\\"buffer = EditServer.handleClient(\\\"\\n\\t\\t\\t+ restore + \\\",\\\" + newView + \\\",\\\" + newPlainView +\\n\\t\\t\\t\\\",parent,args);\\\\n\\\");\\n\\t\\tscript.append(\\\"if(buffer != null && \\\" + wait + \\\") {\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tbuffer.setWaitSocket(socket);\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tdoNotCloseSocket = true;\\\\n\\\");\\n\\t\\tscript.append(\\\"}\\\\n\\\");\\n\\t\\tscript.append(\\\"if(view != jEdit.getLastView() && \\\" + wait + \\\") {\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tjEdit.getLastView().setWaitSocket(socket);\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tdoNotCloseSocket = true;\\\\n\\\");\\n\\t\\tscript.append(\\\"}\\\\n\\\");\\n\\t\\tscript.append(\\\"if(doNotCloseSocket == void)\\\\n\\\");\\n\\t\\tscript.append(\\\"\\\\tsocket.close();\\\\n\\\");\\n\\t\\tif(scriptFile != null)\\n\\t\\t{\\n\\t\\t\\tscriptFile = MiscUtilities.constructPath(userDir,scriptFile);\\n\\t\\t\\tscript.append(\\\"BeanShell.runScript(view,\\\\\\\"\\\"\\n\\t\\t\\t\\t+ MiscUtilities.charsToEscapes(scriptFile)\\n\\t\\t\\t\\t+ \\\"\\\\\\\",null,this.namespace);\\\\n\\\");\\n\\t\\t}\\n\\t\\treturn script.toString();\\n\\t} \\n\\tprivate static void initMisc()\\n\\t{\\n\\t\\tjars = new Vector();\\n\\t\\tactionContext = new ActionContext()\\n\\t\\t{\\n\\t\\t\\tpublic void invokeAction(EventObject evt,\\n\\t\\t\\t\\tEditAction action)\\n\\t\\t\\t{\\n\\t\\t\\t\\tView view = GUIUtilities.getView(\\n\\t\\t\\t\\t\\t(Component)evt.getSource());\\n\\t\\t\\t\\tboolean actionBarVisible;\\n\\t\\t\\t\\tif(view.getActionBar() == null\\n\\t\\t\\t\\t\\t|| !view.getActionBar().isShowing())\\n\\t\\t\\t\\t\\tactionBarVisible = false;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tactionBarVisible = view.getActionBar()\\n\\t\\t\\t\\t\\t\\t.isVisible();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tview.getInputHandler().invokeAction(action);\\n\\t\\t\\t\\tif(actionBarVisible)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tActionBar actionBar = view\\n\\t\\t\\t\\t\\t\\t.getActionBar();\\n\\t\\t\\t\\t\\tif(actionBar != null)\\n\\t\\t\\t\\t\\t\\tview.removeToolBar(actionBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tbufferHash = new HashMap();\\n\\t\\tinputHandler = new DefaultInputHandler(null);\\n\\t\\t\\t\\tSystem.getProperties().put(\\\"java.protocol.handler.pkgs\\\",\\n\\t\\t\\t\\\"org.gjt.sp.jedit.proto|\\\" +\\n\\t\\t\\tSystem.getProperty(\\\"java.protocol.handler.pkgs\\\",\\\"\\\"));\\n\\t\\t\\t\\tString userAgent = \\\"jEdit/\\\" + getVersion()\\n\\t\\t\\t+ \\\" (Java \\\" + System.getProperty(\\\"java.version\\\")\\n\\t\\t\\t+ \\\". \\\" + System.getProperty(\\\"java.vendor\\\")\\n\\t\\t\\t+ \\\"; \\\" + System.getProperty(\\\"os.arch\\\") + \\\")\\\";\\n\\t\\tSystem.getProperties().put(\\\"http.agent\\\",userAgent);\\n\\t\\tjEditHome = System.getProperty(\\\"jedit.home\\\");\\n\\t\\tif(jEditHome == null)\\n\\t\\t{\\n\\t\\t\\tString classpath = System\\n\\t\\t\\t\\t.getProperty(\\\"java.class.path\\\");\\n\\t\\t\\tint index = classpath.toLowerCase()\\n\\t\\t\\t\\t.indexOf(\\\"jedit.jar\\\");\\n\\t\\t\\tint start = classpath.lastIndexOf(File\\n\\t\\t\\t\\t.pathSeparator,index) + 1;\\n\\t\\t\\t\\t\\t\\t if(classpath.equalsIgnoreCase(\\\"jedit.jar\\\"))\\n\\t\\t\\t{\\n\\t\\t\\t\\tjEditHome = System.getProperty(\\\"user.dir\\\");\\n\\t\\t\\t}\\n\\t\\t\\telse if(index > start)\\n\\t\\t\\t{\\n\\t\\t\\t\\tjEditHome = classpath.substring(start,\\n\\t\\t\\t\\t\\tindex - 1);\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tjEditHome = System.getProperty(\\\"user.dir\\\");\\n\\t\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"jedit.jar not in class path!\\\");\\n\\t\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"Assuming jEdit is installed in \\\"\\n\\t\\t\\t\\t\\t\\t+ jEditHome + \\\".\\\");\\n\\t\\t\\t\\t\\tLog.log(Log.WARNING,jEdit.class,\\\"Override with jedit.home \\\"\\n\\t\\t\\t\\t\\t\\t+ \\\"system property.\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tjEditHome = MiscUtilities.resolveSymlinks(jEditHome);\\n\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"jEdit home directory is \\\" + jEditHome);\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tjarCacheDirectory = MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"jars-cache\\\");\\n\\t\\t\\tnew File(jarCacheDirectory).mkdirs();\\n\\t\\t}\\n\\t\\t\\t\\t\\t\\tEditBus.addToBus(new SettingsReloader());\\n\\t\\t\\t\\t\\t\\tSwingUtilities.invokeLater(new Runnable()\\n\\t\\t{\\n\\t\\t\\tpublic void run()\\n\\t\\t\\t{\\n\\t\\t\\t\\tThread.currentThread().setContextClassLoader(\\n\\t\\t\\t\\t\\tnew JARClassLoader());\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} \\n\\tprivate static void initSystemProperties()\\n\\t{\\n\\t\\tpropMgr = new PropertyManager();\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tpropMgr.loadSystemProps(jEdit.class.getResourceAsStream(\\n\\t\\t\\t\\t\\\"/org/gjt/sp/jedit/jedit.props\\\"));\\n\\t\\t\\tpropMgr.loadSystemProps(jEdit.class.getResourceAsStream(\\n\\t\\t\\t\\t\\\"/org/gjt/sp/jedit/jedit_gui.props\\\"));\\n\\t\\t\\tpropMgr.loadSystemProps(jEdit.class.getResourceAsStream(\\n\\t\\t\\t\\t\\\"/org/gjt/sp/jedit/jedit_keys.props\\\"));\\n\\t\\t}\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\n\\t\\t\\t\\t\\\"Error while loading system properties!\\\");\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\n\\t\\t\\t\\t\\\"One of the following property files could not be loaded:\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"- jedit.props\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"- jedit_gui.props\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"- jedit_keys.props\\\\n\\\"\\n\\t\\t\\t\\t+ \\\"jedit.jar is probably corrupt.\\\");\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\tSystem.exit(1);\\n\\t\\t}\\n\\t} \\n\\tprivate static void initSiteProperties()\\n\\t{\\n\\t\\tString siteSettingsDirectory = MiscUtilities.constructPath(\\n\\t\\t\\tjEditHome, \\\"properties\\\");\\n\\t\\tFile siteSettings = new File(siteSettingsDirectory);\\n\\t\\tif (!(siteSettings.exists() && siteSettings.isDirectory()))\\n\\t\\t\\treturn;\\n\\t\\tString[] snippets = siteSettings.list();\\n\\t\\tif (snippets == null)\\n\\t\\t\\treturn;\\n\\t\\tMiscUtilities.quicksort(snippets,\\n\\t\\t\\tnew MiscUtilities.StringICaseCompare());\\n\\t\\tfor (int i = 0; i < snippets.length; ++i)\\n\\t\\t{\\n\\t\\t\\tString snippet = snippets[i];\\n\\t\\t\\tif(!snippet.toLowerCase().endsWith(\\\".props\\\"))\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tString path = MiscUtilities.constructPath(\\n\\t\\t\\t\\t\\tsiteSettingsDirectory,snippet);\\n\\t\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,\\n\\t\\t\\t\\t\\t\\\"Loading site snippet: \\\" + path);\\n\\t\\t\\t\\tpropMgr.loadSiteProps(new FileInputStream(new File(path)));\\n\\t\\t\\t}\\n\\t\\t\\tcatch(FileNotFoundException fnf)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,fnf);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,\\\"Cannot load site snippet \\\"\\n\\t\\t\\t\\t\\t+ snippet);\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void initResources()\\n\\t{\\n\\t\\tbuiltInActionSet = new ActionSet(null,null,null,\\n\\t\\t\\tjEdit.class.getResource(\\\"actions.xml\\\"));\\n\\t\\tbuiltInActionSet.setLabel(getProperty(\\\"action-set.jEdit\\\"));\\n\\t\\tbuiltInActionSet.load();\\n\\t\\tactionContext.addActionSet(builtInActionSet);\\n\\t\\tDockableWindowManager.loadDockableWindows(null,\\n\\t\\t\\tjEdit.class.getResource(\\\"dockables.xml\\\"),\\n\\t\\t\\tnull);\\n\\t\\tServiceManager.loadServices(null,\\n\\t\\t\\tjEdit.class.getResource(\\\"services.xml\\\"),\\n\\t\\t\\tnull);\\n\\t} \\n\\tprivate static void initPlugins()\\n\\t{\\n\\t\\tif(jEditHome != null)\\n\\t\\t{\\n\\t\\t\\taddPluginJARsFromDirectory(MiscUtilities.constructPath(\\n\\t\\t\\t\\tjEditHome,\\\"jars\\\"));\\n\\t\\t}\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile jarsDirectory = new File(settingsDirectory,\\\"jars\\\");\\n\\t\\t\\tif(!jarsDirectory.exists())\\n\\t\\t\\t\\tjarsDirectory.mkdir();\\n\\t\\t\\taddPluginJARsFromDirectory(jarsDirectory.getPath());\\n\\t\\t}\\n\\t\\tPluginJAR[] jars = getPluginJARs();\\n\\t\\tfor(int i = 0; i < jars.length; i++)\\n\\t\\t{\\n\\t\\t\\tjars[i].checkDependencies();\\n\\t\\t}\\n\\t} \\n\\tprivate static void initUserProperties()\\n\\t{\\n\\t\\tif(settingsDirectory != null)\\n\\t\\t{\\n\\t\\t\\tFile file = new File(MiscUtilities.constructPath(\\n\\t\\t\\t\\tsettingsDirectory,\\\"properties\\\"));\\n\\t\\t\\tpropsModTime = file.lastModified();\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tpropMgr.loadUserProps(\\n\\t\\t\\t\\t\\tnew FileInputStream(file));\\n\\t\\t\\t}\\n\\t\\t\\tcatch(FileNotFoundException fnf)\\n\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static String fontStyleToString(int style)\\n\\t{\\n\\t\\tif(style == 0)\\n\\t\\t\\treturn \\\"PLAIN\\\";\\n\\t\\telse if(style == Font.BOLD)\\n\\t\\t\\treturn \\\"BOLD\\\";\\n\\t\\telse if(style == Font.ITALIC)\\n\\t\\t\\treturn \\\"ITALIC\\\";\\n\\t\\telse if(style == (Font.BOLD | Font.ITALIC))\\n\\t\\t\\treturn \\\"BOLDITALIC\\\";\\n\\t\\telse\\n\\t\\t\\tthrow new RuntimeException(\\\"Invalid style: \\\" + style);\\n\\t} \\n\\t\\tprivate static String fontToString(Font font)\\n\\t{\\n\\t\\treturn font.getFamily()\\n\\t\\t\\t+ \\\"-\\\"\\n\\t\\t\\t+ fontStyleToString(font.getStyle())\\n\\t\\t\\t+ \\\"-\\\"\\n\\t\\t\\t+ font.getSize();\\n\\t} \\t\\n\\tprivate static void initPLAF()\\n\\t{\\n\\t\\tFont primaryFont = jEdit.getFontProperty(\\n\\t\\t\\t\\\"metal.primary.font\\\");\\n\\t\\tif(primaryFont != null)\\n\\t\\t{\\n\\t\\t\\tString primaryFontString =\\n\\t\\t\\t\\tfontToString(primaryFont);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.controlFont\\\",\\n\\t\\t\\t\\tprimaryFontString);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.menuFont\\\",\\n\\t\\t\\t\\tprimaryFontString);\\n\\t\\t}\\n\\t\\tFont secondaryFont = jEdit.getFontProperty(\\n\\t\\t\\t\\\"metal.secondary.font\\\");\\n\\t\\tif(secondaryFont != null)\\n\\t\\t{\\n\\t\\t\\tString secondaryFontString =\\n\\t\\t\\t\\tfontToString(secondaryFont);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.systemFont\\\",\\n\\t\\t\\t\\tsecondaryFontString);\\n\\t\\t\\tSystem.getProperties().put(\\n\\t\\t\\t\\t\\\"swing.plaf.metal.userFont\\\",\\n\\t\\t\\t\\tsecondaryFontString);\\n\\t\\t}\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tString lf = getProperty(\\\"lookAndFeel\\\");\\n\\t\\t\\tif(lf != null && lf.length() != 0)\\n\\t\\t\\t\\tUIManager.setLookAndFeel(lf);\\n\\t\\t\\telse if(OperatingSystem.isMacOS())\\n\\t\\t\\t{\\n\\t\\t\\t\\tUIManager.setLookAndFeel(UIManager\\n\\t\\t\\t\\t\\t.getSystemLookAndFeelClassName());\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tUIManager.setLookAndFeel(UIManager\\n\\t\\t\\t\\t\\t.getCrossPlatformLookAndFeelClassName());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t}\\n\\t\\tUIDefaults defaults = UIManager.getDefaults();\\n\\t\\t\\t\\tif(jEdit.getBooleanProperty(\\\"textColors\\\"))\\n\\t\\t{\\n\\t\\t\\tColor background = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.bgColor\\\"));\\n\\t\\t\\tColor foreground = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.fgColor\\\"));\\n\\t\\t\\tColor caretColor = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.caretColor\\\"));\\n\\t\\t\\tColor selectionColor = new javax.swing.plaf.ColorUIResource(\\n\\t\\t\\t\\tjEdit.getColorProperty(\\\"view.selectionColor\\\"));\\n\\t\\t\\tString[] prefixes = { \\\"TextField\\\", \\\"TextArea\\\", \\\"List\\\", \\\"Table\\\" };\\n\\t\\t\\tfor(int i = 0; i < prefixes.length; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tString prefix = prefixes[i];\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".disabledBackground\\\",background);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".background\\\",background);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".disabledForeground\\\",foreground);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".foreground\\\",foreground);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".caretForeground\\\",caretColor);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".selectionForeground\\\",foreground);\\n\\t\\t\\t\\tdefaults.put(prefix + \\\".selectionBackground\\\",selectionColor);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\tdefaults.put(\\\"Tree.background\\\",background);\\n\\t\\t\\tdefaults.put(\\\"Tree.foreground\\\",foreground);\\n\\t\\t\\tdefaults.put(\\\"Tree.textBackground\\\",background);\\n\\t\\t\\tdefaults.put(\\\"Tree.textForeground\\\",foreground);\\n\\t\\t\\tdefaults.put(\\\"Tree.selectionForeground\\\",foreground);\\n\\t\\t\\tdefaults.put(\\\"Tree.selectionBackground\\\",selectionColor);\\n\\t\\t}\\n\\t\\tdefaults.remove(\\\"SplitPane.border\\\");\\n\\t\\tdefaults.remove(\\\"SplitPaneDivider.border\\\");\\n\\t\\tJFrame.setDefaultLookAndFeelDecorated(\\n\\t\\t\\tgetBooleanProperty(\\\"decorate.frames\\\"));\\n\\t\\tJDialog.setDefaultLookAndFeelDecorated(\\n\\t\\t\\tgetBooleanProperty(\\\"decorate.dialogs\\\"));\\n\\t\\tKeyboardFocusManager.setCurrentKeyboardFocusManager(\\n\\t\\t\\tnew MyFocusManager());\\n\\t} \\n\\tprivate static void runStartupScripts(File directory)\\n\\t{\\n\\t\\tif (!directory.isDirectory())\\n\\t\\t\\treturn;\\n\\t\\tFile[] snippets = directory.listFiles();\\n\\t\\tif (snippets == null)\\n\\t\\t\\treturn;\\n\\t\\tMiscUtilities.quicksort(snippets,\\n\\t\\t\\tnew MiscUtilities.StringICaseCompare());\\n\\t\\tfor(int i = 0; i < snippets.length; ++i)\\n\\t\\t{\\n\\t\\t\\tFile snippet = snippets[i];\\n\\t\\t\\tMacros.Handler handler = Macros.getHandlerForPathName(\\n\\t\\t\\t\\tsnippet.getPath());\\n\\t\\t\\tif(handler == null)\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tMacros.Macro newMacro = handler.createMacro(\\n\\t\\t\\t\\t\\tsnippet.getName(),\\n\\t\\t\\t\\t\\tsnippet.getPath());\\n\\t\\t\\t\\thandler.runMacro(null,newMacro,false);\\n\\t\\t\\t}\\n\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void initProxy()\\n\\t{\\n\\t\\tboolean socksEnabled = jEdit.getBooleanProperty(\\\"socks.enabled\\\");\\n\\t\\tif(!socksEnabled)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.DEBUG,jEdit.class,\\\"SOCKS proxy disabled\\\");\\n                        System.getProperties().remove(\\\"socksProxyHost\\\");\\n                        System.getProperties().remove(\\\"socksProxyPort\\\");\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tString socksHost = jEdit.getProperty(\\\"firewall.socks.host\\\");\\n\\t\\t\\tif( socksHost != null )\\n\\t\\t\\t{\\n\\t\\t\\t\\tSystem.setProperty(\\\"socksProxyHost\\\", socksHost);\\n\\t\\t\\t\\tLog.log(Log.DEBUG, jEdit.class,\\n\\t\\t\\t\\t\\t\\\"SOCKS proxy enabled: \\\" + socksHost);\\n                        }\\n\\t\\t\\tString socksPort =  jEdit.getProperty(\\\"firewall.socks.port\\\");\\n\\t\\t\\tif(socksPort != null)\\n\\t\\t\\t\\tSystem.setProperty(\\\"socksProxyPort\\\", socksPort);\\n\\t\\t}\\n\\t\\tboolean httpEnabled = jEdit.getBooleanProperty(\\\"firewall.enabled\\\");\\n\\t\\tif (!httpEnabled)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy disabled\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"proxySet\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"proxyHost\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"proxyPort\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"http.proxyHost\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"http.proxyPort\\\");\\n\\t\\t\\tSystem.getProperties().remove(\\\"http.nonProxyHosts\\\");\\n\\t\\t\\tAuthenticator.setDefault(null);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\t\\t\\t\\tString host = jEdit.getProperty(\\\"firewall.host\\\");\\n\\t\\t\\tif (host == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tSystem.setProperty(\\\"http.proxyHost\\\", host);\\n\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy enabled: \\\" + host);\\n\\t\\t\\t\\t\\t\\tString port = jEdit.getProperty(\\\"firewall.port\\\");\\n\\t\\t\\tif (port != null)\\n\\t\\t\\t\\tSystem.setProperty(\\\"http.proxyPort\\\", port);\\n\\t\\t\\t\\t\\t\\tString nonProxyHosts = jEdit.getProperty(\\\"firewall.nonProxyHosts\\\");\\n\\t\\t\\tif (nonProxyHosts != null)\\n\\t\\t\\t\\tSystem.setProperty(\\\"http.nonProxyHosts\\\", nonProxyHosts);\\n\\t\\t\\t\\t\\t\\tString username = jEdit.getProperty(\\\"firewall.user\\\");\\n\\t\\t\\tString password = jEdit.getProperty(\\\"firewall.password\\\");\\n\\t\\t\\t\\t\\t\\tif(password == null)\\n\\t\\t\\t\\tpassword = \\\"\\\";\\n\\t\\t\\tif(username == null || username.length()==0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy without user\\\");\\n\\t\\t\\t\\tAuthenticator.setDefault(new FirewallAuthenticator(null));\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.DEBUG, jEdit.class, \\\"HTTP proxy user: \\\" + username);\\n\\t\\t\\t\\tPasswordAuthentication pw = new PasswordAuthentication(\\n\\t\\t\\t\\t\\tusername,password.toCharArray()\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tAuthenticator.setDefault(new FirewallAuthenticator(pw));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\t\\tstatic class FirewallAuthenticator extends Authenticator\\n\\t{\\n\\t\\tPasswordAuthentication pw;\\n\\t\\tpublic FirewallAuthenticator(PasswordAuthentication pw)\\n\\t\\t{\\n\\t\\t\\tthis.pw = pw;\\n\\t\\t}\\n\\t\\tprotected PasswordAuthentication getPasswordAuthentication()\\n\\t\\t{\\n\\t\\t\\treturn pw;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void finishStartup(final boolean gui, final boolean restore,\\n\\t\\tfinal String userDir, final String[] args)\\n\\t{\\n\\t\\tSwingUtilities.invokeLater(new Runnable() {\\n\\t\\t\\tpublic void run()\\n\\t\\t\\t{\\n\\t\\t\\t\\tBuffer buffer = openFiles(null,userDir,args);\\n\\t\\t\\t\\tint count = getBufferCount();\\n\\t\\t\\t\\tif(count == 0)\\n\\t\\t\\t\\t\\tnewFile(null);\\n\\t\\t\\t\\tView view = null;\\n\\t\\t\\t\\tboolean restoreFiles = restore\\n\\t\\t\\t\\t\\t&& jEdit.getBooleanProperty(\\\"restore\\\")\\n\\t\\t\\t\\t\\t&& (getBufferCount() == 0 ||\\n\\t\\t\\t\\t\\tjEdit.getBooleanProperty(\\\"restore.cli\\\"));\\n\\t\\t\\t\\tif(gui || count != 0)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tview = PerspectiveManager\\n\\t\\t\\t\\t\\t\\t.loadPerspective(\\n\\t\\t\\t\\t\\t\\trestoreFiles);\\n\\t\\t\\t\\t\\tif(view == null)\\n\\t\\t\\t\\t\\t\\tview = newView(null,buffer);\\n\\t\\t\\t\\t\\telse if(buffer != null)\\n\\t\\t\\t\\t\\t\\tview.setBuffer(buffer);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tEditBus.send(new EditorStarted(null));\\n\\t\\t\\t\\tVFSManager.start();\\n\\t\\t\\t\\t\\t\\t\\t\\tif(server != null)\\n\\t\\t\\t\\t\\tserver.start();\\n\\t\\t\\t\\tGUIUtilities.hideSplashScreen();\\n\\t\\t\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"Startup \\\"\\n\\t\\t\\t\\t\\t+ \\\"complete\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\tif(pluginErrors != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tshowPluginErrorDialog();\\n\\t\\t\\t\\t} \\n\\t\\t\\t\\tstartupDone = true;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tToolkit.getDefaultToolkit();\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} \\n\\t\\tprivate static void showPluginErrorDialog()\\n\\t{\\n\\t\\tif(pluginErrors == null)\\n\\t\\t\\treturn;\\n\\t\\tString caption = getProperty(\\n\\t\\t\\t\\\"plugin-error.caption\\\" + (pluginErrors.size() == 1\\n\\t\\t\\t? \\\"-1\\\" : \\\"\\\"));\\n\\t\\tFrame frame = (PluginManager.getInstance() == null\\n\\t\\t\\t? (Frame)viewsFirst\\n\\t\\t\\t: (Frame)PluginManager.getInstance());\\n\\t\\tnew ErrorListDialog(frame,\\n\\t\\t\\tgetProperty(\\\"plugin-error.title\\\"),\\n\\t\\t\\tcaption,pluginErrors,true);\\n\\t\\tpluginErrors = null;\\n\\t} \\n\\t\\tprivate static void getNotLoadedPluginJARs(Vector returnValue,\\n\\t\\tString dir, String[] list)\\n\\t{\\nloop:\\t\\tfor(int i = 0; i < list.length; i++)\\n\\t\\t{\\n\\t\\t\\tString name = list[i];\\n\\t\\t\\tif(!name.toLowerCase().endsWith(\\\".jar\\\"))\\n\\t\\t\\t\\tcontinue loop;\\n\\t\\t\\tString path = MiscUtilities.constructPath(dir,name);\\n\\t\\t\\tfor(int j = 0; j < jars.size(); j++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tPluginJAR jar = (PluginJAR)\\n\\t\\t\\t\\t\\tjars.elementAt(j);\\n\\t\\t\\t\\tString jarPath = jar.getPath();\\n\\t\\t\\t\\tString jarName = MiscUtilities.getFileName(jarPath);\\n\\t\\t\\t\\tif(path.equals(jarPath))\\n\\t\\t\\t\\t\\tcontinue loop;\\n\\t\\t\\t\\telse if(!new File(jarPath).exists()\\n\\t\\t\\t\\t\\t&& name.equals(jarName))\\n\\t\\t\\t\\t\\tcontinue loop;\\n\\t\\t\\t}\\n\\t\\t\\treturnValue.addElement(path);\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void gotoMarker(final View view, final Buffer buffer,\\n\\t\\tfinal String marker)\\n\\t{\\n\\t\\tVFSManager.runInAWTThread(new Runnable()\\n\\t\\t{\\n\\t\\t\\tpublic void run()\\n\\t\\t\\t{\\n\\t\\t\\t\\tint pos;\\n\\t\\t\\t\\t\\t\\t\\t\\tif(marker.startsWith(\\\"+line:\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tint line = Integer.parseInt(marker.substring(6));\\n\\t\\t\\t\\t\\t\\tpos = buffer.getLineStartOffset(line - 1);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch(Exception e)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse if(marker.startsWith(\\\"+marker:\\\"))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif(marker.length() != 9)\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\tMarker m = buffer.getMarker(marker.charAt(8));\\n\\t\\t\\t\\t\\tif(m == null)\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\tpos = m.getPosition();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tthrow new InternalError();\\n\\t\\t\\t\\tif(view != null && view.getBuffer() == buffer)\\n\\t\\t\\t\\t\\tview.getTextArea().setCaretPosition(pos);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tbuffer.setIntegerProperty(Buffer.CARET,pos);\\n\\t\\t\\t\\t\\tbuffer.unsetProperty(Buffer.SCROLL_VERT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t} \\n\\t\\tprivate static void addBufferToList(Buffer buffer)\\n\\t{\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tString symlinkPath = buffer.getSymlinkPath();\\n\\t\\t\\tif((VFSManager.getVFSForPath(symlinkPath).getCapabilities()\\n\\t\\t\\t\\t& VFS.CASE_INSENSITIVE_CAP) != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tsymlinkPath = symlinkPath.toLowerCase();\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif(viewCount <= 1 && buffersFirst != null\\n\\t\\t\\t\\t&& buffersFirst == buffersLast\\n\\t\\t\\t\\t&& buffersFirst.isUntitled()\\n\\t\\t\\t\\t&& !buffersFirst.isDirty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tBuffer oldBuffersFirst = buffersFirst;\\n\\t\\t\\t\\tbuffersFirst = buffersLast = buffer;\\n\\t\\t\\t\\tDisplayManager.bufferClosed(oldBuffersFirst);\\n\\t\\t\\t\\tEditBus.send(new BufferUpdate(oldBuffersFirst,\\n\\t\\t\\t\\t\\tnull,BufferUpdate.CLOSED));\\n\\t\\t\\t\\tbufferHash.clear();\\n\\t\\t\\t\\tbufferHash.put(symlinkPath,buffer);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tbufferCount++;\\n\\t\\t\\tbufferHash.put(symlinkPath,buffer);\\n\\t\\t\\tif(buffersFirst == null)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersFirst = buffersLast = buffer;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if(sortBuffers)\\n\\t\\t\\t{\\n\\t\\t\\t\\tString str11, str12;\\n\\t\\t\\t\\tif(sortByName)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstr11 = buffer.getName();\\n\\t\\t\\t\\t\\tstr12 = buffer.getDirectory();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstr11 = buffer.getDirectory();\\n\\t\\t\\t\\t\\tstr12 = buffer.getName();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tBuffer _buffer = buffersFirst;\\n\\t\\t\\t\\twhile(_buffer != null)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tString str21, str22;\\n\\t\\t\\t\\t\\tif(sortByName)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tstr21 = _buffer.getName();\\n\\t\\t\\t\\t\\t\\tstr22 = _buffer.getDirectory();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tstr21 = _buffer.getDirectory();\\n\\t\\t\\t\\t\\t\\tstr22 = _buffer.getName();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tint comp = MiscUtilities.compareStrings(str11,str21,true);\\n\\t\\t\\t\\t\\tif(comp < 0 || (comp == 0 && MiscUtilities.compareStrings(str12,str22,true) < 0))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tbuffer.next = _buffer;\\n\\t\\t\\t\\t\\t\\tbuffer.prev = _buffer.prev;\\n\\t\\t\\t\\t\\t\\t_buffer.prev = buffer;\\n\\t\\t\\t\\t\\t\\tif(_buffer != buffersFirst)\\n\\t\\t\\t\\t\\t\\t\\tbuffer.prev.next = buffer;\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\tbuffersFirst = buffer;\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t_buffer = _buffer.next;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} \\n\\t\\t\\tbuffer.prev = buffersLast;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbuffer.next = null;\\n\\t\\t\\tbuffersLast.next = buffer;\\n\\t\\t\\tbuffersLast = buffer;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void removeBufferFromList(Buffer buffer)\\n\\t{\\n\\t\\tsynchronized(bufferListLock)\\n\\t\\t{\\n\\t\\t\\tbufferCount--;\\n\\t\\t\\tboolean caseInsensitiveFilesystem =\\n\\t\\t\\t\\tOperatingSystem.isDOSDerived()\\n\\t\\t\\t\\t|| OperatingSystem.isMacOS();\\n\\t\\t\\tString path = buffer.getPath();\\n\\t\\t\\tif(caseInsensitiveFilesystem)\\n\\t\\t\\t\\tpath = path.toLowerCase();\\n\\t\\t\\tbufferHash.remove(path);\\n\\t\\t\\tif(buffer == buffersFirst && buffer == buffersLast)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersFirst = buffersLast = null;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tif(buffer == buffersFirst)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersFirst = buffer.next;\\n\\t\\t\\t\\tbuffer.next.prev = null;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffer.prev.next = buffer.next;\\n\\t\\t\\t}\\n\\t\\t\\tif(buffer == buffersLast)\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffersLast = buffersLast.prev;\\n\\t\\t\\t\\tbuffer.prev.next = null;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\tbuffer.next.prev = buffer.prev;\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tbuffer.next = buffer.prev = null;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void addViewToList(View view)\\n\\t{\\n\\t\\tviewCount++;\\n\\t\\tif(viewsFirst == null)\\n\\t\\t\\tviewsFirst = viewsLast = view;\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tview.prev = viewsLast;\\n\\t\\t\\tviewsLast.next = view;\\n\\t\\t\\tviewsLast = view;\\n\\t\\t}\\n\\t} \\n\\t\\tprivate static void removeViewFromList(View view)\\n\\t{\\n\\t\\tviewCount--;\\n\\t\\tif(viewsFirst == viewsLast)\\n\\t\\t{\\n\\t\\t\\tviewsFirst = viewsLast = null;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif(view == viewsFirst)\\n\\t\\t{\\n\\t\\t\\tviewsFirst = view.next;\\n\\t\\t\\tview.next.prev = null;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tview.prev.next = view.next;\\n\\t\\t}\\n\\t\\tif(view == viewsLast)\\n\\t\\t{\\n\\t\\t\\tviewsLast = viewsLast.prev;\\n\\t\\t\\tview.prev.next = null;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tview.next.prev = view.prev;\\n\\t\\t}\\n\\t} \\n\\tprivate static void closeView(View view, boolean callExit)\\n\\t{\\n\\t\\tPerspectiveManager.setPerspectiveDirty(true);\\n\\t\\tif(viewsFirst == viewsLast && callExit)\\n\\t\\t\\texit(view,false); \\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tEditBus.send(new ViewUpdate(view,ViewUpdate.CLOSED));\\n\\t\\t\\tview.close();\\n\\t\\t\\tremoveViewFromList(view);\\n\\t\\t\\tif(view == activeView)\\n\\t\\t\\t\\tactiveView = null;\\n\\t\\t}\\n\\t} \\n\\tprivate static void loadModeCatalog(String path, boolean resource)\\n\\t{\\n\\t\\tLog.log(Log.MESSAGE,jEdit.class,\\\"Loading mode catalog file \\\" + path);\\n\\t\\tModeCatalogHandler handler = new ModeCatalogHandler(\\n\\t\\t\\tMiscUtilities.getParentOfPath(path),resource);\\n\\t\\tXmlParser parser = new XmlParser();\\n\\t\\tparser.setHandler(handler);\\n\\t\\tReader in = null;\\n\\t\\ttry\\n\\t\\t{\\n\\t\\t\\tInputStream _in;\\n\\t\\t\\tif(resource)\\n\\t\\t\\t\\t_in = jEdit.class.getResourceAsStream(path);\\n\\t\\t\\telse\\n\\t\\t\\t\\t_in = new FileInputStream(path);\\n\\t\\t\\tin = new BufferedReader(new InputStreamReader(_in));\\n\\t\\t\\tparser.parse(null, null, in);\\n\\t\\t}\\n\\t\\tcatch(XmlException xe)\\n\\t\\t{\\n\\t\\t\\tint line = xe.getLine();\\n\\t\\t\\tString message = xe.getMessage();\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,path + \\\":\\\" + line\\n\\t\\t\\t\\t+ \\\": \\\" + message);\\n\\t\\t}\\n\\t\\tcatch(Exception e)\\n\\t\\t{\\n\\t\\t\\tLog.log(Log.ERROR,jEdit.class,e);\\n\\t\\t}\\n\\t\\tfinally\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tif(in != null)\\n\\t\\t\\t\\t\\tin.close();\\n\\t\\t\\t}\\n\\t\\t\\tcatch(IOException io)\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.log(Log.ERROR,jEdit.class,io);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} \\n\\tprivate static void initKeyBindings()\\n\\t{\\n\\t\\tinputHandler.removeAllKeyBindings();\\n\\t\\tActionSet[] actionSets = getActionSets();\\n\\t\\tfor(int i = 0; i < actionSets.length; i++)\\n\\t\\t{\\n\\t\\t\\tactionSets[i].initKeyBindings();\\n\\t\\t}\\n\\t} \\n\\t\\tstatic class MyFocusManager extends DefaultKeyboardFocusManager\\n\\t{\\n\\t\\tMyFocusManager()\\n\\t\\t{\\n\\t\\t\\tsetDefaultFocusTraversalPolicy(new LayoutFocusTraversalPolicy());\\n\\t\\t}\\n\\t\\tpublic boolean postProcessKeyEvent(KeyEvent evt)\\n\\t\\t{\\n\\t\\t\\tif(!evt.isConsumed())\\n\\t\\t\\t{\\n\\t\\t\\t\\tComponent comp = (Component)evt.getSource();\\n\\t\\t\\t\\tif(!comp.isShowing())\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\tfor(;;)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif(comp instanceof View)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t((View)comp).processKeyEvent(evt,\\n\\t\\t\\t\\t\\t\\t\\tView.VIEW);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse if(comp == null || comp instanceof Window\\n\\t\\t\\t\\t\\t\\t|| comp instanceof JEditTextArea)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tcomp = comp.getParent();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn super.postProcessKeyEvent(evt);\\n\\t\\t}\\n\\t} }\""
            },
            "m9": {
                "content": "The source code of `jEdit.java` has been successfully retrieved. This class serves as the core entry point for the jEdit application and includes:\n\n- **Initialization logic** (`main`, `initMisc`, `finishStartup`)\n- **Buffer, view, and plugin management**\n- **System-wide properties and configurations**\n- **Event handling and input processing**\n- **Interaction with other components**, such as `BufferIORequest`, `PluginManager`, `KillRing`, `HelpViewer`, etc.\n\n### Key Observations:\n1. **Extensive use of core components**: The class interacts directly with several entities like `Buffer`, `View`, `PluginJAR`, and `ActionContext`, which were also identified in both the co-change and call graph analysis.\n2. **Dependency on Plugin System**: A large portion of the code deals with loading, initializing, and managing plugins via `PluginManager` and `PluginJAR`.\n3. **Configuration Handling**: It manages system-wide settings using `PropertyManager`, indicating that changes to configuration-related logic may impact multiple areas.\n4. **User Interface Management**: It initializes UI elements, handles view creation, and manages docking windows through `DockableWindowManager`.\n\n---\n\n### Next Steps:\nTo determine which entities need to be synchronized with changes made to `jEdit.java`, we should analyze its **conceptual coupling** with other files. This will help us understand semantic dependencies beyond direct method calls or historical co-changes.\n\nI will now call the `get_conceptual_coupling` function between `jEdit.java` and some of the top co-changed files (e.g., `JEditTextArea.java`, `Buffer.java`, `View.java`) to assess their semantic similarity.\n\nLet\u2019s start with `JEditTextArea.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_e27d4b1c22e64544a80255",
                        "function": {
                            "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"JEditTextArea.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.84656894\""
            },
            "m11": {
                "content": "The conceptual coupling between `jEdit.java` and `JEditTextArea.java` is **0.8466**, which indicates a **strong semantic relationship**. This suggests that changes in one are likely to affect the other, not only due to direct dependencies but also because of shared functionality or responsibilities in the system.\n\n### Interpretation:\n- A value close to 1 means both files deal with similar concepts\u2014likely involving text editing, user interaction, or UI management.\n- Given that `JEditTextArea` is likely the main text editing component and `jEdit` is the core application managing views and buffers, this tight coupling makes sense from a design perspective.\n\n---\n\n### Next Steps:\nTo build a comprehensive list of entities that should be synchronized when `jEdit.java` changes, we should check the conceptual coupling with other high-confidence co-changed entities like:\n\n- `Buffer.java`\n- `View.java`\n- `PluginManager.java`\n- `DockableWindowManager.java`\n\nLet\u2019s analyze the conceptual coupling of `jEdit.java` with `Buffer.java` next.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_4da159b414b6480ab52ae0",
                        "function": {
                            "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"Buffer.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.84988916\""
            },
            "m13": {
                "content": "The conceptual coupling between `jEdit.java` and `Buffer.java` is **0.8499**, which is also a **very strong semantic relationship**.\n\n### Interpretation:\n- This high coupling suggests that both files are deeply involved in similar concerns, such as managing text content, file I/O, or editing state.\n- Since `jEdit` orchestrates buffer creation and management, and `Buffer` represents the actual editable document, their tight integration is expected and reinforces the need to consider them together during changes.\n\n---\n\n### Pattern Observed:\nSo far, we have observed:\n| Entity Pair | Conceptual Coupling |\n|-------------|---------------------|\n| jEdit.java - JEditTextArea.java | 0.8466 |\n| jEdit.java - Buffer.java        | 0.8499 |\n\nBoth values indicate **strong semantic ties**, suggesting these entities should be considered for synchronized updates when changes occur in `jEdit.java`.\n\nLet\u2019s continue by checking coupling with `View.java`, another core UI component frequently co-changed with `jEdit.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_0737405836044e4a90ecba",
                        "function": {
                            "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"View.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m14": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.8504748\""
            },
            "m15": {
                "content": "The conceptual coupling between `jEdit.java` and `View.java` is **0.8505**, indicating another **very strong semantic relationship**.\n\n### Interpretation:\n- This confirms that `jEdit.java` and `View.java` are tightly integrated, which aligns with their roles: `jEdit` manages application-wide behavior, while `View` represents a window or UI container for editing buffers.\n- A change in how views are initialized or managed in `jEdit.java` could directly affect `View.java`, and vice versa.\n\n---\n\n### Updated Coupling Summary:\n\n| Entity Pair                     | Conceptual Coupling |\n|----------------------------------|---------------------|\n| jEdit.java - JEditTextArea.java  | 0.8466              |\n| jEdit.java - Buffer.java         | 0.8499              |\n| jEdit.java - View.java           | 0.8505              |\n\nThese values consistently show **strong semantic dependencies**, reinforcing the need to consider these files together during development or refactoring tasks.\n\nLet\u2019s continue by analyzing coupling with `PluginManager.java`, since plugin handling is a core concern of `jEdit.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_4a7e291d616b46748d15d2",
                        "function": {
                            "arguments": "{\"entity1\": \"jEdit.java\", \"entity2\": \"PluginManager.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m16": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.85484177\""
            },
            "m17": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m18": {
                "content": "Title: Diagnosis of starting entity `jEdit.java`\n\nChange set: [JEditTextArea.java, Buffer.java, View.java, PluginManager.java, KillRing.java, HelpViewer.java, DockableWindowManager.java, ActionHandler.java, TextAreaPainter.java, SearchAndReplace.java, GUIUtilities.java, PluginJAR.java, MiscUtilities.java, Mode.java, EditPlugin.java, BufferIORequest.java, Log.java, InputHandler.java, DefaultInputHandler.java, UtilEvalError.java, BufferHistory.java, HistoryModel.java, Registers.java, BeanShell.java, VFSManager.java, PropertyManager.java, EditServer.java, DockableWindowManagerImpl.java, PluginListHandler.java, ServiceManager.java, Macros.java, DisplayManager.java, OptionGroup.java, EnhancedDialog.java, FileVFS.java, TextAreaTransferHandler.java, TextAreaDropHandler.java, TextAreaDialog.java, BeanShellAction.java, BeanShellHandler.java, BeanShellErrorDialog.java, Macro.java, Abbrevs.java]\n\nDetails:\n- **JEditTextArea.java (0.8466)**: Strong conceptual coupling; core UI component for text editing.\n- **Buffer.java (0.8499)**: Central to document management; tightly integrated with jEdit's buffer lifecycle.\n- **View.java (0.8505)**: Manages UI windows; frequently co-changed and semantically linked.\n- **PluginManager.java (0.8548)**: Direct call graph dependency; manages plugin loading and activation.\n- **KillRing.java**: Direct call graph usage; involved in clipboard operations.\n- **HelpViewer.java**: Direct call graph reference; provides help system integration.\n- **DockableWindowManager.java**: High co-change confidence (0.17); manages UI layout components.\n- **ActionHandler.java**: Frequently co-changed (confidence 0.1595); handles user actions.\n- **TextAreaPainter.java**: Co-change support (0.0963); visual rendering tied to text area behavior.\n- **SearchAndReplace.java**: Directly used by jEdit; frequent co-change history.\n- **GUIUtilities.java**: Highly co-changed (0.1794); provides UI-related helper functions.\n- **PluginJAR.java**: Direct interaction; manages plugin JAR files.\n- **MiscUtilities.java**: Used heavily in path/file handling; high co-change support (0.1894).\n- **Mode.java**: Syntax mode management is central to file editing.\n- **EditPlugin.java**: Core plugin interface; interacts directly with PluginManager.\n- **BufferIORequest.java**: Direct call from jEdit.java; handles I/O requests.\n- **Log.java**: Logging infrastructure; low-level dependency.\n- **InputHandler.java**: Key input processing; highly coupled.\n- **DefaultInputHandler.java**: Default implementation used by jEdit.\n- **UtilEvalError.java**: Used in scripting context; part of the call graph.\n- **BufferHistory.java**: Tracks file open history; frequent co-change.\n- **HistoryModel.java**: Maintains session history; moderate coupling.\n- **Registers.java**: Stores clipboard registers; co-change support.\n- **BeanShell.java**: Scripting engine; used during startup and macro execution.\n- **VFSManager.java**: Handles virtual file system; key initialization step.\n- **PropertyManager.java**: Manages application properties.\n- **EditServer.java**: Enables multi-instance coordination.\n- **DockableWindowManagerImpl.java**: Implementation class for window docking.\n- **PluginListHandler.java**: Part of plugin management workflow.\n- **ServiceManager.java**: Manages internal services.\n- **Macros.java**: Supports macro recording and playback.\n- **DisplayManager.java**: Coordinates display logic across buffers/views.\n- **OptionGroup.java**: Related to settings and configuration.\n- **EnhancedDialog.java**: UI element used throughout the system.\n- **FileVFS.java**: VFS implementation; core file access.\n- **TextAreaTransferHandler.java**: Drag/drop and clipboard support.\n- **TextAreaDropHandler.java**: Specialized drop handler for text area.\n- **TextAreaDialog.java**: Dialogs tied to text area behavior.\n- **BeanShellAction.java**: Executes BeanShell commands.\n- **BeanShellHandler.java**: Internal handler for script execution.\n- **BeanShellErrorDialog.java**: Error reporting for scripting.\n- **Macro.java**: Macro definition and execution class.\n- **Abbrevs.java**: Text abbreviation expansion; used in editing workflows.\n\nThese entities are selected based on a combination of:\n- **High-confidence co-change relationships**\n- **Call graph dependencies**\n- **Conceptual coupling scores**\n\nModifications to `jEdit.java` should consider synchronized updates to these files to ensure consistency and prevent regression issues.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}