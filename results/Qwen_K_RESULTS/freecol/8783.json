{
    "time": 1749451412.1684983,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `freecol`, a well-known Java open source project. The starting entity you need to deal with is ClientOptions.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_5fc0d01dfbd74dc28c88ce",
                    "function": {
                        "arguments": "{\"entity\": \"ClientOptions.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"SelectOptionUI\", \"1\", \"0.07142857142857142\"], [\"BooleanOptionUI\", \"1\", \"0.07142857142857142\"], [\"IntegerOptionUI\", \"1\", \"0.07142857142857142\"], [\"Canvas\", \"2\", \"0.14285714285714285\"], [\"Connection\", \"1\", \"0.07142857142857142\"], [\"Server\", \"1\", \"0.07142857142857142\"], [\"MapGenerator\", \"1\", \"0.07142857142857142\"], [\"TransportMission\", \"1\", \"0.07142857142857142\"], [\"LandGenerator\", \"1\", \"0.07142857142857142\"], [\"ConnectController\", \"2\", \"0.14285714285714285\"], [\"CircleIterator\", \"1\", \"0.07142857142857142\"], [\"InGameInputHandler\", \"4\", \"0.2857142857142857\"], [\"DummyConnection\", \"1\", \"0.07142857142857142\"], [\"ReportUnitPanel\", \"1\", \"0.07142857142857142\"], [\"GoodsItem\", \"1\", \"0.07142857142857142\"], [\"ReportTurnPanel\", \"1\", \"0.07142857142857142\"], [\"SelectOption\", \"1\", \"0.07142857142857142\"], [\"AbstractOption\", \"1\", \"0.07142857142857142\"], [\"OptionMap\", \"4\", \"0.2857142857142857\"], [\"BooleanOption\", \"1\", \"0.07142857142857142\"], [\"OptionGroup\", \"1\", \"0.07142857142857142\"], [\"MapGeneratorOptions\", \"2\", \"0.14285714285714285\"], [\"Messages\", \"1\", \"0.07142857142857142\"], [\"GameOptions\", \"2\", \"0.14285714285714285\"], [\"ActionManager\", \"2\", \"0.14285714285714285\"], [\"IntegerOption\", \"1\", \"0.07142857142857142\"], [\"LanguageOption\", \"1\", \"0.07142857142857142\"], [\"FileOption\", \"1\", \"0.07142857142857142\"], [\"InGameController\", \"4\", \"0.2857142857142857\"], [\"MapControls\", \"1\", \"0.07142857142857142\"], [\"GUI\", \"1\", \"0.07142857142857142\"], [\"MiniMap\", \"1\", \"0.07142857142857142\"], [\"DisplayGridAction\", \"2\", \"0.14285714285714285\"], [\"UnitMoveAnimation\", \"2\", \"0.14285714285714285\"], [\"CanvasMouseMotionListener\", \"1\", \"0.07142857142857142\"], [\"CanvasMapEditorMouseMotionListener\", \"1\", \"0.07142857142857142\"], [\"FreeColClient\", \"4\", \"0.2857142857142857\"], [\"FreeColServer\", \"2\", \"0.14285714285714285\"], [\"DifficultyDialog\", \"1\", \"0.07142857142857142\"], [\"SoundTest\", \"4\", \"0.2857142857142857\"], [\"DifficultyOptionMap\", \"1\", \"0.07142857142857142\"], [\"ResourceManager\", \"1\", \"0.07142857142857142\"], [\"SoundPlayerThread\", \"1\", \"0.07142857142857142\"], [\"SoundPlayer\", \"1\", \"0.07142857142857142\"], [\"PreGameController\", \"1\", \"0.07142857142857142\"], [\"ServerPlayer\", \"2\", \"0.14285714285714285\"], [\"SchoolTest\", \"1\", \"0.07142857142857142\"], [\"MapGeneratorTest\", \"1\", \"0.07142857142857142\"], [\"StartGamePanel\", \"1\", \"0.07142857142857142\"], [\"DisplayBordersAction\", \"1\", \"0.07142857142857142\"], [\"ReportColonyPanel\", \"1\", \"0.07142857142857142\"]]"
        },
        {
            "content": "The `get_co_change_relationship` function returned a list of entities that are commonly changed together with **ClientOptions.java**, along with their support count and confidence score. \n\nFrom the results, we can observe that several UI-related classes like **InGameInputHandler**, **OptionMap**, **InGameController**, **FreeColClient**, and **SoundTest** have a relatively higher confidence score (0.2857). This suggests that these files have been frequently modified together with **ClientOptions.java** in the past. These files may need to be synchronized when changes are made to **ClientOptions.java**, as they seem to have a strong historical co-change relationship.\n\nLet\u2019s further analyze one or more of these files to understand the coupling dependencies or conceptual similarity with **ClientOptions.java**, so we can determine which ones truly require synchronization.\n\nTo proceed, I will first analyze the **InGameInputHandler.java** file using the `get_origin_code` function to inspect its content and understand its relationship with **ClientOptions.java**.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_e77998a0b2b44f12b7f0b4",
                    "function": {
                        "arguments": "{\"entity\": \"InGameInputHandler.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package net.sf.freecol.server.control;\\nimport java.io.IOException;\\nimport java.util.ArrayList;\\nimport java.util.EnumMap;\\nimport java.util.HashMap;\\nimport java.util.Hashtable;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.logging.Logger;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.common.Specification;\\nimport net.sf.freecol.common.model.AbstractUnit;\\nimport net.sf.freecol.common.model.BuildableType;\\nimport net.sf.freecol.common.model.Building;\\nimport net.sf.freecol.common.model.BuildingType;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.ColonyTile;\\nimport net.sf.freecol.common.model.CombatModel;\\nimport net.sf.freecol.common.model.DiplomaticTrade;\\nimport net.sf.freecol.common.model.EquipmentType;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.ExportData;\\nimport net.sf.freecol.common.model.Game;\\nimport net.sf.freecol.common.model.GameOptions;\\nimport net.sf.freecol.common.model.Goods;\\nimport net.sf.freecol.common.model.GoodsContainer;\\nimport net.sf.freecol.common.model.GoodsType;\\nimport net.sf.freecol.common.model.HighScore;\\nimport net.sf.freecol.common.model.HistoryEvent;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.Location;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.Nameable;\\nimport net.sf.freecol.common.model.Ownable;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Region;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tension;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.TileImprovement;\\nimport net.sf.freecol.common.model.TileImprovementType;\\nimport net.sf.freecol.common.model.TileItemContainer;\\nimport net.sf.freecol.common.model.TradeRoute;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.UnitType;\\nimport net.sf.freecol.common.model.WorkLocation;\\nimport net.sf.freecol.common.model.CombatModel.CombatResult;\\nimport net.sf.freecol.common.model.CombatModel.CombatResultType;\\nimport net.sf.freecol.common.model.LostCityRumour.RumourType;\\nimport net.sf.freecol.common.model.Map.Direction;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.model.Player.Stance;\\nimport net.sf.freecol.common.model.Unit.Role;\\nimport net.sf.freecol.common.model.Unit.UnitState;\\nimport net.sf.freecol.common.networking.BuyLandMessage;\\nimport net.sf.freecol.common.networking.Connection;\\nimport net.sf.freecol.common.networking.Message;\\nimport net.sf.freecol.common.networking.NetworkConstants;\\nimport net.sf.freecol.common.networking.NoRouteToServerException;\\nimport net.sf.freecol.common.networking.StatisticsMessage;\\nimport net.sf.freecol.common.networking.StealLandMessage;\\nimport net.sf.freecol.common.option.BooleanOption;\\nimport net.sf.freecol.common.util.RandomChoice;\\nimport net.sf.freecol.server.FreeColServer;\\nimport net.sf.freecol.server.ai.AIPlayer;\\nimport net.sf.freecol.server.model.ServerPlayer;\\nimport org.w3c.dom.Element;\\nimport org.w3c.dom.NodeList;\\npublic final class InGameInputHandler extends InputHandler implements NetworkConstants {\\n    private static Logger logger = Logger.getLogger(InGameInputHandler.class.getName());\\n    public InGameInputHandler(final FreeColServer freeColServer) {\\n        super(freeColServer);\\n                register(\\\"createUnit\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return createUnit(connection, element);\\n            }\\n        });\\n        register(\\\"createBuilding\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return createBuilding(connection, element);\\n            }\\n        });\\n        register(\\\"getRandom\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getRandom(connection, element);\\n            }\\n        });\\n        register(\\\"getVacantEntryLocation\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getVacantEntryLocation(connection, element);\\n            }\\n        });\\n        register(\\\"setDestination\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return setDestination(connection, element);\\n            }\\n        });\\n        register(\\\"move\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return move(connection, element);\\n            }\\n        });\\n        register(\\\"askSkill\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return askSkill(connection, element);\\n            }\\n        });\\n        register(\\\"attack\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return attack(connection, element);\\n            }\\n        });\\n        register(\\\"embark\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return embark(connection, element);\\n            }\\n        });\\n        register(\\\"boardShip\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return boardShip(connection, element);\\n            }\\n        });\\n        register(\\\"learnSkillAtSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return learnSkillAtSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"scoutIndianSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return scoutIndianSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"missionaryAtSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return missionaryAtSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"inciteAtSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return inciteAtSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"armedUnitDemandTribute\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return armedUnitDemandTribute(connection, element);\\n            }\\n        });\\n        register(\\\"leaveShip\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return leaveShip(connection, element);\\n            }\\n        });\\n        register(\\\"loadCargo\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return loadCargo(connection, element);\\n            }\\n        });\\n        register(\\\"unloadCargo\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return unloadCargo(connection, element);\\n            }\\n        });\\n        register(\\\"buyGoods\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buyGoods(connection, element);\\n            }\\n        });\\n        register(\\\"sellGoods\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return sellGoods(connection, element);\\n            }\\n        });\\n        register(\\\"moveToEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return moveToEurope(connection, element);\\n            }\\n        });\\n        register(\\\"moveToAmerica\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return moveToAmerica(connection, element);\\n            }\\n        });\\n        register(\\\"buildColony\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buildColony(connection, element);\\n            }\\n        });\\n        register(\\\"recruitUnitInEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return recruitUnitInEurope(connection, element);\\n            }\\n        });\\n        register(\\\"emigrateUnitInEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return emigrateUnitInEurope(connection, element);\\n            }\\n        });\\n        register(\\\"trainUnitInEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return trainUnitInEurope(connection, element);\\n            }\\n        });\\n        register(\\\"equipUnit\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return equipUnit(connection, element);\\n            }\\n        });\\n        register(\\\"work\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return work(connection, element);\\n            }\\n        });\\n        register(\\\"changeWorkType\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return changeWorkType(connection, element);\\n            }\\n        });\\n        register(\\\"workImprovement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return workImprovement(connection, element);\\n            }\\n        });\\n        register(\\\"setCurrentlyBuilding\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return setCurrentlyBuilding(connection, element);\\n            }\\n        });\\n        register(\\\"changeState\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return changeState(connection, element);\\n            }\\n        });\\n        register(\\\"putOutsideColony\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return putOutsideColony(connection, element);\\n            }\\n        });\\n        register(\\\"clearSpeciality\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return clearSpeciality(connection, element);\\n            }\\n        });\\n        register(\\\"setNewLandName\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return setNewLandName(connection, element);\\n            }\\n        });\\n        register(\\\"endTurn\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return endTurn(connection, element);\\n            }\\n        });\\n        register(\\\"disbandUnit\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return disbandUnit(connection, element);\\n            }\\n        });\\n        register(\\\"cashInTreasureTrain\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return cashInTreasureTrain(connection, element);\\n            }\\n        });\\n        register(\\\"getTransaction\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return getTransactionSession(connection, element);\\n            }\\n        });\\n        register(\\\"closeTransaction\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return closeTransactionSession(connection, element);\\n            }\\n        });\\n        register(\\\"tradeProposition\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return tradeProposition(connection, element);\\n            }\\n        });\\n        register(\\\"trade\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return trade(connection, element);\\n            }\\n        });\\n        register(\\\"goodsForSale\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return goodsForSaleRequest(connection, element);\\n            }\\n        });\\n        register(\\\"buyProposition\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buyProposition(connection, element);\\n            }\\n        });\\n        register(\\\"buy\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buy(connection, element);\\n            }\\n        });\\n        register(\\\"deliverGift\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return deliverGift(connection, element);\\n            }\\n        });\\n        register(\\\"indianDemand\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return indianDemand(connection, element);\\n            }\\n        });\\n        register(BuyLandMessage.getXMLElementTagName(), new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                BuyLandMessage message = new BuyLandMessage(getGame(), element);\\n                return message.handle(freeColServer, player, connection);\\n            }\\n        });\\n        register(StealLandMessage.getXMLElementTagName(), new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                StealLandMessage message = new StealLandMessage(getGame(), element);\\n                return message.handle(freeColServer, player, connection);\\n            }\\n        });\\n        register(\\\"payForBuilding\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return payForBuilding(connection, element);\\n            }\\n        });\\n        register(\\\"payArrears\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return payArrears(connection, element);\\n            }\\n        });\\n        register(\\\"setGoodsLevels\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return setGoodsLevels(connection, element);\\n            }\\n        });\\n        register(\\\"declareIndependence\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return declareIndependence(connection, element);\\n            }\\n        });\\n        register(\\\"giveIndependence\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return giveIndependence(connection, element);\\n            }\\n        });\\n        register(\\\"foreignAffairs\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return foreignAffairs(connection, element);\\n            }\\n        });\\n        register(\\\"highScores\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return highScores(connection, element);\\n            }\\n        });\\n        register(\\\"getREFUnits\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return getREFUnits(connection, element);\\n            }\\n        });\\n        register(\\\"rename\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return rename(connection, element);\\n            }\\n        });\\n        register(\\\"getNewTradeRoute\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getNewTradeRoute(connection, element);\\n            }\\n        });\\n        register(\\\"updateTradeRoute\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return updateTradeRoute(connection, element);\\n            }\\n        });\\n        register(\\\"setTradeRoutes\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return setTradeRoutes(connection, element);\\n            }\\n        });\\n        register(\\\"assignTradeRoute\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return assignTradeRoute(connection, element);\\n            }\\n        });\\n        register(\\\"updateCurrentStop\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return updateCurrentStop(connection, element);\\n            }\\n        });\\n        register(\\\"diplomaticTrade\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return diplomaticTrade(connection, element);\\n            }\\n        });\\n        register(\\\"selectFromFountainYouth\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return selectFromFountainYouth(connection, element);\\n            }\\n        });\\n        register(\\\"spySettlement\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return spySettlement(connection, element);\\n            }\\n        });\\n        register(\\\"abandonColony\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return abandonColony(connection, element);\\n            }\\n        });\\n        register(\\\"continuePlaying\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return continuePlaying(connection, element);\\n            }\\n        });\\n        register(\\\"assignTeacher\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return assignTeacher(connection, element);\\n            }\\n        });\\n        register(StatisticsMessage.getXMLElementTagName(), new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getServerStatistics(connection, element);\\n            }\\n        });\\n        register(\\\"retire\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return retire(connection, element);\\n            }\\n        });\\n    }\\n    private List<ServerPlayer> getOtherPlayers(Player player) {\\n        List<ServerPlayer> result = new ArrayList<ServerPlayer>();\\n        for (Player otherPlayer : getGame().getPlayers()) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) otherPlayer;\\n            if (player.equals(enemyPlayer) || enemyPlayer.getConnection() == null) {\\n                continue;\\n            }\\n            result.add(enemyPlayer);\\n        }\\n        return result;\\n    }\\n    private void sendRemoveUnitToAll(Unit unit, Player player) {\\n        Element removeElement = Message.createNewRootElement(\\\"remove\\\");\\n        Element removeUnit = removeElement.getOwnerDocument().createElement(\\\"removeObject\\\");\\n        removeUnit.setAttribute(\\\"ID\\\", unit.getId());\\n        removeElement.appendChild(removeUnit);\\n        for (ServerPlayer enemyPlayer : getOtherPlayers(player)) {\\n            if (unit.isVisibleTo(enemyPlayer)) {\\n                try {\\n                    enemyPlayer.getConnection().sendAndWait(removeElement);\\n                } catch (IOException e) {\\n                    logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                                   + enemyPlayer.getConnection());\\n                }\\n            }\\n        }\\n    }\\n    private Element setNewLandName(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        player.setNewLandName(element.getAttribute(\\\"newLandName\\\"));\\n        player.getHistory().add(new HistoryEvent(getGame().getTurn().getNumber(),\\n                                                 HistoryEvent.Type.DISCOVER_NEW_WORLD,\\n                                                 \\\"%name%\\\", player.getNewLandName()));\\n                return null;\\n    }\\n    private Element createUnit(Connection connection, Element element) {\\n        logger.info(\\\"Receiving \\\\\\\"createUnit\\\\\\\"-request.\\\");\\n        String taskID = element.getAttribute(\\\"taskID\\\");\\n        Location location = (Location) getGame().getFreeColGameObject(element.getAttribute(\\\"location\\\"));\\n        Player owner = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"owner\\\"));\\n        UnitType type = FreeCol.getSpecification().getUnitType(element.getAttribute(\\\"type\\\"));\\n        if (location == null) {\\n            throw new NullPointerException();\\n        }\\n        if (owner == null) {\\n            throw new NullPointerException();\\n        }\\n        Unit unit = getFreeColServer().getModelController()\\n                .createUnit(taskID, location, owner, type, false, connection);\\n        Element reply = Message.createNewRootElement(\\\"createUnitConfirmed\\\");\\n        reply.appendChild(unit.toXMLElement(owner, reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element createBuilding(Connection connection, Element element) {\\n        logger.info(\\\"Receiving \\\\\\\"createBuilding\\\\\\\"-request.\\\");\\n        String taskID = element.getAttribute(\\\"taskID\\\");\\n        Colony colony = (Colony) getGame().getFreeColGameObject(element.getAttribute(\\\"colony\\\"));\\n        BuildingType type = FreeCol.getSpecification().getBuildingType(element.getAttribute(\\\"type\\\"));\\n        if (colony == null) {\\n            throw new NullPointerException();\\n        }\\n        Building building = getFreeColServer().getModelController()\\n                .createBuilding(taskID, colony, type, false, connection);\\n        Element reply = Message.createNewRootElement(\\\"createBuildingConfirmed\\\");\\n        reply.appendChild(building.toXMLElement(colony.getOwner(), reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element getRandom(Connection connection, Element element) {\\n                String taskID = element.getAttribute(\\\"taskID\\\");\\n        int n = Integer.parseInt(element.getAttribute(\\\"n\\\"));\\n        int result = getFreeColServer().getModelController().getRandom(taskID, n);\\n        Element reply = Message.createNewRootElement(\\\"getRandomConfirmed\\\");\\n        reply.setAttribute(\\\"result\\\", Integer.toString(result));\\n                return reply;\\n    }\\n    private Element getVacantEntryLocation(Connection connection, Element element) {\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Player owner = unit.getOwner();\\n        ServerPlayer askingPlayer = getFreeColServer().getPlayer(connection);\\n        Location entryLocation = unit.getEntryLocation();\\n        if (owner != askingPlayer) {\\n            if (entryLocation == null) {\\n                throw new IllegalStateException(\\\"Unit \\\" + unit.getId() + \\\" with owner \\\" + owner\\n                                                + \\\" not owned by \\\" + askingPlayer\\n                                                + \\\", refusing to get vacant location!\\\");\\n            } else {\\n                logger.warning(\\\"Unit \\\" + unit.getId() + \\\" with owner \\\" + owner\\n                               + \\\" not owned by \\\" + askingPlayer\\n                               + \\\", entry location is \\\" + entryLocation.getId());\\n            }\\n        } else {\\n            entryLocation = getFreeColServer().getModelController().setToVacantEntryLocation(unit);\\n        }\\n        Element reply = Message.createNewRootElement(\\\"getVacantEntryLocationConfirmed\\\");\\n        reply.setAttribute(\\\"location\\\", entryLocation.getId());\\n        return reply;\\n    }\\n    private Element getNewTradeRoute(Connection connection, Element element) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        TradeRoute tradeRoute = getFreeColServer().getModelController().getNewTradeRoute(player);\\n        Element reply = Message.createNewRootElement(\\\"getNewTradeRouteConfirmed\\\");\\n        reply.appendChild(tradeRoute.toXMLElement(player, reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element updateTradeRoute(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element childElement = (Element) element.getChildNodes().item(0);\\n        TradeRoute clientTradeRoute = new TradeRoute(null, childElement);\\n        TradeRoute serverTradeRoute = (TradeRoute) getGame().getFreeColGameObject(clientTradeRoute.getId());\\n        if (serverTradeRoute == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'TradeRoute' with specified ID: \\\"\\n                    + clientTradeRoute.getId());\\n        }\\n        if (serverTradeRoute.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your trade route!\\\");\\n        }\\n        serverTradeRoute.updateFrom(clientTradeRoute);\\n        return null;\\n    }\\n    private Element setTradeRoutes(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        ArrayList<TradeRoute> routes = new ArrayList<TradeRoute>();\\n        NodeList childElements = element.getChildNodes();\\n        for(int i = 0; i < childElements.getLength(); i++) {\\n            Element childElement = (Element) childElements.item(i);\\n            String id = childElement.getAttribute(\\\"id\\\");\\n            TradeRoute serverTradeRoute = (TradeRoute) getGame().getFreeColGameObject(id);\\n            if (serverTradeRoute == null) {\\n                throw new IllegalArgumentException(\\\"Could not find 'TradeRoute' with specified ID: \\\" + id);\\n            }\\n            if (serverTradeRoute.getOwner() != player) {\\n                throw new IllegalStateException(\\\"Not your trade route!\\\");\\n            }\\n            routes.add(serverTradeRoute);\\n        }\\n        player.setTradeRoutes(routes);\\n        return null;\\n    }\\n    private Element updateCurrentStop(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        } else if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.nextStop();\\n        return null;\\n    }\\n    private Element assignTradeRoute(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        } else if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        String tradeRouteString = element.getAttribute(\\\"tradeRoute\\\");\\n        if (tradeRouteString == null || tradeRouteString == \\\"\\\") {\\n            unit.setTradeRoute(null);\\n        } else {\\n            TradeRoute tradeRoute = (TradeRoute) getGame().getFreeColGameObject(tradeRouteString);\\n            if (tradeRoute == null) {\\n                throw new IllegalArgumentException(\\\"Could not find 'TradeRoute' with specified ID: \\\"\\n                                                   + element.getAttribute(\\\"tradeRoute\\\"));\\n            }\\n            if (tradeRoute.getOwner() != player) {\\n                throw new IllegalStateException(\\\"Not your trade route!\\\");\\n            }\\n            unit.setTradeRoute(tradeRoute);\\n        }\\n        return null;\\n    }\\n    private Element diplomaticTrade(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                                               + element.getAttribute(\\\"unit\\\"));\\n        }\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        Tile tile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (tile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Tile' in direction \\\" +\\n                                               direction);\\n        }\\n        Settlement settlement = tile.getSettlement();\\n        if (settlement == null) {\\n            throw new IllegalArgumentException(\\\"No settlement on 'Tile' \\\" +\\n                                               tile.getId());\\n        }\\n        unit.setMovesLeft(0);\\n        NodeList childElements = element.getChildNodes();\\n        Element childElement = (Element) childElements.item(0);\\n        DiplomaticTrade agreement = new DiplomaticTrade(getGame(), childElement);\\n        if (agreement.getSender() != player) {\\n            throw new IllegalArgumentException(\\\"Sender of 'DiplomaticTrade' message is not \\\" +\\n                                               \\\"player \\\" + player.getName());\\n        }\\n        if (agreement.isAccept()) {\\n            agreement.makeTrade();\\n        }\\n        ServerPlayer enemyPlayer = (ServerPlayer) agreement.getRecipient();\\n        Element reply = null;\\n        try {\\n            reply = enemyPlayer.getConnection().ask(element);\\n        } catch (IOException e) {\\n            logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                           + enemyPlayer.getConnection());\\n        }\\n        if (reply != null) {\\n            String accept = reply.getAttribute(\\\"accept\\\");\\n            if (accept != null && accept.equals(\\\"accept\\\")) {\\n                agreement.makeTrade();\\n            }\\n        }\\n        return reply;\\n    }\\n    private Element spySettlement(Connection connection, Element spyElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                Unit unit = (Unit) getGame().getFreeColGameObject(spyElement.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, spyElement.getAttribute(\\\"direction\\\"));\\n                if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + spyElement.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' is not on the map: \\\" + unit.toString());\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (newTile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find tile in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + spyElement.getAttribute(\\\"unit\\\"));\\n        }\\n        Settlement settlement = newTile.getSettlement();\\n        if (settlement == null) {\\n            throw new IllegalArgumentException(\\\"There is no settlement in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + spyElement.getAttribute(\\\"unit\\\"));\\n        }\\n        Element reply = Message.createNewRootElement(\\\"foreignColony\\\");\\n        if (settlement instanceof Colony) {\\n            reply.appendChild(((Colony) settlement).toXMLElement(player, reply.getOwnerDocument(), true, false));\\n        } else if (settlement instanceof IndianSettlement) {\\n            reply.appendChild(((IndianSettlement) settlement).toXMLElement(player, reply.getOwnerDocument(), true, false));\\n        }\\n        for(Unit foreignUnit : newTile.getUnitList()) {\\n            reply.appendChild(foreignUnit.toXMLElement(player, reply.getOwnerDocument(), true, false));\\n        }\\n        return reply;\\n    }\\n    private Element abandonColony(Connection connection, Element abandonElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                Colony colony = (Colony) getGame().getFreeColGameObject(abandonElement.getAttribute(\\\"colony\\\"));\\n                if (colony == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Colony' with specified ID: \\\"\\n                    + abandonElement.getAttribute(\\\"colony\\\"));\\n        }\\n        if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your colony!\\\");\\n        }\\n        colony.getOwner().getHistory()\\n            .add(new HistoryEvent(colony.getGame().getTurn().getNumber(),\\n                                  HistoryEvent.Type.ABANDON_COLONY,\\n                                  \\\"%colony%\\\", colony.getName()));\\n        Tile tile = colony.getTile();\\n                colony.dispose();\\n        sendUpdatedTileToAll(tile, player);\\n        return null;\\n    }\\n    private Element move(Connection connection, Element moveElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        String unitID = moveElement.getAttribute(\\\"unit\\\");\\n        Unit unit = (Unit) getGame().getFreeColGameObject(unitID);\\n        Direction direction = Enum.valueOf(Direction.class, moveElement.getAttribute(\\\"direction\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\" + unitID);\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' not on map: ID: \\\" + unitID + \\\" (\\\"\\n                    + unit.getName() + \\\")\\\");\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        for (ServerPlayer enemyPlayer : getOtherPlayers(player)) {\\n            try {\\n                if (unit.isVisibleTo(enemyPlayer)) {                                         Element opponentMoveElement = Message.createNewRootElement(\\\"opponentMove\\\");\\n                    opponentMoveElement.setAttribute(\\\"fromTile\\\", unit.getTile().getId());\\n                    opponentMoveElement.setAttribute(\\\"direction\\\", direction.toString());\\n                    opponentMoveElement.setAttribute(\\\"unit\\\", unit.getId());\\n                    enemyPlayer.getConnection().sendAndWait(opponentMoveElement);\\n                } else if (enemyPlayer.canSee(newTile)\\n                        && (newTile.getSettlement() == null || \\n                            !getGame().getGameOptions().getBoolean(GameOptions.UNIT_HIDING))) {\\n                                        Element opponentMoveElement = Message.createNewRootElement(\\\"opponentMove\\\");\\n                    opponentMoveElement.setAttribute(\\\"direction\\\", direction.toString());\\n                    opponentMoveElement.setAttribute(\\\"toTile\\\", newTile.getId());\\n                    opponentMoveElement.appendChild(unit.toXMLElement(enemyPlayer, opponentMoveElement\\n                            .getOwnerDocument()));\\n                    if (unit.isOnCarrier() && !((Unit) unit.getLocation()).isVisibleTo(enemyPlayer)) {\\n                        Unit location = (Unit) unit.getLocation();\\n                        opponentMoveElement.setAttribute(\\\"inUnit\\\", location.getId());\\n                        opponentMoveElement.appendChild(location.toXMLElement(enemyPlayer, opponentMoveElement\\n                                .getOwnerDocument()));\\n                    }\\n                    enemyPlayer.getConnection().sendAndWait(opponentMoveElement);\\n                }\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                        + enemyPlayer.getConnection());\\n            }\\n        }\\n        unit.move(direction);\\n        Element reply = Message.createNewRootElement(\\\"update\\\");\\n        CombatModel combatModel = unit.getGame().getCombatModel();        \\n                if (unit.isNaval() && unit.getMovesLeft() > 0) {\\n            Iterator<Position> tileIterator = getGame().getMap().getAdjacentIterator(unit.getTile().getPosition());\\n            float attackPower = 0;\\n            Unit attacker = null;\\n            while (tileIterator.hasNext()) {\\n                Tile tile = getGame().getMap().getTile(tileIterator.next());\\n                Colony colony = tile.getColony();\\n                                if (colony != null) {\\n                } else if (!tile.isLand() && tile.getFirstUnit() != null) {\\n                    Player enemy = tile.getFirstUnit().getOwner();\\n                    if (player == enemy) {                         continue;\\n                    }\\n                    for (Unit enemyUnit : tile.getUnitList()) {\\n                        if (enemyUnit.isOffensiveUnit() && (player.getStance(enemy) == Stance.WAR\\n                                || enemyUnit.hasAbility(\\\"model.ability.piracy\\\")\\n                                || unit.hasAbility(\\\"model.ability.piracy\\\"))) {\\n                            attackPower += combatModel.getOffencePower(enemyUnit, unit);\\n                            if (attacker == null) {\\n                                attacker = enemyUnit;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            if (attackPower > 0) {\\n                                                assert attacker != null;\\n                float defencePower = combatModel.getDefencePower(attacker, unit);\\n                float totalProbability = attackPower + defencePower;\\n                int r = getPseudoRandom().nextInt(Math.round(totalProbability) + 1);\\n                if (r < attackPower) {\\n                    int diff = Math.max(0, Math.round(attackPower - defencePower));\\n                    int moves = Math.min(9, 3 + diff / 3);\\n                    unit.setMovesLeft(unit.getMovesLeft() - moves);\\n                    reply.setAttribute(\\\"movesSlowed\\\", Integer.toString(moves));\\n                    reply.setAttribute(\\\"slowedBy\\\", attacker.getId());\\n                }\\n            }\\n        }\\n        if (player.isEuropean()) {\\n            Region region = newTile.getDiscoverableRegion();\\n            if (region != null &&\\n                (region.isPacific() ||\\n                 getGame().getGameOptions().getBoolean(GameOptions.EXPLORATION_POINTS))) {\\n                String name;\\n                if (region.isPacific()) {\\n                    name = region.getDisplayName();\\n                } else {\\n                    name = moveElement.getAttribute(\\\"regionName\\\");\\n                    if (name == null || \\\"\\\".equals(name)) {\\n                        name = player.getDefaultRegionName(region.getType());\\n                    }\\n                }\\n                region.discover(player, getGame().getTurn(), name);\\n                reply.appendChild(region.toXMLElement(player, reply.getOwnerDocument()));\\n                Element updateElement = Message.createNewRootElement(\\\"update\\\");\\n                updateElement.appendChild(region.toXMLElement(player, updateElement.getOwnerDocument()));\\n                freeColServer.getServer().sendToAll(updateElement, player.getConnection());\\n            }\\n        }\\n        List<Tile> surroundingTiles = getGame().getMap().getSurroundingTiles(unit.getTile(), unit.getLineOfSight());\\n        for (int i = 0; i < surroundingTiles.size(); i++) {\\n            Tile t = surroundingTiles.get(i);\\n            reply.appendChild(t.toXMLElement(player, reply.getOwnerDocument(), false, false));\\n        }\\n        if (newTile.hasLostCityRumour() && player.isEuropean()) {\\n            newTile.setLostCityRumour(false);\\n            exploreLostCityRumour(unit, player);\\n        }\\n        return reply;\\n    }\\n    private void exploreLostCityRumour(Unit unit, ServerPlayer player) {\\n                                        final int BAD_EVENT_PERCENTAGE[]  = { 11, 17, 23, 30, 37};\\n        final int GOOD_EVENT_PERCENTAGE[] = { 75, 62, 48, 33, 17};\\n                                final int BAD_EVENT_MOD[]  = {-6, -7, -7, -8, -9};\\n        final int GOOD_EVENT_MOD[] = {14, 15, 16, 18, 20};\\n        Tile tile = unit.getTile();        \\n        Specification specification = FreeCol.getSpecification();\\n        List<UnitType> learntUnitTypes = unit.getType().getUnitTypesLearntInLostCity();\\n        List<UnitType> newUnitTypes = specification.getUnitTypesWithAbility(\\\"model.ability.foundInLostCity\\\");\\n        List<UnitType> treasureUnitTypes = specification.getUnitTypesWithAbility(\\\"model.ability.carryTreasure\\\");\\n                int level = Specification.getSpecification().getRangeOption(\\\"model.option.difficulty\\\").getValue();\\n        boolean isExpertScout = unit.hasAbility(\\\"model.ability.expertScout\\\") && \\n                                unit.hasAbility(\\\"model.ability.scoutIndianSettlement\\\");\\n        boolean hasDeSoto = player.hasAbility(\\\"model.ability.rumoursAlwaysPositive\\\");\\n                int percentNeutral = 0;\\n        int percentBad;\\n        int percentGood;\\n        if (hasDeSoto) {\\n            percentBad     = 0;\\n            percentGood    = 100;\\n        } else {\\n                        percentBad  = BAD_EVENT_PERCENTAGE[level];\\n            percentGood = GOOD_EVENT_PERCENTAGE[level];\\n                        if (isExpertScout) {\\n                percentBad += BAD_EVENT_MOD[level];\\n                percentGood += GOOD_EVENT_MOD[level];\\n            }\\n                                    if (percentBad+percentGood<100) {\\n                percentNeutral = 100-percentBad-percentGood;\\n            }\\n        }\\n                        int eventNothing = 100;\\n                int eventVanish = 100;\\n        int eventBurialGround = 0;\\n                if (tile.getOwner() != null && !tile.getOwner().isEuropean()) {\\n            eventVanish = 75;\\n            eventBurialGround = 25;\\n        }\\n                int eventLearn    = 30;\\n        int eventTrinkets = 30;\\n        int eventColonist = 20;\\n                if (learntUnitTypes.isEmpty()) {\\n            eventLearn    =  0;\\n            eventTrinkets = 50;\\n            eventColonist = 30;\\n        }\\n                                int eventDorado   = 13;\\n        int eventFountain =  7;\\n                                eventNothing      *= percentNeutral;\\n        eventVanish       *= percentBad;\\n        eventBurialGround *= percentBad;\\n        eventLearn        *= percentGood;\\n        eventTrinkets     *= percentGood;\\n        eventColonist     *= percentGood;\\n        eventDorado       *= percentGood;\\n        eventFountain     *= percentGood;\\n                List<RandomChoice<RumourType>> choices = new ArrayList<RandomChoice<RumourType>>();\\n        if (eventNothing>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.NOTHING, eventNothing));\\n        }\\n        if (eventVanish>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.EXPEDITION_VANISHES, eventVanish));\\n        }\\n        if (eventBurialGround>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.BURIAL_GROUND, eventBurialGround));\\n        }\\n        if (eventLearn>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.LEARN, eventLearn));\\n        }\\n        if (eventTrinkets>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.TRIBAL_CHIEF, eventTrinkets));\\n        }\\n        if (eventColonist>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.COLONIST, eventColonist));\\n        }\\n        if (eventFountain>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.FOUNTAIN_OF_YOUTH, eventFountain));\\n        }\\n        if (eventDorado>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.TREASURE, eventDorado));\\n        }\\n        RumourType rumour = RandomChoice.getWeightedRandom(getPseudoRandom(), choices);\\n        Element rumourElement = Message.createNewRootElement(\\\"lostCityRumour\\\");\\n        rumourElement.setAttribute(\\\"type\\\", rumour.toString());\\n        rumourElement.setAttribute(\\\"unit\\\", unit.getId());\\n        Unit newUnit;\\n        int random;\\n        int dx = 10 - level;\\n        switch (rumour) {\\n        case BURIAL_GROUND:\\n            Player indianPlayer = tile.getOwner();\\n            indianPlayer.modifyTension(player, Tension.Level.HATEFUL.getLimit());\\n            break;\\n        case EXPEDITION_VANISHES:\\n            unit.dispose();\\n            break;\\n        case NOTHING:\\n            break;\\n        case LEARN:\\n            random = getPseudoRandom().nextInt(learntUnitTypes.size());\\n            unit.setType(learntUnitTypes.get(random));\\n            rumourElement.setAttribute(\\\"unitType\\\", learntUnitTypes.get(random).getId());\\n            break;\\n        case TRIBAL_CHIEF:\\n            int amount = getPseudoRandom().nextInt(dx * 10) + dx * 5;\\n            player.modifyGold(amount);\\n            rumourElement.setAttribute(\\\"amount\\\", Integer.toString(amount));\\n            break;\\n        case COLONIST:\\n            random = getPseudoRandom().nextInt(newUnitTypes.size());\\n            newUnit = new Unit(getGame(), tile, player, newUnitTypes.get(random), UnitState.ACTIVE);\\n            rumourElement.appendChild(newUnit.toXMLElement(player, rumourElement.getOwnerDocument()));\\n            break;\\n        case TREASURE:\\n            int treasure = getPseudoRandom().nextInt(dx * 600) + dx * 300;\\n            random = getPseudoRandom().nextInt(treasureUnitTypes.size());\\n            newUnit = new Unit(getGame(), tile, player, treasureUnitTypes.get(random), UnitState.ACTIVE);\\n            newUnit.setTreasureAmount(treasure);\\n            rumourElement.setAttribute(\\\"amount\\\", Integer.toString(treasure));\\n            rumourElement.appendChild(newUnit.toXMLElement(player, rumourElement.getOwnerDocument()));\\n            player.getHistory().add(new HistoryEvent(getGame().getTurn().getNumber(),\\n                                                     HistoryEvent.Type.CITY_OF_GOLD,\\n                                                     \\\"%treasure%\\\", String.valueOf(treasure)));\\n            break;\\n        case FOUNTAIN_OF_YOUTH:\\n            if (player.getEurope() != null) {\\n                if (player.hasAbility(\\\"model.ability.selectRecruit\\\")) {\\n                    player.setRemainingEmigrants(dx);\\n                    rumourElement.setAttribute(\\\"emigrants\\\", Integer.toString(dx));\\n                } else {\\n                    for (int k = 0; k < dx; k++) {\\n                        newUnit = new Unit(getGame(), player.getEurope(), player,\\n                                           player.generateRecruitable(String.valueOf(k)), UnitState.ACTIVE);\\n                        rumourElement.appendChild(newUnit.toXMLElement(player, rumourElement.getOwnerDocument()));\\n                    }\\n                }\\n            }\\n            break;\\n        default:\\n            throw new IllegalStateException(\\\"No such rumour.\\\");\\n        }\\n                try {\\n            player.getConnection().sendAndWait(rumourElement);\\n        } catch (IOException e) {\\n            logger.warning(\\\"Could not send rumour message to: \\\" + player.getName() + \\\" with connection \\\"\\n                    + player.getConnection());\\n        }\\n                for (ServerPlayer updatePlayer : getOtherPlayers(player)) {\\n            if (updatePlayer.canSee(tile)) {\\n                try {\\n                    Element rumourUpdate = Message.createNewRootElement(\\\"update\\\");\\n                    rumourUpdate.appendChild(tile.toXMLElement(updatePlayer, rumourUpdate.getOwnerDocument()));\\n                    updatePlayer.getConnection().sendAndWait(rumourUpdate);\\n                } catch (IOException e) {\\n                    logger.warning(\\\"Could not send update message to: \\\" + updatePlayer.getName() + \\\" with connection \\\"\\n                                   + updatePlayer.getConnection());\\n                }\\n            }\\n        }\\n    }\\n    private Element selectFromFountainYouth(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        int remaining = player.getRemainingEmigrants();\\n        if (remaining == 0) {\\n            throw new IllegalStateException(\\\"There is no remaining emigrants for this player.\\\");\\n        }\\n        player.setRemainingEmigrants(remaining-1);\\n        Europe europe = player.getEurope();\\n        int slot = Integer.parseInt(element.getAttribute(\\\"slot\\\"));\\n        UnitType recruitable = europe.getRecruitable(slot);\\n        UnitType newRecruitable = player.generateRecruitable(String.valueOf(remaining));\\n        europe.setRecruitable(slot, newRecruitable);\\n        Unit unit = new Unit(getGame(), europe, player, recruitable, UnitState.ACTIVE);\\n        Element reply = Message.createNewRootElement(\\\"selectFromFountainYouthConfirmed\\\");\\n        reply.setAttribute(\\\"newRecruitable\\\", newRecruitable.getId());\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element askSkill(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getMovesLeft() == 0) {\\n            throw new IllegalArgumentException(\\\"Unit has no moves left.\\\");\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' not on map: ID: \\\" + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        IndianSettlement settlement = (IndianSettlement) map.getNeighbourOrNull(direction, unit.getTile())\\n                .getSettlement();\\n        unit.setMovesLeft(0);\\n        Element reply = Message.createNewRootElement(\\\"provideSkill\\\");\\n        if (settlement.getLearnableSkill() != null) {\\n            reply.setAttribute(\\\"skill\\\", settlement.getLearnableSkill().getId());\\n        }\\n        settlement.setVisited(unit.getOwner());\\n                settlement.getTile().updateIndianSettlementSkill(player);\\n        return reply;\\n    }\\n    private Element attack(Connection connection, Element attackElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                String unitID = attackElement.getAttribute(\\\"unit\\\");\\n        Unit unit = (Unit) getGame().getFreeColGameObject(unitID);\\n        Direction direction = Enum.valueOf(Direction.class, attackElement.getAttribute(\\\"direction\\\"));\\n                if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\" + unitID);\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' is not on the map: \\\" + unit.toString());\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (newTile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find tile in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + unitID);\\n        }\\n        CombatResult result;\\n        int plunderGold = -1;\\n        Unit defender = newTile.getDefendingUnit(unit);\\n        Player defendingPlayer = null;\\n        if (defender == null) {\\n            if (newTile.getSettlement() != null) {\\n                defendingPlayer = newTile.getSettlement().getOwner();\\n                result = new CombatResult(CombatResultType.DONE_SETTLEMENT, 0);\\n            } else {\\n                throw new IllegalStateException(\\\"Nothing to attack in direction \\\" + direction + \\\" from unit with ID \\\"\\n                        + unitID);\\n            }\\n        } else {\\n            defendingPlayer = defender.getOwner();\\n            result = unit.getGame().getCombatModel().generateAttackResult(unit, defender); \\n        }\\n        if (result.type == CombatResultType.DONE_SETTLEMENT) {\\n                        plunderGold = newTile.getSettlement().getOwner().getGold() / 10;\\n        }\\n                Location repairLocation = null;\\n        Player loserOwner = null;\\n        switch (result.type) {\\n        case WIN:\\n            if (defender.isNaval()) {\\n                loserOwner = defendingPlayer;\\n                repairLocation = loserOwner.getRepairLocation(defender);\\n            }\\n            break;\\n        case DONE_SETTLEMENT:\\n            for (Unit victim : newTile.getUnitList()) {\\n                if (victim.isNaval()) {\\n                    loserOwner = victim.getOwner();\\n                    repairLocation = loserOwner.getRepairLocation(victim);\\n                    break;\\n                }\\n            }\\n            break;\\n        case LOSS:\\n            if (unit.isNaval()) {\\n                loserOwner = player;\\n                repairLocation = loserOwner.getRepairLocation(unit);\\n            }\\n            break;\\n        case EVADES:\\n        case GREAT_LOSS:\\n        case GREAT_WIN:\\n                        break;\\n        }\\n                        for (ServerPlayer enemyPlayer : getOtherPlayers(player)) {\\n            Element opponentAttackElement = Message.createNewRootElement(\\\"opponentAttack\\\");\\n            if (unit.isVisibleTo(enemyPlayer) || defender.isVisibleTo(enemyPlayer)) {\\n                opponentAttackElement.setAttribute(\\\"direction\\\", direction.toString());\\n                opponentAttackElement.setAttribute(\\\"result\\\", result.type.toString());\\n                opponentAttackElement.setAttribute(\\\"damage\\\", String.valueOf(result.damage));\\n                opponentAttackElement.setAttribute(\\\"plunderGold\\\", Integer.toString(plunderGold));\\n                opponentAttackElement.setAttribute(\\\"unit\\\", unit.getId());\\n                opponentAttackElement.setAttribute(\\\"defender\\\", defender.getId());\\n                if (defender.getOwner() == enemyPlayer) {\\n                \\t                \\tif(repairLocation != null && loserOwner == defender.getOwner()){\\n                \\t\\topponentAttackElement.setAttribute(\\\"repairIn\\\", repairLocation.getId());\\n                \\t}\\n                                    \\topponentAttackElement.setAttribute(\\\"update\\\", \\\"unit\\\");\\n                    opponentAttackElement.appendChild(unit.toXMLElement(enemyPlayer,\\n                            opponentAttackElement.getOwnerDocument()));\\n                } else if (!defender.isVisibleTo(enemyPlayer)) {\\n                    opponentAttackElement.setAttribute(\\\"update\\\", \\\"defender\\\");\\n                    opponentAttackElement.setAttribute(\\\"defenderTile\\\", defender.getTile().getId());\\n                    if (!enemyPlayer.canSee(defender.getTile())) {\\n                        enemyPlayer.setExplored(defender.getTile());\\n                        opponentAttackElement.appendChild(defender.getTile()\\n                            .toXMLElement(enemyPlayer, opponentAttackElement.getOwnerDocument()));\\n                    }\\n                    opponentAttackElement.appendChild(defender.toXMLElement(enemyPlayer,\\n                            opponentAttackElement.getOwnerDocument()));\\n                } else if (!unit.isVisibleTo(enemyPlayer)) {\\n                    opponentAttackElement.setAttribute(\\\"update\\\", \\\"unit\\\");\\n                    opponentAttackElement.appendChild(unit.toXMLElement(enemyPlayer,\\n                            opponentAttackElement.getOwnerDocument()));\\n                }\\n                try {\\n                    enemyPlayer.getConnection().sendAndWait(opponentAttackElement);\\n                } catch (IOException e) {\\n                    logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName()\\n                                   + \\\" with connection \\\" + enemyPlayer.getConnection());\\n                }\\n            }\\n        }\\n                Element reply = Message.createNewRootElement(\\\"attackResult\\\");\\n        reply.setAttribute(\\\"result\\\", result.type.toString());\\n        reply.setAttribute(\\\"damage\\\", String.valueOf(result.damage));\\n        reply.setAttribute(\\\"plunderGold\\\", Integer.toString(plunderGold));\\n                if(repairLocation != null && player == loserOwner){\\n        \\treply.setAttribute(\\\"repairIn\\\", repairLocation.getId());\\n        }\\n        if (result.type == CombatResultType.DONE_SETTLEMENT && newTile.getColony() != null) {\\n                        reply.appendChild(newTile.toXMLElement(newTile.getColony().getOwner(), reply.getOwnerDocument()));\\n            reply.appendChild(defender.toXMLElement(newTile.getColony().getOwner(), reply.getOwnerDocument()));\\n        } else {\\n            reply.appendChild(defender.toXMLElement(player, reply.getOwnerDocument()));\\n        }\\n                        boolean isIndianCapitalBurned=false;\\n        if(result.type == CombatResultType.DONE_SETTLEMENT && \\n        \\t\\tnewTile.getSettlement() instanceof IndianSettlement &&\\n        \\t\\t((IndianSettlement) newTile.getSettlement()).isCapital()) {\\n        \\tisIndianCapitalBurned = true;\\n        \\treply.setAttribute(\\\"indianCapitalBurned\\\", Boolean.toString(isIndianCapitalBurned));\\n        }\\n        Hashtable<String, Integer> oldGoodsCounts = new Hashtable<String, Integer>();\\n        if (unit.canCaptureGoods() && getGame().getGameOptions().getBoolean(GameOptions.UNIT_HIDING)) {\\n            List<Goods> goodsInUnit = unit.getGoodsContainer().getFullGoods();\\n            for (Goods goods : goodsInUnit) {\\n                oldGoodsCounts.put(goods.getType().getId(), goods.getAmount());\\n            }\\n        }\\n        int oldUnits = unit.getTile().getUnitCount();\\n                unit.getGame().getCombatModel().attack(unit, defender, result, plunderGold, repairLocation);\\n        if(isIndianCapitalBurned){\\n        \\tdefendingPlayer.surrenderTo(player);\\n        }\\n        if (result.type.compareTo(CombatResultType.WIN) >= 0 \\n            && unit.getTile() != newTile\\n            && oldUnits < unit.getTile().getUnitCount()) {\\n                                                Unit lastUnit = unit.getTile().getLastUnit();\\n            if (!lastUnit.getOwner().isEuropean()) {\\n                Element convertElement = reply.getOwnerDocument().createElement(\\\"convert\\\");\\n                convertElement.appendChild(lastUnit.toXMLElement(unit.getOwner(), reply.getOwnerDocument()));\\n                reply.appendChild(convertElement);\\n            }\\n        }\\n                        if (unit.canCaptureGoods() && getGame().getGameOptions().getBoolean(GameOptions.UNIT_HIDING)) {\\n            List<Goods> goodsInUnit = unit.getGoodsContainer().getCompactGoods();\\n            for (Goods newGoods : goodsInUnit) {\\n                Integer oldGoodsAmount = oldGoodsCounts.get(newGoods.getType().getId());\\n                int capturedGoods = newGoods.getAmount() - (oldGoodsAmount!=null?oldGoodsAmount.intValue():0);\\n                if (capturedGoods > 0) {\\n                    Element captured = reply.getOwnerDocument().createElement(\\\"capturedGoods\\\");\\n                    captured.setAttribute(\\\"type\\\", newGoods.getType().getId());\\n                    captured.setAttribute(\\\"amount\\\", Integer.toString(capturedGoods));\\n                    reply.appendChild(captured);\\n                }\\n            }\\n        }\\n        if (result.type.compareTo(CombatResultType.EVADES) >= 0 && unit.getTile().equals(newTile)) {\\n                        Element update = reply.getOwnerDocument().createElement(\\\"update\\\");\\n            int lineOfSight = unit.getLineOfSight();\\n            if (result.type == CombatResultType.DONE_SETTLEMENT && newTile.getSettlement() != null) {\\n                lineOfSight = Math.max(lineOfSight, newTile.getSettlement().getLineOfSight());\\n            }\\n            List<Tile> surroundingTiles = getGame().getMap().getSurroundingTiles(unit.getTile(), lineOfSight);\\n            for (int i = 0; i < surroundingTiles.size(); i++) {\\n                Tile t = surroundingTiles.get(i);\\n                update.appendChild(t.toXMLElement(player, update.getOwnerDocument()));\\n            }\\n            update.appendChild(unit.getTile().toXMLElement(player, update.getOwnerDocument()));\\n            reply.appendChild(update);\\n        }\\n        return reply;\\n    }\\n    private Element embark(Connection connection, Element embarkElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(embarkElement.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, embarkElement.getAttribute(\\\"direction\\\"));\\n        Unit destinationUnit = (Unit) getGame().getFreeColGameObject(embarkElement.getAttribute(\\\"embarkOnto\\\"));\\n        if (unit == null || destinationUnit == null\\n                || getGame().getMap().getNeighbourOrNull(direction, unit.getTile()) != destinationUnit.getTile()) {\\n            throw new IllegalArgumentException(\\\"Invalid data format in client message.\\\");\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        unit.embark(destinationUnit);\\n        sendRemoveUnitToAll(unit, player);\\n        return null;\\n    }\\n    private Element boardShip(Connection connection, Element boardShipElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(boardShipElement.getAttribute(\\\"unit\\\"));\\n        Unit carrier = (Unit) getGame().getFreeColGameObject(boardShipElement.getAttribute(\\\"carrier\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        boolean tellEnemyPlayers = true;\\n        if (oldTile == null || oldTile.getSettlement() != null) {\\n            tellEnemyPlayers = false;\\n        }\\n        if (unit.isCarrier()) {\\n            logger.warning(\\\"Tried to load a carrier onto another carrier.\\\");\\n            return null;\\n        }\\n        unit.boardShip(carrier);\\n        if (tellEnemyPlayers) {\\n            sendRemoveUnitToAll(unit, player);\\n        }\\n                sendUpdatedTileToAll(unit.getTile(), player);\\n        return null;\\n    }\\n    private Element learnSkillAtSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        boolean cancelAction = false;\\n        if (element.getAttribute(\\\"action\\\").equals(\\\"cancel\\\")) {\\n            cancelAction = true;\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' not on map: ID: \\\" + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile tile = map.getNeighbourOrNull(direction, unit.getTile());\\n        IndianSettlement settlement = (IndianSettlement) tile.getSettlement();\\n        if (settlement == null) {\\n            throw new IllegalStateException(\\\"No settlement to learn skill from.\\\");\\n        }\\n        if (!unit.getType().canBeUpgraded(settlement.getLearnableSkill(),\\n                                          UnitType.UpgradeType.NATIVES)) {\\n            throw new IllegalStateException(\\\"Unit can't learn that skill from settlement!\\\");\\n        }\\n        Element reply = Message.createNewRootElement(\\\"learnSkillResult\\\");\\n        if (!cancelAction) {\\n            Tension tension = settlement.getAlarm(player);\\n            if (tension == null) {\\n                tension = new Tension(0);\\n            }\\n            switch (tension.getLevel()) {\\n            case HATEFUL:\\n                reply.setAttribute(\\\"result\\\", \\\"die\\\");\\n                unit.dispose();\\n                break;\\n            case ANGRY:\\n                reply.setAttribute(\\\"result\\\", \\\"leave\\\");\\n                break;\\n            default:\\n                unit.setType(settlement.getLearnableSkill());\\n                if (!settlement.isCapital())\\n                    settlement.setLearnableSkill(null);\\n                                settlement.getTile().updateIndianSettlementSkill(player);\\n                reply.setAttribute(\\\"result\\\", \\\"success\\\");\\n            }\\n        } else {\\n            reply.setAttribute(\\\"result\\\", \\\"cancelled\\\");\\n        }\\n        return reply;\\n    }\\n    private Element scoutIndianSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        String action = element.getAttribute(\\\"action\\\");\\n        IndianSettlement settlement = (IndianSettlement) map.getNeighbourOrNull(direction, unit.getTile()).getSettlement();\\n        Element reply = Message.createNewRootElement(\\\"scoutIndianSettlementResult\\\");\\n        if (action.equals(\\\"basic\\\")) {\\n            unit.contactAdjacent(settlement.getTile());\\n            unit.setMovesLeft(0);\\n                        UnitType skill = settlement.getLearnableSkill();\\n            if (skill != null) {\\n                reply.setAttribute(\\\"skill\\\", skill.getId());\\n            }\\n            settlement.updateWantedGoods();\\n            GoodsType[] wantedGoods = settlement.getWantedGoods();\\n            reply.setAttribute(\\\"highlyWantedGoods\\\", wantedGoods[0].getId());\\n            reply.setAttribute(\\\"wantedGoods1\\\", wantedGoods[1].getId());\\n            reply.setAttribute(\\\"wantedGoods2\\\", wantedGoods[2].getId());\\n            reply.setAttribute(\\\"numberOfCamps\\\", String.valueOf(settlement.getOwner().getSettlements().size()));\\n            for (Tile tile : getGame().getMap().getSurroundingTiles(settlement.getTile(), unit.getLineOfSight())) {\\n                reply.appendChild(tile.toXMLElement(player, reply.getOwnerDocument()));\\n            }\\n                        settlement.getTile().updateIndianSettlementInformation(player);\\n        } else if (action.equals(\\\"cancel\\\")) {\\n            return null;\\n        } else if (action.equals(\\\"attack\\\")) {\\n                                                unit.setMovesLeft(1);\\n            return null;\\n        } else if (settlement.getAlarm(player) != null &&\\n                   settlement.getAlarm(player).getLevel() == Tension.Level.HATEFUL) {\\n            reply.setAttribute(\\\"result\\\", \\\"die\\\");\\n            unit.dispose();\\n        } else if (action.equals(\\\"speak\\\")) {\\n            if (!settlement.hasBeenVisited()) {\\n                                                double random = Math.random();\\n                if (random < 0.33) {\\n                    reply.setAttribute(\\\"result\\\", \\\"tales\\\");\\n                    Element update = reply.getOwnerDocument().createElement(\\\"update\\\");\\n                    Position center = new Position(settlement.getTile().getX(), settlement.getTile().getY());\\n                    Iterator<Position> circleIterator = map.getCircleIterator(center, true, 6);\\n                    while (circleIterator.hasNext()) {\\n                        Position position = circleIterator.next();\\n                        if ((!position.equals(center))\\n                                && (map.getTile(position).isLand()\\n                                    || map.getTile(position).getLandCount() > 0)) {\\n                            Tile t = map.getTile(position);\\n                            player.setExplored(t);\\n                            update.appendChild(t.toXMLElement(player, update.getOwnerDocument(), true, false));\\n                        }\\n                    }\\n                    reply.appendChild(update);\\n                } else {\\n                    int beadsGold = (int) (Math.random() * (400 * settlement.getBonusMultiplier())) + 50;\\n                    if (unit.hasAbility(\\\"model.ability.expertScout\\\")) {\\n                        beadsGold = (beadsGold * 11) / 10;\\n                    }\\n                    reply.setAttribute(\\\"result\\\", \\\"beads\\\");\\n                    reply.setAttribute(\\\"amount\\\", Integer.toString(beadsGold));\\n                    player.modifyGold(beadsGold);\\n                }\\n                settlement.setVisited(player);\\n            } else {\\n                reply.setAttribute(\\\"result\\\", \\\"nothing\\\");\\n            }\\n        } else if (action.equals(\\\"tribute\\\")) {\\n            demandTribute(settlement, player, reply);\\n        }\\n        return reply;\\n    }\\n    private Element armedUnitDemandTribute(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n                if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' is not on the map: \\\" + unit.toString());\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (newTile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find tile in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        unit.setMovesLeft(0);\\n        IndianSettlement settlement = (IndianSettlement) newTile.getSettlement();\\n        Element reply = Message.createNewRootElement(\\\"armedUnitDemandTributeResult\\\");\\n        demandTribute(settlement, player, reply);\\n        return reply;\\n    }\\n    private void demandTribute(IndianSettlement settlement, Player player, Element reply) {\\n        int gold = settlement.getTribute(player);\\n        if (gold > 0) {\\n            reply.setAttribute(\\\"result\\\", \\\"agree\\\");\\n            reply.setAttribute(\\\"amount\\\", String.valueOf(gold));\\n            player.modifyGold(gold);\\n        } else {\\n            reply.setAttribute(\\\"result\\\", \\\"disagree\\\");\\n        }\\n    }\\n    private Element missionaryAtSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        InGameController inGameController = freeColServer.getInGameController();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        String action = element.getAttribute(\\\"action\\\");\\n        IndianSettlement settlement = (IndianSettlement) map.getNeighbourOrNull(direction, unit.getTile())\\n                .getSettlement();\\n        unit.setMovesLeft(0);\\n        if (action.equals(\\\"cancel\\\")) {\\n            return null;\\n        } else if (action.equals(\\\"establish\\\")) {\\n            sendRemoveUnitToAll(unit, player);\\n            boolean success = inGameController.createMission(settlement,unit);\\n        \\tElement reply = Message.createNewRootElement(\\\"missionaryReply\\\");\\n        \\treply.setAttribute(\\\"success\\\", String.valueOf(success));\\n        \\treply.setAttribute(\\\"tension\\\", settlement.getAlarm(unit.getOwner()).getLevel().toString());\\n            return reply;\\n        } else if (action.equals(\\\"heresy\\\")) {\\n            Element reply = Message.createNewRootElement(\\\"missionaryReply\\\");\\n            sendRemoveUnitToAll(unit, player);\\n            double random = Math.random() * settlement.getMissionary().getOwner().getCrosses() /\\n                (unit.getOwner().getCrosses() + 1);\\n            if (settlement.getMissionary().hasAbility(\\\"model.ability.expertMissionary\\\")) {\\n                random += 0.2;\\n            }\\n            if (unit.hasAbility(\\\"model.ability.expertMissionary\\\")) {\\n                random -= 0.2;\\n            }\\n            if (random < 0.5) {\\n            \\tboolean success = inGameController.createMission(settlement,unit);\\n            \\treply.setAttribute(\\\"success\\\", String.valueOf(success));\\n            \\treply.setAttribute(\\\"tension\\\", settlement.getAlarm(unit.getOwner()).getLevel().toString());    \\n            } else {\\n                reply.setAttribute(\\\"success\\\", \\\"false\\\");\\n                unit.dispose();\\n            }\\n            return reply;\\n        } else if (action.equals(\\\"incite\\\")) {\\n            Element reply = Message.createNewRootElement(\\\"missionaryReply\\\");\\n            Player enemy = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"incite\\\"));\\n            reply.setAttribute(\\\"amount\\\", String.valueOf(Game.getInciteAmount(player, enemy, settlement.getOwner())));\\n                                    unit.setLocation(settlement);\\n            return reply;\\n        } else {\\n            return null;\\n        }\\n    }\\n    private Element inciteAtSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        String confirmed = element.getAttribute(\\\"confirmed\\\");\\n        IndianSettlement settlement = (IndianSettlement) unit.getTile().getSettlement();\\n                unit.setLocation(map.getNeighbourOrNull(direction.getReverseDirection(), unit.getTile()));\\n        if (confirmed.equals(\\\"true\\\")) {\\n            Player enemy = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"enemy\\\"));\\n            int amount = Game.getInciteAmount(player, enemy, settlement.getOwner());\\n            if (player.getGold() < amount) {\\n                throw new IllegalStateException(\\\"Not enough gold to incite indians!\\\");\\n            } else {\\n                player.modifyGold(-amount);\\n            }\\n                                    settlement.getOwner().changeRelationWithPlayer(enemy, Stance.WAR);\\n                        settlement.modifyAlarm(enemy, 1000);             enemy.modifyTension(settlement.getOwner(), 500);\\n            enemy.modifyTension(player, 250);\\n        }\\n                return null;\\n    }\\n    private Element leaveShip(Connection connection, Element leaveShipElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(leaveShipElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.leaveShip();\\n        Tile newTile = unit.getTile();\\n        if (newTile != null) {\\n            sendUpdatedTileToAll(newTile, player);\\n        }\\n        return null;\\n    }\\n    private Element loadCargo(Connection connection, Element loadCargoElement) {\\n        Unit carrier = (Unit) getGame().getFreeColGameObject(loadCargoElement.getAttribute(\\\"carrier\\\"));\\n        Goods goods = new Goods(getGame(), (Element) loadCargoElement.getChildNodes().item(0));\\n        goods.loadOnto(carrier);\\n        return null;\\n    }\\n    private Element unloadCargo(Connection connection, Element unloadCargoElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Goods goods = new Goods(getGame(), (Element) unloadCargoElement.getChildNodes().item(0));\\n        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getColony() != null) {\\n            goods.unload();\\n        } else {\\n            goods.setLocation(null);\\n        }\\n        return null;\\n    }\\n    private Element buyGoods(Connection connection, Element buyGoodsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit carrier = (Unit) getGame().getFreeColGameObject(buyGoodsElement.getAttribute(\\\"carrier\\\"));\\n        GoodsType type = FreeCol.getSpecification().getGoodsType(buyGoodsElement.getAttribute(\\\"type\\\"));\\n        int amount = Integer.parseInt(buyGoodsElement.getAttribute(\\\"amount\\\"));\\n        if (carrier.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (carrier.getOwner() != player) {\\n            throw new IllegalStateException();\\n        }\\n        carrier.buyGoods(type, amount);\\n        Element marketElement = Message.createNewRootElement(\\\"marketElement\\\");\\n        marketElement.setAttribute(\\\"type\\\", type.getId());\\n        marketElement.setAttribute(\\\"amount\\\", String.valueOf(-amount/4));\\n        getFreeColServer().getServer().sendToAll(marketElement, player.getConnection());\\n        return null;\\n    }\\n    private Element sellGoods(Connection connection, Element sellGoodsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Goods goods = new Goods(getGame(), (Element) sellGoodsElement.getChildNodes().item(0));\\n        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        player.getMarket().sell(goods, player);\\n        Element marketElement = Message.createNewRootElement(\\\"marketElement\\\");\\n        marketElement.setAttribute(\\\"type\\\", goods.getType().getId());\\n        marketElement.setAttribute(\\\"amount\\\", String.valueOf(goods.getAmount()/4));\\n        getFreeColServer().getServer().sendToAll(marketElement, player.getConnection());\\n        return null;\\n    }\\n    private Element moveToEurope(Connection connection, Element moveToEuropeElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(moveToEuropeElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n                sendRemoveUnitToAll(unit, player);\\n        Tile oldTile = unit.getTile();\\n        unit.moveToEurope();\\n        return null;\\n    }\\n    private Element moveToAmerica(Connection connection, Element moveToAmericaElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(moveToAmericaElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.moveToAmerica();\\n        return null;\\n    }\\n    private Element buildColony(Connection connection, Element buildColonyElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        String name = buildColonyElement.getAttribute(\\\"name\\\");\\n        Unit unit = (Unit) getGame().getFreeColGameObject(buildColonyElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (unit.canBuildColony()) {\\n            Colony colony = new Colony(getGame(), player, name, unit.getTile());\\n            Element reply = Message.createNewRootElement(\\\"buildColonyConfirmed\\\");\\n            reply.appendChild(colony.toXMLElement(player, reply.getOwnerDocument()));\\n            Element updateElement = reply.getOwnerDocument().createElement(\\\"update\\\");\\n            int range = colony.getLineOfSight();\\n            if (range > unit.getLineOfSight()) {\\n                for (Tile t : getGame().getMap().getSurroundingTiles(unit.getTile(), range)) {\\n                    updateElement.appendChild(t.toXMLElement(player, reply.getOwnerDocument()));\\n                }\\n            }\\n            updateElement.appendChild(unit.getTile().toXMLElement(player, reply.getOwnerDocument()));\\n            reply.appendChild(updateElement);\\n            unit.buildColony(colony);\\n            sendUpdatedTileToAll(unit.getTile(), player);\\n            return reply;\\n        } else {\\n            logger.warning(\\\"A client is requesting to build a colony, but the operation is not permitted! (unsynchronized?)\\\");\\n            return null;\\n        }\\n    }\\n    private Element recruitUnitInEurope(Connection connection, Element recruitUnitInEuropeElement) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        Europe europe = player.getEurope();\\n        int slot = Integer.parseInt(recruitUnitInEuropeElement.getAttribute(\\\"slot\\\"));\\n        UnitType recruitable = europe.getRecruitable(slot);\\n        UnitType newRecruitable = player.generateRecruitable(\\\"abc\\\" + getPseudoRandom().nextInt(10000));\\n        Unit unit = new Unit(getGame(), europe, player, recruitable, UnitState.ACTIVE, recruitable.getDefaultEquipment());\\n        Element reply = Message.createNewRootElement(\\\"recruitUnitInEuropeConfirmed\\\");\\n        reply.setAttribute(\\\"newRecruitable\\\", newRecruitable.getId());\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        europe.recruit(slot, unit, newRecruitable);\\n        return reply;\\n    }\\n    private Element emigrateUnitInEurope(Connection connection, Element emigrateUnitInEuropeElement) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        Europe europe = player.getEurope();\\n        int slot;\\n        if (player.hasAbility(\\\"model.ability.selectRecruit\\\")) {\\n            slot = Integer.parseInt(emigrateUnitInEuropeElement.getAttribute(\\\"slot\\\"));\\n        } else {\\n            slot = (int) (Math.random() * 3);\\n        }\\n        UnitType recruitable = europe.getRecruitable(slot);\\n        UnitType newRecruitable = player.generateRecruitable(\\\"xyzzy\\\" + getPseudoRandom().nextInt(10000));\\n        Unit unit = new Unit(getGame(), europe, player, recruitable, UnitState.ACTIVE, recruitable.getDefaultEquipment());\\n        Element reply = Message.createNewRootElement(\\\"emigrateUnitInEuropeConfirmed\\\");\\n        if (!player.hasAbility(\\\"model.ability.selectRecruit\\\")) {\\n            reply.setAttribute(\\\"slot\\\", Integer.toString(slot));\\n        }\\n        reply.setAttribute(\\\"newRecruitable\\\", newRecruitable.getId());\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        europe.emigrate(slot, unit, newRecruitable);\\n        return reply;\\n    }\\n    private Element trainUnitInEurope(Connection connection, Element trainUnitInEuropeElement) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        Europe europe = player.getEurope();\\n        String unitId = trainUnitInEuropeElement.getAttribute(\\\"unitType\\\");\\n        UnitType unitType = FreeCol.getSpecification().getUnitType(unitId);\\n        Unit unit = new Unit(getGame(), europe, player, unitType, UnitState.ACTIVE, unitType.getDefaultEquipment());\\n        Element reply = Message.createNewRootElement(\\\"trainUnitInEuropeConfirmed\\\");\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        europe.train(unit);\\n        return reply;\\n    }\\n    private Element equipUnit(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        String typeString = workElement.getAttribute(\\\"type\\\");\\n        EquipmentType type = FreeCol.getSpecification().getEquipmentType(typeString);\\n        int amount = Integer.parseInt(workElement.getAttribute(\\\"amount\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (amount > 0) {\\n            for (int count = 0; count < amount; count++) {\\n                unit.equipWith(type);\\n            }\\n        } else {\\n            for (int count = 0; count > amount; count--) {\\n                unit.removeEquipment(type);\\n            }\\n        }\\n        if (unit.getLocation() instanceof Tile) {\\n            sendUpdatedTileToAll(unit.getTile(), player);\\n        }\\n        return null;\\n    }\\n    private Element work(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        WorkLocation workLocation = (WorkLocation) getGame().getFreeColGameObject(workElement.getAttribute(\\\"workLocation\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (workLocation == null) {\\n            throw new NullPointerException();\\n        }\\n        if (!workLocation.canAdd(unit)) {\\n            throw new IllegalStateException(\\\"Can not add \\\" + unit.getName() + \\\"(\\\" + unit.getId()\\n                                            + \\\") to \\\" + workLocation.toString() + \\\"(\\\" \\n                                            + workLocation.getId() + \\\")\\\");\\n        }\\n        Location oldLocation = unit.getLocation();\\n        unit.work(workLocation);\\n                sendUpdatedTileToAll(unit.getTile(), player);\\n                if (oldLocation instanceof ColonyTile) {\\n            sendUpdatedTileToAll(((ColonyTile) oldLocation).getWorkTile(), player);\\n        }\\n                if (workLocation instanceof ColonyTile) {\\n            sendUpdatedTileToAll(((ColonyTile) workLocation).getWorkTile(), player);\\n        }\\n        return null;\\n    }\\n    private Element changeWorkType(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        String workTypeString = workElement.getAttribute(\\\"workType\\\");\\n        if (workTypeString != null) {\\n            GoodsType workType = FreeCol.getSpecification().getGoodsType(workTypeString);\\n                        unit.setWorkType(workType);\\n        }\\n        return null;\\n    }\\n    private Element workImprovement(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile tile = unit.getTile();\\n        String improvementTypeString = workElement.getAttribute(\\\"improvementType\\\");\\n        if (improvementTypeString != null) {\\n            Element reply = Message.createNewRootElement(\\\"workImprovementConfirmed\\\");\\n            if (tile.getTileItemContainer() == null) {\\n                tile.setTileItemContainer(new TileItemContainer(tile.getGame(), tile));\\n                reply.appendChild(tile.getTileItemContainer().toXMLElement(player, reply.getOwnerDocument()));\\n            }\\n            TileImprovementType type = FreeCol.getSpecification().getTileImprovementType(improvementTypeString);\\n            TileImprovement improvement = unit.getTile().findTileImprovementType(type);\\n            if (improvement == null) {\\n                                improvement = new TileImprovement(getGame(), unit.getTile(), type);\\n                unit.getTile().add(improvement);\\n            }\\n            reply.appendChild(improvement.toXMLElement(player, reply.getOwnerDocument()));\\n            unit.work(improvement);\\n            return reply;\\n        } else {\\n            return null;\\n        }\\n    }\\n    private Element assignTeacher(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit student = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"student\\\"));\\n        Unit teacher = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"teacher\\\"));\\n        if (!student.canBeStudent(teacher)) {\\n            throw new IllegalStateException(\\\"Unit can not be student!\\\");\\n        }\\n        if (!teacher.getColony().canTrain(teacher)) {\\n            throw new IllegalStateException(\\\"Unit can not be teacher!\\\");\\n        }\\n        if (student.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Student is not your unit!\\\");\\n        }\\n        if (teacher.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Teacher is not your unit!\\\");\\n        }\\n        if (student.getColony() != teacher.getColony()) {\\n            throw new IllegalStateException(\\\"Student and teacher are not in the same colony!\\\");\\n        }\\n        if (!(student.getLocation() instanceof WorkLocation)) {\\n            throw new IllegalStateException(\\\"Student is not in a WorkLocation!\\\");\\n        }\\n                if (student.getTeacher() != null) {\\n            student.getTeacher().setStudent(null);\\n        }\\n        student.setTeacher(teacher);\\n        if (teacher.getStudent() != null) {\\n            teacher.getStudent().setTeacher(null);\\n        }\\n        teacher.setStudent(student);\\n        return null;\\n    }\\n    private Element setCurrentlyBuilding(Connection connection, Element setCurrentlyBuildingElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Colony colony = (Colony) getGame().getFreeColGameObject(setCurrentlyBuildingElement.getAttribute(\\\"colony\\\"));\\n        if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your colony!\\\");\\n        }\\n        String typeString = setCurrentlyBuildingElement.getAttribute(\\\"type\\\");\\n        BuildableType type = null;\\n        if (typeString.equals(\\\"model.buildableType.nothing\\\"))\\n            type = BuildableType.NOTHING;\\n        else\\n            type = (BuildableType) FreeCol.getSpecification().getType(typeString);\\n        colony.setCurrentlyBuilding(type);\\n        sendUpdatedTileToAll(colony.getTile(), player);\\n        return null;\\n    }\\n    private Element changeState(Connection connection, Element changeStateElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObjectSafely(changeStateElement.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + changeStateElement.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        UnitState state = Enum.valueOf(UnitState.class, changeStateElement.getAttribute(\\\"state\\\"));\\n        Tile oldTile = unit.getTile();\\n        if (unit.checkSetState(state)) {\\n            unit.setState(state);\\n        } else {\\n            logger.warning(\\\"Can't set state \\\" + state + \\\" for unit \\\" + unit + \\\" with current state \\\" + unit.getState()\\n                    + \\\" and \\\" + unit.getMovesLeft() + \\\" moves left belonging to \\\" + player\\n                    + \\\". Possible cheating attempt (or bug)?\\\");\\n        }\\n                sendUpdatedTileToAll(oldTile, player);\\n        return null;\\n    }\\n    private Element putOutsideColony(Connection connection, Element putOutsideColonyElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(putOutsideColonyElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.putOutsideColony();\\n        sendUpdatedTileToAll(unit.getTile(), player);\\n        return null;\\n    }\\n    private Element payForBuilding(Connection connection, Element payForBuildingElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Colony colony = (Colony) getGame().getFreeColGameObject(payForBuildingElement.getAttribute(\\\"colony\\\"));\\n        if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        colony.payForBuilding();\\n        return null;\\n    }\\n    private Element payArrears(Connection connection, Element payArrearsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        GoodsType goodsType = FreeCol.getSpecification().getGoodsType(payArrearsElement.getAttribute(\\\"goodsType\\\"));\\n        int arrears = player.getArrears(goodsType);\\n        if (player.getGold() < arrears) {\\n            throw new IllegalStateException(\\\"Not enough gold to pay tax arrears!\\\");\\n        } else {\\n            player.modifyGold(-arrears);\\n            player.resetArrears(goodsType);\\n        }\\n        return null;\\n    }\\n    private Element setGoodsLevels(Connection connection, Element setGoodsLevelsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Colony colony = (Colony) getGame().getFreeColGameObject(setGoodsLevelsElement.getAttribute(\\\"colony\\\"));\\n        if (colony == null) {\\n            throw new IllegalArgumentException(\\\"Found no colony with ID \\\" + setGoodsLevelsElement.getAttribute(\\\"colony\\\"));\\n        } else if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your colony!\\\");\\n        }\\n        ExportData exportData = new ExportData();\\n        exportData.readFromXMLElement((Element) setGoodsLevelsElement.getChildNodes().item(0));\\n        colony.setExportData(exportData);\\n        return null;\\n    }\\n    private Element clearSpeciality(Connection connection, Element clearSpecialityElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(clearSpecialityElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.clearSpeciality();\\n        if (unit.getLocation() instanceof Tile) {\\n            sendUpdatedTileToAll(unit.getTile(), player);\\n        }\\n        return null;\\n    }\\n    private Element endTurn(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        getFreeColServer().getInGameController().endTurn(player);\\n        return null;\\n    }\\n    private Element disbandUnit(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        unit.dispose();\\n        sendUpdatedTileToAll(oldTile, player);\\n        return null;\\n    }\\n    private Element cashInTreasureTrain(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        unit.cashInTreasureTrain();\\n        sendUpdatedTileToAll(oldTile, player);\\n        return null;\\n    }\\n    private Element declareIndependence(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        String nationName = element.getAttribute(\\\"independentNationName\\\");\\n        player.setIndependentNationName(nationName);\\n        ServerPlayer refPlayer = getFreeColServer().getInGameController().createREFPlayer(player);\\n        List<Unit> refUnits = getFreeColServer().getInGameController().createREFUnits(player, refPlayer);\\n        Element reply = Message.createNewRootElement(\\\"update\\\");\\n        reply.appendChild(refPlayer.toXMLElement(null, reply.getOwnerDocument()));\\n        for (Unit unit : refUnits) {\\n            reply.appendChild(unit.toXMLElement(null, reply.getOwnerDocument()));\\n        }\\n        player.declareIndependence();\\n        return reply;\\n    }\\n    private Element giveIndependence(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Player independent = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"player\\\"));\\n        if (independent.getREFPlayer() != player) {\\n            throw new IllegalStateException(\\\"Cannot give independence to a country we do not own.\\\");\\n        }\\n        independent.giveIndependence();\\n        Element giveIndependenceElement = Message.createNewRootElement(\\\"giveIndependence\\\");\\n        giveIndependenceElement.setAttribute(\\\"player\\\", independent.getId());\\n        getFreeColServer().getServer().sendToAll(giveIndependenceElement, connection);\\n        return null;\\n    }\\n    private Element foreignAffairs(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element reply = Message.createNewRootElement(\\\"foreignAffairsReport\\\");\\n        Iterator<Player> enemyPlayerIterator = getGame().getPlayerIterator();\\n        while (enemyPlayerIterator.hasNext()) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();\\n            if (enemyPlayer.getConnection() == null || enemyPlayer.isIndian() || enemyPlayer.isREF()) {\\n                continue;\\n            }\\n            Element enemyElement = reply.getOwnerDocument().createElement(\\\"opponent\\\");\\n            enemyElement.setAttribute(\\\"player\\\", enemyPlayer.getId());\\n            int numberOfColonies = enemyPlayer.getSettlements().size();\\n            int numberOfUnits = 0;\\n            int militaryStrength = 0;\\n            int navalStrength = 0;\\n            Iterator<Unit> unitIterator = enemyPlayer.getUnitIterator();\\n            while (unitIterator.hasNext()) {\\n                Unit unit = unitIterator.next();\\n                numberOfUnits++;\\n                if (unit.isNaval()) {\\n                    navalStrength += unit.getGame().getCombatModel().getOffencePower(unit, unit);\\n                } else {\\n                    militaryStrength += unit.getGame().getCombatModel().getOffencePower(unit, unit);\\n                }\\n            }\\n            Stance stance = enemyPlayer.getStance(player);\\n            if (stance == null) {\\n                stance = Stance.PEACE;\\n            }\\n            enemyElement.setAttribute(\\\"numberOfColonies\\\", String.valueOf(numberOfColonies));\\n            enemyElement.setAttribute(\\\"numberOfUnits\\\", String.valueOf(numberOfUnits));\\n            enemyElement.setAttribute(\\\"militaryStrength\\\", String.valueOf(militaryStrength));\\n            enemyElement.setAttribute(\\\"navalStrength\\\", String.valueOf(navalStrength));\\n            enemyElement.setAttribute(\\\"stance\\\", String.valueOf(stance));\\n            enemyElement.setAttribute(\\\"gold\\\", String.valueOf(enemyPlayer.getGold()));\\n            if (player.equals(enemyPlayer) ||\\n                player.hasAbility(\\\"model.ability.betterForeignAffairsReport\\\")) {\\n                enemyElement.setAttribute(\\\"SoL\\\", String.valueOf(enemyPlayer.getSoL()));\\n                enemyElement.setAttribute(\\\"foundingFathers\\\", String.valueOf(enemyPlayer.getFatherCount()));\\n                enemyElement.setAttribute(\\\"tax\\\", String.valueOf(enemyPlayer.getTax()));\\n            }\\n            reply.appendChild(enemyElement);\\n        }\\n        return reply;\\n    }\\n    private Element highScores(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element reply = Message.createNewRootElement(\\\"highScoresReport\\\");\\n        for (HighScore score : getFreeColServer().getHighScores()) {\\n            reply.appendChild(score.toXMLElement(player, reply.getOwnerDocument()));\\n        }\\n        return reply;\\n    }\\n    private Element retire(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element reply = Message.createNewRootElement(\\\"confirmRetire\\\");\\n        boolean highScore = getFreeColServer().newHighScore(player);\\n        if (highScore) {\\n            try {\\n                getFreeColServer().saveHighScores();\\n                reply.setAttribute(\\\"highScore\\\", \\\"true\\\");\\n            } catch (Exception e) {\\n                logger.warning(e.toString());\\n                reply.setAttribute(\\\"highScore\\\", \\\"false\\\");\\n            }\\n        } else {\\n            reply.setAttribute(\\\"highScore\\\", \\\"false\\\");\\n        }\\n        return reply;\\n    }\\n    private Element getREFUnits(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        List<AbstractUnit> units = new ArrayList<AbstractUnit>();\\n        UnitType defaultType = FreeCol.getSpecification().getUnitType(\\\"model.unit.freeColonist\\\");\\n        if (player.getMonarch() == null) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) player.getREFPlayer();\\n            java.util.Map<UnitType, EnumMap<Role, Integer>> unitHash =\\n                new HashMap<UnitType, EnumMap<Role, Integer>>();\\n            for (Unit unit : enemyPlayer.getUnits()) {\\n                if (unit.isOffensiveUnit()) {\\n                    UnitType unitType = defaultType;\\n                    if (unit.getType().getOffence() > 0 ||\\n                        unit.hasAbility(\\\"model.ability.expertSoldier\\\")) {\\n                        unitType = unit.getType();\\n                    }\\n                    EnumMap<Role, Integer> roleMap = unitHash.get(unitType);\\n                    if (roleMap == null) {\\n                        roleMap = new EnumMap<Role, Integer>(Role.class);\\n                    }\\n                    Role role = unit.getRole();\\n                    Integer count = roleMap.get(role);\\n                    if (count == null) {\\n                        roleMap.put(role, new Integer(1));\\n                    } else {\\n                        roleMap.put(role, new Integer(count.intValue() + 1));\\n                    }\\n                    unitHash.put(unitType, roleMap);\\n                }\\n            }\\n            for (java.util.Map.Entry<UnitType, EnumMap<Role, Integer>> typeEntry : unitHash.entrySet()) {\\n                for (java.util.Map.Entry<Role, Integer> roleEntry : typeEntry.getValue().entrySet()) {\\n                    units.add(new AbstractUnit(typeEntry.getKey(), roleEntry.getKey(), roleEntry.getValue()));\\n                }\\n            }\\n        } else {\\n            units = player.getMonarch().getREF();\\n        }\\n        Element reply = Message.createNewRootElement(\\\"REFUnits\\\");\\n        for (AbstractUnit unit : units) {\\n            reply.appendChild(unit.toXMLElement(player,reply.getOwnerDocument()));\\n        }\\n        return reply;\\n    }\\n    private Element setDestination(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not the owner of the unit.\\\");\\n        }\\n        Location destination = null;\\n        if (element.hasAttribute(\\\"destination\\\")) {\\n            destination = (Location) getGame().getFreeColGameObject(element.getAttribute(\\\"destination\\\"));\\n        }\\n        unit.setDestination(destination);\\n        return null;\\n    }\\n    private Element rename(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Nameable object = (Nameable) getGame().getFreeColGameObject(element.getAttribute(\\\"nameable\\\"));\\n        if (!(object instanceof Ownable) || ((Ownable) object).getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not the owner of the nameable.\\\");\\n        }\\n        object.setName(element.getAttribute(\\\"name\\\"));\\n        return null;\\n    }\\n    private Element getTransactionSession(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, null);\\n        InGameController controller = (InGameController) getFreeColServer().getController();     \\n                if (!controller.isTransactionSessionOpen(unit, settlement) &&\\n            unit.getMovesLeft() <= 0) {\\n            throw new IllegalStateException(\\\"No moves left!\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit,settlement);\\n                        unit.setMovesLeft(0);\\n        Element reply = Message.createNewRootElement(\\\"getTransactionAnswer\\\");\\n        reply.setAttribute(\\\"canBuy\\\", ((Boolean) session.get(\\\"canBuy\\\")).toString());\\n        reply.setAttribute(\\\"canSell\\\",((Boolean) session.get(\\\"canSell\\\")).toString());\\n        reply.setAttribute(\\\"canGift\\\",((Boolean) session.get(\\\"canGift\\\")).toString());\\n        reply.setAttribute(\\\"hasSpaceLeft\\\",((Boolean) session.get(\\\"hasSpaceLeft\\\")).toString());\\n        return reply;\\n    }\\n    private Element closeTransactionSession(Connection connection, Element element) {\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        InGameController controller = getFreeColServer().getInGameController();\\n        if(!controller.isTransactionSessionOpen(unit,settlement)){\\n            throw new IllegalStateException(\\\"Trying to close a non-existing session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit,settlement);\\n                boolean isActionTaken = ((Boolean)(session.get(\\\"actionTaken\\\"))).booleanValue();\\n        if(! isActionTaken){\\n                Integer unitMoves = (Integer) session.get(\\\"unitMoves\\\");\\n                unit.setMovesLeft(unitMoves);\\n        }\\n        controller.closeTransactionSession(unit,settlement);\\n        return null;\\n    }\\n    private void checkGeneralCondForTradeQuery(Element element, Player player, Unit unit, Settlement settlement, Goods goods){\\n        if (goods != null && goods.getAmount() > 100) {\\n            throw new IllegalArgumentException(\\\"Amount of goods exceeds 100: \\\" + goods.getAmount());\\n        }\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (settlement == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Settlement' with specified ID: \\\"\\n                    + element.getAttribute(\\\"settlement\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (unit.getTile().getDistanceTo(settlement.getTile()) > 1) {\\n            throw new IllegalStateException(\\\"Not adjacent to settlement!\\\");\\n        }\\n        if (settlement.getOwner().isIndian() && !player.hasContacted(settlement.getOwner())) {\\n            throw new IllegalStateException(\\\"Player has not established contact with the Indians!\\\");\\n        }\\n    }\\n    private Element tradeProposition(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canSell\\\")){\\n            throw new IllegalStateException(\\\"trying to sell with a session where selling not allowed\\\");\\n        }\\n        int gold = -1;\\n        if (element.hasAttribute(\\\"gold\\\")) {\\n            gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        }\\n        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))\\n                .tradeProposition(unit, settlement, goods, gold);\\n        Element tpaElement = Message.createNewRootElement(\\\"tradePropositionAnswer\\\");\\n        tpaElement.setAttribute(\\\"gold\\\", Integer.toString(returnGold));\\n        return tpaElement;\\n    }\\n    private Element trade(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canSell\\\")){\\n            throw new IllegalStateException(\\\"trying to sell with a session where selling not allowed\\\");\\n        }\\n        int gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        if (gold <= 0) {\\n            throw new IllegalArgumentException();\\n        }\\n        AIPlayer aiPlayer = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());\\n        int returnGold = aiPlayer.tradeProposition(unit, settlement, goods, gold);\\n        if (returnGold != gold) {\\n            throw new IllegalArgumentException(\\\"This was not the price we agreed upon! Cheater?\\\");\\n        }\\n        unit.trade(settlement, goods, gold);\\n        session.put(\\\"actionTaken\\\", true);\\n        session.put(\\\"hasSpaceLeft\\\", unit.getSpaceLeft() != 0);\\n        return null;\\n    }\\n    private Element goodsForSaleRequest(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        IndianSettlement settlement = (IndianSettlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, null);\\n        if (!(settlement instanceof IndianSettlement)) { \\n            throw new IllegalStateException(\\\"Settlement not an Indian Settlement\\\");\\n        }\\n        AIPlayer aiPlayer = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());\\n                Element reply = Message.createNewRootElement(\\\"goodsForSaleAnswer\\\");\\n        List<Goods> goodsForSale = (settlement).getSellGoods();\\n        if (!goodsForSale.isEmpty()) {\\n            for (Goods goods : goodsForSale) {\\n                aiPlayer.registerSellGoods(goods);\\n                reply.appendChild(goods.toXMLElement(null, reply.getOwnerDocument()));\\n            }\\n        }\\n        return reply;\\n    }\\n    private Element buyProposition(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        IndianSettlement settlement = (IndianSettlement) goods.getLocation();\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canBuy\\\") && !(Boolean)session.get(\\\"hasSpaceLeft\\\")){\\n            throw new IllegalStateException(\\\"trying to buy with a session where buying not allowed\\\");\\n        }\\n        int gold = -1;\\n        if (element.hasAttribute(\\\"gold\\\")) {\\n            gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        }\\n        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))\\n                .buyProposition(unit, goods, gold);\\n        Element tpaElement = Message.createNewRootElement(\\\"buyPropositionAnswer\\\");\\n        tpaElement.setAttribute(\\\"gold\\\", Integer.toString(returnGold));\\n        return tpaElement;\\n    }\\n    private Element buy(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        IndianSettlement settlement = (IndianSettlement) goods.getLocation();\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canBuy\\\") && !(Boolean)session.get(\\\"hasSpaceLeft\\\")){\\n            throw new IllegalStateException(\\\"trying to buy with a session where buying not allowed\\\");\\n        }\\n        int gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        if (gold <= 0) {\\n            throw new IllegalArgumentException();\\n        }\\n        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))\\n                .buyProposition(unit, goods, gold);\\n        if (returnGold != gold) {\\n            throw new IllegalArgumentException(\\\"This was not the price we agreed upon! Cheater?\\\");\\n        }\\n        unit.buy(settlement, goods, gold);\\n        session.put(\\\"actionTaken\\\", true);\\n        return null;\\n    }\\n    private Element deliverGift(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n        InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        ServerPlayer receiver = (ServerPlayer) settlement.getOwner();\\n        if (!receiver.isAI() && receiver.isConnected()) {\\n            Element deliverGiftElement = Message.createNewRootElement(\\\"deliverGift\\\");\\n            Element unitElement = unit.toXMLElement(receiver, deliverGiftElement.getOwnerDocument());\\n            Element goodsContainerElement = unit.getGoodsContainer().toXMLElement(receiver,\\n                    deliverGiftElement.getOwnerDocument());\\n            unitElement.replaceChild(goodsContainerElement, unitElement.getElementsByTagName(\\n                    GoodsContainer.getXMLElementTagName()).item(0));\\n            deliverGiftElement.appendChild(unitElement);\\n            deliverGiftElement.setAttribute(\\\"settlement\\\", settlement.getId());\\n            deliverGiftElement.appendChild(goods.toXMLElement(receiver, deliverGiftElement.getOwnerDocument()));\\n            try {\\n                receiver.getConnection().sendAndWait(deliverGiftElement);\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send \\\\\\\"deliverGift\\\\\\\"-message!\\\");\\n            }\\n        }\\n        unit.deliverGift(settlement, goods);\\n        return null;\\n    }\\n    private Element indianDemand(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Colony colony = (Colony) getGame().getFreeColGameObject(element.getAttribute(\\\"colony\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getMovesLeft() <= 0) {\\n            throw new IllegalStateException(\\\"No moves left!\\\");\\n        }\\n        if (colony == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Colony' with specified ID: \\\"\\n                    + element.getAttribute(\\\"colony\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (unit.getTile().getDistanceTo(colony.getTile()) > 1) {\\n            throw new IllegalStateException(\\\"Not adjacent to colony!\\\");\\n        }\\n        ServerPlayer receiver = (ServerPlayer) colony.getOwner();\\n        if (receiver.isConnected()) {\\n            int gold = 0;\\n            Goods goods = null;\\n            Element goodsElement = Message.getChildElement(element, Goods.getXMLElementTagName());\\n            if (goodsElement == null) {\\n                gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n            } else {\\n                goods = new Goods(getGame(), goodsElement);\\n            }\\n            try {\\n                Element reply = receiver.getConnection().ask(element);\\n                boolean accepted = Boolean.valueOf(reply.getAttribute(\\\"accepted\\\")).booleanValue();\\n                if (accepted) {\\n                    if (goods == null) {\\n                        receiver.modifyGold(-gold);\\n                    } else {\\n                        colony.getGoodsContainer().removeGoods(goods);\\n                    }\\n                }\\n                return reply;\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send \\\\\\\"demand\\\\\\\"-message!\\\");\\n            }\\n        }\\n        return null;\\n    }\\n    private Element continuePlaying(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        if (!getFreeColServer().isSingleplayer()) {\\n            throw new IllegalStateException(\\\"Can't continue playing in multiplayer!\\\");\\n        }\\n        if (player != getFreeColServer().getInGameController().checkForWinner()) {\\n            throw new IllegalStateException(\\\"Can't continue playing! Player \\\"\\n                    + player.getName() + \\\" hasn't won the game\\\");\\n        }\\n        GameOptions go = getGame().getGameOptions();\\n        ((BooleanOption) go.getObject(GameOptions.VICTORY_DEFEAT_REF)).setValue(false);\\n        ((BooleanOption) go.getObject(GameOptions.VICTORY_DEFEAT_EUROPEANS)).setValue(false);\\n        ((BooleanOption) go.getObject(GameOptions.VICTORY_DEFEAT_HUMANS)).setValue(false);\\n                final ServerPlayer currentPlayer = (ServerPlayer) getFreeColServer().getGame().getCurrentPlayer();\\n        getFreeColServer().getInGameController().endTurn(currentPlayer);\\n        return null;\\n    }\\n    @Override\\n    protected Element logout(Connection connection, Element logoutElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        logger.info(\\\"Logout by: \\\" + connection + ((player != null) ? \\\" (\\\" + player.getName() + \\\") \\\" : \\\"\\\"));\\n        if (player == null) {\\n            return null;\\n        }\\n        player.setConnected(false);\\n        if (getFreeColServer().getGame().getCurrentPlayer() == player\\n                && !getFreeColServer().isSingleplayer()) {\\n            getFreeColServer().getInGameController().endTurn(player);\\n        }\\n        try {\\n            getFreeColServer().updateMetaServer();\\n        } catch (NoRouteToServerException e) {}\\n        return null;\\n    }\\n    private void sendUpdatedTileToAll(Tile newTile, Player player) {\\n                Iterator<Player> enemyPlayerIterator = getGame().getPlayerIterator();\\n        while (enemyPlayerIterator.hasNext()) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();\\n            if (player != null && player.equals(enemyPlayer) || enemyPlayer.getConnection() == null) {\\n                continue;\\n            }\\n            try {\\n                if (enemyPlayer.canSee(newTile)) {\\n                    Element updateElement = Message.createNewRootElement(\\\"update\\\");\\n                    updateElement.appendChild(newTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));\\n                    enemyPlayer.getConnection().sendAndWait(updateElement);\\n                }\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                        + enemyPlayer.getConnection());\\n            }\\n        }\\n    }\\n    private Element getServerStatistics(Connection connection, Element request) {\\n        StatisticsMessage m = new StatisticsMessage(getGame(), getFreeColServer().getAIMain());\\n        Element reply = m.toXMLElement();\\n        return reply;\\n    }\\n}\""
        },
        {
            "content": "The `InGameInputHandler.java` file is a critical component of the **freecol** game server, responsible for handling various in-game actions initiated by players, such as:\n\n- Moving units\n- Building colonies\n- Trading goods\n- Conducting diplomacy\n- Combat interactions\n- End-of-turn processing\n\nThis class primarily processes network requests and executes corresponding game logic. It interacts heavily with other core components like `Unit`, `Colony`, `Goods`, `Player`, `Tile`, and `Game`.\n\n### Relevance to `ClientOptions.java`\nGiven that `ClientOptions.java` likely manages client-side settings or configurations (such as UI preferences, input controls, or gameplay options), changes in `ClientOptions.java` could affect how inputs are processed or interpreted in the game loop.\n\nSince `InGameInputHandler` deals directly with handling player input and translating it into game actions, it is reasonable to suspect that it may have a dependency on `ClientOptions`, especially if those options influence how input is handled or what actions are available.\n\n### Next Steps\nTo confirm whether `InGameInputHandler.java` depends on `ClientOptions.java`, we should:\n1. Check if `ClientOptions.java` is referenced within `InGameInputHandler.java`.\n2. If not directly referenced, determine if there's an indirect relationship through shared entities or configuration systems.\n\nLet\u2019s first check for direct coupling dependencies between `ClientOptions.java` and `InGameInputHandler.java` using the `get_coupling_dependencies` function.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_246f932454e94a2d9c0033",
                    "function": {
                        "arguments": "{\"entity1\": \"ClientOptions.java\", \"entity2\": \"InGameInputHandler.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "There are **no direct coupling dependencies** between `ClientOptions.java` and `InGameInputHandler.java`. This suggests that these two files do not directly reference each other through standard code-level relationships (e.g., inheritance, method calls, variable usage, etc.).\n\n### Next Steps\nSince there's no direct coupling, we should explore **indirect relationships** or **conceptual coupling**. A good next step is to analyze the **semantic similarity** between these two files using the `get_conceptual_coupling` function. This will help us determine if they share similar concepts or responsibilities at a higher level.\n\nLet\u2019s proceed with checking the conceptual coupling between `ClientOptions.java` and `InGameInputHandler.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_98a0e603779d43a0b81a81",
                    "function": {
                        "arguments": "{\"entity1\": \"ClientOptions.java\", \"entity2\": \"InGameInputHandler.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.78208756\""
        },
        {
            "content": "The **conceptual coupling** score between `ClientOptions.java` and `InGameInputHandler.java` is **0.782**, which indicates a **high semantic similarity** or conceptual overlap between the two files.\n\nThis suggests that, although there\u2019s no direct code-level dependency, both files likely deal with **related functionalities**\u2014possibly around **user input handling**, **game configuration**, or **client-server interaction logic**.\n\n### Interpretation\nGiven this high conceptual coupling:\n- Changes in `ClientOptions.java` (e.g., altering how options are stored or interpreted) might **indirectly affect** how `InGameInputHandler.java` processes player actions.\n- Both classes may rely on shared configurations or event systems that tie their behavior together, even if they don't reference each other directly.\n\n### Next Steps\nTo further investigate, we should:\n1. Examine the content of `ClientOptions.java` to understand what kind of settings or configurations it manages.\n2. Look for any **shared dependencies** or **common patterns** between the two files that could explain this strong conceptual link.\n\nLet's now retrieve the source code of `ClientOptions.java` to analyze its structure and responsibilities.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_9c227d1503684f709d7ce9",
                    "function": {
                        "arguments": "{\"entity\": \"ClientOptions.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package net.sf.freecol.client;\\nimport java.util.Comparator;\\nimport java.util.Map;\\nimport java.util.logging.Logger;\\nimport net.sf.freecol.common.Specification;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.FreeColGameObject;\\nimport net.sf.freecol.common.model.ModelMessage;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.option.AudioMixerOption;\\nimport net.sf.freecol.common.option.BooleanOption;\\nimport net.sf.freecol.common.option.OptionGroup;\\nimport net.sf.freecol.common.option.OptionMap;\\nimport net.sf.freecol.common.option.PercentageOption;\\nimport net.sf.freecol.common.option.SelectOption;\\nimport org.w3c.dom.Element;\\npublic class ClientOptions extends OptionMap {\\n    @SuppressWarnings(\\\"unused\\\")\\n    private static final Logger logger = Logger.getLogger(ClientOptions.class.getName());\\n    public static final String LANGUAGE = \\\"model.option.languageOption\\\";\\n    public static final String JUMP_TO_ACTIVE_UNIT = \\\"model.option.jumpToActiveUnit\\\";\\n    public static final String ALWAYS_CENTER = \\\"model.option.alwaysCenter\\\";\\n    public static final String MIN_NUMBER_FOR_DISPLAYING_GOODS_COUNT = \\\"model.option.guiMinNumberToDisplayGoodsCount\\\";\\n    public static final String MAX_NUMBER_OF_GOODS_IMAGES = \\\"model.option.guiMaxNumberOfGoodsImages\\\";\\n    public static final String DISPLAY_COMPASS_ROSE = \\\"model.option.displayCompassRose\\\";\\n    public static final String DISPLAY_MAP_CONTROLS = \\\"model.option.displayMapControls\\\";\\n    public static final String DISPLAY_GRID = \\\"model.option.displayGrid\\\";\\n    public static final String DISPLAY_TILE_TEXT = \\\"model.option.displayTileText\\\";\\n    public static final int DISPLAY_TILE_TEXT_EMPTY = 0, DISPLAY_TILE_TEXT_NAMES = 1, DISPLAY_TILE_TEXT_OWNERS = 2, DISPLAY_TILE_TEXT_REGIONS = 3;\\n    public static final String MOVE_ANIMATION_SPEED = \\\"model.option.moveAnimationSpeed\\\";\\n    public static final String ENEMY_MOVE_ANIMATION_SPEED = \\\"model.option.enemyMoveAnimationSpeed\\\";\\n    public static final String MESSAGES_GROUP_BY = \\\"model.option.guiMessagesGroupBy\\\";\\n    public static final int MESSAGES_GROUP_BY_NOTHING = 0;\\n    public static final int MESSAGES_GROUP_BY_TYPE = 1;\\n    public static final int MESSAGES_GROUP_BY_SOURCE = 2;\\n    public static final String AUDIO_MIXER = \\\"audioMixer\\\";\\n    public static final String MUSIC_VOLUME = \\\"musicVolume\\\";\\n    public static final String SFX_VOLUME = \\\"sfxVolume\\\";\\n    public static final String SHOW_SONS_OF_LIBERTY = \\\"model.option.guiShowSonsOfLiberty\\\";\\n    public static final String SHOW_WARNING = \\\"model.option.guiShowWarning\\\";\\n    public static final String SHOW_GOVERNMENT_EFFICIENCY = \\\"model.option.guiShowGovernmentEfficiency\\\";\\n    public static final String SHOW_WAREHOUSE_CAPACITY = \\\"model.option.guiShowWarehouseCapacity\\\";\\n    public static final String SHOW_UNIT_IMPROVED = \\\"model.option.guiShowUnitImproved\\\";\\n    public static final String SHOW_UNIT_DEMOTED = \\\"model.option.guiShowUnitDemoted\\\";\\n    public static final String SHOW_UNIT_ADDED = \\\"model.option.guiShowUnitAdded\\\";\\n    public static final String SHOW_UNIT_LOST = \\\"model.option.guiShowUnitLost\\\";\\n    public static final String SHOW_BUILDING_COMPLETED = \\\"model.option.guiShowBuildingCompleted\\\";\\n    public static final String SHOW_FOREIGN_DIPLOMACY = \\\"model.option.guiShowForeignDiplomacy\\\";\\n    public static final String SHOW_MARKET_PRICES = \\\"model.option.guiShowMarketPrices\\\";\\n    public static final String SHOW_MISSING_GOODS = \\\"model.option.guiShowMissingGoods\\\";\\n    public static final String SHOW_TUTORIAL = \\\"model.option.guiShowTutorial\\\";\\n    public static final String SHOW_COLONY_WARNINGS = \\\"model.option.guiShowColonyWarnings\\\";\\n    public static final String SHOW_PRECOMBAT = \\\"model.option.guiShowPreCombat\\\";\\n    public static final String SHOW_SAVEGAME_SETTINGS = \\\"model.option.showSavegameSettings\\\";\\n    public static final int SHOW_SAVEGAME_SETTINGS_NEVER = 0;\\n    public static final int SHOW_SAVEGAME_SETTINGS_MULTIPLAYER = 1;\\n    public static final int SHOW_SAVEGAME_SETTINGS_ALWAYS = 2;\\n    public static final String AUTOSAVE_PERIOD = \\\"model.option.autosavePeriod\\\";\\n    public static final String AUTOSAVE_GENERATIONS = \\\"model.option.autosaveGenerations\\\";\\n    public static final String DISPLAY_FOG_OF_WAR = \\\"model.option.displayFogOfWar\\\";\\n    public static final String MAP_SCROLL_ON_DRAG = \\\"model.option.mapScrollOnDrag\\\";\\n    public static final String AUTOLOAD_EMIGRANTS = \\\"model.option.autoloadEmigrants\\\";\\n    public static final String SMOOTH_MINIMAP_RENDERING = \\\"model.option.smoothRendering\\\";\\n    public static final String DEFAULT_MINIMAP_ZOOM = \\\"model.option.defaultZoomLevel\\\";\\n    public static final String MINIMAP_BACKGROUND_COLOR = \\\"model.option.color.background\\\";\\n    public static final String COLOR_BLACK = \\\"black\\\";\\n    public static final String COLOR_VERY_DARK_GRAY = \\\"gray.dark.very\\\";\\n    public static final String COLOR_DARK_GRAY = \\\"gray.dark\\\";\\n    public static final String COLOR_GRAY = \\\"gray\\\";\\n    public static final String COLOR_LIGHT_GRAY = \\\"gray.light\\\";\\n    public static final String COLOR_VERY_LIGHT_GRAY = \\\"gray.light.very\\\";\\n    public static final String COLOR_LIGHT_BLUE = \\\"blue.light\\\";\\n    public static final String CUSTOM_STOCK = \\\"model.option.customStock\\\";\\n    public static final String LOW_LEVEL = \\\"model.option.lowLevel\\\";\\n    public static final String HIGH_LEVEL = \\\"model.option.highLevel\\\";\\n    public static final String COLONY_COMPARATOR = \\\"model.option.colonyComparator\\\";\\n    public static final int COLONY_COMPARATOR_NAME = 0, COLONY_COMPARATOR_AGE = 1, COLONY_COMPARATOR_POSITION = 2,\\n            COLONY_COMPARATOR_SIZE = 3, COLONY_COMPARATOR_SOL = 4;\\n    public static final String AUTO_END_TURN = \\\"model.option.autoEndTurn\\\";\\n    private static Comparator<Colony> colonyAgeComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            return s1.getIntegerID().compareTo(s2.getIntegerID());\\n        }\\n    };\\n    private static Comparator<Colony> colonyNameComparator = new Comparator<Colony>() {\\n        public int compare(Colony s1, Colony s2) {\\n            return s1.getName().compareTo(s2.getName());\\n        }\\n    };\\n    private static Comparator<Colony> colonySizeComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            int dsize = s2.getUnitCount() - s1.getUnitCount();\\n            if (dsize == 0) {\\n                return s2.getSoL() - s1.getSoL();\\n            } else {\\n                return dsize;\\n            }\\n        }\\n    };\\n    private static Comparator<Colony> colonySoLComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            int dsol = s2.getSoL() - s1.getSoL();\\n            if (dsol == 0) {\\n                return s2.getUnitCount() - s1.getUnitCount();\\n            } else {\\n                return dsol;\\n            }\\n        }\\n    };\\n    private static Comparator<Colony> colonyPositionComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            int dy = s1.getTile().getY() - s2.getTile().getY();\\n            if (dy == 0) {\\n                return s1.getTile().getX() - s2.getTile().getX();\\n            } else {\\n                return dy;\\n            }\\n        }\\n    };\\n    private Comparator<ModelMessage> messageSourceComparator = new Comparator<ModelMessage>() {\\n                public int compare(ModelMessage message1, ModelMessage message2) {\\n            Object source1 = message1.getSource();\\n            Object source2 = message2.getSource();\\n            if (source1 == source2) {\\n                return messageTypeComparator.compare(message1, message2);\\n            }\\n            int base = getClassIndex(source1) - getClassIndex(source2);\\n            if (base == 0) {\\n                if (source1 instanceof Colony) {\\n                    return getColonyComparator().compare((Colony) source1, (Colony) source2);\\n                }\\n            }\\n            return base;\\n        }\\n        private int getClassIndex(Object object) {\\n            if (object instanceof Player) {\\n                return 10;\\n            } else if (object instanceof Colony) {\\n                return 20;\\n            } else if (object instanceof Europe) {\\n                return 30;\\n            } else if (object instanceof Unit) {\\n                return 40;\\n            } else if (object instanceof FreeColGameObject) {\\n                return 50;\\n            } else {\\n                return 1000;\\n            }\\n        }\\n    };\\n    private Comparator<ModelMessage> messageTypeComparator = new Comparator<ModelMessage>() {\\n                public int compare(ModelMessage message1, ModelMessage message2) {\\n            int dtype = message1.getType().ordinal() - message2.getType().ordinal();\\n            if (dtype == 0 && message1.getSource() != message2.getSource()) {\\n                return messageSourceComparator.compare(message1, message2);\\n            } else {\\n                return dtype;\\n            }\\n        }\\n    };\\n    public ClientOptions() {\\n        super(getXMLElementTagName());\\n    }\\n    public ClientOptions(Element element) {\\n        super(element, getXMLElementTagName());\\n    }\\n    protected void addDefaultOptions() {\\n        Specification spec = Specification.getSpecification();\\n        OptionGroup guiGroup = spec.getOptionGroup(\\\"clientOptions.gui\\\");\\n        guiGroup.add(spec.getOptionGroup(\\\"clientOptions.minimap\\\"));\\n        add(guiGroup);\\n        add(spec.getOptionGroup(\\\"clientOptions.messages\\\"));\\n        OptionGroup audioGroup = new OptionGroup(\\\"clientOptions.audio\\\");\\n        new AudioMixerOption(AUDIO_MIXER, audioGroup);\\n        new PercentageOption(MUSIC_VOLUME, audioGroup, 100).setPreviewEnabled(true);\\n        new PercentageOption(SFX_VOLUME, audioGroup, 100).setPreviewEnabled(true);\\n        add(audioGroup);\\n        add(spec.getOptionGroup(\\\"clientOptions.savegames\\\"));\\n        add(spec.getOptionGroup(\\\"clientOptions.warehouse\\\"));\\n        add(spec.getOptionGroup(\\\"clientOptions.other\\\"));\\n    }\\n    public int getDisplayTileText() {\\n        return getInteger(DISPLAY_TILE_TEXT);\\n    }\\n    public Comparator<Colony> getColonyComparator() {\\n        return getColonyComparator(getInteger(COLONY_COMPARATOR));\\n    }\\n    public static Comparator<Colony> getColonyComparator(int type) {\\n        switch (type) {\\n        case COLONY_COMPARATOR_AGE:\\n            return colonyAgeComparator;\\n        case COLONY_COMPARATOR_POSITION:\\n            return colonyPositionComparator;\\n        case COLONY_COMPARATOR_SIZE:\\n            return colonySizeComparator;\\n        case COLONY_COMPARATOR_SOL:\\n            return colonySoLComparator;\\n        case COLONY_COMPARATOR_NAME:\\n            return colonyNameComparator;\\n        default:\\n            throw new IllegalStateException(\\\"Unknown comparator\\\");\\n        }\\n    }\\n    public Comparator<ModelMessage> getModelMessageComparator() {\\n        switch (getInteger(MESSAGES_GROUP_BY)) {\\n        case MESSAGES_GROUP_BY_SOURCE:\\n            return messageSourceComparator;\\n        case MESSAGES_GROUP_BY_TYPE:\\n            return messageTypeComparator;\\n        default:\\n            return null;\\n        }\\n    }\\n    public BooleanOption getBooleanOption(ModelMessage message) {\\n        switch (message.getType()) {\\n        case WARNING:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_WARNING);\\n        case SONS_OF_LIBERTY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_SONS_OF_LIBERTY);\\n        case GOVERNMENT_EFFICIENCY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_GOVERNMENT_EFFICIENCY);\\n        case WAREHOUSE_CAPACITY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_WAREHOUSE_CAPACITY);\\n        case UNIT_IMPROVED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_IMPROVED);\\n        case UNIT_DEMOTED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_DEMOTED);\\n        case UNIT_LOST:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_LOST);\\n        case UNIT_ADDED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_ADDED);\\n        case BUILDING_COMPLETED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_BUILDING_COMPLETED);\\n        case FOREIGN_DIPLOMACY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_FOREIGN_DIPLOMACY);\\n        case MARKET_PRICES:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_MARKET_PRICES);\\n        case MISSING_GOODS:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_MISSING_GOODS);\\n        case DEFAULT:\\n        default:\\n            return null;\\n        }\\n    }\\n    protected boolean isCorrectTagName(String tagName) {\\n        return getXMLElementTagName().equals(tagName);\\n    }\\n    public static String getXMLElementTagName() {\\n        return \\\"clientOptions\\\";\\n    }\\n}\""
        },
        {
            "content": "### Analysis of `ClientOptions.java`\n\nThe `ClientOptions.java` file serves as a configuration manager for **client-side settings** in the FreeCol game. It defines various **user preferences and GUI behaviors**, including:\n\n- **Language and display options**\n- **Map and UI settings** (e.g., grid visibility, compass rose)\n- **Animation speeds**\n- **Message grouping and display settings**\n- **Audio controls** (music and sound effects volume)\n- **Autosave configurations**\n- **Colony sorting strategies**\n- **Tutorial and warning notifications**\n\nIt extends `OptionMap`, which suggests it is used to manage a group of related options that can be persisted or modified during gameplay.\n\n---\n\n### Relationship Between `ClientOptions.java` and `InGameInputHandler.java`\n\nAlthough there's no direct code dependency between these two files, their conceptual coupling score of **0.782** indicates they are closely related in terms of **responsibilities and functionality** within the system.\n\nHere\u2019s how they likely interact:\n- `ClientOptions` stores **user-defined preferences** that influence how the game behaves on the client side.\n- `InGameInputHandler` processes **player actions** and may rely on `ClientOptions` to determine how certain actions are handled or displayed (e.g., animation speed, message display settings, autosave behavior).\n- Changes in `ClientOptions` could affect how input events are interpreted or visualized, even if the logic for handling those inputs resides elsewhere.\n\n---\n\n### Entities That May Need Synchronization with `ClientOptions.java`\n\nFrom the co-change data and conceptual coupling analysis, the following entities are most likely to require synchronization when changes are made to `ClientOptions.java`:\n\n| Entity | Reason |\n|-------|--------|\n| **`InGameInputHandler.java`** | High conceptual coupling; likely uses client options to control input response and visualization. |\n| **`OptionMap.java`** | Base class for managing options; directly extended by `ClientOptions`. |\n| **`BooleanOption.java`, `SelectOption.java`, etc.** | Represent individual option types used throughout `ClientOptions`. |\n| **`GameOptions.java`** | Similar structure and purpose; often co-changed; manages global game settings. |\n| **`GUI.java`, `Canvas.java`** | Likely consume `ClientOptions` to configure UI elements. |\n| **`SoundTest.java`, `FreeColClient.java`** | Co-change history suggests shared responsibility for client-side behavior. |\n\n---\n\n### Recommended Next Steps\n\nTo ensure robust change impact analysis, you should:\n1. **Check coupling dependencies** from `ClientOptions.java` to other key files like `GameOptions.java`, `GUI.java`, and `Canvas.java`.\n2. **Examine call graphs** for any of these files to see how they interact at runtime.\n3. If needed, analyze semantic similarity with other high-co-change files like `GameOptions.java`.\n\nWould you like to proceed by checking coupling dependencies for one of these candidates (e.g., `GameOptions.java`) or analyzing the call graph of `ClientOptions.java`?",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `ClientOptions.java`\n\nChange set: [InGameInputHandler, OptionMap, GameOptions, BooleanOption, SelectOption, IntegerOption, AbstractOption, FreeColClient, GUI, Canvas, SoundTest, MapControls, DisplayGridAction, UnitMoveAnimation, InGameController, Messages, ReportColonyPanel, ReportUnitPanel, ReportTurnPanel, DifficultyDialog, DifficultyOptionMap, ActionManager, MapGeneratorOptions, Server, Connection, ConnectController, MiniMap, LanguageOption, FileOption, OptionGroup, AbstractOptionUI, SelectOptionUI, BooleanOptionUI, IntegerOptionUI, DummyConnection, ResourceManager, SoundPlayer, SoundPlayerThread, PreGameController, StartGamePanel, ServerPlayer, TransportMission, LandGenerator, MapGenerator, MapGeneratorTest, SchoolTest, Colony, Europe, Unit, Player, Goods, Tile, Specification]\n\nDetails:\n- **InGameInputHandler**: High conceptual coupling; likely uses client options to control input handling and visualization.\n- **OptionMap**: Base class for managing options; directly extended by ClientOptions.\n- **GameOptions**: Similar structure and purpose; often co-changed; manages global game settings.\n- **BooleanOption, SelectOption, IntegerOption**: Represent individual option types used throughout ClientOptions.\n- **AbstractOption**: Superclass of all option types; core dependency for option management.\n- **FreeColClient**: Co-change history suggests shared responsibility for client-side behavior.\n- **GUI**: Likely consumes ClientOptions to configure UI elements.\n- **Canvas**: Manages rendering and display; may depend on client options like grid or fog-of-war settings.\n- **SoundTest**: Related to audio configuration; co-changed with ClientOptions.\n- **MapControls**: Influenced by map-related client options (e.g., scroll-on-drag).\n- **DisplayGridAction**: Tied to grid-display settings controlled via ClientOptions.\n- **UnitMoveAnimation**: Affected by animation speed settings in ClientOptions.\n- **InGameController**: Coordinates in-game logic that may be affected by client settings.\n- **Messages**: Message display settings are managed in ClientOptions.\n- **ReportColonyPanel, ReportUnitPanel, ReportTurnPanel**: May be influenced by visibility/display settings.\n- **DifficultyDialog**: Displays difficulty settings; possibly tied to client-side preferences.\n- **DifficultyOptionMap**: Shares structural similarity with ClientOptions; manages difficulty settings.\n- **ActionManager**: May be affected by input/jump-to-unit settings from ClientOptions.\n- **MapGeneratorOptions**: Related to map generation and display settings.\n- **Server**: Co-change history indicates interaction with client settings.\n- **Connection**: Network behavior might be impacted by client-side configurations.\n- **ConnectController**: Manages connection behavior which could be affected by client options.\n- **MiniMap**: Display settings such as smooth rendering and zoom level come from ClientOptions.\n- **LanguageOption**: Used within ClientOptions for language selection.\n- **FileOption**: Manages file-based settings; part of the same configuration framework.\n- **OptionGroup**: Organizes groups of options; used heavily in ClientOptions.\n- **AbstractOptionUI, SelectOptionUI, BooleanOptionUI, IntegerOptionUI**: UI components for editing options.\n- **DummyConnection**: Possibly used in testing scenarios involving client-server interactions.\n- **ResourceManager**: Could be affected by custom stock or resource display settings.\n- **SoundPlayer, SoundPlayerThread**: Audio-related classes that may use volume settings from ClientOptions.\n- **PreGameController**: Might rely on saved client settings during game initialization.\n- **StartGamePanel**: Possibly affected by autosave or UI preference settings.\n- **ServerPlayer**: Could be indirectly affected by client-side player preferences.\n- **TransportMission, LandGenerator, MapGenerator, MapGeneratorTest, SchoolTest**: Co-change data shows historical synchronization with client options.\n- **Colony, Europe, Unit, Player, Goods, Tile**: Core model classes that may be displayed/configured via client options.\n- **Specification**: Central configuration container; used by both ClientOptions and other modules.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `freecol`, a well-known Java open source project. The starting entity you need to deal with is ClientOptions.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_5fc0d01dfbd74dc28c88ce",
                        "function": {
                            "arguments": "{\"entity\": \"ClientOptions.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"SelectOptionUI\", \"1\", \"0.07142857142857142\"], [\"BooleanOptionUI\", \"1\", \"0.07142857142857142\"], [\"IntegerOptionUI\", \"1\", \"0.07142857142857142\"], [\"Canvas\", \"2\", \"0.14285714285714285\"], [\"Connection\", \"1\", \"0.07142857142857142\"], [\"Server\", \"1\", \"0.07142857142857142\"], [\"MapGenerator\", \"1\", \"0.07142857142857142\"], [\"TransportMission\", \"1\", \"0.07142857142857142\"], [\"LandGenerator\", \"1\", \"0.07142857142857142\"], [\"ConnectController\", \"2\", \"0.14285714285714285\"], [\"CircleIterator\", \"1\", \"0.07142857142857142\"], [\"InGameInputHandler\", \"4\", \"0.2857142857142857\"], [\"DummyConnection\", \"1\", \"0.07142857142857142\"], [\"ReportUnitPanel\", \"1\", \"0.07142857142857142\"], [\"GoodsItem\", \"1\", \"0.07142857142857142\"], [\"ReportTurnPanel\", \"1\", \"0.07142857142857142\"], [\"SelectOption\", \"1\", \"0.07142857142857142\"], [\"AbstractOption\", \"1\", \"0.07142857142857142\"], [\"OptionMap\", \"4\", \"0.2857142857142857\"], [\"BooleanOption\", \"1\", \"0.07142857142857142\"], [\"OptionGroup\", \"1\", \"0.07142857142857142\"], [\"MapGeneratorOptions\", \"2\", \"0.14285714285714285\"], [\"Messages\", \"1\", \"0.07142857142857142\"], [\"GameOptions\", \"2\", \"0.14285714285714285\"], [\"ActionManager\", \"2\", \"0.14285714285714285\"], [\"IntegerOption\", \"1\", \"0.07142857142857142\"], [\"LanguageOption\", \"1\", \"0.07142857142857142\"], [\"FileOption\", \"1\", \"0.07142857142857142\"], [\"InGameController\", \"4\", \"0.2857142857142857\"], [\"MapControls\", \"1\", \"0.07142857142857142\"], [\"GUI\", \"1\", \"0.07142857142857142\"], [\"MiniMap\", \"1\", \"0.07142857142857142\"], [\"DisplayGridAction\", \"2\", \"0.14285714285714285\"], [\"UnitMoveAnimation\", \"2\", \"0.14285714285714285\"], [\"CanvasMouseMotionListener\", \"1\", \"0.07142857142857142\"], [\"CanvasMapEditorMouseMotionListener\", \"1\", \"0.07142857142857142\"], [\"FreeColClient\", \"4\", \"0.2857142857142857\"], [\"FreeColServer\", \"2\", \"0.14285714285714285\"], [\"DifficultyDialog\", \"1\", \"0.07142857142857142\"], [\"SoundTest\", \"4\", \"0.2857142857142857\"], [\"DifficultyOptionMap\", \"1\", \"0.07142857142857142\"], [\"ResourceManager\", \"1\", \"0.07142857142857142\"], [\"SoundPlayerThread\", \"1\", \"0.07142857142857142\"], [\"SoundPlayer\", \"1\", \"0.07142857142857142\"], [\"PreGameController\", \"1\", \"0.07142857142857142\"], [\"ServerPlayer\", \"2\", \"0.14285714285714285\"], [\"SchoolTest\", \"1\", \"0.07142857142857142\"], [\"MapGeneratorTest\", \"1\", \"0.07142857142857142\"], [\"StartGamePanel\", \"1\", \"0.07142857142857142\"], [\"DisplayBordersAction\", \"1\", \"0.07142857142857142\"], [\"ReportColonyPanel\", \"1\", \"0.07142857142857142\"]]"
            },
            "m5": {
                "content": "The `get_co_change_relationship` function returned a list of entities that are commonly changed together with **ClientOptions.java**, along with their support count and confidence score. \n\nFrom the results, we can observe that several UI-related classes like **InGameInputHandler**, **OptionMap**, **InGameController**, **FreeColClient**, and **SoundTest** have a relatively higher confidence score (0.2857). This suggests that these files have been frequently modified together with **ClientOptions.java** in the past. These files may need to be synchronized when changes are made to **ClientOptions.java**, as they seem to have a strong historical co-change relationship.\n\nLet\u2019s further analyze one or more of these files to understand the coupling dependencies or conceptual similarity with **ClientOptions.java**, so we can determine which ones truly require synchronization.\n\nTo proceed, I will first analyze the **InGameInputHandler.java** file using the `get_origin_code` function to inspect its content and understand its relationship with **ClientOptions.java**.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_e77998a0b2b44f12b7f0b4",
                        "function": {
                            "arguments": "{\"entity\": \"InGameInputHandler.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package net.sf.freecol.server.control;\\nimport java.io.IOException;\\nimport java.util.ArrayList;\\nimport java.util.EnumMap;\\nimport java.util.HashMap;\\nimport java.util.Hashtable;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.logging.Logger;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.common.Specification;\\nimport net.sf.freecol.common.model.AbstractUnit;\\nimport net.sf.freecol.common.model.BuildableType;\\nimport net.sf.freecol.common.model.Building;\\nimport net.sf.freecol.common.model.BuildingType;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.ColonyTile;\\nimport net.sf.freecol.common.model.CombatModel;\\nimport net.sf.freecol.common.model.DiplomaticTrade;\\nimport net.sf.freecol.common.model.EquipmentType;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.ExportData;\\nimport net.sf.freecol.common.model.Game;\\nimport net.sf.freecol.common.model.GameOptions;\\nimport net.sf.freecol.common.model.Goods;\\nimport net.sf.freecol.common.model.GoodsContainer;\\nimport net.sf.freecol.common.model.GoodsType;\\nimport net.sf.freecol.common.model.HighScore;\\nimport net.sf.freecol.common.model.HistoryEvent;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.Location;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.Nameable;\\nimport net.sf.freecol.common.model.Ownable;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Region;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tension;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.TileImprovement;\\nimport net.sf.freecol.common.model.TileImprovementType;\\nimport net.sf.freecol.common.model.TileItemContainer;\\nimport net.sf.freecol.common.model.TradeRoute;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.UnitType;\\nimport net.sf.freecol.common.model.WorkLocation;\\nimport net.sf.freecol.common.model.CombatModel.CombatResult;\\nimport net.sf.freecol.common.model.CombatModel.CombatResultType;\\nimport net.sf.freecol.common.model.LostCityRumour.RumourType;\\nimport net.sf.freecol.common.model.Map.Direction;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.model.Player.Stance;\\nimport net.sf.freecol.common.model.Unit.Role;\\nimport net.sf.freecol.common.model.Unit.UnitState;\\nimport net.sf.freecol.common.networking.BuyLandMessage;\\nimport net.sf.freecol.common.networking.Connection;\\nimport net.sf.freecol.common.networking.Message;\\nimport net.sf.freecol.common.networking.NetworkConstants;\\nimport net.sf.freecol.common.networking.NoRouteToServerException;\\nimport net.sf.freecol.common.networking.StatisticsMessage;\\nimport net.sf.freecol.common.networking.StealLandMessage;\\nimport net.sf.freecol.common.option.BooleanOption;\\nimport net.sf.freecol.common.util.RandomChoice;\\nimport net.sf.freecol.server.FreeColServer;\\nimport net.sf.freecol.server.ai.AIPlayer;\\nimport net.sf.freecol.server.model.ServerPlayer;\\nimport org.w3c.dom.Element;\\nimport org.w3c.dom.NodeList;\\npublic final class InGameInputHandler extends InputHandler implements NetworkConstants {\\n    private static Logger logger = Logger.getLogger(InGameInputHandler.class.getName());\\n    public InGameInputHandler(final FreeColServer freeColServer) {\\n        super(freeColServer);\\n                register(\\\"createUnit\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return createUnit(connection, element);\\n            }\\n        });\\n        register(\\\"createBuilding\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return createBuilding(connection, element);\\n            }\\n        });\\n        register(\\\"getRandom\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getRandom(connection, element);\\n            }\\n        });\\n        register(\\\"getVacantEntryLocation\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getVacantEntryLocation(connection, element);\\n            }\\n        });\\n        register(\\\"setDestination\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return setDestination(connection, element);\\n            }\\n        });\\n        register(\\\"move\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return move(connection, element);\\n            }\\n        });\\n        register(\\\"askSkill\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return askSkill(connection, element);\\n            }\\n        });\\n        register(\\\"attack\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return attack(connection, element);\\n            }\\n        });\\n        register(\\\"embark\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return embark(connection, element);\\n            }\\n        });\\n        register(\\\"boardShip\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return boardShip(connection, element);\\n            }\\n        });\\n        register(\\\"learnSkillAtSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return learnSkillAtSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"scoutIndianSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return scoutIndianSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"missionaryAtSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return missionaryAtSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"inciteAtSettlement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return inciteAtSettlement(connection, element);\\n            }\\n        });\\n        register(\\\"armedUnitDemandTribute\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return armedUnitDemandTribute(connection, element);\\n            }\\n        });\\n        register(\\\"leaveShip\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return leaveShip(connection, element);\\n            }\\n        });\\n        register(\\\"loadCargo\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return loadCargo(connection, element);\\n            }\\n        });\\n        register(\\\"unloadCargo\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return unloadCargo(connection, element);\\n            }\\n        });\\n        register(\\\"buyGoods\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buyGoods(connection, element);\\n            }\\n        });\\n        register(\\\"sellGoods\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return sellGoods(connection, element);\\n            }\\n        });\\n        register(\\\"moveToEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return moveToEurope(connection, element);\\n            }\\n        });\\n        register(\\\"moveToAmerica\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return moveToAmerica(connection, element);\\n            }\\n        });\\n        register(\\\"buildColony\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buildColony(connection, element);\\n            }\\n        });\\n        register(\\\"recruitUnitInEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return recruitUnitInEurope(connection, element);\\n            }\\n        });\\n        register(\\\"emigrateUnitInEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return emigrateUnitInEurope(connection, element);\\n            }\\n        });\\n        register(\\\"trainUnitInEurope\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return trainUnitInEurope(connection, element);\\n            }\\n        });\\n        register(\\\"equipUnit\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return equipUnit(connection, element);\\n            }\\n        });\\n        register(\\\"work\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return work(connection, element);\\n            }\\n        });\\n        register(\\\"changeWorkType\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return changeWorkType(connection, element);\\n            }\\n        });\\n        register(\\\"workImprovement\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return workImprovement(connection, element);\\n            }\\n        });\\n        register(\\\"setCurrentlyBuilding\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return setCurrentlyBuilding(connection, element);\\n            }\\n        });\\n        register(\\\"changeState\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return changeState(connection, element);\\n            }\\n        });\\n        register(\\\"putOutsideColony\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return putOutsideColony(connection, element);\\n            }\\n        });\\n        register(\\\"clearSpeciality\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return clearSpeciality(connection, element);\\n            }\\n        });\\n        register(\\\"setNewLandName\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return setNewLandName(connection, element);\\n            }\\n        });\\n        register(\\\"endTurn\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return endTurn(connection, element);\\n            }\\n        });\\n        register(\\\"disbandUnit\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return disbandUnit(connection, element);\\n            }\\n        });\\n        register(\\\"cashInTreasureTrain\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return cashInTreasureTrain(connection, element);\\n            }\\n        });\\n        register(\\\"getTransaction\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return getTransactionSession(connection, element);\\n            }\\n        });\\n        register(\\\"closeTransaction\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return closeTransactionSession(connection, element);\\n            }\\n        });\\n        register(\\\"tradeProposition\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return tradeProposition(connection, element);\\n            }\\n        });\\n        register(\\\"trade\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return trade(connection, element);\\n            }\\n        });\\n        register(\\\"goodsForSale\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return goodsForSaleRequest(connection, element);\\n            }\\n        });\\n        register(\\\"buyProposition\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buyProposition(connection, element);\\n            }\\n        });\\n        register(\\\"buy\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return buy(connection, element);\\n            }\\n        });\\n        register(\\\"deliverGift\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return deliverGift(connection, element);\\n            }\\n        });\\n        register(\\\"indianDemand\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return indianDemand(connection, element);\\n            }\\n        });\\n        register(BuyLandMessage.getXMLElementTagName(), new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                BuyLandMessage message = new BuyLandMessage(getGame(), element);\\n                return message.handle(freeColServer, player, connection);\\n            }\\n        });\\n        register(StealLandMessage.getXMLElementTagName(), new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                StealLandMessage message = new StealLandMessage(getGame(), element);\\n                return message.handle(freeColServer, player, connection);\\n            }\\n        });\\n        register(\\\"payForBuilding\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return payForBuilding(connection, element);\\n            }\\n        });\\n        register(\\\"payArrears\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return payArrears(connection, element);\\n            }\\n        });\\n        register(\\\"setGoodsLevels\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return setGoodsLevels(connection, element);\\n            }\\n        });\\n        register(\\\"declareIndependence\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return declareIndependence(connection, element);\\n            }\\n        });\\n        register(\\\"giveIndependence\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return giveIndependence(connection, element);\\n            }\\n        });\\n        register(\\\"foreignAffairs\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return foreignAffairs(connection, element);\\n            }\\n        });\\n        register(\\\"highScores\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return highScores(connection, element);\\n            }\\n        });\\n        register(\\\"getREFUnits\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return getREFUnits(connection, element);\\n            }\\n        });\\n        register(\\\"rename\\\", new CurrentPlayerNetworkRequestHandler() {\\n            @Override\\n            public Element handle(Player player, Connection connection, Element element) {\\n                return rename(connection, element);\\n            }\\n        });\\n        register(\\\"getNewTradeRoute\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getNewTradeRoute(connection, element);\\n            }\\n        });\\n        register(\\\"updateTradeRoute\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return updateTradeRoute(connection, element);\\n            }\\n        });\\n        register(\\\"setTradeRoutes\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return setTradeRoutes(connection, element);\\n            }\\n        });\\n        register(\\\"assignTradeRoute\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return assignTradeRoute(connection, element);\\n            }\\n        });\\n        register(\\\"updateCurrentStop\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return updateCurrentStop(connection, element);\\n            }\\n        });\\n        register(\\\"diplomaticTrade\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return diplomaticTrade(connection, element);\\n            }\\n        });\\n        register(\\\"selectFromFountainYouth\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return selectFromFountainYouth(connection, element);\\n            }\\n        });\\n        register(\\\"spySettlement\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return spySettlement(connection, element);\\n            }\\n        });\\n        register(\\\"abandonColony\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return abandonColony(connection, element);\\n            }\\n        });\\n        register(\\\"continuePlaying\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return continuePlaying(connection, element);\\n            }\\n        });\\n        register(\\\"assignTeacher\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return assignTeacher(connection, element);\\n            }\\n        });\\n        register(StatisticsMessage.getXMLElementTagName(), new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return getServerStatistics(connection, element);\\n            }\\n        });\\n        register(\\\"retire\\\", new NetworkRequestHandler() {\\n            public Element handle(Connection connection, Element element) {\\n                return retire(connection, element);\\n            }\\n        });\\n    }\\n    private List<ServerPlayer> getOtherPlayers(Player player) {\\n        List<ServerPlayer> result = new ArrayList<ServerPlayer>();\\n        for (Player otherPlayer : getGame().getPlayers()) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) otherPlayer;\\n            if (player.equals(enemyPlayer) || enemyPlayer.getConnection() == null) {\\n                continue;\\n            }\\n            result.add(enemyPlayer);\\n        }\\n        return result;\\n    }\\n    private void sendRemoveUnitToAll(Unit unit, Player player) {\\n        Element removeElement = Message.createNewRootElement(\\\"remove\\\");\\n        Element removeUnit = removeElement.getOwnerDocument().createElement(\\\"removeObject\\\");\\n        removeUnit.setAttribute(\\\"ID\\\", unit.getId());\\n        removeElement.appendChild(removeUnit);\\n        for (ServerPlayer enemyPlayer : getOtherPlayers(player)) {\\n            if (unit.isVisibleTo(enemyPlayer)) {\\n                try {\\n                    enemyPlayer.getConnection().sendAndWait(removeElement);\\n                } catch (IOException e) {\\n                    logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                                   + enemyPlayer.getConnection());\\n                }\\n            }\\n        }\\n    }\\n    private Element setNewLandName(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        player.setNewLandName(element.getAttribute(\\\"newLandName\\\"));\\n        player.getHistory().add(new HistoryEvent(getGame().getTurn().getNumber(),\\n                                                 HistoryEvent.Type.DISCOVER_NEW_WORLD,\\n                                                 \\\"%name%\\\", player.getNewLandName()));\\n                return null;\\n    }\\n    private Element createUnit(Connection connection, Element element) {\\n        logger.info(\\\"Receiving \\\\\\\"createUnit\\\\\\\"-request.\\\");\\n        String taskID = element.getAttribute(\\\"taskID\\\");\\n        Location location = (Location) getGame().getFreeColGameObject(element.getAttribute(\\\"location\\\"));\\n        Player owner = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"owner\\\"));\\n        UnitType type = FreeCol.getSpecification().getUnitType(element.getAttribute(\\\"type\\\"));\\n        if (location == null) {\\n            throw new NullPointerException();\\n        }\\n        if (owner == null) {\\n            throw new NullPointerException();\\n        }\\n        Unit unit = getFreeColServer().getModelController()\\n                .createUnit(taskID, location, owner, type, false, connection);\\n        Element reply = Message.createNewRootElement(\\\"createUnitConfirmed\\\");\\n        reply.appendChild(unit.toXMLElement(owner, reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element createBuilding(Connection connection, Element element) {\\n        logger.info(\\\"Receiving \\\\\\\"createBuilding\\\\\\\"-request.\\\");\\n        String taskID = element.getAttribute(\\\"taskID\\\");\\n        Colony colony = (Colony) getGame().getFreeColGameObject(element.getAttribute(\\\"colony\\\"));\\n        BuildingType type = FreeCol.getSpecification().getBuildingType(element.getAttribute(\\\"type\\\"));\\n        if (colony == null) {\\n            throw new NullPointerException();\\n        }\\n        Building building = getFreeColServer().getModelController()\\n                .createBuilding(taskID, colony, type, false, connection);\\n        Element reply = Message.createNewRootElement(\\\"createBuildingConfirmed\\\");\\n        reply.appendChild(building.toXMLElement(colony.getOwner(), reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element getRandom(Connection connection, Element element) {\\n                String taskID = element.getAttribute(\\\"taskID\\\");\\n        int n = Integer.parseInt(element.getAttribute(\\\"n\\\"));\\n        int result = getFreeColServer().getModelController().getRandom(taskID, n);\\n        Element reply = Message.createNewRootElement(\\\"getRandomConfirmed\\\");\\n        reply.setAttribute(\\\"result\\\", Integer.toString(result));\\n                return reply;\\n    }\\n    private Element getVacantEntryLocation(Connection connection, Element element) {\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Player owner = unit.getOwner();\\n        ServerPlayer askingPlayer = getFreeColServer().getPlayer(connection);\\n        Location entryLocation = unit.getEntryLocation();\\n        if (owner != askingPlayer) {\\n            if (entryLocation == null) {\\n                throw new IllegalStateException(\\\"Unit \\\" + unit.getId() + \\\" with owner \\\" + owner\\n                                                + \\\" not owned by \\\" + askingPlayer\\n                                                + \\\", refusing to get vacant location!\\\");\\n            } else {\\n                logger.warning(\\\"Unit \\\" + unit.getId() + \\\" with owner \\\" + owner\\n                               + \\\" not owned by \\\" + askingPlayer\\n                               + \\\", entry location is \\\" + entryLocation.getId());\\n            }\\n        } else {\\n            entryLocation = getFreeColServer().getModelController().setToVacantEntryLocation(unit);\\n        }\\n        Element reply = Message.createNewRootElement(\\\"getVacantEntryLocationConfirmed\\\");\\n        reply.setAttribute(\\\"location\\\", entryLocation.getId());\\n        return reply;\\n    }\\n    private Element getNewTradeRoute(Connection connection, Element element) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        TradeRoute tradeRoute = getFreeColServer().getModelController().getNewTradeRoute(player);\\n        Element reply = Message.createNewRootElement(\\\"getNewTradeRouteConfirmed\\\");\\n        reply.appendChild(tradeRoute.toXMLElement(player, reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element updateTradeRoute(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element childElement = (Element) element.getChildNodes().item(0);\\n        TradeRoute clientTradeRoute = new TradeRoute(null, childElement);\\n        TradeRoute serverTradeRoute = (TradeRoute) getGame().getFreeColGameObject(clientTradeRoute.getId());\\n        if (serverTradeRoute == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'TradeRoute' with specified ID: \\\"\\n                    + clientTradeRoute.getId());\\n        }\\n        if (serverTradeRoute.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your trade route!\\\");\\n        }\\n        serverTradeRoute.updateFrom(clientTradeRoute);\\n        return null;\\n    }\\n    private Element setTradeRoutes(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        ArrayList<TradeRoute> routes = new ArrayList<TradeRoute>();\\n        NodeList childElements = element.getChildNodes();\\n        for(int i = 0; i < childElements.getLength(); i++) {\\n            Element childElement = (Element) childElements.item(i);\\n            String id = childElement.getAttribute(\\\"id\\\");\\n            TradeRoute serverTradeRoute = (TradeRoute) getGame().getFreeColGameObject(id);\\n            if (serverTradeRoute == null) {\\n                throw new IllegalArgumentException(\\\"Could not find 'TradeRoute' with specified ID: \\\" + id);\\n            }\\n            if (serverTradeRoute.getOwner() != player) {\\n                throw new IllegalStateException(\\\"Not your trade route!\\\");\\n            }\\n            routes.add(serverTradeRoute);\\n        }\\n        player.setTradeRoutes(routes);\\n        return null;\\n    }\\n    private Element updateCurrentStop(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        } else if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.nextStop();\\n        return null;\\n    }\\n    private Element assignTradeRoute(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        } else if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        String tradeRouteString = element.getAttribute(\\\"tradeRoute\\\");\\n        if (tradeRouteString == null || tradeRouteString == \\\"\\\") {\\n            unit.setTradeRoute(null);\\n        } else {\\n            TradeRoute tradeRoute = (TradeRoute) getGame().getFreeColGameObject(tradeRouteString);\\n            if (tradeRoute == null) {\\n                throw new IllegalArgumentException(\\\"Could not find 'TradeRoute' with specified ID: \\\"\\n                                                   + element.getAttribute(\\\"tradeRoute\\\"));\\n            }\\n            if (tradeRoute.getOwner() != player) {\\n                throw new IllegalStateException(\\\"Not your trade route!\\\");\\n            }\\n            unit.setTradeRoute(tradeRoute);\\n        }\\n        return null;\\n    }\\n    private Element diplomaticTrade(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                                               + element.getAttribute(\\\"unit\\\"));\\n        }\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        Tile tile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (tile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Tile' in direction \\\" +\\n                                               direction);\\n        }\\n        Settlement settlement = tile.getSettlement();\\n        if (settlement == null) {\\n            throw new IllegalArgumentException(\\\"No settlement on 'Tile' \\\" +\\n                                               tile.getId());\\n        }\\n        unit.setMovesLeft(0);\\n        NodeList childElements = element.getChildNodes();\\n        Element childElement = (Element) childElements.item(0);\\n        DiplomaticTrade agreement = new DiplomaticTrade(getGame(), childElement);\\n        if (agreement.getSender() != player) {\\n            throw new IllegalArgumentException(\\\"Sender of 'DiplomaticTrade' message is not \\\" +\\n                                               \\\"player \\\" + player.getName());\\n        }\\n        if (agreement.isAccept()) {\\n            agreement.makeTrade();\\n        }\\n        ServerPlayer enemyPlayer = (ServerPlayer) agreement.getRecipient();\\n        Element reply = null;\\n        try {\\n            reply = enemyPlayer.getConnection().ask(element);\\n        } catch (IOException e) {\\n            logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                           + enemyPlayer.getConnection());\\n        }\\n        if (reply != null) {\\n            String accept = reply.getAttribute(\\\"accept\\\");\\n            if (accept != null && accept.equals(\\\"accept\\\")) {\\n                agreement.makeTrade();\\n            }\\n        }\\n        return reply;\\n    }\\n    private Element spySettlement(Connection connection, Element spyElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                Unit unit = (Unit) getGame().getFreeColGameObject(spyElement.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, spyElement.getAttribute(\\\"direction\\\"));\\n                if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + spyElement.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' is not on the map: \\\" + unit.toString());\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (newTile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find tile in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + spyElement.getAttribute(\\\"unit\\\"));\\n        }\\n        Settlement settlement = newTile.getSettlement();\\n        if (settlement == null) {\\n            throw new IllegalArgumentException(\\\"There is no settlement in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + spyElement.getAttribute(\\\"unit\\\"));\\n        }\\n        Element reply = Message.createNewRootElement(\\\"foreignColony\\\");\\n        if (settlement instanceof Colony) {\\n            reply.appendChild(((Colony) settlement).toXMLElement(player, reply.getOwnerDocument(), true, false));\\n        } else if (settlement instanceof IndianSettlement) {\\n            reply.appendChild(((IndianSettlement) settlement).toXMLElement(player, reply.getOwnerDocument(), true, false));\\n        }\\n        for(Unit foreignUnit : newTile.getUnitList()) {\\n            reply.appendChild(foreignUnit.toXMLElement(player, reply.getOwnerDocument(), true, false));\\n        }\\n        return reply;\\n    }\\n    private Element abandonColony(Connection connection, Element abandonElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                Colony colony = (Colony) getGame().getFreeColGameObject(abandonElement.getAttribute(\\\"colony\\\"));\\n                if (colony == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Colony' with specified ID: \\\"\\n                    + abandonElement.getAttribute(\\\"colony\\\"));\\n        }\\n        if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your colony!\\\");\\n        }\\n        colony.getOwner().getHistory()\\n            .add(new HistoryEvent(colony.getGame().getTurn().getNumber(),\\n                                  HistoryEvent.Type.ABANDON_COLONY,\\n                                  \\\"%colony%\\\", colony.getName()));\\n        Tile tile = colony.getTile();\\n                colony.dispose();\\n        sendUpdatedTileToAll(tile, player);\\n        return null;\\n    }\\n    private Element move(Connection connection, Element moveElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        String unitID = moveElement.getAttribute(\\\"unit\\\");\\n        Unit unit = (Unit) getGame().getFreeColGameObject(unitID);\\n        Direction direction = Enum.valueOf(Direction.class, moveElement.getAttribute(\\\"direction\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\" + unitID);\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' not on map: ID: \\\" + unitID + \\\" (\\\"\\n                    + unit.getName() + \\\")\\\");\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        for (ServerPlayer enemyPlayer : getOtherPlayers(player)) {\\n            try {\\n                if (unit.isVisibleTo(enemyPlayer)) {                                         Element opponentMoveElement = Message.createNewRootElement(\\\"opponentMove\\\");\\n                    opponentMoveElement.setAttribute(\\\"fromTile\\\", unit.getTile().getId());\\n                    opponentMoveElement.setAttribute(\\\"direction\\\", direction.toString());\\n                    opponentMoveElement.setAttribute(\\\"unit\\\", unit.getId());\\n                    enemyPlayer.getConnection().sendAndWait(opponentMoveElement);\\n                } else if (enemyPlayer.canSee(newTile)\\n                        && (newTile.getSettlement() == null || \\n                            !getGame().getGameOptions().getBoolean(GameOptions.UNIT_HIDING))) {\\n                                        Element opponentMoveElement = Message.createNewRootElement(\\\"opponentMove\\\");\\n                    opponentMoveElement.setAttribute(\\\"direction\\\", direction.toString());\\n                    opponentMoveElement.setAttribute(\\\"toTile\\\", newTile.getId());\\n                    opponentMoveElement.appendChild(unit.toXMLElement(enemyPlayer, opponentMoveElement\\n                            .getOwnerDocument()));\\n                    if (unit.isOnCarrier() && !((Unit) unit.getLocation()).isVisibleTo(enemyPlayer)) {\\n                        Unit location = (Unit) unit.getLocation();\\n                        opponentMoveElement.setAttribute(\\\"inUnit\\\", location.getId());\\n                        opponentMoveElement.appendChild(location.toXMLElement(enemyPlayer, opponentMoveElement\\n                                .getOwnerDocument()));\\n                    }\\n                    enemyPlayer.getConnection().sendAndWait(opponentMoveElement);\\n                }\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                        + enemyPlayer.getConnection());\\n            }\\n        }\\n        unit.move(direction);\\n        Element reply = Message.createNewRootElement(\\\"update\\\");\\n        CombatModel combatModel = unit.getGame().getCombatModel();        \\n                if (unit.isNaval() && unit.getMovesLeft() > 0) {\\n            Iterator<Position> tileIterator = getGame().getMap().getAdjacentIterator(unit.getTile().getPosition());\\n            float attackPower = 0;\\n            Unit attacker = null;\\n            while (tileIterator.hasNext()) {\\n                Tile tile = getGame().getMap().getTile(tileIterator.next());\\n                Colony colony = tile.getColony();\\n                                if (colony != null) {\\n                } else if (!tile.isLand() && tile.getFirstUnit() != null) {\\n                    Player enemy = tile.getFirstUnit().getOwner();\\n                    if (player == enemy) {                         continue;\\n                    }\\n                    for (Unit enemyUnit : tile.getUnitList()) {\\n                        if (enemyUnit.isOffensiveUnit() && (player.getStance(enemy) == Stance.WAR\\n                                || enemyUnit.hasAbility(\\\"model.ability.piracy\\\")\\n                                || unit.hasAbility(\\\"model.ability.piracy\\\"))) {\\n                            attackPower += combatModel.getOffencePower(enemyUnit, unit);\\n                            if (attacker == null) {\\n                                attacker = enemyUnit;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            if (attackPower > 0) {\\n                                                assert attacker != null;\\n                float defencePower = combatModel.getDefencePower(attacker, unit);\\n                float totalProbability = attackPower + defencePower;\\n                int r = getPseudoRandom().nextInt(Math.round(totalProbability) + 1);\\n                if (r < attackPower) {\\n                    int diff = Math.max(0, Math.round(attackPower - defencePower));\\n                    int moves = Math.min(9, 3 + diff / 3);\\n                    unit.setMovesLeft(unit.getMovesLeft() - moves);\\n                    reply.setAttribute(\\\"movesSlowed\\\", Integer.toString(moves));\\n                    reply.setAttribute(\\\"slowedBy\\\", attacker.getId());\\n                }\\n            }\\n        }\\n        if (player.isEuropean()) {\\n            Region region = newTile.getDiscoverableRegion();\\n            if (region != null &&\\n                (region.isPacific() ||\\n                 getGame().getGameOptions().getBoolean(GameOptions.EXPLORATION_POINTS))) {\\n                String name;\\n                if (region.isPacific()) {\\n                    name = region.getDisplayName();\\n                } else {\\n                    name = moveElement.getAttribute(\\\"regionName\\\");\\n                    if (name == null || \\\"\\\".equals(name)) {\\n                        name = player.getDefaultRegionName(region.getType());\\n                    }\\n                }\\n                region.discover(player, getGame().getTurn(), name);\\n                reply.appendChild(region.toXMLElement(player, reply.getOwnerDocument()));\\n                Element updateElement = Message.createNewRootElement(\\\"update\\\");\\n                updateElement.appendChild(region.toXMLElement(player, updateElement.getOwnerDocument()));\\n                freeColServer.getServer().sendToAll(updateElement, player.getConnection());\\n            }\\n        }\\n        List<Tile> surroundingTiles = getGame().getMap().getSurroundingTiles(unit.getTile(), unit.getLineOfSight());\\n        for (int i = 0; i < surroundingTiles.size(); i++) {\\n            Tile t = surroundingTiles.get(i);\\n            reply.appendChild(t.toXMLElement(player, reply.getOwnerDocument(), false, false));\\n        }\\n        if (newTile.hasLostCityRumour() && player.isEuropean()) {\\n            newTile.setLostCityRumour(false);\\n            exploreLostCityRumour(unit, player);\\n        }\\n        return reply;\\n    }\\n    private void exploreLostCityRumour(Unit unit, ServerPlayer player) {\\n                                        final int BAD_EVENT_PERCENTAGE[]  = { 11, 17, 23, 30, 37};\\n        final int GOOD_EVENT_PERCENTAGE[] = { 75, 62, 48, 33, 17};\\n                                final int BAD_EVENT_MOD[]  = {-6, -7, -7, -8, -9};\\n        final int GOOD_EVENT_MOD[] = {14, 15, 16, 18, 20};\\n        Tile tile = unit.getTile();        \\n        Specification specification = FreeCol.getSpecification();\\n        List<UnitType> learntUnitTypes = unit.getType().getUnitTypesLearntInLostCity();\\n        List<UnitType> newUnitTypes = specification.getUnitTypesWithAbility(\\\"model.ability.foundInLostCity\\\");\\n        List<UnitType> treasureUnitTypes = specification.getUnitTypesWithAbility(\\\"model.ability.carryTreasure\\\");\\n                int level = Specification.getSpecification().getRangeOption(\\\"model.option.difficulty\\\").getValue();\\n        boolean isExpertScout = unit.hasAbility(\\\"model.ability.expertScout\\\") && \\n                                unit.hasAbility(\\\"model.ability.scoutIndianSettlement\\\");\\n        boolean hasDeSoto = player.hasAbility(\\\"model.ability.rumoursAlwaysPositive\\\");\\n                int percentNeutral = 0;\\n        int percentBad;\\n        int percentGood;\\n        if (hasDeSoto) {\\n            percentBad     = 0;\\n            percentGood    = 100;\\n        } else {\\n                        percentBad  = BAD_EVENT_PERCENTAGE[level];\\n            percentGood = GOOD_EVENT_PERCENTAGE[level];\\n                        if (isExpertScout) {\\n                percentBad += BAD_EVENT_MOD[level];\\n                percentGood += GOOD_EVENT_MOD[level];\\n            }\\n                                    if (percentBad+percentGood<100) {\\n                percentNeutral = 100-percentBad-percentGood;\\n            }\\n        }\\n                        int eventNothing = 100;\\n                int eventVanish = 100;\\n        int eventBurialGround = 0;\\n                if (tile.getOwner() != null && !tile.getOwner().isEuropean()) {\\n            eventVanish = 75;\\n            eventBurialGround = 25;\\n        }\\n                int eventLearn    = 30;\\n        int eventTrinkets = 30;\\n        int eventColonist = 20;\\n                if (learntUnitTypes.isEmpty()) {\\n            eventLearn    =  0;\\n            eventTrinkets = 50;\\n            eventColonist = 30;\\n        }\\n                                int eventDorado   = 13;\\n        int eventFountain =  7;\\n                                eventNothing      *= percentNeutral;\\n        eventVanish       *= percentBad;\\n        eventBurialGround *= percentBad;\\n        eventLearn        *= percentGood;\\n        eventTrinkets     *= percentGood;\\n        eventColonist     *= percentGood;\\n        eventDorado       *= percentGood;\\n        eventFountain     *= percentGood;\\n                List<RandomChoice<RumourType>> choices = new ArrayList<RandomChoice<RumourType>>();\\n        if (eventNothing>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.NOTHING, eventNothing));\\n        }\\n        if (eventVanish>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.EXPEDITION_VANISHES, eventVanish));\\n        }\\n        if (eventBurialGround>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.BURIAL_GROUND, eventBurialGround));\\n        }\\n        if (eventLearn>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.LEARN, eventLearn));\\n        }\\n        if (eventTrinkets>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.TRIBAL_CHIEF, eventTrinkets));\\n        }\\n        if (eventColonist>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.COLONIST, eventColonist));\\n        }\\n        if (eventFountain>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.FOUNTAIN_OF_YOUTH, eventFountain));\\n        }\\n        if (eventDorado>0) {\\n            choices.add(new RandomChoice<RumourType>(RumourType.TREASURE, eventDorado));\\n        }\\n        RumourType rumour = RandomChoice.getWeightedRandom(getPseudoRandom(), choices);\\n        Element rumourElement = Message.createNewRootElement(\\\"lostCityRumour\\\");\\n        rumourElement.setAttribute(\\\"type\\\", rumour.toString());\\n        rumourElement.setAttribute(\\\"unit\\\", unit.getId());\\n        Unit newUnit;\\n        int random;\\n        int dx = 10 - level;\\n        switch (rumour) {\\n        case BURIAL_GROUND:\\n            Player indianPlayer = tile.getOwner();\\n            indianPlayer.modifyTension(player, Tension.Level.HATEFUL.getLimit());\\n            break;\\n        case EXPEDITION_VANISHES:\\n            unit.dispose();\\n            break;\\n        case NOTHING:\\n            break;\\n        case LEARN:\\n            random = getPseudoRandom().nextInt(learntUnitTypes.size());\\n            unit.setType(learntUnitTypes.get(random));\\n            rumourElement.setAttribute(\\\"unitType\\\", learntUnitTypes.get(random).getId());\\n            break;\\n        case TRIBAL_CHIEF:\\n            int amount = getPseudoRandom().nextInt(dx * 10) + dx * 5;\\n            player.modifyGold(amount);\\n            rumourElement.setAttribute(\\\"amount\\\", Integer.toString(amount));\\n            break;\\n        case COLONIST:\\n            random = getPseudoRandom().nextInt(newUnitTypes.size());\\n            newUnit = new Unit(getGame(), tile, player, newUnitTypes.get(random), UnitState.ACTIVE);\\n            rumourElement.appendChild(newUnit.toXMLElement(player, rumourElement.getOwnerDocument()));\\n            break;\\n        case TREASURE:\\n            int treasure = getPseudoRandom().nextInt(dx * 600) + dx * 300;\\n            random = getPseudoRandom().nextInt(treasureUnitTypes.size());\\n            newUnit = new Unit(getGame(), tile, player, treasureUnitTypes.get(random), UnitState.ACTIVE);\\n            newUnit.setTreasureAmount(treasure);\\n            rumourElement.setAttribute(\\\"amount\\\", Integer.toString(treasure));\\n            rumourElement.appendChild(newUnit.toXMLElement(player, rumourElement.getOwnerDocument()));\\n            player.getHistory().add(new HistoryEvent(getGame().getTurn().getNumber(),\\n                                                     HistoryEvent.Type.CITY_OF_GOLD,\\n                                                     \\\"%treasure%\\\", String.valueOf(treasure)));\\n            break;\\n        case FOUNTAIN_OF_YOUTH:\\n            if (player.getEurope() != null) {\\n                if (player.hasAbility(\\\"model.ability.selectRecruit\\\")) {\\n                    player.setRemainingEmigrants(dx);\\n                    rumourElement.setAttribute(\\\"emigrants\\\", Integer.toString(dx));\\n                } else {\\n                    for (int k = 0; k < dx; k++) {\\n                        newUnit = new Unit(getGame(), player.getEurope(), player,\\n                                           player.generateRecruitable(String.valueOf(k)), UnitState.ACTIVE);\\n                        rumourElement.appendChild(newUnit.toXMLElement(player, rumourElement.getOwnerDocument()));\\n                    }\\n                }\\n            }\\n            break;\\n        default:\\n            throw new IllegalStateException(\\\"No such rumour.\\\");\\n        }\\n                try {\\n            player.getConnection().sendAndWait(rumourElement);\\n        } catch (IOException e) {\\n            logger.warning(\\\"Could not send rumour message to: \\\" + player.getName() + \\\" with connection \\\"\\n                    + player.getConnection());\\n        }\\n                for (ServerPlayer updatePlayer : getOtherPlayers(player)) {\\n            if (updatePlayer.canSee(tile)) {\\n                try {\\n                    Element rumourUpdate = Message.createNewRootElement(\\\"update\\\");\\n                    rumourUpdate.appendChild(tile.toXMLElement(updatePlayer, rumourUpdate.getOwnerDocument()));\\n                    updatePlayer.getConnection().sendAndWait(rumourUpdate);\\n                } catch (IOException e) {\\n                    logger.warning(\\\"Could not send update message to: \\\" + updatePlayer.getName() + \\\" with connection \\\"\\n                                   + updatePlayer.getConnection());\\n                }\\n            }\\n        }\\n    }\\n    private Element selectFromFountainYouth(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        int remaining = player.getRemainingEmigrants();\\n        if (remaining == 0) {\\n            throw new IllegalStateException(\\\"There is no remaining emigrants for this player.\\\");\\n        }\\n        player.setRemainingEmigrants(remaining-1);\\n        Europe europe = player.getEurope();\\n        int slot = Integer.parseInt(element.getAttribute(\\\"slot\\\"));\\n        UnitType recruitable = europe.getRecruitable(slot);\\n        UnitType newRecruitable = player.generateRecruitable(String.valueOf(remaining));\\n        europe.setRecruitable(slot, newRecruitable);\\n        Unit unit = new Unit(getGame(), europe, player, recruitable, UnitState.ACTIVE);\\n        Element reply = Message.createNewRootElement(\\\"selectFromFountainYouthConfirmed\\\");\\n        reply.setAttribute(\\\"newRecruitable\\\", newRecruitable.getId());\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        return reply;\\n    }\\n    private Element askSkill(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getMovesLeft() == 0) {\\n            throw new IllegalArgumentException(\\\"Unit has no moves left.\\\");\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' not on map: ID: \\\" + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        IndianSettlement settlement = (IndianSettlement) map.getNeighbourOrNull(direction, unit.getTile())\\n                .getSettlement();\\n        unit.setMovesLeft(0);\\n        Element reply = Message.createNewRootElement(\\\"provideSkill\\\");\\n        if (settlement.getLearnableSkill() != null) {\\n            reply.setAttribute(\\\"skill\\\", settlement.getLearnableSkill().getId());\\n        }\\n        settlement.setVisited(unit.getOwner());\\n                settlement.getTile().updateIndianSettlementSkill(player);\\n        return reply;\\n    }\\n    private Element attack(Connection connection, Element attackElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                String unitID = attackElement.getAttribute(\\\"unit\\\");\\n        Unit unit = (Unit) getGame().getFreeColGameObject(unitID);\\n        Direction direction = Enum.valueOf(Direction.class, attackElement.getAttribute(\\\"direction\\\"));\\n                if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\" + unitID);\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' is not on the map: \\\" + unit.toString());\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (newTile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find tile in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + unitID);\\n        }\\n        CombatResult result;\\n        int plunderGold = -1;\\n        Unit defender = newTile.getDefendingUnit(unit);\\n        Player defendingPlayer = null;\\n        if (defender == null) {\\n            if (newTile.getSettlement() != null) {\\n                defendingPlayer = newTile.getSettlement().getOwner();\\n                result = new CombatResult(CombatResultType.DONE_SETTLEMENT, 0);\\n            } else {\\n                throw new IllegalStateException(\\\"Nothing to attack in direction \\\" + direction + \\\" from unit with ID \\\"\\n                        + unitID);\\n            }\\n        } else {\\n            defendingPlayer = defender.getOwner();\\n            result = unit.getGame().getCombatModel().generateAttackResult(unit, defender); \\n        }\\n        if (result.type == CombatResultType.DONE_SETTLEMENT) {\\n                        plunderGold = newTile.getSettlement().getOwner().getGold() / 10;\\n        }\\n                Location repairLocation = null;\\n        Player loserOwner = null;\\n        switch (result.type) {\\n        case WIN:\\n            if (defender.isNaval()) {\\n                loserOwner = defendingPlayer;\\n                repairLocation = loserOwner.getRepairLocation(defender);\\n            }\\n            break;\\n        case DONE_SETTLEMENT:\\n            for (Unit victim : newTile.getUnitList()) {\\n                if (victim.isNaval()) {\\n                    loserOwner = victim.getOwner();\\n                    repairLocation = loserOwner.getRepairLocation(victim);\\n                    break;\\n                }\\n            }\\n            break;\\n        case LOSS:\\n            if (unit.isNaval()) {\\n                loserOwner = player;\\n                repairLocation = loserOwner.getRepairLocation(unit);\\n            }\\n            break;\\n        case EVADES:\\n        case GREAT_LOSS:\\n        case GREAT_WIN:\\n                        break;\\n        }\\n                        for (ServerPlayer enemyPlayer : getOtherPlayers(player)) {\\n            Element opponentAttackElement = Message.createNewRootElement(\\\"opponentAttack\\\");\\n            if (unit.isVisibleTo(enemyPlayer) || defender.isVisibleTo(enemyPlayer)) {\\n                opponentAttackElement.setAttribute(\\\"direction\\\", direction.toString());\\n                opponentAttackElement.setAttribute(\\\"result\\\", result.type.toString());\\n                opponentAttackElement.setAttribute(\\\"damage\\\", String.valueOf(result.damage));\\n                opponentAttackElement.setAttribute(\\\"plunderGold\\\", Integer.toString(plunderGold));\\n                opponentAttackElement.setAttribute(\\\"unit\\\", unit.getId());\\n                opponentAttackElement.setAttribute(\\\"defender\\\", defender.getId());\\n                if (defender.getOwner() == enemyPlayer) {\\n                \\t                \\tif(repairLocation != null && loserOwner == defender.getOwner()){\\n                \\t\\topponentAttackElement.setAttribute(\\\"repairIn\\\", repairLocation.getId());\\n                \\t}\\n                                    \\topponentAttackElement.setAttribute(\\\"update\\\", \\\"unit\\\");\\n                    opponentAttackElement.appendChild(unit.toXMLElement(enemyPlayer,\\n                            opponentAttackElement.getOwnerDocument()));\\n                } else if (!defender.isVisibleTo(enemyPlayer)) {\\n                    opponentAttackElement.setAttribute(\\\"update\\\", \\\"defender\\\");\\n                    opponentAttackElement.setAttribute(\\\"defenderTile\\\", defender.getTile().getId());\\n                    if (!enemyPlayer.canSee(defender.getTile())) {\\n                        enemyPlayer.setExplored(defender.getTile());\\n                        opponentAttackElement.appendChild(defender.getTile()\\n                            .toXMLElement(enemyPlayer, opponentAttackElement.getOwnerDocument()));\\n                    }\\n                    opponentAttackElement.appendChild(defender.toXMLElement(enemyPlayer,\\n                            opponentAttackElement.getOwnerDocument()));\\n                } else if (!unit.isVisibleTo(enemyPlayer)) {\\n                    opponentAttackElement.setAttribute(\\\"update\\\", \\\"unit\\\");\\n                    opponentAttackElement.appendChild(unit.toXMLElement(enemyPlayer,\\n                            opponentAttackElement.getOwnerDocument()));\\n                }\\n                try {\\n                    enemyPlayer.getConnection().sendAndWait(opponentAttackElement);\\n                } catch (IOException e) {\\n                    logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName()\\n                                   + \\\" with connection \\\" + enemyPlayer.getConnection());\\n                }\\n            }\\n        }\\n                Element reply = Message.createNewRootElement(\\\"attackResult\\\");\\n        reply.setAttribute(\\\"result\\\", result.type.toString());\\n        reply.setAttribute(\\\"damage\\\", String.valueOf(result.damage));\\n        reply.setAttribute(\\\"plunderGold\\\", Integer.toString(plunderGold));\\n                if(repairLocation != null && player == loserOwner){\\n        \\treply.setAttribute(\\\"repairIn\\\", repairLocation.getId());\\n        }\\n        if (result.type == CombatResultType.DONE_SETTLEMENT && newTile.getColony() != null) {\\n                        reply.appendChild(newTile.toXMLElement(newTile.getColony().getOwner(), reply.getOwnerDocument()));\\n            reply.appendChild(defender.toXMLElement(newTile.getColony().getOwner(), reply.getOwnerDocument()));\\n        } else {\\n            reply.appendChild(defender.toXMLElement(player, reply.getOwnerDocument()));\\n        }\\n                        boolean isIndianCapitalBurned=false;\\n        if(result.type == CombatResultType.DONE_SETTLEMENT && \\n        \\t\\tnewTile.getSettlement() instanceof IndianSettlement &&\\n        \\t\\t((IndianSettlement) newTile.getSettlement()).isCapital()) {\\n        \\tisIndianCapitalBurned = true;\\n        \\treply.setAttribute(\\\"indianCapitalBurned\\\", Boolean.toString(isIndianCapitalBurned));\\n        }\\n        Hashtable<String, Integer> oldGoodsCounts = new Hashtable<String, Integer>();\\n        if (unit.canCaptureGoods() && getGame().getGameOptions().getBoolean(GameOptions.UNIT_HIDING)) {\\n            List<Goods> goodsInUnit = unit.getGoodsContainer().getFullGoods();\\n            for (Goods goods : goodsInUnit) {\\n                oldGoodsCounts.put(goods.getType().getId(), goods.getAmount());\\n            }\\n        }\\n        int oldUnits = unit.getTile().getUnitCount();\\n                unit.getGame().getCombatModel().attack(unit, defender, result, plunderGold, repairLocation);\\n        if(isIndianCapitalBurned){\\n        \\tdefendingPlayer.surrenderTo(player);\\n        }\\n        if (result.type.compareTo(CombatResultType.WIN) >= 0 \\n            && unit.getTile() != newTile\\n            && oldUnits < unit.getTile().getUnitCount()) {\\n                                                Unit lastUnit = unit.getTile().getLastUnit();\\n            if (!lastUnit.getOwner().isEuropean()) {\\n                Element convertElement = reply.getOwnerDocument().createElement(\\\"convert\\\");\\n                convertElement.appendChild(lastUnit.toXMLElement(unit.getOwner(), reply.getOwnerDocument()));\\n                reply.appendChild(convertElement);\\n            }\\n        }\\n                        if (unit.canCaptureGoods() && getGame().getGameOptions().getBoolean(GameOptions.UNIT_HIDING)) {\\n            List<Goods> goodsInUnit = unit.getGoodsContainer().getCompactGoods();\\n            for (Goods newGoods : goodsInUnit) {\\n                Integer oldGoodsAmount = oldGoodsCounts.get(newGoods.getType().getId());\\n                int capturedGoods = newGoods.getAmount() - (oldGoodsAmount!=null?oldGoodsAmount.intValue():0);\\n                if (capturedGoods > 0) {\\n                    Element captured = reply.getOwnerDocument().createElement(\\\"capturedGoods\\\");\\n                    captured.setAttribute(\\\"type\\\", newGoods.getType().getId());\\n                    captured.setAttribute(\\\"amount\\\", Integer.toString(capturedGoods));\\n                    reply.appendChild(captured);\\n                }\\n            }\\n        }\\n        if (result.type.compareTo(CombatResultType.EVADES) >= 0 && unit.getTile().equals(newTile)) {\\n                        Element update = reply.getOwnerDocument().createElement(\\\"update\\\");\\n            int lineOfSight = unit.getLineOfSight();\\n            if (result.type == CombatResultType.DONE_SETTLEMENT && newTile.getSettlement() != null) {\\n                lineOfSight = Math.max(lineOfSight, newTile.getSettlement().getLineOfSight());\\n            }\\n            List<Tile> surroundingTiles = getGame().getMap().getSurroundingTiles(unit.getTile(), lineOfSight);\\n            for (int i = 0; i < surroundingTiles.size(); i++) {\\n                Tile t = surroundingTiles.get(i);\\n                update.appendChild(t.toXMLElement(player, update.getOwnerDocument()));\\n            }\\n            update.appendChild(unit.getTile().toXMLElement(player, update.getOwnerDocument()));\\n            reply.appendChild(update);\\n        }\\n        return reply;\\n    }\\n    private Element embark(Connection connection, Element embarkElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(embarkElement.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, embarkElement.getAttribute(\\\"direction\\\"));\\n        Unit destinationUnit = (Unit) getGame().getFreeColGameObject(embarkElement.getAttribute(\\\"embarkOnto\\\"));\\n        if (unit == null || destinationUnit == null\\n                || getGame().getMap().getNeighbourOrNull(direction, unit.getTile()) != destinationUnit.getTile()) {\\n            throw new IllegalArgumentException(\\\"Invalid data format in client message.\\\");\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        unit.embark(destinationUnit);\\n        sendRemoveUnitToAll(unit, player);\\n        return null;\\n    }\\n    private Element boardShip(Connection connection, Element boardShipElement) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(boardShipElement.getAttribute(\\\"unit\\\"));\\n        Unit carrier = (Unit) getGame().getFreeColGameObject(boardShipElement.getAttribute(\\\"carrier\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        boolean tellEnemyPlayers = true;\\n        if (oldTile == null || oldTile.getSettlement() != null) {\\n            tellEnemyPlayers = false;\\n        }\\n        if (unit.isCarrier()) {\\n            logger.warning(\\\"Tried to load a carrier onto another carrier.\\\");\\n            return null;\\n        }\\n        unit.boardShip(carrier);\\n        if (tellEnemyPlayers) {\\n            sendRemoveUnitToAll(unit, player);\\n        }\\n                sendUpdatedTileToAll(unit.getTile(), player);\\n        return null;\\n    }\\n    private Element learnSkillAtSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        boolean cancelAction = false;\\n        if (element.getAttribute(\\\"action\\\").equals(\\\"cancel\\\")) {\\n            cancelAction = true;\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' not on map: ID: \\\" + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile tile = map.getNeighbourOrNull(direction, unit.getTile());\\n        IndianSettlement settlement = (IndianSettlement) tile.getSettlement();\\n        if (settlement == null) {\\n            throw new IllegalStateException(\\\"No settlement to learn skill from.\\\");\\n        }\\n        if (!unit.getType().canBeUpgraded(settlement.getLearnableSkill(),\\n                                          UnitType.UpgradeType.NATIVES)) {\\n            throw new IllegalStateException(\\\"Unit can't learn that skill from settlement!\\\");\\n        }\\n        Element reply = Message.createNewRootElement(\\\"learnSkillResult\\\");\\n        if (!cancelAction) {\\n            Tension tension = settlement.getAlarm(player);\\n            if (tension == null) {\\n                tension = new Tension(0);\\n            }\\n            switch (tension.getLevel()) {\\n            case HATEFUL:\\n                reply.setAttribute(\\\"result\\\", \\\"die\\\");\\n                unit.dispose();\\n                break;\\n            case ANGRY:\\n                reply.setAttribute(\\\"result\\\", \\\"leave\\\");\\n                break;\\n            default:\\n                unit.setType(settlement.getLearnableSkill());\\n                if (!settlement.isCapital())\\n                    settlement.setLearnableSkill(null);\\n                                settlement.getTile().updateIndianSettlementSkill(player);\\n                reply.setAttribute(\\\"result\\\", \\\"success\\\");\\n            }\\n        } else {\\n            reply.setAttribute(\\\"result\\\", \\\"cancelled\\\");\\n        }\\n        return reply;\\n    }\\n    private Element scoutIndianSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        String action = element.getAttribute(\\\"action\\\");\\n        IndianSettlement settlement = (IndianSettlement) map.getNeighbourOrNull(direction, unit.getTile()).getSettlement();\\n        Element reply = Message.createNewRootElement(\\\"scoutIndianSettlementResult\\\");\\n        if (action.equals(\\\"basic\\\")) {\\n            unit.contactAdjacent(settlement.getTile());\\n            unit.setMovesLeft(0);\\n                        UnitType skill = settlement.getLearnableSkill();\\n            if (skill != null) {\\n                reply.setAttribute(\\\"skill\\\", skill.getId());\\n            }\\n            settlement.updateWantedGoods();\\n            GoodsType[] wantedGoods = settlement.getWantedGoods();\\n            reply.setAttribute(\\\"highlyWantedGoods\\\", wantedGoods[0].getId());\\n            reply.setAttribute(\\\"wantedGoods1\\\", wantedGoods[1].getId());\\n            reply.setAttribute(\\\"wantedGoods2\\\", wantedGoods[2].getId());\\n            reply.setAttribute(\\\"numberOfCamps\\\", String.valueOf(settlement.getOwner().getSettlements().size()));\\n            for (Tile tile : getGame().getMap().getSurroundingTiles(settlement.getTile(), unit.getLineOfSight())) {\\n                reply.appendChild(tile.toXMLElement(player, reply.getOwnerDocument()));\\n            }\\n                        settlement.getTile().updateIndianSettlementInformation(player);\\n        } else if (action.equals(\\\"cancel\\\")) {\\n            return null;\\n        } else if (action.equals(\\\"attack\\\")) {\\n                                                unit.setMovesLeft(1);\\n            return null;\\n        } else if (settlement.getAlarm(player) != null &&\\n                   settlement.getAlarm(player).getLevel() == Tension.Level.HATEFUL) {\\n            reply.setAttribute(\\\"result\\\", \\\"die\\\");\\n            unit.dispose();\\n        } else if (action.equals(\\\"speak\\\")) {\\n            if (!settlement.hasBeenVisited()) {\\n                                                double random = Math.random();\\n                if (random < 0.33) {\\n                    reply.setAttribute(\\\"result\\\", \\\"tales\\\");\\n                    Element update = reply.getOwnerDocument().createElement(\\\"update\\\");\\n                    Position center = new Position(settlement.getTile().getX(), settlement.getTile().getY());\\n                    Iterator<Position> circleIterator = map.getCircleIterator(center, true, 6);\\n                    while (circleIterator.hasNext()) {\\n                        Position position = circleIterator.next();\\n                        if ((!position.equals(center))\\n                                && (map.getTile(position).isLand()\\n                                    || map.getTile(position).getLandCount() > 0)) {\\n                            Tile t = map.getTile(position);\\n                            player.setExplored(t);\\n                            update.appendChild(t.toXMLElement(player, update.getOwnerDocument(), true, false));\\n                        }\\n                    }\\n                    reply.appendChild(update);\\n                } else {\\n                    int beadsGold = (int) (Math.random() * (400 * settlement.getBonusMultiplier())) + 50;\\n                    if (unit.hasAbility(\\\"model.ability.expertScout\\\")) {\\n                        beadsGold = (beadsGold * 11) / 10;\\n                    }\\n                    reply.setAttribute(\\\"result\\\", \\\"beads\\\");\\n                    reply.setAttribute(\\\"amount\\\", Integer.toString(beadsGold));\\n                    player.modifyGold(beadsGold);\\n                }\\n                settlement.setVisited(player);\\n            } else {\\n                reply.setAttribute(\\\"result\\\", \\\"nothing\\\");\\n            }\\n        } else if (action.equals(\\\"tribute\\\")) {\\n            demandTribute(settlement, player, reply);\\n        }\\n        return reply;\\n    }\\n    private Element armedUnitDemandTribute(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n                Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n                if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getTile() == null) {\\n            throw new IllegalArgumentException(\\\"'Unit' is not on the map: \\\" + unit.toString());\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile newTile = getGame().getMap().getNeighbourOrNull(direction, unit.getTile());\\n        if (newTile == null) {\\n            throw new IllegalArgumentException(\\\"Could not find tile in direction \\\" + direction + \\\" from unit with ID \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        unit.setMovesLeft(0);\\n        IndianSettlement settlement = (IndianSettlement) newTile.getSettlement();\\n        Element reply = Message.createNewRootElement(\\\"armedUnitDemandTributeResult\\\");\\n        demandTribute(settlement, player, reply);\\n        return reply;\\n    }\\n    private void demandTribute(IndianSettlement settlement, Player player, Element reply) {\\n        int gold = settlement.getTribute(player);\\n        if (gold > 0) {\\n            reply.setAttribute(\\\"result\\\", \\\"agree\\\");\\n            reply.setAttribute(\\\"amount\\\", String.valueOf(gold));\\n            player.modifyGold(gold);\\n        } else {\\n            reply.setAttribute(\\\"result\\\", \\\"disagree\\\");\\n        }\\n    }\\n    private Element missionaryAtSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        InGameController inGameController = freeColServer.getInGameController();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        String action = element.getAttribute(\\\"action\\\");\\n        IndianSettlement settlement = (IndianSettlement) map.getNeighbourOrNull(direction, unit.getTile())\\n                .getSettlement();\\n        unit.setMovesLeft(0);\\n        if (action.equals(\\\"cancel\\\")) {\\n            return null;\\n        } else if (action.equals(\\\"establish\\\")) {\\n            sendRemoveUnitToAll(unit, player);\\n            boolean success = inGameController.createMission(settlement,unit);\\n        \\tElement reply = Message.createNewRootElement(\\\"missionaryReply\\\");\\n        \\treply.setAttribute(\\\"success\\\", String.valueOf(success));\\n        \\treply.setAttribute(\\\"tension\\\", settlement.getAlarm(unit.getOwner()).getLevel().toString());\\n            return reply;\\n        } else if (action.equals(\\\"heresy\\\")) {\\n            Element reply = Message.createNewRootElement(\\\"missionaryReply\\\");\\n            sendRemoveUnitToAll(unit, player);\\n            double random = Math.random() * settlement.getMissionary().getOwner().getCrosses() /\\n                (unit.getOwner().getCrosses() + 1);\\n            if (settlement.getMissionary().hasAbility(\\\"model.ability.expertMissionary\\\")) {\\n                random += 0.2;\\n            }\\n            if (unit.hasAbility(\\\"model.ability.expertMissionary\\\")) {\\n                random -= 0.2;\\n            }\\n            if (random < 0.5) {\\n            \\tboolean success = inGameController.createMission(settlement,unit);\\n            \\treply.setAttribute(\\\"success\\\", String.valueOf(success));\\n            \\treply.setAttribute(\\\"tension\\\", settlement.getAlarm(unit.getOwner()).getLevel().toString());    \\n            } else {\\n                reply.setAttribute(\\\"success\\\", \\\"false\\\");\\n                unit.dispose();\\n            }\\n            return reply;\\n        } else if (action.equals(\\\"incite\\\")) {\\n            Element reply = Message.createNewRootElement(\\\"missionaryReply\\\");\\n            Player enemy = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"incite\\\"));\\n            reply.setAttribute(\\\"amount\\\", String.valueOf(Game.getInciteAmount(player, enemy, settlement.getOwner())));\\n                                    unit.setLocation(settlement);\\n            return reply;\\n        } else {\\n            return null;\\n        }\\n    }\\n    private Element inciteAtSettlement(Connection connection, Element element) {\\n        FreeColServer freeColServer = getFreeColServer();\\n        Map map = getGame().getMap();\\n        ServerPlayer player = freeColServer.getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Direction direction = Enum.valueOf(Direction.class, element.getAttribute(\\\"direction\\\"));\\n        String confirmed = element.getAttribute(\\\"confirmed\\\");\\n        IndianSettlement settlement = (IndianSettlement) unit.getTile().getSettlement();\\n                unit.setLocation(map.getNeighbourOrNull(direction.getReverseDirection(), unit.getTile()));\\n        if (confirmed.equals(\\\"true\\\")) {\\n            Player enemy = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"enemy\\\"));\\n            int amount = Game.getInciteAmount(player, enemy, settlement.getOwner());\\n            if (player.getGold() < amount) {\\n                throw new IllegalStateException(\\\"Not enough gold to incite indians!\\\");\\n            } else {\\n                player.modifyGold(-amount);\\n            }\\n                                    settlement.getOwner().changeRelationWithPlayer(enemy, Stance.WAR);\\n                        settlement.modifyAlarm(enemy, 1000);             enemy.modifyTension(settlement.getOwner(), 500);\\n            enemy.modifyTension(player, 250);\\n        }\\n                return null;\\n    }\\n    private Element leaveShip(Connection connection, Element leaveShipElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(leaveShipElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.leaveShip();\\n        Tile newTile = unit.getTile();\\n        if (newTile != null) {\\n            sendUpdatedTileToAll(newTile, player);\\n        }\\n        return null;\\n    }\\n    private Element loadCargo(Connection connection, Element loadCargoElement) {\\n        Unit carrier = (Unit) getGame().getFreeColGameObject(loadCargoElement.getAttribute(\\\"carrier\\\"));\\n        Goods goods = new Goods(getGame(), (Element) loadCargoElement.getChildNodes().item(0));\\n        goods.loadOnto(carrier);\\n        return null;\\n    }\\n    private Element unloadCargo(Connection connection, Element unloadCargoElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Goods goods = new Goods(getGame(), (Element) unloadCargoElement.getChildNodes().item(0));\\n        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getColony() != null) {\\n            goods.unload();\\n        } else {\\n            goods.setLocation(null);\\n        }\\n        return null;\\n    }\\n    private Element buyGoods(Connection connection, Element buyGoodsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit carrier = (Unit) getGame().getFreeColGameObject(buyGoodsElement.getAttribute(\\\"carrier\\\"));\\n        GoodsType type = FreeCol.getSpecification().getGoodsType(buyGoodsElement.getAttribute(\\\"type\\\"));\\n        int amount = Integer.parseInt(buyGoodsElement.getAttribute(\\\"amount\\\"));\\n        if (carrier.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (carrier.getOwner() != player) {\\n            throw new IllegalStateException();\\n        }\\n        carrier.buyGoods(type, amount);\\n        Element marketElement = Message.createNewRootElement(\\\"marketElement\\\");\\n        marketElement.setAttribute(\\\"type\\\", type.getId());\\n        marketElement.setAttribute(\\\"amount\\\", String.valueOf(-amount/4));\\n        getFreeColServer().getServer().sendToAll(marketElement, player.getConnection());\\n        return null;\\n    }\\n    private Element sellGoods(Connection connection, Element sellGoodsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Goods goods = new Goods(getGame(), (Element) sellGoodsElement.getChildNodes().item(0));\\n        if (goods.getLocation() instanceof Unit && ((Unit) goods.getLocation()).getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        player.getMarket().sell(goods, player);\\n        Element marketElement = Message.createNewRootElement(\\\"marketElement\\\");\\n        marketElement.setAttribute(\\\"type\\\", goods.getType().getId());\\n        marketElement.setAttribute(\\\"amount\\\", String.valueOf(goods.getAmount()/4));\\n        getFreeColServer().getServer().sendToAll(marketElement, player.getConnection());\\n        return null;\\n    }\\n    private Element moveToEurope(Connection connection, Element moveToEuropeElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(moveToEuropeElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n                sendRemoveUnitToAll(unit, player);\\n        Tile oldTile = unit.getTile();\\n        unit.moveToEurope();\\n        return null;\\n    }\\n    private Element moveToAmerica(Connection connection, Element moveToAmericaElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(moveToAmericaElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.moveToAmerica();\\n        return null;\\n    }\\n    private Element buildColony(Connection connection, Element buildColonyElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        String name = buildColonyElement.getAttribute(\\\"name\\\");\\n        Unit unit = (Unit) getGame().getFreeColGameObject(buildColonyElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (unit.canBuildColony()) {\\n            Colony colony = new Colony(getGame(), player, name, unit.getTile());\\n            Element reply = Message.createNewRootElement(\\\"buildColonyConfirmed\\\");\\n            reply.appendChild(colony.toXMLElement(player, reply.getOwnerDocument()));\\n            Element updateElement = reply.getOwnerDocument().createElement(\\\"update\\\");\\n            int range = colony.getLineOfSight();\\n            if (range > unit.getLineOfSight()) {\\n                for (Tile t : getGame().getMap().getSurroundingTiles(unit.getTile(), range)) {\\n                    updateElement.appendChild(t.toXMLElement(player, reply.getOwnerDocument()));\\n                }\\n            }\\n            updateElement.appendChild(unit.getTile().toXMLElement(player, reply.getOwnerDocument()));\\n            reply.appendChild(updateElement);\\n            unit.buildColony(colony);\\n            sendUpdatedTileToAll(unit.getTile(), player);\\n            return reply;\\n        } else {\\n            logger.warning(\\\"A client is requesting to build a colony, but the operation is not permitted! (unsynchronized?)\\\");\\n            return null;\\n        }\\n    }\\n    private Element recruitUnitInEurope(Connection connection, Element recruitUnitInEuropeElement) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        Europe europe = player.getEurope();\\n        int slot = Integer.parseInt(recruitUnitInEuropeElement.getAttribute(\\\"slot\\\"));\\n        UnitType recruitable = europe.getRecruitable(slot);\\n        UnitType newRecruitable = player.generateRecruitable(\\\"abc\\\" + getPseudoRandom().nextInt(10000));\\n        Unit unit = new Unit(getGame(), europe, player, recruitable, UnitState.ACTIVE, recruitable.getDefaultEquipment());\\n        Element reply = Message.createNewRootElement(\\\"recruitUnitInEuropeConfirmed\\\");\\n        reply.setAttribute(\\\"newRecruitable\\\", newRecruitable.getId());\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        europe.recruit(slot, unit, newRecruitable);\\n        return reply;\\n    }\\n    private Element emigrateUnitInEurope(Connection connection, Element emigrateUnitInEuropeElement) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        Europe europe = player.getEurope();\\n        int slot;\\n        if (player.hasAbility(\\\"model.ability.selectRecruit\\\")) {\\n            slot = Integer.parseInt(emigrateUnitInEuropeElement.getAttribute(\\\"slot\\\"));\\n        } else {\\n            slot = (int) (Math.random() * 3);\\n        }\\n        UnitType recruitable = europe.getRecruitable(slot);\\n        UnitType newRecruitable = player.generateRecruitable(\\\"xyzzy\\\" + getPseudoRandom().nextInt(10000));\\n        Unit unit = new Unit(getGame(), europe, player, recruitable, UnitState.ACTIVE, recruitable.getDefaultEquipment());\\n        Element reply = Message.createNewRootElement(\\\"emigrateUnitInEuropeConfirmed\\\");\\n        if (!player.hasAbility(\\\"model.ability.selectRecruit\\\")) {\\n            reply.setAttribute(\\\"slot\\\", Integer.toString(slot));\\n        }\\n        reply.setAttribute(\\\"newRecruitable\\\", newRecruitable.getId());\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        europe.emigrate(slot, unit, newRecruitable);\\n        return reply;\\n    }\\n    private Element trainUnitInEurope(Connection connection, Element trainUnitInEuropeElement) {\\n        Player player = getFreeColServer().getPlayer(connection);\\n        Europe europe = player.getEurope();\\n        String unitId = trainUnitInEuropeElement.getAttribute(\\\"unitType\\\");\\n        UnitType unitType = FreeCol.getSpecification().getUnitType(unitId);\\n        Unit unit = new Unit(getGame(), europe, player, unitType, UnitState.ACTIVE, unitType.getDefaultEquipment());\\n        Element reply = Message.createNewRootElement(\\\"trainUnitInEuropeConfirmed\\\");\\n        reply.appendChild(unit.toXMLElement(player, reply.getOwnerDocument()));\\n        europe.train(unit);\\n        return reply;\\n    }\\n    private Element equipUnit(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        String typeString = workElement.getAttribute(\\\"type\\\");\\n        EquipmentType type = FreeCol.getSpecification().getEquipmentType(typeString);\\n        int amount = Integer.parseInt(workElement.getAttribute(\\\"amount\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (amount > 0) {\\n            for (int count = 0; count < amount; count++) {\\n                unit.equipWith(type);\\n            }\\n        } else {\\n            for (int count = 0; count > amount; count--) {\\n                unit.removeEquipment(type);\\n            }\\n        }\\n        if (unit.getLocation() instanceof Tile) {\\n            sendUpdatedTileToAll(unit.getTile(), player);\\n        }\\n        return null;\\n    }\\n    private Element work(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        WorkLocation workLocation = (WorkLocation) getGame().getFreeColGameObject(workElement.getAttribute(\\\"workLocation\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (workLocation == null) {\\n            throw new NullPointerException();\\n        }\\n        if (!workLocation.canAdd(unit)) {\\n            throw new IllegalStateException(\\\"Can not add \\\" + unit.getName() + \\\"(\\\" + unit.getId()\\n                                            + \\\") to \\\" + workLocation.toString() + \\\"(\\\" \\n                                            + workLocation.getId() + \\\")\\\");\\n        }\\n        Location oldLocation = unit.getLocation();\\n        unit.work(workLocation);\\n                sendUpdatedTileToAll(unit.getTile(), player);\\n                if (oldLocation instanceof ColonyTile) {\\n            sendUpdatedTileToAll(((ColonyTile) oldLocation).getWorkTile(), player);\\n        }\\n                if (workLocation instanceof ColonyTile) {\\n            sendUpdatedTileToAll(((ColonyTile) workLocation).getWorkTile(), player);\\n        }\\n        return null;\\n    }\\n    private Element changeWorkType(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        String workTypeString = workElement.getAttribute(\\\"workType\\\");\\n        if (workTypeString != null) {\\n            GoodsType workType = FreeCol.getSpecification().getGoodsType(workTypeString);\\n                        unit.setWorkType(workType);\\n        }\\n        return null;\\n    }\\n    private Element workImprovement(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile tile = unit.getTile();\\n        String improvementTypeString = workElement.getAttribute(\\\"improvementType\\\");\\n        if (improvementTypeString != null) {\\n            Element reply = Message.createNewRootElement(\\\"workImprovementConfirmed\\\");\\n            if (tile.getTileItemContainer() == null) {\\n                tile.setTileItemContainer(new TileItemContainer(tile.getGame(), tile));\\n                reply.appendChild(tile.getTileItemContainer().toXMLElement(player, reply.getOwnerDocument()));\\n            }\\n            TileImprovementType type = FreeCol.getSpecification().getTileImprovementType(improvementTypeString);\\n            TileImprovement improvement = unit.getTile().findTileImprovementType(type);\\n            if (improvement == null) {\\n                                improvement = new TileImprovement(getGame(), unit.getTile(), type);\\n                unit.getTile().add(improvement);\\n            }\\n            reply.appendChild(improvement.toXMLElement(player, reply.getOwnerDocument()));\\n            unit.work(improvement);\\n            return reply;\\n        } else {\\n            return null;\\n        }\\n    }\\n    private Element assignTeacher(Connection connection, Element workElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit student = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"student\\\"));\\n        Unit teacher = (Unit) getGame().getFreeColGameObject(workElement.getAttribute(\\\"teacher\\\"));\\n        if (!student.canBeStudent(teacher)) {\\n            throw new IllegalStateException(\\\"Unit can not be student!\\\");\\n        }\\n        if (!teacher.getColony().canTrain(teacher)) {\\n            throw new IllegalStateException(\\\"Unit can not be teacher!\\\");\\n        }\\n        if (student.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Student is not your unit!\\\");\\n        }\\n        if (teacher.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Teacher is not your unit!\\\");\\n        }\\n        if (student.getColony() != teacher.getColony()) {\\n            throw new IllegalStateException(\\\"Student and teacher are not in the same colony!\\\");\\n        }\\n        if (!(student.getLocation() instanceof WorkLocation)) {\\n            throw new IllegalStateException(\\\"Student is not in a WorkLocation!\\\");\\n        }\\n                if (student.getTeacher() != null) {\\n            student.getTeacher().setStudent(null);\\n        }\\n        student.setTeacher(teacher);\\n        if (teacher.getStudent() != null) {\\n            teacher.getStudent().setTeacher(null);\\n        }\\n        teacher.setStudent(student);\\n        return null;\\n    }\\n    private Element setCurrentlyBuilding(Connection connection, Element setCurrentlyBuildingElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Colony colony = (Colony) getGame().getFreeColGameObject(setCurrentlyBuildingElement.getAttribute(\\\"colony\\\"));\\n        if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your colony!\\\");\\n        }\\n        String typeString = setCurrentlyBuildingElement.getAttribute(\\\"type\\\");\\n        BuildableType type = null;\\n        if (typeString.equals(\\\"model.buildableType.nothing\\\"))\\n            type = BuildableType.NOTHING;\\n        else\\n            type = (BuildableType) FreeCol.getSpecification().getType(typeString);\\n        colony.setCurrentlyBuilding(type);\\n        sendUpdatedTileToAll(colony.getTile(), player);\\n        return null;\\n    }\\n    private Element changeState(Connection connection, Element changeStateElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObjectSafely(changeStateElement.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + changeStateElement.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        UnitState state = Enum.valueOf(UnitState.class, changeStateElement.getAttribute(\\\"state\\\"));\\n        Tile oldTile = unit.getTile();\\n        if (unit.checkSetState(state)) {\\n            unit.setState(state);\\n        } else {\\n            logger.warning(\\\"Can't set state \\\" + state + \\\" for unit \\\" + unit + \\\" with current state \\\" + unit.getState()\\n                    + \\\" and \\\" + unit.getMovesLeft() + \\\" moves left belonging to \\\" + player\\n                    + \\\". Possible cheating attempt (or bug)?\\\");\\n        }\\n                sendUpdatedTileToAll(oldTile, player);\\n        return null;\\n    }\\n    private Element putOutsideColony(Connection connection, Element putOutsideColonyElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(putOutsideColonyElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.putOutsideColony();\\n        sendUpdatedTileToAll(unit.getTile(), player);\\n        return null;\\n    }\\n    private Element payForBuilding(Connection connection, Element payForBuildingElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Colony colony = (Colony) getGame().getFreeColGameObject(payForBuildingElement.getAttribute(\\\"colony\\\"));\\n        if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        colony.payForBuilding();\\n        return null;\\n    }\\n    private Element payArrears(Connection connection, Element payArrearsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        GoodsType goodsType = FreeCol.getSpecification().getGoodsType(payArrearsElement.getAttribute(\\\"goodsType\\\"));\\n        int arrears = player.getArrears(goodsType);\\n        if (player.getGold() < arrears) {\\n            throw new IllegalStateException(\\\"Not enough gold to pay tax arrears!\\\");\\n        } else {\\n            player.modifyGold(-arrears);\\n            player.resetArrears(goodsType);\\n        }\\n        return null;\\n    }\\n    private Element setGoodsLevels(Connection connection, Element setGoodsLevelsElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Colony colony = (Colony) getGame().getFreeColGameObject(setGoodsLevelsElement.getAttribute(\\\"colony\\\"));\\n        if (colony == null) {\\n            throw new IllegalArgumentException(\\\"Found no colony with ID \\\" + setGoodsLevelsElement.getAttribute(\\\"colony\\\"));\\n        } else if (colony.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your colony!\\\");\\n        }\\n        ExportData exportData = new ExportData();\\n        exportData.readFromXMLElement((Element) setGoodsLevelsElement.getChildNodes().item(0));\\n        colony.setExportData(exportData);\\n        return null;\\n    }\\n    private Element clearSpeciality(Connection connection, Element clearSpecialityElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(clearSpecialityElement.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        unit.clearSpeciality();\\n        if (unit.getLocation() instanceof Tile) {\\n            sendUpdatedTileToAll(unit.getTile(), player);\\n        }\\n        return null;\\n    }\\n    private Element endTurn(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        getFreeColServer().getInGameController().endTurn(player);\\n        return null;\\n    }\\n    private Element disbandUnit(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        unit.dispose();\\n        sendUpdatedTileToAll(oldTile, player);\\n        return null;\\n    }\\n    private Element cashInTreasureTrain(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        Tile oldTile = unit.getTile();\\n        unit.cashInTreasureTrain();\\n        sendUpdatedTileToAll(oldTile, player);\\n        return null;\\n    }\\n    private Element declareIndependence(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        String nationName = element.getAttribute(\\\"independentNationName\\\");\\n        player.setIndependentNationName(nationName);\\n        ServerPlayer refPlayer = getFreeColServer().getInGameController().createREFPlayer(player);\\n        List<Unit> refUnits = getFreeColServer().getInGameController().createREFUnits(player, refPlayer);\\n        Element reply = Message.createNewRootElement(\\\"update\\\");\\n        reply.appendChild(refPlayer.toXMLElement(null, reply.getOwnerDocument()));\\n        for (Unit unit : refUnits) {\\n            reply.appendChild(unit.toXMLElement(null, reply.getOwnerDocument()));\\n        }\\n        player.declareIndependence();\\n        return reply;\\n    }\\n    private Element giveIndependence(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Player independent = (Player) getGame().getFreeColGameObject(element.getAttribute(\\\"player\\\"));\\n        if (independent.getREFPlayer() != player) {\\n            throw new IllegalStateException(\\\"Cannot give independence to a country we do not own.\\\");\\n        }\\n        independent.giveIndependence();\\n        Element giveIndependenceElement = Message.createNewRootElement(\\\"giveIndependence\\\");\\n        giveIndependenceElement.setAttribute(\\\"player\\\", independent.getId());\\n        getFreeColServer().getServer().sendToAll(giveIndependenceElement, connection);\\n        return null;\\n    }\\n    private Element foreignAffairs(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element reply = Message.createNewRootElement(\\\"foreignAffairsReport\\\");\\n        Iterator<Player> enemyPlayerIterator = getGame().getPlayerIterator();\\n        while (enemyPlayerIterator.hasNext()) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();\\n            if (enemyPlayer.getConnection() == null || enemyPlayer.isIndian() || enemyPlayer.isREF()) {\\n                continue;\\n            }\\n            Element enemyElement = reply.getOwnerDocument().createElement(\\\"opponent\\\");\\n            enemyElement.setAttribute(\\\"player\\\", enemyPlayer.getId());\\n            int numberOfColonies = enemyPlayer.getSettlements().size();\\n            int numberOfUnits = 0;\\n            int militaryStrength = 0;\\n            int navalStrength = 0;\\n            Iterator<Unit> unitIterator = enemyPlayer.getUnitIterator();\\n            while (unitIterator.hasNext()) {\\n                Unit unit = unitIterator.next();\\n                numberOfUnits++;\\n                if (unit.isNaval()) {\\n                    navalStrength += unit.getGame().getCombatModel().getOffencePower(unit, unit);\\n                } else {\\n                    militaryStrength += unit.getGame().getCombatModel().getOffencePower(unit, unit);\\n                }\\n            }\\n            Stance stance = enemyPlayer.getStance(player);\\n            if (stance == null) {\\n                stance = Stance.PEACE;\\n            }\\n            enemyElement.setAttribute(\\\"numberOfColonies\\\", String.valueOf(numberOfColonies));\\n            enemyElement.setAttribute(\\\"numberOfUnits\\\", String.valueOf(numberOfUnits));\\n            enemyElement.setAttribute(\\\"militaryStrength\\\", String.valueOf(militaryStrength));\\n            enemyElement.setAttribute(\\\"navalStrength\\\", String.valueOf(navalStrength));\\n            enemyElement.setAttribute(\\\"stance\\\", String.valueOf(stance));\\n            enemyElement.setAttribute(\\\"gold\\\", String.valueOf(enemyPlayer.getGold()));\\n            if (player.equals(enemyPlayer) ||\\n                player.hasAbility(\\\"model.ability.betterForeignAffairsReport\\\")) {\\n                enemyElement.setAttribute(\\\"SoL\\\", String.valueOf(enemyPlayer.getSoL()));\\n                enemyElement.setAttribute(\\\"foundingFathers\\\", String.valueOf(enemyPlayer.getFatherCount()));\\n                enemyElement.setAttribute(\\\"tax\\\", String.valueOf(enemyPlayer.getTax()));\\n            }\\n            reply.appendChild(enemyElement);\\n        }\\n        return reply;\\n    }\\n    private Element highScores(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element reply = Message.createNewRootElement(\\\"highScoresReport\\\");\\n        for (HighScore score : getFreeColServer().getHighScores()) {\\n            reply.appendChild(score.toXMLElement(player, reply.getOwnerDocument()));\\n        }\\n        return reply;\\n    }\\n    private Element retire(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Element reply = Message.createNewRootElement(\\\"confirmRetire\\\");\\n        boolean highScore = getFreeColServer().newHighScore(player);\\n        if (highScore) {\\n            try {\\n                getFreeColServer().saveHighScores();\\n                reply.setAttribute(\\\"highScore\\\", \\\"true\\\");\\n            } catch (Exception e) {\\n                logger.warning(e.toString());\\n                reply.setAttribute(\\\"highScore\\\", \\\"false\\\");\\n            }\\n        } else {\\n            reply.setAttribute(\\\"highScore\\\", \\\"false\\\");\\n        }\\n        return reply;\\n    }\\n    private Element getREFUnits(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        List<AbstractUnit> units = new ArrayList<AbstractUnit>();\\n        UnitType defaultType = FreeCol.getSpecification().getUnitType(\\\"model.unit.freeColonist\\\");\\n        if (player.getMonarch() == null) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) player.getREFPlayer();\\n            java.util.Map<UnitType, EnumMap<Role, Integer>> unitHash =\\n                new HashMap<UnitType, EnumMap<Role, Integer>>();\\n            for (Unit unit : enemyPlayer.getUnits()) {\\n                if (unit.isOffensiveUnit()) {\\n                    UnitType unitType = defaultType;\\n                    if (unit.getType().getOffence() > 0 ||\\n                        unit.hasAbility(\\\"model.ability.expertSoldier\\\")) {\\n                        unitType = unit.getType();\\n                    }\\n                    EnumMap<Role, Integer> roleMap = unitHash.get(unitType);\\n                    if (roleMap == null) {\\n                        roleMap = new EnumMap<Role, Integer>(Role.class);\\n                    }\\n                    Role role = unit.getRole();\\n                    Integer count = roleMap.get(role);\\n                    if (count == null) {\\n                        roleMap.put(role, new Integer(1));\\n                    } else {\\n                        roleMap.put(role, new Integer(count.intValue() + 1));\\n                    }\\n                    unitHash.put(unitType, roleMap);\\n                }\\n            }\\n            for (java.util.Map.Entry<UnitType, EnumMap<Role, Integer>> typeEntry : unitHash.entrySet()) {\\n                for (java.util.Map.Entry<Role, Integer> roleEntry : typeEntry.getValue().entrySet()) {\\n                    units.add(new AbstractUnit(typeEntry.getKey(), roleEntry.getKey(), roleEntry.getValue()));\\n                }\\n            }\\n        } else {\\n            units = player.getMonarch().getREF();\\n        }\\n        Element reply = Message.createNewRootElement(\\\"REFUnits\\\");\\n        for (AbstractUnit unit : units) {\\n            reply.appendChild(unit.toXMLElement(player,reply.getOwnerDocument()));\\n        }\\n        return reply;\\n    }\\n    private Element setDestination(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not the owner of the unit.\\\");\\n        }\\n        Location destination = null;\\n        if (element.hasAttribute(\\\"destination\\\")) {\\n            destination = (Location) getGame().getFreeColGameObject(element.getAttribute(\\\"destination\\\"));\\n        }\\n        unit.setDestination(destination);\\n        return null;\\n    }\\n    private Element rename(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Nameable object = (Nameable) getGame().getFreeColGameObject(element.getAttribute(\\\"nameable\\\"));\\n        if (!(object instanceof Ownable) || ((Ownable) object).getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not the owner of the nameable.\\\");\\n        }\\n        object.setName(element.getAttribute(\\\"name\\\"));\\n        return null;\\n    }\\n    private Element getTransactionSession(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, null);\\n        InGameController controller = (InGameController) getFreeColServer().getController();     \\n                if (!controller.isTransactionSessionOpen(unit, settlement) &&\\n            unit.getMovesLeft() <= 0) {\\n            throw new IllegalStateException(\\\"No moves left!\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit,settlement);\\n                        unit.setMovesLeft(0);\\n        Element reply = Message.createNewRootElement(\\\"getTransactionAnswer\\\");\\n        reply.setAttribute(\\\"canBuy\\\", ((Boolean) session.get(\\\"canBuy\\\")).toString());\\n        reply.setAttribute(\\\"canSell\\\",((Boolean) session.get(\\\"canSell\\\")).toString());\\n        reply.setAttribute(\\\"canGift\\\",((Boolean) session.get(\\\"canGift\\\")).toString());\\n        reply.setAttribute(\\\"hasSpaceLeft\\\",((Boolean) session.get(\\\"hasSpaceLeft\\\")).toString());\\n        return reply;\\n    }\\n    private Element closeTransactionSession(Connection connection, Element element) {\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        InGameController controller = getFreeColServer().getInGameController();\\n        if(!controller.isTransactionSessionOpen(unit,settlement)){\\n            throw new IllegalStateException(\\\"Trying to close a non-existing session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit,settlement);\\n                boolean isActionTaken = ((Boolean)(session.get(\\\"actionTaken\\\"))).booleanValue();\\n        if(! isActionTaken){\\n                Integer unitMoves = (Integer) session.get(\\\"unitMoves\\\");\\n                unit.setMovesLeft(unitMoves);\\n        }\\n        controller.closeTransactionSession(unit,settlement);\\n        return null;\\n    }\\n    private void checkGeneralCondForTradeQuery(Element element, Player player, Unit unit, Settlement settlement, Goods goods){\\n        if (goods != null && goods.getAmount() > 100) {\\n            throw new IllegalArgumentException(\\\"Amount of goods exceeds 100: \\\" + goods.getAmount());\\n        }\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (settlement == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Settlement' with specified ID: \\\"\\n                    + element.getAttribute(\\\"settlement\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (unit.getTile().getDistanceTo(settlement.getTile()) > 1) {\\n            throw new IllegalStateException(\\\"Not adjacent to settlement!\\\");\\n        }\\n        if (settlement.getOwner().isIndian() && !player.hasContacted(settlement.getOwner())) {\\n            throw new IllegalStateException(\\\"Player has not established contact with the Indians!\\\");\\n        }\\n    }\\n    private Element tradeProposition(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canSell\\\")){\\n            throw new IllegalStateException(\\\"trying to sell with a session where selling not allowed\\\");\\n        }\\n        int gold = -1;\\n        if (element.hasAttribute(\\\"gold\\\")) {\\n            gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        }\\n        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))\\n                .tradeProposition(unit, settlement, goods, gold);\\n        Element tpaElement = Message.createNewRootElement(\\\"tradePropositionAnswer\\\");\\n        tpaElement.setAttribute(\\\"gold\\\", Integer.toString(returnGold));\\n        return tpaElement;\\n    }\\n    private Element trade(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canSell\\\")){\\n            throw new IllegalStateException(\\\"trying to sell with a session where selling not allowed\\\");\\n        }\\n        int gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        if (gold <= 0) {\\n            throw new IllegalArgumentException();\\n        }\\n        AIPlayer aiPlayer = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());\\n        int returnGold = aiPlayer.tradeProposition(unit, settlement, goods, gold);\\n        if (returnGold != gold) {\\n            throw new IllegalArgumentException(\\\"This was not the price we agreed upon! Cheater?\\\");\\n        }\\n        unit.trade(settlement, goods, gold);\\n        session.put(\\\"actionTaken\\\", true);\\n        session.put(\\\"hasSpaceLeft\\\", unit.getSpaceLeft() != 0);\\n        return null;\\n    }\\n    private Element goodsForSaleRequest(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        IndianSettlement settlement = (IndianSettlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, null);\\n        if (!(settlement instanceof IndianSettlement)) { \\n            throw new IllegalStateException(\\\"Settlement not an Indian Settlement\\\");\\n        }\\n        AIPlayer aiPlayer = (AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner());\\n                Element reply = Message.createNewRootElement(\\\"goodsForSaleAnswer\\\");\\n        List<Goods> goodsForSale = (settlement).getSellGoods();\\n        if (!goodsForSale.isEmpty()) {\\n            for (Goods goods : goodsForSale) {\\n                aiPlayer.registerSellGoods(goods);\\n                reply.appendChild(goods.toXMLElement(null, reply.getOwnerDocument()));\\n            }\\n        }\\n        return reply;\\n    }\\n    private Element buyProposition(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        IndianSettlement settlement = (IndianSettlement) goods.getLocation();\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canBuy\\\") && !(Boolean)session.get(\\\"hasSpaceLeft\\\")){\\n            throw new IllegalStateException(\\\"trying to buy with a session where buying not allowed\\\");\\n        }\\n        int gold = -1;\\n        if (element.hasAttribute(\\\"gold\\\")) {\\n            gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        }\\n        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))\\n                .buyProposition(unit, goods, gold);\\n        Element tpaElement = Message.createNewRootElement(\\\"buyPropositionAnswer\\\");\\n        tpaElement.setAttribute(\\\"gold\\\", Integer.toString(returnGold));\\n        return tpaElement;\\n    }\\n    private Element buy(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        IndianSettlement settlement = (IndianSettlement) goods.getLocation();\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n                InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        java.util.Map<String,Object> session = controller.getTransactionSession(unit, settlement);\\n        if(!(Boolean)session.get(\\\"canBuy\\\") && !(Boolean)session.get(\\\"hasSpaceLeft\\\")){\\n            throw new IllegalStateException(\\\"trying to buy with a session where buying not allowed\\\");\\n        }\\n        int gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n        if (gold <= 0) {\\n            throw new IllegalArgumentException();\\n        }\\n        int returnGold = ((AIPlayer) getFreeColServer().getAIMain().getAIObject(settlement.getOwner()))\\n                .buyProposition(unit, goods, gold);\\n        if (returnGold != gold) {\\n            throw new IllegalArgumentException(\\\"This was not the price we agreed upon! Cheater?\\\");\\n        }\\n        unit.buy(settlement, goods, gold);\\n        session.put(\\\"actionTaken\\\", true);\\n        return null;\\n    }\\n    private Element deliverGift(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Settlement settlement = (Settlement) getGame().getFreeColGameObject(element.getAttribute(\\\"settlement\\\"));\\n        Goods goods = new Goods(getGame(), Message.getChildElement(element, Goods.getXMLElementTagName()));\\n        checkGeneralCondForTradeQuery(element, player, unit, settlement, goods);\\n        InGameController controller = (InGameController) getFreeColServer().getController();     \\n        if(!controller.isTransactionSessionOpen(unit, settlement)){\\n            throw new IllegalStateException(\\\"trying to trade without opening a transaction session\\\");\\n        }\\n        ServerPlayer receiver = (ServerPlayer) settlement.getOwner();\\n        if (!receiver.isAI() && receiver.isConnected()) {\\n            Element deliverGiftElement = Message.createNewRootElement(\\\"deliverGift\\\");\\n            Element unitElement = unit.toXMLElement(receiver, deliverGiftElement.getOwnerDocument());\\n            Element goodsContainerElement = unit.getGoodsContainer().toXMLElement(receiver,\\n                    deliverGiftElement.getOwnerDocument());\\n            unitElement.replaceChild(goodsContainerElement, unitElement.getElementsByTagName(\\n                    GoodsContainer.getXMLElementTagName()).item(0));\\n            deliverGiftElement.appendChild(unitElement);\\n            deliverGiftElement.setAttribute(\\\"settlement\\\", settlement.getId());\\n            deliverGiftElement.appendChild(goods.toXMLElement(receiver, deliverGiftElement.getOwnerDocument()));\\n            try {\\n                receiver.getConnection().sendAndWait(deliverGiftElement);\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send \\\\\\\"deliverGift\\\\\\\"-message!\\\");\\n            }\\n        }\\n        unit.deliverGift(settlement, goods);\\n        return null;\\n    }\\n    private Element indianDemand(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        Unit unit = (Unit) getGame().getFreeColGameObject(element.getAttribute(\\\"unit\\\"));\\n        Colony colony = (Colony) getGame().getFreeColGameObject(element.getAttribute(\\\"colony\\\"));\\n        if (unit == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Unit' with specified ID: \\\"\\n                    + element.getAttribute(\\\"unit\\\"));\\n        }\\n        if (unit.getMovesLeft() <= 0) {\\n            throw new IllegalStateException(\\\"No moves left!\\\");\\n        }\\n        if (colony == null) {\\n            throw new IllegalArgumentException(\\\"Could not find 'Colony' with specified ID: \\\"\\n                    + element.getAttribute(\\\"colony\\\"));\\n        }\\n        if (unit.getOwner() != player) {\\n            throw new IllegalStateException(\\\"Not your unit!\\\");\\n        }\\n        if (unit.getTile().getDistanceTo(colony.getTile()) > 1) {\\n            throw new IllegalStateException(\\\"Not adjacent to colony!\\\");\\n        }\\n        ServerPlayer receiver = (ServerPlayer) colony.getOwner();\\n        if (receiver.isConnected()) {\\n            int gold = 0;\\n            Goods goods = null;\\n            Element goodsElement = Message.getChildElement(element, Goods.getXMLElementTagName());\\n            if (goodsElement == null) {\\n                gold = Integer.parseInt(element.getAttribute(\\\"gold\\\"));\\n            } else {\\n                goods = new Goods(getGame(), goodsElement);\\n            }\\n            try {\\n                Element reply = receiver.getConnection().ask(element);\\n                boolean accepted = Boolean.valueOf(reply.getAttribute(\\\"accepted\\\")).booleanValue();\\n                if (accepted) {\\n                    if (goods == null) {\\n                        receiver.modifyGold(-gold);\\n                    } else {\\n                        colony.getGoodsContainer().removeGoods(goods);\\n                    }\\n                }\\n                return reply;\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send \\\\\\\"demand\\\\\\\"-message!\\\");\\n            }\\n        }\\n        return null;\\n    }\\n    private Element continuePlaying(Connection connection, Element element) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        if (!getFreeColServer().isSingleplayer()) {\\n            throw new IllegalStateException(\\\"Can't continue playing in multiplayer!\\\");\\n        }\\n        if (player != getFreeColServer().getInGameController().checkForWinner()) {\\n            throw new IllegalStateException(\\\"Can't continue playing! Player \\\"\\n                    + player.getName() + \\\" hasn't won the game\\\");\\n        }\\n        GameOptions go = getGame().getGameOptions();\\n        ((BooleanOption) go.getObject(GameOptions.VICTORY_DEFEAT_REF)).setValue(false);\\n        ((BooleanOption) go.getObject(GameOptions.VICTORY_DEFEAT_EUROPEANS)).setValue(false);\\n        ((BooleanOption) go.getObject(GameOptions.VICTORY_DEFEAT_HUMANS)).setValue(false);\\n                final ServerPlayer currentPlayer = (ServerPlayer) getFreeColServer().getGame().getCurrentPlayer();\\n        getFreeColServer().getInGameController().endTurn(currentPlayer);\\n        return null;\\n    }\\n    @Override\\n    protected Element logout(Connection connection, Element logoutElement) {\\n        ServerPlayer player = getFreeColServer().getPlayer(connection);\\n        logger.info(\\\"Logout by: \\\" + connection + ((player != null) ? \\\" (\\\" + player.getName() + \\\") \\\" : \\\"\\\"));\\n        if (player == null) {\\n            return null;\\n        }\\n        player.setConnected(false);\\n        if (getFreeColServer().getGame().getCurrentPlayer() == player\\n                && !getFreeColServer().isSingleplayer()) {\\n            getFreeColServer().getInGameController().endTurn(player);\\n        }\\n        try {\\n            getFreeColServer().updateMetaServer();\\n        } catch (NoRouteToServerException e) {}\\n        return null;\\n    }\\n    private void sendUpdatedTileToAll(Tile newTile, Player player) {\\n                Iterator<Player> enemyPlayerIterator = getGame().getPlayerIterator();\\n        while (enemyPlayerIterator.hasNext()) {\\n            ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();\\n            if (player != null && player.equals(enemyPlayer) || enemyPlayer.getConnection() == null) {\\n                continue;\\n            }\\n            try {\\n                if (enemyPlayer.canSee(newTile)) {\\n                    Element updateElement = Message.createNewRootElement(\\\"update\\\");\\n                    updateElement.appendChild(newTile.toXMLElement(enemyPlayer, updateElement.getOwnerDocument()));\\n                    enemyPlayer.getConnection().sendAndWait(updateElement);\\n                }\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName() + \\\" with connection \\\"\\n                        + enemyPlayer.getConnection());\\n            }\\n        }\\n    }\\n    private Element getServerStatistics(Connection connection, Element request) {\\n        StatisticsMessage m = new StatisticsMessage(getGame(), getFreeColServer().getAIMain());\\n        Element reply = m.toXMLElement();\\n        return reply;\\n    }\\n}\""
            },
            "m7": {
                "content": "The `InGameInputHandler.java` file is a critical component of the **freecol** game server, responsible for handling various in-game actions initiated by players, such as:\n\n- Moving units\n- Building colonies\n- Trading goods\n- Conducting diplomacy\n- Combat interactions\n- End-of-turn processing\n\nThis class primarily processes network requests and executes corresponding game logic. It interacts heavily with other core components like `Unit`, `Colony`, `Goods`, `Player`, `Tile`, and `Game`.\n\n### Relevance to `ClientOptions.java`\nGiven that `ClientOptions.java` likely manages client-side settings or configurations (such as UI preferences, input controls, or gameplay options), changes in `ClientOptions.java` could affect how inputs are processed or interpreted in the game loop.\n\nSince `InGameInputHandler` deals directly with handling player input and translating it into game actions, it is reasonable to suspect that it may have a dependency on `ClientOptions`, especially if those options influence how input is handled or what actions are available.\n\n### Next Steps\nTo confirm whether `InGameInputHandler.java` depends on `ClientOptions.java`, we should:\n1. Check if `ClientOptions.java` is referenced within `InGameInputHandler.java`.\n2. If not directly referenced, determine if there's an indirect relationship through shared entities or configuration systems.\n\nLet\u2019s first check for direct coupling dependencies between `ClientOptions.java` and `InGameInputHandler.java` using the `get_coupling_dependencies` function.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_246f932454e94a2d9c0033",
                        "function": {
                            "arguments": "{\"entity1\": \"ClientOptions.java\", \"entity2\": \"InGameInputHandler.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m9": {
                "content": "There are **no direct coupling dependencies** between `ClientOptions.java` and `InGameInputHandler.java`. This suggests that these two files do not directly reference each other through standard code-level relationships (e.g., inheritance, method calls, variable usage, etc.).\n\n### Next Steps\nSince there's no direct coupling, we should explore **indirect relationships** or **conceptual coupling**. A good next step is to analyze the **semantic similarity** between these two files using the `get_conceptual_coupling` function. This will help us determine if they share similar concepts or responsibilities at a higher level.\n\nLet\u2019s proceed with checking the conceptual coupling between `ClientOptions.java` and `InGameInputHandler.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_98a0e603779d43a0b81a81",
                        "function": {
                            "arguments": "{\"entity1\": \"ClientOptions.java\", \"entity2\": \"InGameInputHandler.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.78208756\""
            },
            "m11": {
                "content": "The **conceptual coupling** score between `ClientOptions.java` and `InGameInputHandler.java` is **0.782**, which indicates a **high semantic similarity** or conceptual overlap between the two files.\n\nThis suggests that, although there\u2019s no direct code-level dependency, both files likely deal with **related functionalities**\u2014possibly around **user input handling**, **game configuration**, or **client-server interaction logic**.\n\n### Interpretation\nGiven this high conceptual coupling:\n- Changes in `ClientOptions.java` (e.g., altering how options are stored or interpreted) might **indirectly affect** how `InGameInputHandler.java` processes player actions.\n- Both classes may rely on shared configurations or event systems that tie their behavior together, even if they don't reference each other directly.\n\n### Next Steps\nTo further investigate, we should:\n1. Examine the content of `ClientOptions.java` to understand what kind of settings or configurations it manages.\n2. Look for any **shared dependencies** or **common patterns** between the two files that could explain this strong conceptual link.\n\nLet's now retrieve the source code of `ClientOptions.java` to analyze its structure and responsibilities.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_9c227d1503684f709d7ce9",
                        "function": {
                            "arguments": "{\"entity\": \"ClientOptions.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package net.sf.freecol.client;\\nimport java.util.Comparator;\\nimport java.util.Map;\\nimport java.util.logging.Logger;\\nimport net.sf.freecol.common.Specification;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.FreeColGameObject;\\nimport net.sf.freecol.common.model.ModelMessage;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.option.AudioMixerOption;\\nimport net.sf.freecol.common.option.BooleanOption;\\nimport net.sf.freecol.common.option.OptionGroup;\\nimport net.sf.freecol.common.option.OptionMap;\\nimport net.sf.freecol.common.option.PercentageOption;\\nimport net.sf.freecol.common.option.SelectOption;\\nimport org.w3c.dom.Element;\\npublic class ClientOptions extends OptionMap {\\n    @SuppressWarnings(\\\"unused\\\")\\n    private static final Logger logger = Logger.getLogger(ClientOptions.class.getName());\\n    public static final String LANGUAGE = \\\"model.option.languageOption\\\";\\n    public static final String JUMP_TO_ACTIVE_UNIT = \\\"model.option.jumpToActiveUnit\\\";\\n    public static final String ALWAYS_CENTER = \\\"model.option.alwaysCenter\\\";\\n    public static final String MIN_NUMBER_FOR_DISPLAYING_GOODS_COUNT = \\\"model.option.guiMinNumberToDisplayGoodsCount\\\";\\n    public static final String MAX_NUMBER_OF_GOODS_IMAGES = \\\"model.option.guiMaxNumberOfGoodsImages\\\";\\n    public static final String DISPLAY_COMPASS_ROSE = \\\"model.option.displayCompassRose\\\";\\n    public static final String DISPLAY_MAP_CONTROLS = \\\"model.option.displayMapControls\\\";\\n    public static final String DISPLAY_GRID = \\\"model.option.displayGrid\\\";\\n    public static final String DISPLAY_TILE_TEXT = \\\"model.option.displayTileText\\\";\\n    public static final int DISPLAY_TILE_TEXT_EMPTY = 0, DISPLAY_TILE_TEXT_NAMES = 1, DISPLAY_TILE_TEXT_OWNERS = 2, DISPLAY_TILE_TEXT_REGIONS = 3;\\n    public static final String MOVE_ANIMATION_SPEED = \\\"model.option.moveAnimationSpeed\\\";\\n    public static final String ENEMY_MOVE_ANIMATION_SPEED = \\\"model.option.enemyMoveAnimationSpeed\\\";\\n    public static final String MESSAGES_GROUP_BY = \\\"model.option.guiMessagesGroupBy\\\";\\n    public static final int MESSAGES_GROUP_BY_NOTHING = 0;\\n    public static final int MESSAGES_GROUP_BY_TYPE = 1;\\n    public static final int MESSAGES_GROUP_BY_SOURCE = 2;\\n    public static final String AUDIO_MIXER = \\\"audioMixer\\\";\\n    public static final String MUSIC_VOLUME = \\\"musicVolume\\\";\\n    public static final String SFX_VOLUME = \\\"sfxVolume\\\";\\n    public static final String SHOW_SONS_OF_LIBERTY = \\\"model.option.guiShowSonsOfLiberty\\\";\\n    public static final String SHOW_WARNING = \\\"model.option.guiShowWarning\\\";\\n    public static final String SHOW_GOVERNMENT_EFFICIENCY = \\\"model.option.guiShowGovernmentEfficiency\\\";\\n    public static final String SHOW_WAREHOUSE_CAPACITY = \\\"model.option.guiShowWarehouseCapacity\\\";\\n    public static final String SHOW_UNIT_IMPROVED = \\\"model.option.guiShowUnitImproved\\\";\\n    public static final String SHOW_UNIT_DEMOTED = \\\"model.option.guiShowUnitDemoted\\\";\\n    public static final String SHOW_UNIT_ADDED = \\\"model.option.guiShowUnitAdded\\\";\\n    public static final String SHOW_UNIT_LOST = \\\"model.option.guiShowUnitLost\\\";\\n    public static final String SHOW_BUILDING_COMPLETED = \\\"model.option.guiShowBuildingCompleted\\\";\\n    public static final String SHOW_FOREIGN_DIPLOMACY = \\\"model.option.guiShowForeignDiplomacy\\\";\\n    public static final String SHOW_MARKET_PRICES = \\\"model.option.guiShowMarketPrices\\\";\\n    public static final String SHOW_MISSING_GOODS = \\\"model.option.guiShowMissingGoods\\\";\\n    public static final String SHOW_TUTORIAL = \\\"model.option.guiShowTutorial\\\";\\n    public static final String SHOW_COLONY_WARNINGS = \\\"model.option.guiShowColonyWarnings\\\";\\n    public static final String SHOW_PRECOMBAT = \\\"model.option.guiShowPreCombat\\\";\\n    public static final String SHOW_SAVEGAME_SETTINGS = \\\"model.option.showSavegameSettings\\\";\\n    public static final int SHOW_SAVEGAME_SETTINGS_NEVER = 0;\\n    public static final int SHOW_SAVEGAME_SETTINGS_MULTIPLAYER = 1;\\n    public static final int SHOW_SAVEGAME_SETTINGS_ALWAYS = 2;\\n    public static final String AUTOSAVE_PERIOD = \\\"model.option.autosavePeriod\\\";\\n    public static final String AUTOSAVE_GENERATIONS = \\\"model.option.autosaveGenerations\\\";\\n    public static final String DISPLAY_FOG_OF_WAR = \\\"model.option.displayFogOfWar\\\";\\n    public static final String MAP_SCROLL_ON_DRAG = \\\"model.option.mapScrollOnDrag\\\";\\n    public static final String AUTOLOAD_EMIGRANTS = \\\"model.option.autoloadEmigrants\\\";\\n    public static final String SMOOTH_MINIMAP_RENDERING = \\\"model.option.smoothRendering\\\";\\n    public static final String DEFAULT_MINIMAP_ZOOM = \\\"model.option.defaultZoomLevel\\\";\\n    public static final String MINIMAP_BACKGROUND_COLOR = \\\"model.option.color.background\\\";\\n    public static final String COLOR_BLACK = \\\"black\\\";\\n    public static final String COLOR_VERY_DARK_GRAY = \\\"gray.dark.very\\\";\\n    public static final String COLOR_DARK_GRAY = \\\"gray.dark\\\";\\n    public static final String COLOR_GRAY = \\\"gray\\\";\\n    public static final String COLOR_LIGHT_GRAY = \\\"gray.light\\\";\\n    public static final String COLOR_VERY_LIGHT_GRAY = \\\"gray.light.very\\\";\\n    public static final String COLOR_LIGHT_BLUE = \\\"blue.light\\\";\\n    public static final String CUSTOM_STOCK = \\\"model.option.customStock\\\";\\n    public static final String LOW_LEVEL = \\\"model.option.lowLevel\\\";\\n    public static final String HIGH_LEVEL = \\\"model.option.highLevel\\\";\\n    public static final String COLONY_COMPARATOR = \\\"model.option.colonyComparator\\\";\\n    public static final int COLONY_COMPARATOR_NAME = 0, COLONY_COMPARATOR_AGE = 1, COLONY_COMPARATOR_POSITION = 2,\\n            COLONY_COMPARATOR_SIZE = 3, COLONY_COMPARATOR_SOL = 4;\\n    public static final String AUTO_END_TURN = \\\"model.option.autoEndTurn\\\";\\n    private static Comparator<Colony> colonyAgeComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            return s1.getIntegerID().compareTo(s2.getIntegerID());\\n        }\\n    };\\n    private static Comparator<Colony> colonyNameComparator = new Comparator<Colony>() {\\n        public int compare(Colony s1, Colony s2) {\\n            return s1.getName().compareTo(s2.getName());\\n        }\\n    };\\n    private static Comparator<Colony> colonySizeComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            int dsize = s2.getUnitCount() - s1.getUnitCount();\\n            if (dsize == 0) {\\n                return s2.getSoL() - s1.getSoL();\\n            } else {\\n                return dsize;\\n            }\\n        }\\n    };\\n    private static Comparator<Colony> colonySoLComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            int dsol = s2.getSoL() - s1.getSoL();\\n            if (dsol == 0) {\\n                return s2.getUnitCount() - s1.getUnitCount();\\n            } else {\\n                return dsol;\\n            }\\n        }\\n    };\\n    private static Comparator<Colony> colonyPositionComparator = new Comparator<Colony>() {\\n                public int compare(Colony s1, Colony s2) {\\n            int dy = s1.getTile().getY() - s2.getTile().getY();\\n            if (dy == 0) {\\n                return s1.getTile().getX() - s2.getTile().getX();\\n            } else {\\n                return dy;\\n            }\\n        }\\n    };\\n    private Comparator<ModelMessage> messageSourceComparator = new Comparator<ModelMessage>() {\\n                public int compare(ModelMessage message1, ModelMessage message2) {\\n            Object source1 = message1.getSource();\\n            Object source2 = message2.getSource();\\n            if (source1 == source2) {\\n                return messageTypeComparator.compare(message1, message2);\\n            }\\n            int base = getClassIndex(source1) - getClassIndex(source2);\\n            if (base == 0) {\\n                if (source1 instanceof Colony) {\\n                    return getColonyComparator().compare((Colony) source1, (Colony) source2);\\n                }\\n            }\\n            return base;\\n        }\\n        private int getClassIndex(Object object) {\\n            if (object instanceof Player) {\\n                return 10;\\n            } else if (object instanceof Colony) {\\n                return 20;\\n            } else if (object instanceof Europe) {\\n                return 30;\\n            } else if (object instanceof Unit) {\\n                return 40;\\n            } else if (object instanceof FreeColGameObject) {\\n                return 50;\\n            } else {\\n                return 1000;\\n            }\\n        }\\n    };\\n    private Comparator<ModelMessage> messageTypeComparator = new Comparator<ModelMessage>() {\\n                public int compare(ModelMessage message1, ModelMessage message2) {\\n            int dtype = message1.getType().ordinal() - message2.getType().ordinal();\\n            if (dtype == 0 && message1.getSource() != message2.getSource()) {\\n                return messageSourceComparator.compare(message1, message2);\\n            } else {\\n                return dtype;\\n            }\\n        }\\n    };\\n    public ClientOptions() {\\n        super(getXMLElementTagName());\\n    }\\n    public ClientOptions(Element element) {\\n        super(element, getXMLElementTagName());\\n    }\\n    protected void addDefaultOptions() {\\n        Specification spec = Specification.getSpecification();\\n        OptionGroup guiGroup = spec.getOptionGroup(\\\"clientOptions.gui\\\");\\n        guiGroup.add(spec.getOptionGroup(\\\"clientOptions.minimap\\\"));\\n        add(guiGroup);\\n        add(spec.getOptionGroup(\\\"clientOptions.messages\\\"));\\n        OptionGroup audioGroup = new OptionGroup(\\\"clientOptions.audio\\\");\\n        new AudioMixerOption(AUDIO_MIXER, audioGroup);\\n        new PercentageOption(MUSIC_VOLUME, audioGroup, 100).setPreviewEnabled(true);\\n        new PercentageOption(SFX_VOLUME, audioGroup, 100).setPreviewEnabled(true);\\n        add(audioGroup);\\n        add(spec.getOptionGroup(\\\"clientOptions.savegames\\\"));\\n        add(spec.getOptionGroup(\\\"clientOptions.warehouse\\\"));\\n        add(spec.getOptionGroup(\\\"clientOptions.other\\\"));\\n    }\\n    public int getDisplayTileText() {\\n        return getInteger(DISPLAY_TILE_TEXT);\\n    }\\n    public Comparator<Colony> getColonyComparator() {\\n        return getColonyComparator(getInteger(COLONY_COMPARATOR));\\n    }\\n    public static Comparator<Colony> getColonyComparator(int type) {\\n        switch (type) {\\n        case COLONY_COMPARATOR_AGE:\\n            return colonyAgeComparator;\\n        case COLONY_COMPARATOR_POSITION:\\n            return colonyPositionComparator;\\n        case COLONY_COMPARATOR_SIZE:\\n            return colonySizeComparator;\\n        case COLONY_COMPARATOR_SOL:\\n            return colonySoLComparator;\\n        case COLONY_COMPARATOR_NAME:\\n            return colonyNameComparator;\\n        default:\\n            throw new IllegalStateException(\\\"Unknown comparator\\\");\\n        }\\n    }\\n    public Comparator<ModelMessage> getModelMessageComparator() {\\n        switch (getInteger(MESSAGES_GROUP_BY)) {\\n        case MESSAGES_GROUP_BY_SOURCE:\\n            return messageSourceComparator;\\n        case MESSAGES_GROUP_BY_TYPE:\\n            return messageTypeComparator;\\n        default:\\n            return null;\\n        }\\n    }\\n    public BooleanOption getBooleanOption(ModelMessage message) {\\n        switch (message.getType()) {\\n        case WARNING:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_WARNING);\\n        case SONS_OF_LIBERTY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_SONS_OF_LIBERTY);\\n        case GOVERNMENT_EFFICIENCY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_GOVERNMENT_EFFICIENCY);\\n        case WAREHOUSE_CAPACITY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_WAREHOUSE_CAPACITY);\\n        case UNIT_IMPROVED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_IMPROVED);\\n        case UNIT_DEMOTED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_DEMOTED);\\n        case UNIT_LOST:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_LOST);\\n        case UNIT_ADDED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_UNIT_ADDED);\\n        case BUILDING_COMPLETED:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_BUILDING_COMPLETED);\\n        case FOREIGN_DIPLOMACY:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_FOREIGN_DIPLOMACY);\\n        case MARKET_PRICES:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_MARKET_PRICES);\\n        case MISSING_GOODS:\\n            return (BooleanOption) getObject(ClientOptions.SHOW_MISSING_GOODS);\\n        case DEFAULT:\\n        default:\\n            return null;\\n        }\\n    }\\n    protected boolean isCorrectTagName(String tagName) {\\n        return getXMLElementTagName().equals(tagName);\\n    }\\n    public static String getXMLElementTagName() {\\n        return \\\"clientOptions\\\";\\n    }\\n}\""
            },
            "m13": {
                "content": "### Analysis of `ClientOptions.java`\n\nThe `ClientOptions.java` file serves as a configuration manager for **client-side settings** in the FreeCol game. It defines various **user preferences and GUI behaviors**, including:\n\n- **Language and display options**\n- **Map and UI settings** (e.g., grid visibility, compass rose)\n- **Animation speeds**\n- **Message grouping and display settings**\n- **Audio controls** (music and sound effects volume)\n- **Autosave configurations**\n- **Colony sorting strategies**\n- **Tutorial and warning notifications**\n\nIt extends `OptionMap`, which suggests it is used to manage a group of related options that can be persisted or modified during gameplay.\n\n---\n\n### Relationship Between `ClientOptions.java` and `InGameInputHandler.java`\n\nAlthough there's no direct code dependency between these two files, their conceptual coupling score of **0.782** indicates they are closely related in terms of **responsibilities and functionality** within the system.\n\nHere\u2019s how they likely interact:\n- `ClientOptions` stores **user-defined preferences** that influence how the game behaves on the client side.\n- `InGameInputHandler` processes **player actions** and may rely on `ClientOptions` to determine how certain actions are handled or displayed (e.g., animation speed, message display settings, autosave behavior).\n- Changes in `ClientOptions` could affect how input events are interpreted or visualized, even if the logic for handling those inputs resides elsewhere.\n\n---\n\n### Entities That May Need Synchronization with `ClientOptions.java`\n\nFrom the co-change data and conceptual coupling analysis, the following entities are most likely to require synchronization when changes are made to `ClientOptions.java`:\n\n| Entity | Reason |\n|-------|--------|\n| **`InGameInputHandler.java`** | High conceptual coupling; likely uses client options to control input response and visualization. |\n| **`OptionMap.java`** | Base class for managing options; directly extended by `ClientOptions`. |\n| **`BooleanOption.java`, `SelectOption.java`, etc.** | Represent individual option types used throughout `ClientOptions`. |\n| **`GameOptions.java`** | Similar structure and purpose; often co-changed; manages global game settings. |\n| **`GUI.java`, `Canvas.java`** | Likely consume `ClientOptions` to configure UI elements. |\n| **`SoundTest.java`, `FreeColClient.java`** | Co-change history suggests shared responsibility for client-side behavior. |\n\n---\n\n### Recommended Next Steps\n\nTo ensure robust change impact analysis, you should:\n1. **Check coupling dependencies** from `ClientOptions.java` to other key files like `GameOptions.java`, `GUI.java`, and `Canvas.java`.\n2. **Examine call graphs** for any of these files to see how they interact at runtime.\n3. If needed, analyze semantic similarity with other high-co-change files like `GameOptions.java`.\n\nWould you like to proceed by checking coupling dependencies for one of these candidates (e.g., `GameOptions.java`) or analyzing the call graph of `ClientOptions.java`?",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m14": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m15": {
                "content": "Title: Diagnosis of starting entity `ClientOptions.java`\n\nChange set: [InGameInputHandler, OptionMap, GameOptions, BooleanOption, SelectOption, IntegerOption, AbstractOption, FreeColClient, GUI, Canvas, SoundTest, MapControls, DisplayGridAction, UnitMoveAnimation, InGameController, Messages, ReportColonyPanel, ReportUnitPanel, ReportTurnPanel, DifficultyDialog, DifficultyOptionMap, ActionManager, MapGeneratorOptions, Server, Connection, ConnectController, MiniMap, LanguageOption, FileOption, OptionGroup, AbstractOptionUI, SelectOptionUI, BooleanOptionUI, IntegerOptionUI, DummyConnection, ResourceManager, SoundPlayer, SoundPlayerThread, PreGameController, StartGamePanel, ServerPlayer, TransportMission, LandGenerator, MapGenerator, MapGeneratorTest, SchoolTest, Colony, Europe, Unit, Player, Goods, Tile, Specification]\n\nDetails:\n- **InGameInputHandler**: High conceptual coupling; likely uses client options to control input handling and visualization.\n- **OptionMap**: Base class for managing options; directly extended by ClientOptions.\n- **GameOptions**: Similar structure and purpose; often co-changed; manages global game settings.\n- **BooleanOption, SelectOption, IntegerOption**: Represent individual option types used throughout ClientOptions.\n- **AbstractOption**: Superclass of all option types; core dependency for option management.\n- **FreeColClient**: Co-change history suggests shared responsibility for client-side behavior.\n- **GUI**: Likely consumes ClientOptions to configure UI elements.\n- **Canvas**: Manages rendering and display; may depend on client options like grid or fog-of-war settings.\n- **SoundTest**: Related to audio configuration; co-changed with ClientOptions.\n- **MapControls**: Influenced by map-related client options (e.g., scroll-on-drag).\n- **DisplayGridAction**: Tied to grid-display settings controlled via ClientOptions.\n- **UnitMoveAnimation**: Affected by animation speed settings in ClientOptions.\n- **InGameController**: Coordinates in-game logic that may be affected by client settings.\n- **Messages**: Message display settings are managed in ClientOptions.\n- **ReportColonyPanel, ReportUnitPanel, ReportTurnPanel**: May be influenced by visibility/display settings.\n- **DifficultyDialog**: Displays difficulty settings; possibly tied to client-side preferences.\n- **DifficultyOptionMap**: Shares structural similarity with ClientOptions; manages difficulty settings.\n- **ActionManager**: May be affected by input/jump-to-unit settings from ClientOptions.\n- **MapGeneratorOptions**: Related to map generation and display settings.\n- **Server**: Co-change history indicates interaction with client settings.\n- **Connection**: Network behavior might be impacted by client-side configurations.\n- **ConnectController**: Manages connection behavior which could be affected by client options.\n- **MiniMap**: Display settings such as smooth rendering and zoom level come from ClientOptions.\n- **LanguageOption**: Used within ClientOptions for language selection.\n- **FileOption**: Manages file-based settings; part of the same configuration framework.\n- **OptionGroup**: Organizes groups of options; used heavily in ClientOptions.\n- **AbstractOptionUI, SelectOptionUI, BooleanOptionUI, IntegerOptionUI**: UI components for editing options.\n- **DummyConnection**: Possibly used in testing scenarios involving client-server interactions.\n- **ResourceManager**: Could be affected by custom stock or resource display settings.\n- **SoundPlayer, SoundPlayerThread**: Audio-related classes that may use volume settings from ClientOptions.\n- **PreGameController**: Might rely on saved client settings during game initialization.\n- **StartGamePanel**: Possibly affected by autosave or UI preference settings.\n- **ServerPlayer**: Could be indirectly affected by client-side player preferences.\n- **TransportMission, LandGenerator, MapGenerator, MapGeneratorTest, SchoolTest**: Co-change data shows historical synchronization with client options.\n- **Colony, Europe, Unit, Player, Goods, Tile**: Core model classes that may be displayed/configured via client options.\n- **Specification**: Central configuration container; used by both ClientOptions and other modules.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}