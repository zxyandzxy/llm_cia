{
    "time": 1749457072.221521,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `freecol`, a well-known Java open source project. The starting entity you need to deal with is Canvas.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_57dc6e4ef0b04c9d96ca17",
                    "function": {
                        "arguments": "{\"entity\": \"Canvas.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"CanvasMouseListener\", \"3\", \"0.018518518518518517\"], [\"FreeColClient\", \"22\", \"0.13580246913580246\"], [\"InGameController\", \"47\", \"0.29012345679012347\"], [\"Messages\", \"2\", \"0.012345679012345678\"], [\"InGameInputHandler\", \"27\", \"0.16666666666666666\"], [\"Monarch\", \"1\", \"0.006172839506172839\"], [\"FreeColDialog\", \"16\", \"0.09876543209876543\"], [\"MonarchPanel\", \"5\", \"0.030864197530864196\"], [\"TilePanel\", \"13\", \"0.08024691358024691\"], [\"Addition\", \"1\", \"0.006172839506172839\"], [\"AIInGameInputHandler\", \"3\", \"0.018518518518518517\"], [\"FreeColLookAndFeel\", \"8\", \"0.04938271604938271\"], [\"DeclarationDialog\", \"1\", \"0.006172839506172839\"], [\"FAFile\", \"1\", \"0.006172839506172839\"], [\"ConnectController\", \"14\", \"0.08641975308641975\"], [\"InputHandler\", \"2\", \"0.012345679012345678\"], [\"GUI\", \"24\", \"0.14814814814814814\"], [\"EuropePanel\", \"13\", \"0.08024691358024691\"], [\"FreeColGameObject\", \"2\", \"0.012345679012345678\"], [\"ModelMessage\", \"3\", \"0.018518518518518517\"], [\"GoodsContainer\", \"1\", \"0.006172839506172839\"], [\"Market\", \"2\", \"0.012345679012345678\"], [\"AIGoods\", \"2\", \"0.012345679012345678\"], [\"FreeColMenuBar\", \"7\", \"0.043209876543209874\"], [\"FreeColImageBorder\", \"1\", \"0.006172839506172839\"], [\"FreeColServer\", \"4\", \"0.024691358024691357\"], [\"OptionMap\", \"1\", \"0.006172839506172839\"], [\"FreeCol\", \"6\", \"0.037037037037037035\"], [\"LoadingSavegameDialog\", \"1\", \"0.006172839506172839\"], [\"MainPanel\", \"4\", \"0.024691358024691357\"], [\"ClientOptions\", \"8\", \"0.04938271604938271\"], [\"StartGamePanel\", \"15\", \"0.09259259259259259\"], [\"MapGeneratorOptionsDialog\", \"6\", \"0.037037037037037035\"], [\"MapGeneratorOptions\", \"1\", \"0.006172839506172839\"], [\"OptionMapUI\", \"2\", \"0.012345679012345678\"], [\"AbstractOption\", \"1\", \"0.006172839506172839\"], [\"IntegerOption\", \"1\", \"0.006172839506172839\"], [\"BooleanOption\", \"1\", \"0.006172839506172839\"], [\"OptionGroupUI\", \"2\", \"0.012345679012345678\"], [\"OptionUpdater\", \"1\", \"0.006172839506172839\"], [\"GameOptionsDialog\", \"4\", \"0.024691358024691357\"], [\"SelectOption\", \"1\", \"0.006172839506172839\"], [\"ClientOptionsDialog\", \"6\", \"0.037037037037037035\"], [\"FreeColActionUI\", \"1\", \"0.006172839506172839\"], [\"PreGameInputHandler\", \"2\", \"0.012345679012345678\"], [\"SelectOptionUI\", \"1\", \"0.006172839506172839\"], [\"IntegerOptionUI\", \"1\", \"0.006172839506172839\"], [\"BooleanOptionUI\", \"1\", \"0.006172839506172839\"], [\"ReportNavalAction\", \"3\", \"0.018518518518518517\"], [\"ActionManager\", \"12\", \"0.07407407407407407\"], [\"ReportMilitaryPanel\", \"3\", \"0.018518518518518517\"], [\"Goods\", \"1\", \"0.006172839506172839\"], [\"UnitLabel\", \"8\", \"0.04938271604938271\"], [\"ReportNavalPanel\", \"3\", \"0.018518518518518517\"], [\"ReportLabourPanel\", \"2\", \"0.012345679012345678\"], [\"ReportColonyPanel\", \"3\", \"0.018518518518518517\"], [\"ReportProductionPanel\", \"1\", \"0.006172839506172839\"], [\"ReportPanel\", \"6\", \"0.037037037037037035\"], [\"ReportReligiousPanel\", \"1\", \"0.006172839506172839\"], [\"ReportColonyAction\", \"3\", \"0.018518518518518517\"], [\"ColonyPanel\", \"15\", \"0.09259259259259259\"], [\"DefaultTransferHandler\", \"5\", \"0.030864197530864196\"], [\"DragListener\", \"8\", \"0.04938271604938271\"], [\"ColopediaPanel\", \"8\", \"0.04938271604938271\"], [\"ReportTurnPanel\", \"6\", \"0.037037037037037035\"], [\"ReportTurnAction\", \"1\", \"0.006172839506172839\"], [\"TradeRouteDialog\", \"4\", \"0.024691358024691357\"], [\"Stop\", \"1\", \"0.006172839506172839\"], [\"TradeRoute\", \"1\", \"0.006172839506172839\"], [\"TradeRouteInputDialog\", \"5\", \"0.030864197530864196\"], [\"TradeRouteAction\", \"4\", \"0.024691358024691357\"], [\"CanvasKeyListener\", \"2\", \"0.012345679012345678\"], [\"MiniMap\", \"2\", \"0.012345679012345678\"], [\"MapControls\", \"6\", \"0.037037037037037035\"], [\"MapControlsAction\", \"1\", \"0.006172839506172839\"], [\"ReportRequirementsAction\", \"3\", \"0.018518518518518517\"], [\"ReportRequirementsPanel\", \"2\", \"0.012345679012345678\"], [\"PreGameController\", \"7\", \"0.043209876543209874\"], [\"MapEditorMenuBar\", \"4\", \"0.024691358024691357\"], [\"InGameMenuBar\", \"8\", \"0.04938271604938271\"], [\"TradeItem\", \"1\", \"0.006172839506172839\"], [\"GoodsTradeItem\", \"1\", \"0.006172839506172839\"], [\"DiplomaticTrade\", \"1\", \"0.006172839506172839\"], [\"ColonyTradeItem\", \"1\", \"0.006172839506172839\"], [\"GoldTradeItem\", \"1\", \"0.006172839506172839\"], [\"StanceTradeItem\", \"1\", \"0.006172839506172839\"], [\"UnitTradeItem\", \"1\", \"0.006172839506172839\"], [\"NegotiationDialog\", \"1\", \"0.006172839506172839\"], [\"ToAmericaPanel\", \"5\", \"0.030864197530864196\"], [\"VictoryPanel\", \"7\", \"0.043209876543209874\"], [\"ReportUnitPanel\", \"1\", \"0.006172839506172839\"], [\"ReportCargoPanel\", \"1\", \"0.006172839506172839\"], [\"ReportCargoAction\", \"3\", \"0.018518518518518517\"], [\"TrainDialog\", \"3\", \"0.018518518518518517\"], [\"RecruitDialog\", \"2\", \"0.012345679012345678\"], [\"ChooseFoundingFatherDialog\", \"2\", \"0.012345679012345678\"], [\"AIPlayer\", \"1\", \"0.006172839506172839\"], [\"FoundingFatherPanel\", \"2\", \"0.012345679012345678\"], [\"ShowSelectFoundingFatherSwingTask\", \"2\", \"0.012345679012345678\"], [\"ReportForeignAffairPanel\", \"3\", \"0.018518518518518517\"], [\"FreeColMenuTest\", \"2\", \"0.012345679012345678\"], [\"WindowedFrame\", \"3\", \"0.018518518518518517\"], [\"ChangeWindowedModeAction\", \"2\", \"0.012345679012345678\"], [\"Specification\", \"1\", \"0.006172839506172839\"], [\"NewPanel\", \"6\", \"0.037037037037037035\"], [\"UserConnectionHandler\", \"2\", \"0.012345679012345678\"], [\"MapEditorController\", \"13\", \"0.08024691358024691\"], [\"PlayersTableModel\", \"3\", \"0.018518518518518517\"], [\"NationCellRenderer\", \"1\", \"0.006172839506172839\"], [\"AdvantageCellRenderer\", \"2\", \"0.012345679012345678\"], [\"PersistentObject\", \"2\", \"0.012345679012345678\"], [\"MarketLabel\", \"1\", \"0.006172839506172839\"], [\"GoodsLabel\", \"1\", \"0.006172839506172839\"], [\"ProductionLabel\", \"2\", \"0.012345679012345678\"], [\"PurchaseDialog\", \"1\", \"0.006172839506172839\"], [\"EmigrationPanel\", \"2\", \"0.012345679012345678\"], [\"MapEditorTransformPanel\", \"3\", \"0.018518518518518517\"], [\"CargoLabel\", \"1\", \"0.006172839506172839\"], [\"ColopediaSkillAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaUnitAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaBuildingAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaGoodsAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaFatherAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaTerrainAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaTreeItem\", \"1\", \"0.006172839506172839\"], [\"ImageLibrary\", \"2\", \"0.012345679012345678\"], [\"ShowInformationMessageSwingTask\", \"4\", \"0.024691358024691357\"], [\"ShowConfirmDialogSwingTask\", \"3\", \"0.018518518518518517\"], [\"ShowModelMessageSwingTask\", \"2\", \"0.012345679012345678\"], [\"ShowMonarchPanelSwingTask\", \"4\", \"0.024691358024691357\"], [\"ServerListPanel\", \"4\", \"0.024691358024691357\"], [\"AboutAction\", \"3\", \"0.018518518518518517\"], [\"AboutPanel\", \"2\", \"0.012345679012345678\"], [\"ShowVictoryPanelSwingTask\", \"3\", \"0.018518518518518517\"], [\"ViewMode\", \"1\", \"0.006172839506172839\"], [\"Region\", \"1\", \"0.006172839506172839\"], [\"ReportExplorationPanel\", \"2\", \"0.012345679012345678\"], [\"ReportExplorationAction\", \"3\", \"0.018518518518518517\"], [\"ChoiceItem\", \"2\", \"0.012345679012345678\"], [\"SimpleCombatModel\", \"1\", \"0.006172839506172839\"], [\"PreCombatDialog\", \"3\", \"0.018518518518518517\"], [\"BuildQueue\", \"1\", \"0.006172839506172839\"], [\"BuildQueuePanel\", \"3\", \"0.018518518518518517\"], [\"BuildQueueTransferHandler\", \"1\", \"0.006172839506172839\"], [\"BuildQueueCellRenderer\", \"1\", \"0.006172839506172839\"], [\"MarketPanel\", \"2\", \"0.012345679012345678\"], [\"HighScore\", \"4\", \"0.024691358024691357\"], [\"ReportHighScoresAction\", \"2\", \"0.012345679012345678\"], [\"RetireAction\", \"1\", \"0.006172839506172839\"], [\"ReportHighScoresPanel\", \"5\", \"0.030864197530864196\"], [\"EventPanel\", \"3\", \"0.018518518518518517\"], [\"FindColonyAction\", \"4\", \"0.024691358024691357\"], [\"FindColonyDialog\", \"3\", \"0.018518518518518517\"], [\"ScaleMapAction\", \"3\", \"0.018518518518518517\"], [\"NewEmptyMapAction\", \"3\", \"0.018518518518518517\"], [\"DetermineHighSeasAction\", \"1\", \"0.006172839506172839\"], [\"ColonyTile\", \"1\", \"0.006172839506172839\"], [\"SelectAmountDialog\", \"2\", \"0.012345679012345678\"], [\"WarehouseGoodsPanel\", \"1\", \"0.006172839506172839\"], [\"WarehouseDialog\", \"1\", \"0.006172839506172839\"], [\"GoodsPanel\", \"1\", \"0.006172839506172839\"], [\"DebugMenu\", \"8\", \"0.04938271604938271\"], [\"Video\", \"1\", \"0.006172839506172839\"], [\"ResourceManager\", \"1\", \"0.006172839506172839\"], [\"VideoComponent\", \"2\", \"0.012345679012345678\"], [\"ResourceFactory\", \"1\", \"0.006172839506172839\"], [\"VideoResource\", \"1\", \"0.006172839506172839\"], [\"InfoPanel\", \"3\", \"0.018518518518518517\"], [\"FreeColPanel\", \"6\", \"0.037037037037037035\"], [\"ToEuropePanel\", \"1\", \"0.006172839506172839\"], [\"TileInfoPanel\", \"1\", \"0.006172839506172839\"], [\"EndTurnPanel\", \"3\", \"0.018518518518518517\"], [\"DumpCargoDialog\", \"1\", \"0.006172839506172839\"], [\"CanvasMapEditorMouseListener\", \"5\", \"0.030864197530864196\"], [\"FullScreenFrame\", \"2\", \"0.012345679012345678\"], [\"UserInputHandler\", \"2\", \"0.012345679012345678\"], [\"UpdateMenuBarSwingTask\", \"2\", \"0.012345679012345678\"], [\"Colony\", \"1\", \"0.006172839506172839\"], [\"SaveAndQuitAction\", \"1\", \"0.006172839506172839\"], [\"UnloadAction\", \"1\", \"0.006172839506172839\"], [\"EditSettlementDialog\", \"1\", \"0.006172839506172839\"], [\"TilePopup\", \"10\", \"0.06172839506172839\"], [\"FindSettlementDialog\", \"2\", \"0.012345679012345678\"], [\"UnitMoveAnimationCanvasSwingTask\", \"4\", \"0.024691358024691357\"], [\"ResourceTransform\", \"1\", \"0.006172839506172839\"], [\"SerializationTest\", \"1\", \"0.006172839506172839\"], [\"ShowMapGeneratorOptionsAction\", \"3\", \"0.018518518518518517\"], [\"ChatPanel\", \"2\", \"0.012345679012345678\"], [\"FreeColListUI\", \"1\", \"0.006172839506172839\"], [\"FreeColComboBoxUI\", \"1\", \"0.006172839506172839\"], [\"FreeColTableHeaderUI\", \"1\", \"0.006172839506172839\"], [\"FreeColButtonUI\", \"1\", \"0.006172839506172839\"], [\"FreeColTableUI\", \"1\", \"0.006172839506172839\"], [\"FreeColLabelUI\", \"1\", \"0.006172839506172839\"], [\"FreeColScrollPaneUI\", \"1\", \"0.006172839506172839\"], [\"FreeColComboBoxRenderer\", \"1\", \"0.006172839506172839\"], [\"ReceivingThread\", \"1\", \"0.006172839506172839\"], [\"Connection\", \"1\", \"0.006172839506172839\"], [\"Server\", \"1\", \"0.006172839506172839\"], [\"MiniMapZoomInAction\", \"1\", \"0.006172839506172839\"], [\"MiniMapZoomOutAction\", \"1\", \"0.006172839506172839\"], [\"DifficultyDialog\", \"1\", \"0.006172839506172839\"], [\"OptionsDialog\", \"2\", \"0.012345679012345678\"], [\"ShowGameOptionsAction\", \"2\", \"0.012345679012345678\"], [\"CanvasMouseMotionListener\", \"1\", \"0.006172839506172839\"], [\"ServerPlayer\", \"1\", \"0.006172839506172839\"], [\"TilePopupAction\", \"1\", \"0.006172839506172839\"], [\"GotoTileAction\", \"1\", \"0.006172839506172839\"], [\"ChangeSet\", \"1\", \"0.006172839506172839\"], [\"SpyChange\", \"1\", \"0.006172839506172839\"], [\"SpyColonySwingTask\", \"1\", \"0.006172839506172839\"], [\"UnitButton\", \"1\", \"0.006172839506172839\"], [\"ServerAPI\", \"2\", \"0.012345679012345678\"], [\"WindowedFrameListener\", \"1\", \"0.006172839506172839\"], [\"QuitAction\", \"1\", \"0.006172839506172839\"], [\"UnitAttackAnimationCanvasSwingTask\", \"3\", \"0.018518518518518517\"], [\"UnitImageAnimation\", \"2\", \"0.012345679012345678\"], [\"EndTurnDialog\", \"1\", \"0.006172839506172839\"], [\"UnitAttackAnimation\", \"2\", \"0.012345679012345678\"], [\"UnitMoveAnimation\", \"2\", \"0.012345679012345678\"], [\"WorkProductionPanel\", \"1\", \"0.006172839506172839\"], [\"MapViewer\", \"3\", \"0.018518518518518517\"], [\"ShowErrorMessageSwingTask\", \"1\", \"0.006172839506172839\"], [\"ShowInputDialogSwingTask\", \"1\", \"0.006172839506172839\"], [\"NoResultCanvasSwingTask\", \"1\", \"0.006172839506172839\"], [\"Animations\", \"1\", \"0.006172839506172839\"], [\"StatusPanel\", \"1\", \"0.006172839506172839\"], [\"StatisticsPanel\", \"1\", \"0.006172839506172839\"], [\"ReportLabourAction\", \"2\", \"0.012345679012345678\"], [\"ReportIndianAction\", \"2\", \"0.012345679012345678\"], [\"ReportIndianPanel\", \"1\", \"0.006172839506172839\"], [\"ReportForeignAction\", \"2\", \"0.012345679012345678\"], [\"CargoPanel\", \"1\", \"0.006172839506172839\"], [\"IndianSettlementPanel\", \"1\", \"0.006172839506172839\"], [\"ColonyCargoPanel\", \"1\", \"0.006172839506172839\"], [\"EuropeCargoPanel\", \"1\", \"0.006172839506172839\"], [\"DisplayTileTextAction\", \"1\", \"0.006172839506172839\"], [\"RefreshCanvasSwingTask\", \"1\", \"0.006172839506172839\"], [\"DisplayBordersAction\", \"1\", \"0.006172839506172839\"], [\"DisplayGridAction\", \"1\", \"0.006172839506172839\"], [\"PlayersTable\", \"3\", \"0.018518518518518517\"], [\"BuildQueueMouseAdapter\", \"1\", \"0.006172839506172839\"], [\"ColopediaAction\", \"1\", \"0.006172839506172839\"], [\"ConstructionPanel\", \"2\", \"0.012345679012345678\"], [\"BuildingsPanel\", \"1\", \"0.006172839506172839\"], [\"ReportContinentalCongressAction\", \"1\", \"0.006172839506172839\"], [\"ReportEducationAction\", \"1\", \"0.006172839506172839\"], [\"ShowDifficultyAction\", \"1\", \"0.006172839506172839\"], [\"ReportHistoryAction\", \"1\", \"0.006172839506172839\"], [\"ReportTradeAction\", \"1\", \"0.006172839506172839\"], [\"ReportMilitaryAction\", \"1\", \"0.006172839506172839\"], [\"ReportReligionAction\", \"1\", \"0.006172839506172839\"], [\"ReportProductionAction\", \"1\", \"0.006172839506172839\"], [\"MoveAction\", \"1\", \"0.006172839506172839\"]]"
        },
        {
            "content": "Based on the co-change relationships retrieved, we can identify entities that have a significant history of being modified together with `Canvas.java`. To prioritize the list, we'll focus on entities with higher confidence values, as they indicate a stronger correlation.\n\n### Top Co-Changed Entities with High Confidence:\n1. **InGameController** (Support: 47, Confidence: ~29.01%)\n2. **GUI** (Support: 24, Confidence: ~14.81%)\n3. **FreeColClient** (Support: 22, Confidence: ~13.58%)\n4. **InGameInputHandler** (Support: 27, Confidence: ~16.67%)\n5. **ActionManager** (Support: 12, Confidence: ~7.41%)\n\n### Suggested Approach:\nLet's analyze one of these top entities to determine its relationship with `Canvas.java`. Starting with `InGameController`, which has the highest confidence value, would provide insight into why it is frequently changed together with `Canvas.java`.\n\nI will retrieve the coupling dependencies between `Canvas.java` and `InGameController` to understand their direct or indirect relationship.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_cb0b1074dcb143fe89d8d7",
                    "function": {
                        "arguments": "{\"entity1\": \"Canvas.java\", \"entity2\": \"InGameController\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "The result indicates that there are no direct coupling dependencies between `Canvas.java` and `InGameController`. This means their co-change relationship is likely due to indirect dependencies or shared functional responsibilities rather than direct code-level interactions.\n\n### Next Steps:\nTo better understand the connection, we can explore what roles these entities play in the system by analyzing their source code. Let's start by retrieving the source code for `Canvas.java` and `InGameController` to identify their functionalities and potential indirect relationships.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_409c6376eb6f4d158abeff",
                    "function": {
                        "arguments": "{\"entity\": \"Canvas.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package net.sf.freecol.client.gui;\\nimport java.awt.Component;\\nimport java.awt.Dimension;\\nimport java.awt.Graphics;\\nimport java.awt.Graphics2D;\\nimport java.awt.Image;\\nimport java.awt.Point;\\nimport java.awt.Rectangle;\\nimport java.awt.event.KeyListener;\\nimport java.awt.event.MouseAdapter;\\nimport java.awt.event.MouseEvent;\\nimport java.awt.event.MouseListener;\\nimport java.awt.event.MouseMotionListener;\\nimport java.io.File;\\nimport java.util.ArrayList;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.MissingResourceException;\\nimport java.util.logging.Logger;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.JDesktopPane;\\nimport javax.swing.JInternalFrame;\\nimport javax.swing.JLayeredPane;\\nimport javax.swing.JMenuBar;\\nimport javax.swing.JMenuItem;\\nimport javax.swing.JPopupMenu;\\nimport javax.swing.JScrollPane;\\nimport javax.swing.ScrollPaneConstants;\\nimport javax.swing.SwingUtilities;\\nimport javax.swing.filechooser.FileFilter;\\nimport javax.swing.plaf.basic.BasicInternalFrameUI;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.client.FreeColClient;\\nimport net.sf.freecol.client.gui.action.MapControlsAction;\\nimport net.sf.freecol.client.gui.i18n.Messages;\\nimport net.sf.freecol.client.gui.panel.BuildQueuePanel;\\nimport net.sf.freecol.client.gui.panel.ChatPanel;\\nimport net.sf.freecol.client.gui.panel.ChoiceItem;\\nimport net.sf.freecol.client.gui.panel.ChooseFoundingFatherDialog;\\nimport net.sf.freecol.client.gui.panel.ClientOptionsDialog;\\nimport net.sf.freecol.client.gui.panel.ColonyPanel;\\nimport net.sf.freecol.client.gui.panel.ColopediaPanel;\\nimport net.sf.freecol.client.gui.panel.DeclarationDialog;\\nimport net.sf.freecol.client.gui.panel.DumpCargoDialog;\\nimport net.sf.freecol.client.gui.panel.EmigrationPanel;\\nimport net.sf.freecol.client.gui.panel.ErrorPanel;\\nimport net.sf.freecol.client.gui.panel.EuropePanel;\\nimport net.sf.freecol.client.gui.panel.EventPanel;\\nimport net.sf.freecol.client.gui.panel.FreeColDialog;\\nimport net.sf.freecol.client.gui.panel.FreeColImageBorder;\\nimport net.sf.freecol.client.gui.panel.FreeColPanel;\\nimport net.sf.freecol.client.gui.panel.GameOptionsDialog;\\nimport net.sf.freecol.client.gui.panel.IndianSettlementPanel;\\nimport net.sf.freecol.client.gui.panel.InformationDialog;\\nimport net.sf.freecol.client.gui.panel.LoadingSavegameDialog;\\nimport net.sf.freecol.client.gui.panel.MainPanel;\\nimport net.sf.freecol.client.gui.panel.MapControls;\\nimport net.sf.freecol.client.gui.panel.MapGeneratorOptionsDialog;\\nimport net.sf.freecol.client.gui.panel.MonarchPanel;\\nimport net.sf.freecol.client.gui.panel.NegotiationDialog;\\nimport net.sf.freecol.client.gui.panel.NewPanel;\\nimport net.sf.freecol.client.gui.panel.PreCombatDialog;\\nimport net.sf.freecol.client.gui.panel.RecruitDialog;\\nimport net.sf.freecol.client.gui.panel.ReportCargoPanel;\\nimport net.sf.freecol.client.gui.panel.ReportColonyPanel;\\nimport net.sf.freecol.client.gui.panel.ReportContinentalCongressPanel;\\nimport net.sf.freecol.client.gui.panel.ReportExplorationPanel;\\nimport net.sf.freecol.client.gui.panel.ReportForeignAffairPanel;\\nimport net.sf.freecol.client.gui.panel.ReportHighScoresPanel;\\nimport net.sf.freecol.client.gui.panel.ReportHistoryPanel;\\nimport net.sf.freecol.client.gui.panel.ReportIndianPanel;\\nimport net.sf.freecol.client.gui.panel.ReportLabourPanel;\\nimport net.sf.freecol.client.gui.panel.ReportMilitaryPanel;\\nimport net.sf.freecol.client.gui.panel.ReportNavalPanel;\\nimport net.sf.freecol.client.gui.panel.ReportPanel;\\nimport net.sf.freecol.client.gui.panel.ReportReligiousPanel;\\nimport net.sf.freecol.client.gui.panel.ReportRequirementsPanel;\\nimport net.sf.freecol.client.gui.panel.ReportTradePanel;\\nimport net.sf.freecol.client.gui.panel.ReportTurnPanel;\\nimport net.sf.freecol.client.gui.panel.RiverStylePanel;\\nimport net.sf.freecol.client.gui.panel.SelectAmountDialog;\\nimport net.sf.freecol.client.gui.panel.ServerListPanel;\\nimport net.sf.freecol.client.gui.panel.StartGamePanel;\\nimport net.sf.freecol.client.gui.panel.StatusPanel;\\nimport net.sf.freecol.client.gui.panel.TilePanel;\\nimport net.sf.freecol.client.gui.panel.TradeRouteDialog;\\nimport net.sf.freecol.client.gui.panel.TradeRouteInputDialog;\\nimport net.sf.freecol.client.gui.panel.TrainDialog;\\nimport net.sf.freecol.client.gui.panel.WarehouseDialog;\\nimport net.sf.freecol.common.ServerInfo;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.DiplomaticTrade;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.FoundingFather;\\nimport net.sf.freecol.common.model.FreeColGameObject;\\nimport net.sf.freecol.common.model.FreeColGameObjectType;\\nimport net.sf.freecol.common.model.FreeColObject;\\nimport net.sf.freecol.common.model.Game;\\nimport net.sf.freecol.common.model.Goods;\\nimport net.sf.freecol.common.model.GoodsType;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.LostCityRumour;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.ModelMessage;\\nimport net.sf.freecol.common.model.Monarch.MonarchAction;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.TradeRoute;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.WorkLocation;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.resources.ResourceManager;\\nimport net.sf.freecol.server.generator.MapGeneratorOptions;\\npublic final class Canvas extends JDesktopPane {\\n    private static final Logger logger = Logger.getLogger(Canvas.class.getName());\\n    public static enum ScoutAction {\\n        CANCEL,\\n        INDIAN_SETTLEMENT_SPEAK,\\n        INDIAN_SETTLEMENT_TRIBUTE,\\n        INDIAN_SETTLEMENT_ATTACK,\\n        FOREIGN_COLONY_NEGOTIATE,\\n        FOREIGN_COLONY_SPY,\\n        FOREIGN_COLONY_ATTACK\\n    }\\n    public static enum MissionaryAction {\\n        CANCEL,\\n        ESTABLISH_MISSION,\\n        DENOUNCE_HERESY,\\n        INCITE_INDIANS\\n    }\\n    public static enum BoycottAction {\\n        CANCEL,\\n        PAY_ARREARS,\\n        DUMP_CARGO\\n    }\\n    private static final Integer MAIN_LAYER = JLayeredPane.DEFAULT_LAYER;\\n    private static final Integer STATUS_LAYER = JLayeredPane.POPUP_LAYER;\\n    private static final int EXIT = 0, RECRUIT = 1, PURCHASE = 2, TRAIN = 3, UNLOAD = 4;\\n    private FreeColDialog europeOpenDialog = null;\\n    private final FreeColClient freeColClient;\\n    private final MainPanel mainPanel;\\n    private final StartGamePanel startGamePanel;\\n    private final EuropePanel europePanel;\\n    private final StatusPanel statusPanel;\\n    private final ChatPanel chatPanel;\\n    private final GUI gui;\\n    private final ServerListPanel serverListPanel;\\n    private final ClientOptionsDialog clientOptionsDialog;\\n    private final LoadingSavegameDialog loadingSavegameDialog;\\n    private final GUI colonyTileGUI;\\n    private JMenuBar jMenuBar;\\n    private boolean clientOptionsDialogShowing = false;\\n    private MapControls mapControls;\\n    private Dimension oldSize = null;\\n    private Dimension initialSize = null;\\n    public Canvas(FreeColClient client, Dimension size, GUI gui) {\\n        this.freeColClient = client;\\n        this.gui = gui;\\n        colonyTileGUI = new GUI(client, size, freeColClient.getImageLibrary());\\n        initialSize = size;\\n        setLocation(0, 0);\\n        setSize(size);\\n        setDoubleBuffered(true);\\n        setOpaque(false);\\n        setLayout(null);\\n        mainPanel = new MainPanel(this, freeColClient);\\n        startGamePanel = new StartGamePanel(this, freeColClient);\\n        serverListPanel = new ServerListPanel(this, freeColClient, freeColClient.getConnectController());\\n        europePanel = new EuropePanel(this, freeColClient, freeColClient.getInGameController());\\n        statusPanel = new StatusPanel(this);\\n        chatPanel = new ChatPanel(this, freeColClient);\\n        clientOptionsDialog = new ClientOptionsDialog(this, freeColClient);\\n        loadingSavegameDialog = new LoadingSavegameDialog(this, freeColClient);\\n        setFocusable(true);\\n        setFocusTraversalKeysEnabled(false);\\n                Runtime runtime = Runtime.getRuntime();\\n        runtime.addShutdownHook(new Thread(FreeCol.CLIENT_THREAD+\\\"Quitting Game\\\") {\\n            @Override\\n            public void run() {\\n                freeColClient.getConnectController().quitGame(true);\\n            }\\n        });\\n        logger.info(\\\"Canvas created.\\\");\\n    }\\n    @Override\\n    public Dimension getMinimumSize() {\\n        return new Dimension(640, 480);\\n    }\\n    @Override\\n    public Dimension getPreferredSize() {\\n        return initialSize;\\n    }\\n    public GUI getColonyTileGUI() {\\n        return colonyTileGUI;\\n    }\\n    public ClientOptionsDialog getClientOptionsDialog() {\\n        return clientOptionsDialog;\\n    }\\n    public void setJMenuBar(JMenuBar mb) {\\n        if (jMenuBar != null) {\\n            remove(jMenuBar);\\n        }\\n        mb.setLocation(0, 0);\\n        mb.setSize(getWidth(), (int) mb.getPreferredSize().getHeight());\\n        add(mb);\\n        jMenuBar = mb;\\n    }\\n    public JMenuBar getJMenuBar() {\\n        return jMenuBar;\\n    }\\n    public void updateGoldLabel() {\\n        getJMenuBar().repaint();\\n    }\\n    public void updateSizes() {\\n        if (oldSize == null) {\\n            oldSize = getSize();\\n        }\\n        if (oldSize.width != getWidth() || oldSize.height != getHeight()) {\\n            if (jMenuBar != null) {\\n                jMenuBar.setSize(getWidth(), (int) jMenuBar.getPreferredSize().getHeight());\\n            }\\n            MapControlsAction mca = (MapControlsAction) freeColClient.getActionManager().getFreeColAction(MapControlsAction.id);\\n            MapControls mc = mca.getMapControls();\\n            if (mc != null && mc.isShowing()) {\\n                mc.removeFromComponent(this);\\n                mc.addToComponent(this);\\n                mapControls = mc;\\n            }\\n            if (europePanel != null) {\\n                JInternalFrame f = getInternalFrame(europePanel);\\n                if (f != null) {\\n                    f.setSize(getWidth(), getHeight() - getMenuBarHeight());\\n                    f.setLocation(0, getMenuBarHeight());\\n                }\\n            }\\n            gui.setSize(getSize());\\n            gui.forceReposition();\\n            oldSize = getSize();\\n        }\\n    }\\n    @Override\\n    public void paintComponent(Graphics g) {\\n        updateSizes();\\n        Graphics2D g2d = (Graphics2D) g;\\n        gui.display(g2d);\\n    }\\n    public int getMenuBarHeight() {\\n        if (jMenuBar == null) {\\n            return 0;\\n        } else if (jMenuBar instanceof FreeColMenuBar) {\\n            return ((FreeColMenuBar) jMenuBar).getOpaqueHeight();\\n        } else {\\n            return jMenuBar.getHeight();\\n        }\\n    }\\n    public void showStartGamePanel(Game game, Player player, boolean singlePlayerMode, int players,\\n                                   int advantages, boolean additionalNations) {\\n        closeMenus();\\n        if (game != null && player != null) {\\n            startGamePanel.initialize(singlePlayerMode, additionalNations, advantages);\\n            addAsFrame(startGamePanel);\\n            startGamePanel.requestFocus();\\n        } else {\\n            logger.warning(\\\"Tried to open 'StartGamePanel' without having 'game' and/or 'player' set.\\\");\\n        }\\n    }\\n    public void showServerListPanel(String username, ArrayList<ServerInfo> serverList) {\\n        closeMenus();\\n        serverListPanel.initialize(username, serverList);\\n        addAsFrame(serverListPanel);\\n        serverListPanel.requestFocus();\\n    }\\n    public boolean showWarehouseDialog(Colony colony) {\\n        WarehouseDialog warehouseDialog = new WarehouseDialog(this);\\n        warehouseDialog.initialize(colony);\\n                addAsFrame(warehouseDialog);\\n        warehouseDialog.requestFocus();\\n        boolean response = warehouseDialog.getResponseBoolean();\\n        remove(warehouseDialog);\\n        return response;\\n    }\\n    public DiplomaticTrade showNegotiationDialog(Unit unit, Settlement settlement, DiplomaticTrade agreement) {\\n        NegotiationDialog negotiationDialog = new NegotiationDialog(this, unit, settlement, agreement);\\n        negotiationDialog.initialize();\\n                addAsFrame(negotiationDialog);\\n        DiplomaticTrade offer = (DiplomaticTrade) negotiationDialog.getResponse();\\n        remove(negotiationDialog);\\n        return offer;\\n    }\\n    public void showPanel(FreeColPanel panel) {\\n        closeMenus();\\n        addAsFrame(panel);\\n        panel.requestFocus();\\n    }\\n    public void showPanel(FreeColPanel panel, boolean centered) {\\n        closeMenus();\\n        addAsFrame(panel, false, centered);\\n        panel.requestFocus();\\n    }\\n    public void showSubPanel(FreeColPanel panel) {\\n        addAsFrame(panel);\\n        panel.requestFocus();\\n    }\\n        public void showChatPanel() {\\n    \\t    \\tif(freeColClient.isSingleplayer()){\\n    \\t\\treturn;\\n    \\t}\\n        closeMenus();\\n        addAsFrame(chatPanel);\\n        chatPanel.requestFocus();\\n    }\\n    public int showSelectAmountDialog(GoodsType goodsType, int available, boolean needToPay) {\\n        SelectAmountDialog dialog = new SelectAmountDialog(this, goodsType, available, needToPay);\\n        dialog.initialize();\\n        addAsFrame(dialog);\\n        dialog.requestFocus();\\n        int amount = dialog.getResponseInt();\\n        remove(dialog);\\n        return amount;\\n    }\\n    public void showModelMessages(ModelMessage... modelMessages) {\\n        if (modelMessages.length == 1) {\\n            String id = modelMessages[0].getId();\\n            if (\\\"EventPanel.MEETING_NATIVES\\\".equals(id)) {\\n                showEventDialog(EventPanel.MEETING_NATIVES);\\n                return;\\n            } else if (\\\"EventPanel.MEETING_AZTEC\\\".equals(id)) {\\n                showEventDialog(EventPanel.MEETING_AZTEC);\\n                return;\\n            }\\n        }\\n        String okText = \\\"ok\\\";\\n        String cancelText = \\\"display\\\";\\n        String[] messageText = new String[modelMessages.length];\\n        ImageIcon[] messageIcon = new ImageIcon[modelMessages.length];\\n        try {\\n            okText = Messages.message(okText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + okText + \\\".\\\");\\n        }\\n        try {\\n            cancelText = Messages.message(cancelText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + cancelText + \\\".\\\");\\n        }\\n        for (int i = 0; i < modelMessages.length; i++) {\\n            try {\\n                messageText[i] = Messages.message(modelMessages[i].getId(), modelMessages[i].getData());\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + modelMessages[i].getId() + \\\".\\\");\\n            }\\n            messageIcon[i] = getImageIcon(modelMessages[i].getDisplay(), false);\\n        }\\n                FreeColGameObject source = modelMessages[0].getSource();\\n        if ((source instanceof Europe && !europePanel.isShowing())\\n                || (source instanceof Colony || source instanceof WorkLocation)) {\\n            FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(messageText, messageIcon, okText,\\n                    cancelText);\\n            addAsFrame(confirmDialog);\\n            confirmDialog.requestFocus();\\n            if (!confirmDialog.getResponseBoolean()) {\\n                remove(confirmDialog);\\n                if (source instanceof Europe) {\\n                    showEuropePanel();\\n                } else if (source instanceof Colony) {\\n                    showColonyPanel((Colony) source);\\n                } else if (source instanceof WorkLocation) {\\n                    showColonyPanel(((WorkLocation) source).getColony());\\n                }\\n            } else {\\n                remove(confirmDialog);\\n                if (!isShowingSubPanel()) {\\n                    freeColClient.getInGameController().nextModelMessage();\\n                }\\n            }\\n        } else {\\n            InformationDialog informationDialog = new InformationDialog(messageText, messageIcon);\\n            addAsFrame(informationDialog);\\n            informationDialog.requestFocus();\\n            informationDialog.getResponse();\\n            remove(informationDialog);\\n            if (!isShowingSubPanel()) {\\n                freeColClient.getInGameController().nextModelMessage();\\n            }\\n        }\\n    }\\n    public ImageIcon getImageIcon(Object display, boolean small) {\\n        ImageLibrary imageLibrary = getGUI().getImageLibrary();\\n        Image image = null;\\n        if (display == null) {\\n            return new ImageIcon();\\n        } else if (display instanceof GoodsType) {\\n            GoodsType goodsType = (GoodsType) display;\\n            try {\\n                image = imageLibrary.getGoodsImage(goodsType);\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for goods \\\" + goodsType.getName());\\n            }\\n        } else if (display instanceof Unit) {\\n            Unit unit = (Unit) display;\\n            try {\\n                image = imageLibrary.getUnitImageIcon(unit.getType()).getImage();\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for unit \\\" + unit.getName());\\n            }\\n        } else if (display instanceof Settlement) {\\n            Settlement settlement = (Settlement) display;\\n            try {\\n                image = imageLibrary.getSettlementImage(settlement);\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for settlement \\\" + settlement);\\n            }\\n        } else if (display instanceof LostCityRumour) {\\n            try {\\n                image = imageLibrary.getMiscImage(ImageLibrary.LOST_CITY_RUMOUR);\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for lost city rumour\\\");\\n            }\\n        } else if (display instanceof Player) {\\n            image = imageLibrary.getCoatOfArmsImage(((Player) display).getNation());\\n        } \\n        if (image != null && small) {\\n            return new ImageIcon(image.getScaledInstance((image.getWidth(null) / 3) * 2,\\n                                                         (image.getHeight(null) / 3) *2,\\n                                                         Image.SCALE_SMOOTH));\\n        } else {\\n            return (image != null) ? new ImageIcon(image) : null;\\n        }\\n    }\\n        public void showDeclarationDialog() {\\n        DeclarationDialog declarationDialog = new DeclarationDialog(this, freeColClient);\\n        declarationDialog.initialize();\\n        addAsFrame(declarationDialog);\\n        declarationDialog.requestFocus();\\n        declarationDialog.getResponseBoolean();\\n        remove(declarationDialog);\\n    }\\n    public Object showFreeColDialog(FreeColDialog freeColDialog) {\\n        addAsFrame(freeColDialog);\\n        freeColDialog.requestFocus();\\n        Object response = freeColDialog.getResponse();\\n        remove(freeColDialog);\\n        return response;\\n    }\\n    public boolean showConfirmDialog(String text, String okText, String cancelText, String... replace) {\\n        try {\\n            text = Messages.message(text, replace);\\n            okText = Messages.message(okText);\\n            cancelText = Messages.message(cancelText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + text + \\\", \\\" + okText + \\\" or \\\" + cancelText + \\\".\\\");\\n        }\\n        FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(text, okText, cancelText);\\n        addAsFrame(confirmDialog);\\n        confirmDialog.requestFocus();\\n        boolean response = confirmDialog.getResponseBoolean();\\n        remove(confirmDialog);\\n        return response;\\n    }\\n    public boolean showPreCombatDialog(Unit attacker, Unit defender, Settlement settlement) {\\n        FreeColDialog preCombatDialog = new PreCombatDialog(attacker, defender, settlement, this);\\n        addAsFrame(preCombatDialog);\\n        preCombatDialog.requestFocus();\\n        boolean response = preCombatDialog.getResponseBoolean();\\n        remove(preCombatDialog);\\n        return response;\\n    }\\n    public boolean showConfirmDialog(ModelMessage[] messages, String okText, String cancelText) {\\n        try {\\n            okText = Messages.message(okText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + okText + \\\".\\\");\\n        }\\n        try {\\n            cancelText = Messages.message(cancelText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + cancelText + \\\".\\\");\\n        }\\n        String[] texts = new String[messages.length];\\n        ImageIcon[] images = new ImageIcon[messages.length];\\n        for (int i = 0; i < messages.length; i++) {\\n            String id = messages[i].getId();\\n            try {\\n                texts[i] = Messages.message(id, messages[i].getData());\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + id + \\\".\\\");\\n            }\\n            images[i] = getImageIcon(messages[i].getDisplay(), false);\\n        }\\n        FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(texts, images, okText, cancelText);\\n        addAsFrame(confirmDialog);\\n        confirmDialog.requestFocus();\\n        boolean response = confirmDialog.getResponseBoolean();\\n        remove(confirmDialog);\\n        return response;\\n    }\\n    public boolean isClientOptionsDialogShowing() {\\n        return clientOptionsDialogShowing;\\n    }\\n    public boolean isMapboardActionsEnabled() {\\n        return !isShowingSubPanel();\\n    }\\n    public boolean isShowingSubPanel() {\\n        Component[] components = getComponents();\\n        for (Component c : components) {\\n            if (c instanceof ToolBoxFrame) {\\n                continue;\\n            }\\n            if (c instanceof JInternalFrame) {\\n                return true;\\n            } else if (c instanceof JInternalFrame.JDesktopIcon) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    public boolean showGameOptionsDialog(boolean editable) {\\n        GameOptionsDialog gameOptionsDialog = new GameOptionsDialog(this, freeColClient);\\n        gameOptionsDialog.initialize(editable);\\n        addAsFrame(gameOptionsDialog);\\n        gameOptionsDialog.requestFocus();\\n        boolean r = gameOptionsDialog.getResponseBoolean();\\n        remove(gameOptionsDialog);\\n        return r;\\n    }\\n    public LoadingSavegameDialog getLoadingSavegameDialog() {\\n        return loadingSavegameDialog;\\n    }\\n    public boolean showLoadingSavegameDialog(boolean publicServer, boolean singleplayer) {\\n        loadingSavegameDialog.initialize(publicServer, singleplayer);\\n        addAsFrame(loadingSavegameDialog);\\n        loadingSavegameDialog.requestFocus();\\n        boolean r = loadingSavegameDialog.getResponseBoolean();\\n        remove(loadingSavegameDialog);\\n        return r;\\n    }\\n    public boolean showClientOptionsDialog() {\\n        clientOptionsDialog.initialize();\\n        clientOptionsDialogShowing = true;\\n        addAsFrame(clientOptionsDialog);\\n        clientOptionsDialog.requestFocus();\\n        boolean r = clientOptionsDialog.getResponseBoolean();\\n        remove(clientOptionsDialog);\\n        clientOptionsDialogShowing = false;\\n        freeColClient.getActionManager().update();\\n        return r;\\n    }\\n    public boolean showMapGeneratorOptionsDialog(boolean editable) {\\n        final MapGeneratorOptions mgo = freeColClient.getPreGameController().getMapGeneratorOptions();\\n        return showMapGeneratorOptionsDialog(editable, mgo);\\n    }\\n    public boolean showMapGeneratorOptionsDialog(boolean editable, MapGeneratorOptions mgo) {\\n        MapGeneratorOptionsDialog mapGeneratorOptionsDialog = new MapGeneratorOptionsDialog(this, freeColClient);\\n        mapGeneratorOptionsDialog.initialize(editable, mgo);\\n        addAsFrame(mapGeneratorOptionsDialog);\\n        mapGeneratorOptionsDialog.requestFocus();\\n        boolean r = mapGeneratorOptionsDialog.getResponseBoolean();\\n        remove(mapGeneratorOptionsDialog);\\n        return r;\\n    }\\n    public File showLoadDialog(File directory) {\\n        return showLoadDialog(directory, new FileFilter[] { FreeColDialog.getFSGFileFilter() });\\n    }\\n    public File showLoadDialog(File directory, FileFilter[] fileFilters) {\\n        FreeColDialog loadDialog = FreeColDialog.createLoadDialog(directory, fileFilters);\\n        addAsFrame(loadDialog);\\n        loadDialog.requestFocus();\\n        File response = (File) loadDialog.getResponse();\\n        while (response != null && !response.isFile()) {\\n            errorMessage(\\\"noSuchFile\\\");\\n            response = (File) loadDialog.getResponse();\\n        }\\n        remove(loadDialog);\\n        return response;\\n    }\\n    public File showSaveDialog(File directory, String defaultName) {\\n        return showSaveDialog(directory, \\\".fsg\\\", new FileFilter[] { FreeColDialog.getFSGFileFilter() }, defaultName);\\n    }\\n    public File showSaveDialog(File directory, String standardName, FileFilter[] fileFilters, String defaultName) {\\n        FreeColDialog saveDialog = FreeColDialog.createSaveDialog(directory, standardName, fileFilters, defaultName);\\n        addAsFrame(saveDialog);\\n        saveDialog.requestFocus();\\n        File response = (File) saveDialog.getResponse();\\n        remove(saveDialog);\\n        return response;\\n    }\\n    public BoycottAction showBoycottedGoodsDialog(Goods goods, Europe europe) {\\n        int arrears = europe.getOwner().getArrears(goods.getType());\\n        FreeColDialog boycottedGoodsDialog = FreeColDialog\\n            .createChoiceDialog(Messages.message(\\\"boycottedGoods.text\\\", \\n                                                 \\\"%goods%\\\", goods.getName(), \\n                                                 \\\"%europe%\\\", europe.getName(),\\n                                                 \\\"%amount%\\\", String.valueOf(arrears)),\\n                                null,\\n                                new ChoiceItem(Messages.message(\\\"boycottedGoods.payArrears\\\"),\\n                                               BoycottAction.PAY_ARREARS),\\n                                new ChoiceItem(Messages.message(\\\"boycottedGoods.dumpGoods\\\"),\\n                                               BoycottAction.DUMP_CARGO),\\n                                new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                               BoycottAction.CANCEL));\\n        addAsFrame(boycottedGoodsDialog);\\n        ChoiceItem response = (ChoiceItem) boycottedGoodsDialog.getResponse();\\n        remove(boycottedGoodsDialog);\\n        return (BoycottAction) response.getObject();\\n    }\\n    public ScoutAction showScoutIndianSettlementDialog(IndianSettlement settlement) {\\n        StringBuilder text = new StringBuilder(400);\\n        text.append(Messages.message(settlement.getAlarmLevelMessage(freeColClient.getMyPlayer()),\\n                                     \\\"%nation%\\\", settlement.getOwner().getNationAsString()));\\n        text.append(\\\"\\\\n\\\\n\\\");\\n        text.append(Messages.message(\\\"scoutSettlement.greetings\\\",\\n                                     \\\"%nation%\\\", settlement.getOwner().getNationAsString(),\\n                                     \\\"%number%\\\", String.valueOf(settlement.getOwner().getNumberOfSettlements())));\\n        text.append(\\\" \\\");\\n        if (settlement.getLearnableSkill() != null) {\\n            text.append(Messages.message(\\\"scoutSettlement.skill\\\", \\\"%skill%\\\",\\n                                         settlement.getLearnableSkill().getName()));\\n            text.append(\\\" \\\");\\n        }\\n        text.append(Messages.message(\\\"scoutSettlement.trade\\\",\\n                                     \\\"%goods1%\\\", settlement.getWantedGoods()[0].getName(),\\n                                     \\\"%goods2%\\\", settlement.getWantedGoods()[1].getName(),\\n                                     \\\"%goods3%\\\", settlement.getWantedGoods()[2].getName()));\\n        text.append(\\\"\\\\n\\\\n\\\");\\n        FreeColDialog scoutDialog = FreeColDialog\\n            .createChoiceDialog(text.toString(), null,\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.speak\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_SPEAK),\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.tribute\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_TRIBUTE),\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.attack\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_ATTACK),\\n                                new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                               ScoutAction.CANCEL));\\n        addAsFrame(scoutDialog);\\n        scoutDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) scoutDialog.getResponse();\\n        ScoutAction response = (ScoutAction) responseItem.getObject();\\n        remove(scoutDialog);\\n        return response;\\n    }\\n    public ScoutAction showScoutForeignColonyDialog(Colony colony, Unit unit) {\\n        String mainText = Messages.message(\\\"scoutColony.text\\\", \\n                                           \\\"%unit%\\\", unit.getName(), \\n                                           \\\"%colony%\\\", colony.getName());\\n        FreeColDialog scoutDialog = FreeColDialog\\n        .createChoiceDialog(mainText, null,\\n                            new ChoiceItem(Messages.message(\\\"scoutColony.negotiate\\\"), \\n                                           ScoutAction.FOREIGN_COLONY_NEGOTIATE),\\n                            new ChoiceItem(Messages.message(\\\"scoutColony.spy\\\"),\\n                                           ScoutAction.FOREIGN_COLONY_SPY),\\n                            new ChoiceItem(Messages.message(\\\"scoutColony.attack\\\"),\\n                                           ScoutAction.FOREIGN_COLONY_ATTACK),\\n                            new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                           ScoutAction.CANCEL));\\n        addAsFrame(scoutDialog);\\n        scoutDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) scoutDialog.getResponse();\\n        ScoutAction response = (ScoutAction) responseItem.getObject();\\n        remove(scoutDialog);\\n        return response;\\n    }\\n    public ScoutAction showArmedUnitIndianSettlementDialog(IndianSettlement settlement) {\\n        String introText = Messages.message(settlement.getAlarmLevelMessage(freeColClient.getMyPlayer()),\\n                \\\"%nation%\\\", settlement.getOwner().getNationAsString());\\n        FreeColDialog armedUnitDialog = FreeColDialog\\n            .createChoiceDialog(introText, null,\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.tribute\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_TRIBUTE),\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.attack\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_ATTACK),\\n                                new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                               ScoutAction.CANCEL));\\n        addAsFrame(armedUnitDialog);\\n        armedUnitDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) armedUnitDialog.getResponse();\\n        ScoutAction response = (ScoutAction) responseItem.getObject();\\n        remove(armedUnitDialog);\\n        return response;\\n    }\\n    public List<Object> showUseMissionaryDialog(IndianSettlement settlement) {\\n        StringBuilder introText = new StringBuilder(Messages\\n                                                    .message(settlement.getAlarmLevelMessage(freeColClient.getMyPlayer()),\\n                     \\\"%nation%\\\", settlement.getOwner().getNationAsString()));\\n        introText.append(\\\"\\\\n\\\\n\\\");\\n        introText.append(Messages.message(\\\"missionarySettlement.question\\\"));\\n        ChoiceItem establish = new ChoiceItem(Messages.message(\\\"missionarySettlement.establish\\\"),\\n                MissionaryAction.ESTABLISH_MISSION);\\n        ChoiceItem heresy = new ChoiceItem(Messages.message(\\\"missionarySettlement.heresy\\\"),\\n                MissionaryAction.DENOUNCE_HERESY);\\n        ChoiceItem incite = new ChoiceItem(Messages.message(\\\"missionarySettlement.incite\\\"),\\n                MissionaryAction.INCITE_INDIANS);\\n        ChoiceItem cancel = new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                MissionaryAction.CANCEL);\\n        FreeColDialog missionaryDialog;\\n        if (settlement.getMissionary() == null) {\\n                        missionaryDialog = FreeColDialog.createChoiceDialog(introText.toString(), null,\\n                    establish, incite, cancel);\\n        } else {\\n                        missionaryDialog = FreeColDialog.createChoiceDialog(introText.toString(), null,\\n                    heresy, incite, cancel);\\n        }\\n        addAsFrame(missionaryDialog);\\n        missionaryDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) missionaryDialog.getResponse();\\n        MissionaryAction response = (MissionaryAction) responseItem.getObject();\\n        ArrayList<Object> returnValue = new ArrayList<Object>();\\n                returnValue.add(response);\\n        remove(missionaryDialog);\\n        if (MissionaryAction.INCITE_INDIANS.equals(response)) {\\n            FreeColDialog inciteDialog = FreeColDialog.createInciteDialog(freeColClient.getGame().getEuropeanPlayers(),\\n                    freeColClient.getMyPlayer());\\n            addAsFrame(inciteDialog);\\n            inciteDialog.requestFocus();\\n            Player response2 = (Player) inciteDialog.getResponse();\\n            if (response2 != null) {\\n                returnValue.add(response2);\\n            } else {\\n                returnValue.clear();\\n                returnValue.add(MissionaryAction.CANCEL);\\n            }\\n            remove(inciteDialog);\\n        }\\n        return returnValue;\\n    }\\n    public boolean showInciteDialog(Player enemy, int amount) {\\n        String message = Messages.message(\\\"missionarySettlement.inciteConfirm\\\");\\n        message = message.replaceAll(\\\"%player%\\\", enemy.getName());\\n        message = message.replaceAll(\\\"%amount%\\\", String.valueOf(amount));\\n        FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(message, Messages.message(\\\"yes\\\"), Messages\\n                .message(\\\"no\\\"));\\n        addAsFrame(confirmDialog);\\n        confirmDialog.requestFocus();\\n        boolean result = confirmDialog.getResponseBoolean();\\n        remove(confirmDialog);\\n        return result;\\n    }\\n    public String showInputDialog(String text, String defaultValue, String okText, String cancelText,\\n                                  String... data) {\\n        try {\\n            text = Messages.message(text, data);\\n            okText = Messages.message(okText);\\n            if (cancelText != null) {\\n                cancelText = Messages.message(cancelText);\\n            }\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + text + \\\", \\\" + okText + \\\" or \\\" + cancelText + \\\".\\\");\\n        }\\n        FreeColDialog inputDialog = FreeColDialog.createInputDialog(text, defaultValue, okText, cancelText);\\n        addAsFrame(inputDialog);\\n        inputDialog.requestFocus();\\n        String response = (String) inputDialog.getResponse();\\n                if ((response != null) && (response.length() == 0)) {\\n            String okTxt = \\\"ok\\\";\\n            String txt = \\\"enterSomeText\\\";\\n            try {\\n                okTxt = Messages.message(okTxt);\\n                txt = Messages.message(txt);\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + txt + \\\" or \\\" + okTxt + \\\".\\\");\\n            }\\n            InformationDialog informationDialog = new InformationDialog(txt, null);\\n            do {\\n                remove(inputDialog);\\n                addAsFrame(informationDialog);\\n                informationDialog.requestFocus();\\n                informationDialog.getResponse();\\n                remove(informationDialog);\\n                addAsFrame(inputDialog);\\n                inputDialog.requestFocus();\\n                response = (String) inputDialog.getResponse();\\n            } while ((response != null) && (response.length() == 0));\\n        }\\n        remove(inputDialog);\\n        return response;\\n    }\\n    public Object showChoiceDialog(String text, String cancelText, Iterator<?> iterator) {\\n        ArrayList<ChoiceItem> a = new ArrayList<ChoiceItem>();\\n        while (iterator.hasNext()) {\\n            a.add(new ChoiceItem(iterator.next()));\\n        }\\n        return showChoiceDialog(text, cancelText, a.toArray(new ChoiceItem[0]));\\n    }\\n    public Object showChoiceDialog(String text, String cancelText, ChoiceItem... objects) {\\n        FreeColDialog choiceDialog = FreeColDialog.createChoiceDialog(text, cancelText, objects);\\n        if (choiceDialog.getHeight() > getHeight() / 3) {\\n            choiceDialog.setSize(choiceDialog.getWidth(), (getHeight() * 2) / 3);\\n        }\\n        addAsFrame(choiceDialog);\\n        choiceDialog.requestFocus();\\n        Object response = choiceDialog.getResponse();\\n        remove(choiceDialog);\\n        return response;\\n    }\\n    public void showStatusPanel(String message) {\\n        statusPanel.setStatusMessage(message);\\n        addCentered(statusPanel, STATUS_LAYER);\\n    }\\n    public void closeStatusPanel() {\\n        if (statusPanel.isVisible()) {\\n            remove(statusPanel);\\n        }\\n    }\\n    public void showColopediaPanel(ColopediaPanel.PanelType type) {\\n        ColopediaPanel colopediaPanel = new ColopediaPanel(this);\\n        colopediaPanel.initialize(type);\\n        addAsFrame(colopediaPanel);\\n        colopediaPanel.requestFocus();\\n    }\\n    public void showColopediaPanel(ColopediaPanel.PanelType panelType,\\n                                   FreeColGameObjectType objectType) {\\n        ColopediaPanel colopediaPanel = new ColopediaPanel(this);\\n        colopediaPanel.initialize(panelType, objectType);\\n        addAsFrame(colopediaPanel);\\n        colopediaPanel.requestFocus();\\n    }\\n    public void showReportPanel(String classname) {\\n        ReportPanel reportPanel = null;\\n        if (\\\"net.sf.freecol.client.gui.panel.ReportReligiousPanel\\\".equals(classname)) {\\n            reportPanel = new ReportReligiousPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportLabourPanel\\\".equals(classname)) {\\n            reportPanel = new ReportLabourPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportForeignAffairPanel\\\".equals(classname)) {\\n            reportPanel = new ReportForeignAffairPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportIndianPanel\\\".equals(classname)) {\\n            reportPanel = new ReportIndianPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportTurnPanel\\\".equals(classname)) {\\n            reportPanel = new ReportTurnPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportContinentalCongressPanel\\\".equals(classname)) {\\n            reportPanel = new ReportContinentalCongressPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportTradePanel\\\".equals(classname)) {\\n            reportPanel = new ReportTradePanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportMilitaryPanel\\\".equals(classname)) {\\n            reportPanel = new ReportMilitaryPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportNavalPanel\\\".equals(classname)) {\\n            reportPanel = new ReportNavalPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportCargoPanel\\\".equals(classname)) {\\n            reportPanel = new ReportCargoPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportColonyPanel\\\".equals(classname)) {\\n            reportPanel = new ReportColonyPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportRequirementsPanel\\\".equals(classname)) {\\n            reportPanel = new ReportRequirementsPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportExplorationPanel\\\".equals(classname)) {\\n            reportPanel = new ReportExplorationPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportHistoryPanel\\\".equals(classname)) {\\n            reportPanel = new ReportHistoryPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportHighScoresPanel\\\".equals(classname)) {\\n            reportPanel = new ReportHighScoresPanel(this);\\n        } else {\\n            logger.warning(\\\"Request for Report panel could not be processed.  Name=\\\" + classname);\\n        }\\n        if (reportPanel != null) {\\n            reportPanel.initialize();\\n            addAsFrame(reportPanel);\\n            reportPanel.requestFocus();\\n        }\\n    }\\n    public FoundingFather showChooseFoundingFatherDialog(List<FoundingFather> possibleFoundingFathers) {\\n        closeStatusPanel();\\n        ChooseFoundingFatherDialog chooseFoundingFatherDialog = new ChooseFoundingFatherDialog(this);\\n        chooseFoundingFatherDialog.initialize(possibleFoundingFathers);\\n        addAsFrame(chooseFoundingFatherDialog);\\n        chooseFoundingFatherDialog.requestFocus();\\n        int response = chooseFoundingFatherDialog.getResponseInt();\\n        remove(chooseFoundingFatherDialog);\\n        return possibleFoundingFathers.get(response);\\n    }\\n    public boolean showEventDialog(int eventID) {\\n        EventPanel eventPanel = new EventPanel(this, freeColClient);\\n        eventPanel.initialize(eventID);\\n        addAsFrame(eventPanel);\\n        eventPanel.requestFocus();\\n        boolean response = eventPanel.getResponseBoolean();\\n        remove(eventPanel);\\n        return response;\\n    }\\n    public void showEuropePanel() {\\n        closeMenus();\\n        if (freeColClient.getGame() == null) {\\n            errorMessage(\\\"europe.noGame\\\");\\n        } else {\\n            europePanel.initialize(freeColClient.getMyPlayer().getEurope(), freeColClient.getGame());\\n            JInternalFrame f = addAsSimpleFrame(europePanel);\\n            f.setBorder(null);\\n            f.setSize(getWidth(), getHeight() - getMenuBarHeight());\\n            f.setLocation(0, getMenuBarHeight());\\n            f.moveToBack();\\n        }\\n    }\\n    public int showEuropeDialog(EuropePanel.EuropeAction europeAction) {\\n                try {\\n            if (europeOpenDialog != null) {\\n                europeOpenDialog.setResponse(new Integer(-1));\\n            }\\n        } catch (NumberFormatException e) {\\n            logger.warning(\\\"Canvas.showEuropeDialog: Invalid europeDialogType\\\");\\n        }\\n        FreeColDialog localDialog = null;\\n                switch (europeAction) {\\n        case EXIT:\\n        case UNLOAD:\\n        case SAIL:\\n            return -1;\\n        case RECRUIT:\\n            localDialog = new RecruitDialog(this);\\n            break;\\n        case PURCHASE:\\n        case TRAIN:\\n            localDialog = new TrainDialog(this, europeAction);\\n            break;\\n        }\\n        localDialog.initialize();\\n        europeOpenDialog = localDialog;         \\n        addAsFrame(localDialog);\\n        localDialog.requestFocus();\\n        int response = localDialog.getResponseInt();\\n        remove(localDialog);\\n        if (europeOpenDialog == localDialog) {\\n            europeOpenDialog = null;            }\\n        return response;\\n    }\\n    public TradeRoute showTradeRouteDialog(TradeRoute selectedRoute) {\\n        TradeRouteDialog tradeRouteDialog = new TradeRouteDialog(this);\\n        tradeRouteDialog.initialize();\\n        tradeRouteDialog.setSelectedRoute(selectedRoute);\\n        addAsFrame(tradeRouteDialog);\\n        tradeRouteDialog.requestFocus();\\n        TradeRoute response = (TradeRoute) tradeRouteDialog.getResponse();\\n        remove(tradeRouteDialog);\\n        return response;\\n    }\\n    public boolean showTradeRouteInputDialog(TradeRoute route) {\\n        TradeRouteInputDialog tradeRouteInputDialog = new TradeRouteInputDialog(this);\\n        tradeRouteInputDialog.initialize(route);\\n        addAsFrame(tradeRouteInputDialog);\\n        tradeRouteInputDialog.requestFocus();\\n        boolean response = tradeRouteInputDialog.getResponseBoolean();\\n        remove(tradeRouteInputDialog);\\n        return response;\\n    }\\n    public void showColonyPanel(Colony colony) {\\n        freeColClient.getGUI().stopBlinking();\\n        ColonyPanel colonyPanel = new ColonyPanel(this, freeColClient);\\n        colonyPanel.initialize(colony, freeColClient.getGame());\\n        addAsFrame(colonyPanel);\\n        colonyPanel.requestFocus();\\n    }\\n    public void showBuildQueuePanel(Colony colony) {\\n        BuildQueuePanel buildQueuePanel = new BuildQueuePanel(this);\\n        buildQueuePanel.initialize(colony);\\n        addAsFrame(buildQueuePanel);\\n        buildQueuePanel.requestFocus();\\n    }\\n    public void showIndianSettlementPanel(IndianSettlement settlement) {\\n        closeMenus();\\n        IndianSettlementPanel indianSettlementPanel = new IndianSettlementPanel(freeColClient);\\n        indianSettlementPanel.initialize(settlement);\\n        addAsFrame(indianSettlementPanel);\\n        indianSettlementPanel.requestFocus();\\n        indianSettlementPanel.getResponseBoolean();\\n        remove(indianSettlementPanel);\\n    }\\n    public ChoiceItem showIndianSettlementTradeDlg(boolean showBuy, boolean showSell, boolean showGift){\\n        ArrayList<ChoiceItem> choices = new ArrayList<ChoiceItem>();\\n        if(showBuy){\\n            choices.add(new ChoiceItem(Messages.message(\\\"tradeProposition.toBuy\\\"), 1));\\n        }\\n        if(showSell){\\n            choices.add(new ChoiceItem(Messages.message(\\\"tradeProposition.toSell\\\"), 2));\\n        }\\n        if(showGift){\\n            choices.add(new ChoiceItem(Messages.message(\\\"tradeProposition.toGift\\\"), 3));\\n        }\\n        ChoiceItem choice = (ChoiceItem) showChoiceDialog(Messages.message(\\\"tradeProposition.welcome\\\"), \\n                          Messages.message(\\\"tradeProposition.cancel\\\"), \\n                          choices.toArray(new ChoiceItem[0]));\\n        return choice;\\n    }\\n    public void showTilePanel(Tile tile) {\\n        TilePanel tilePanel = new TilePanel(this);\\n        tilePanel.initialize(tile);\\n        addAsFrame(tilePanel);\\n        tilePanel.requestFocus();\\n        tilePanel.getResponseBoolean();\\n        remove(tilePanel);\\n    }\\n    public void showDumpCargoDialog(Unit unit) {\\n        DumpCargoDialog dumpCargoDialog = new DumpCargoDialog(this);\\n        dumpCargoDialog.initialize(unit);\\n        addAsFrame(dumpCargoDialog);\\n        dumpCargoDialog.requestFocus();\\n        dumpCargoDialog.getResponseBoolean();\\n        remove(dumpCargoDialog);\\n    }\\n    public boolean showMonarchPanel(MonarchAction action, String... replace) {\\n        closeStatusPanel();\\n        MonarchPanel monarchPanel = new MonarchPanel(this);\\n        monarchPanel.initialize(action, replace);\\n        addAsFrame(monarchPanel);\\n        monarchPanel.requestFocus();\\n        boolean response = monarchPanel.getResponseBoolean();\\n        remove(monarchPanel);\\n        return response;\\n    }\\n    public int showEmigrationPanel() {\\n        return showEmigrationPanel(false);\\n    }\\n    public int showEmigrationPanel(boolean fountainOfYouth) {\\n        EmigrationPanel emigrationPanel = new EmigrationPanel(this);\\n        emigrationPanel.initialize(freeColClient.getMyPlayer().getEurope(), fountainOfYouth);\\n        addAsFrame(emigrationPanel);\\n        emigrationPanel.requestFocus();\\n        int response = emigrationPanel.getResponseInt();\\n        remove(emigrationPanel);\\n        return response;\\n    }\\n    public int showRiverStylePanel() {\\n        RiverStylePanel riverStylePanel = new RiverStylePanel(this);\\n        addAsFrame(riverStylePanel);\\n        riverStylePanel.requestFocus();\\n        int response = riverStylePanel.getResponseInt();\\n        remove(riverStylePanel);\\n        return response;\\n    }\\n    public void updateJMenuBar() {\\n        if (jMenuBar instanceof FreeColMenuBar) {\\n            ((FreeColMenuBar) jMenuBar).update();\\n        }\\n    }\\n    public void resetFreeColMenuBar() {\\n        if (jMenuBar instanceof FreeColMenuBar) {\\n            ((FreeColMenuBar) jMenuBar).reset();\\n        }\\n    }\\n    @Override\\n    public void remove(Component comp) {\\n        remove(comp, true);\\n    }\\n    private JInternalFrame getInternalFrame(final Component c) {\\n        Component temp = c;\\n        while (temp != null && !(temp instanceof JInternalFrame)) {\\n            temp = temp.getParent();\\n        }\\n        return (JInternalFrame) temp;\\n    }\\n    public void remove(Component comp, boolean update) {\\n        if (comp == null) {\\n            return;\\n        }\\n        final Rectangle updateBounds = comp.getBounds();\\n        if (comp == jMenuBar) {\\n            jMenuBar = null;\\n            super.remove(comp);\\n        } else {\\n            final JInternalFrame frame = getInternalFrame(comp);\\n            if (frame != null && frame != comp) {\\n                                frame.dispose();\\n            } else {\\n                super.remove(comp);\\n            }\\n        }\\n        repaint(updateBounds.x, updateBounds.y, updateBounds.width, updateBounds.height);\\n        final boolean takeFocus = (comp != statusPanel);\\n        if (update) {\\n            updateJMenuBar();\\n            freeColClient.getActionManager().update();\\n            if (takeFocus && !isShowingSubPanel()) {\\n                takeFocus();\\n            }\\n        }\\n    }\\n    @Override\\n    public Component add(Component comp) {\\n        add(comp, null);\\n        return comp;\\n    }\\n    public Component addCentered(Component comp) {\\n        addCentered(comp, null);\\n        return comp;\\n    }\\n    public JInternalFrame addAsFrame(JComponent comp) {\\n        return addAsFrame(comp, false);\\n    }\\n    public JInternalFrame addAsToolBox(JComponent comp) {\\n        return addAsFrame(comp, true);\\n    }\\n    private JInternalFrame addAsFrame(JComponent comp, boolean toolBox) {\\n        return addAsFrame(comp, toolBox, true);\\n    }\\n    private JInternalFrame addAsFrame(JComponent comp, boolean toolBox, boolean centered) {\\n        final int FRAME_EMPTY_SPACE = 60;\\n        final JInternalFrame f = (toolBox) ? new ToolBoxFrame() : new JInternalFrame();\\n        if (f.getContentPane() instanceof JComponent) {\\n            JComponent c = (JComponent) f.getContentPane();\\n            c.setOpaque(false);\\n            c.setBorder(null);\\n        }\\n        if (comp.getBorder() != null) {\\n            Image menuborderN = ResourceManager.getImage(\\\"menuborder.n.image\\\");\\n            Image menuborderNW = ResourceManager.getImage(\\\"menuborder.nw.image\\\");\\n            Image menuborderNE = ResourceManager.getImage(\\\"menuborder.ne.image\\\");\\n            Image menuborderW = ResourceManager.getImage(\\\"menuborder.w.image\\\");\\n            Image menuborderE = ResourceManager.getImage(\\\"menuborder.e.image\\\");\\n            Image menuborderS = ResourceManager.getImage(\\\"menuborder.s.image\\\");\\n            Image menuborderSW = ResourceManager.getImage(\\\"menuborder.sw.image\\\");\\n            Image menuborderSE = ResourceManager.getImage(\\\"menuborder.se.image\\\");\\n            final FreeColImageBorder imageBorder = new FreeColImageBorder(menuborderN, menuborderW, menuborderS,\\n                    menuborderE, menuborderNW, menuborderNE, menuborderSW, menuborderSE);\\n            f.setBorder(imageBorder);\\n            comp.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\\n        } else {\\n            f.setBorder(null);\\n        }\\n        final FrameMotionListener fml = new FrameMotionListener(f);\\n        comp.addMouseMotionListener(fml);\\n        comp.addMouseListener(fml);\\n        if (f.getUI() instanceof BasicInternalFrameUI) {\\n            BasicInternalFrameUI biu = (BasicInternalFrameUI) f.getUI();\\n            biu.setNorthPane(null);\\n            biu.setSouthPane(null);\\n            biu.setWestPane(null);\\n            biu.setEastPane(null);\\n        }\\n        f.getContentPane().add(comp);\\n        f.setOpaque(false);\\n        f.pack();\\n        int width = f.getWidth();\\n        int height = f.getHeight();\\n        if (width > getWidth() - FRAME_EMPTY_SPACE) {\\n            width = Math.min(width, getWidth());\\n        }\\n        if (height > getHeight() - FRAME_EMPTY_SPACE) {\\n            height = Math.min(height, getHeight() - getMenuBarHeight());\\n        }\\n        f.setSize(width, height);\\n        if (centered) {\\n            addCentered(f, MODAL_LAYER);\\n        } else {\\n            f.setLocation(0, getMenuBarHeight());\\n            add(f, MODAL_LAYER);\\n        }\\n        f.setName(comp.getClass().getSimpleName());\\n        f.setFrameIcon(null);\\n        f.setVisible(true);\\n        f.setResizable(true);\\n        try {\\n            f.setSelected(true);\\n        } catch (java.beans.PropertyVetoException e) {\\n        }\\n        return f;\\n    }\\n    public JInternalFrame addAsSimpleFrame(JComponent comp) {\\n        final JInternalFrame f = new JInternalFrame();\\n        JScrollPane scrollPane =\\n            new JScrollPane(comp, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, \\n                            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);\\n        f.getContentPane().add(scrollPane);\\n        f.pack();\\n        addCentered(f);\\n        f.setName(comp.getClass().getSimpleName());\\n        if (f.getUI() instanceof BasicInternalFrameUI) {\\n            BasicInternalFrameUI biu = (BasicInternalFrameUI) f.getUI();\\n            biu.setNorthPane(null);\\n        }\\n        f.setFrameIcon(null);\\n        f.setVisible(true);\\n        f.setResizable(false);\\n        try {\\n            f.setSelected(true);\\n        } catch (java.beans.PropertyVetoException e) {\\n        }\\n        return f;\\n    }\\n    public void deactivateMovable(JComponent c) {\\n        for (MouseListener ml : c.getMouseListeners()) {\\n            if (ml instanceof FrameMotionListener) {\\n                c.removeMouseListener(ml);\\n            }\\n        }\\n        for (MouseMotionListener ml : c.getMouseMotionListeners()) {\\n            if (ml instanceof FrameMotionListener) {\\n                c.removeMouseMotionListener(ml);\\n            }\\n        }\\n    }\\n    public void addCentered(Component comp, Integer i) {\\n        comp.setLocation(getWidth() / 2 - comp.getWidth() / 2, (getHeight() + getMenuBarHeight()) / 2\\n                - comp.getHeight() / 2);\\n        add(comp, i);\\n    }\\n    public void add(Component comp, Integer i) {\\n        add(comp, i, true);\\n    }\\n    public void add(Component comp, Integer i, boolean update) {\\n        if (comp != statusPanel && !(comp instanceof JMenuItem) && !(comp instanceof FreeColDialog)\\n                && statusPanel.isVisible()) {\\n            remove(statusPanel, false);\\n        }\\n        try {\\n            if (i == null) {\\n                super.add(comp);\\n            } else {\\n                super.add(comp, i);\\n            }\\n        } catch(Exception e) {\\n            logger.warning(\\\"add component failed with layer \\\" + i);\\n        }\\n        if (update) {\\n            updateJMenuBar();\\n            freeColClient.getActionManager().update();\\n        }\\n    }\\n    private void takeFocus() {\\n        if (!isShowingSubPanel()) {\\n            requestFocus();\\n        }\\n    }\\n    public EuropePanel getEuropePanel() {\\n        return europePanel;\\n    }\\n    public MapControls getMapControls() {\\n        return mapControls;\\n    }\\n    public void showPopup(JPopupMenu popup, int x, int y) {\\n                popup.show(this, x, y);\\n        popup.repaint();\\n    }\\n    public void showTilePopup(Map.Position pos, int x, int y) {\\n        if (pos != null) {\\n            Tile t = freeColClient.getGame().getMap().getTile(pos.getX(), pos.getY());\\n            if (t != null) {\\n                TilePopup tp = new TilePopup(t, freeColClient, this, getGUI());\\n                if (tp.hasItem()) {\\n                    showPopup(tp, x, y);\\n                } else if (t.isExplored()) {\\n                    showTilePanel(t);\\n                }\\n            }\\n        }\\n    }\\n    public void errorMessage(String messageID) {\\n        errorMessage(messageID, \\\"Unspecified error: \\\" + messageID);\\n    }\\n    public void errorMessage(String messageID, String message) {\\n        if (messageID != null) {\\n            try {\\n                message = Messages.message(messageID);\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + messageID);\\n            }\\n        }\\n        ErrorPanel errorPanel = new ErrorPanel(this);\\n        errorPanel.initialize(message);\\n        addAsFrame(errorPanel);\\n        errorPanel.requestFocus();\\n        errorPanel.getResponse();\\n        remove(errorPanel);\\n    }\\n    public void showInformationMessage(String messageId) {\\n        showInformationMessage(messageId, null, new String[0]);\\n    }\\n    public void showInformationMessage(String messageId, FreeColObject displayObject) {\\n        showInformationMessage(messageId, displayObject, new String[0]);\\n    }\\n    public void showInformationMessage(String messageId, String... replace) {\\n        showInformationMessage(messageId, null, replace);\\n    }\\n    public void showInformationMessage(String messageId, FreeColObject displayObject, String... replace) {\\n        String text;\\n        try {\\n            text = Messages.message(messageId, replace);\\n        } catch (MissingResourceException e) {\\n            text = messageId;\\n            logger.warning(\\\"Missing i18n resource: \\\" + messageId);\\n        }\\n        ImageIcon icon = null;\\n        if (displayObject != null) {\\n            icon = getImageIcon(displayObject, false);\\n        }\\n        InformationDialog infoDialog = new InformationDialog(text, icon);\\n        addAsFrame(infoDialog);\\n        infoDialog.requestFocus();\\n        infoDialog.getResponse();\\n        remove(infoDialog);\\n    }\\n    public void refresh() {\\n        gui.forceReposition();\\n        repaint(0, 0, getWidth(), getHeight());\\n    }\\n    public void refreshTile(int x, int y) {\\n        if (x >= 0 && y >= 0) {\\n            repaint(gui.getTileBounds(x, y));\\n        }\\n    }\\n    public void refreshTile(Tile t) {\\n        refreshTile(t.getX(), t.getY());\\n    }\\n    public void refreshTile(Position p) {\\n        refreshTile(p.getX(), p.getY());\\n    }\\n    public void closeMenus() {\\n        for (JInternalFrame frame : getAllFrames()) {\\n            frame.dispose();\\n        }\\n    }\\n    public void showMainPanel() {\\n        closeMenus();\\n        addCentered(mainPanel, MAIN_LAYER);\\n        mainPanel.requestFocus();\\n    }\\n    public MainPanel getMainPanel() {\\n        return mainPanel;\\n    }\\n    public void closeMainPanel() {\\n        remove(mainPanel);\\n    }\\n    public void showOpenGamePanel() {\\n        errorMessage(\\\"openGame.unimplemented\\\");\\n    }\\n    public StartGamePanel getStartGamePanel() {\\n        return startGamePanel;\\n    }\\n    public void displayChatMessage(Player sender, String message, boolean privateChat) {\\n        gui.addMessage(new GUIMessage(sender.getName() + \\\": \\\" + message, sender.getColor()));\\n    }\\n    public void displayChatMessage(String message) {\\n        displayChatMessage(freeColClient.getMyPlayer(), message, false);\\n    }\\n    public void quit() {\\n        if (showConfirmDialog(\\\"quitDialog.areYouSure.text\\\", \\\"ok\\\", \\\"cancel\\\")) {\\n            freeColClient.quit();\\n        }\\n    }\\n    public void retire() {\\n        if (showConfirmDialog(\\\"retireDialog.areYouSure.text\\\", \\\"ok\\\", \\\"cancel\\\")) {\\n            if (freeColClient.retire()) {\\n                showReportPanel(ReportHighScoresPanel.class.getName());\\n            }\\n                                    quit();\\n        }\\n    }\\n    public void returnToTitle() {\\n                                        closeMenus();\\n        removeInGameComponents();\\n        showMainPanel();\\n        repaint();\\n    }\\n    public void removeInGameComponents() {\\n                KeyListener[] keyListeners = getKeyListeners();\\n        for (int i = 0; i < keyListeners.length; ++i) {\\n            removeKeyListener(keyListeners[i]);\\n        }\\n        MouseListener[] mouseListeners = getMouseListeners();\\n        for (int i = 0; i < mouseListeners.length; ++i) {\\n            removeMouseListener(mouseListeners[i]);\\n        }\\n        MouseMotionListener[] mouseMotionListeners = getMouseMotionListeners();\\n        for (int i = 0; i < mouseMotionListeners.length; ++i) {\\n            removeMouseMotionListener(mouseMotionListeners[i]);\\n        }\\n                        getGUI().getViewMode().changeViewMode(ViewMode.MOVE_UNITS_MODE);\\n        if (jMenuBar != null) {\\n            remove(jMenuBar);\\n        }\\n        for (Component c : getComponents()) {\\n            remove(c, false);\\n        }\\n    }\\n    public boolean containsInGameComponents() {\\n        KeyListener[] keyListeners = getKeyListeners();\\n        if (keyListeners.length > 0) {\\n            return true;\\n        }\\n        MouseListener[] mouseListeners = getMouseListeners();\\n        if (mouseListeners.length > 0) {\\n            return true;\\n        }\\n        MouseMotionListener[] mouseMotionListeners = getMouseMotionListeners();\\n        if (mouseMotionListeners.length > 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public GUI getGUI() {\\n        return gui;\\n    }\\n    public FreeColClient getClient() {\\n        return freeColClient;\\n    }\\n    public void newGame() {\\n        if (!showConfirmDialog(\\\"stopCurrentGame.text\\\", \\\"stopCurrentGame.yes\\\", \\\"stopCurrentGame.no\\\")) {\\n            return;\\n        }\\n        freeColClient.getConnectController().quitGame(true);\\n        removeInGameComponents();\\n        showPanel(new NewPanel(this));\\n    }\\n    class ToolBoxFrame extends JInternalFrame {\\n    }\\n    class FrameMotionListener extends MouseAdapter implements MouseMotionListener {\\n        private JInternalFrame f;\\n        private Point loc = null;\\n        FrameMotionListener(JInternalFrame f) {\\n            this.f = f;\\n        }\\n        @Override\\n        public void mousePressed(MouseEvent e) {\\n            if (f.getDesktopPane() == null || f.getDesktopPane().getDesktopManager() == null) {\\n                return;\\n            }\\n            loc = SwingUtilities.convertPoint((Component) e.getSource(), e.getX(), e.getY(), null);\\n            f.getDesktopPane().getDesktopManager().beginDraggingFrame(f);\\n        }\\n        @Override\\n        public void mouseReleased(MouseEvent e) {\\n            if (loc == null || f.getDesktopPane() == null || f.getDesktopPane().getDesktopManager() == null) {\\n                return;\\n            }\\n            f.getDesktopPane().getDesktopManager().endDraggingFrame(f);\\n        }\\n        public void mouseDragged(MouseEvent e) {\\n            if (loc == null || f.getDesktopPane() == null || f.getDesktopPane().getDesktopManager() == null) {\\n                return;\\n            }\\n            Point p = SwingUtilities.convertPoint((Component) e.getSource(), e.getX(), e.getY(), null);\\n            int moveX = loc.x - p.x;\\n            int moveY = loc.y - p.y;\\n            f.getDesktopPane().getDesktopManager().dragFrame(f, f.getX() - moveX, f.getY() - moveY);\\n            loc = p;\\n        }\\n        public void mouseMoved(MouseEvent arg0) {\\n        }\\n    }\\n}\""
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_db884522eb994f76bc2ff3",
                    "function": {
                        "arguments": "{\"entity\": \"InGameController\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package net.sf.freecol.server.control;\\nimport java.io.IOException;\\nimport java.util.ArrayList;\\nimport java.util.EnumMap;\\nimport java.util.HashMap;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Timer;\\nimport java.util.TimerTask;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.common.Specification;\\nimport net.sf.freecol.common.model.AbstractUnit;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.CombatModel;\\nimport net.sf.freecol.common.model.EquipmentType;\\nimport net.sf.freecol.common.model.FoundingFather;\\nimport net.sf.freecol.common.model.GameOptions;\\nimport net.sf.freecol.common.model.Goods;\\nimport net.sf.freecol.common.model.GoodsType;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.Location;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.Market;\\nimport net.sf.freecol.common.model.ModelController;\\nimport net.sf.freecol.common.model.Modifier;\\nimport net.sf.freecol.common.model.Monarch;\\nimport net.sf.freecol.common.model.Nation;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tension;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.UnitType;\\nimport net.sf.freecol.common.model.FoundingFather.FoundingFatherType;\\nimport net.sf.freecol.common.model.Map.Direction;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.model.Monarch.MonarchAction;\\nimport net.sf.freecol.common.model.Player.PlayerType;\\nimport net.sf.freecol.common.model.Player.Stance;\\nimport net.sf.freecol.common.model.Unit.UnitState;\\nimport net.sf.freecol.common.networking.Message;\\nimport net.sf.freecol.server.FreeColServer;\\nimport net.sf.freecol.server.model.ServerPlayer;\\nimport org.w3c.dom.Element;\\npublic final class InGameController extends Controller {\\n    private static Logger logger = Logger.getLogger(InGameController.class.getName());\\n    public int debugOnlyAITurns = 0;\\n    private java.util.Map<String,java.util.Map<String, java.util.Map<String,Object>>> transactionSessions;\\n    public InGameController(FreeColServer freeColServer) {\\n        super(freeColServer);\\n        transactionSessions = new HashMap<String,java.util.Map<String, java.util.Map<String,Object>>>();\\n    }\\n    public void endTurn(ServerPlayer player) {\\n        try {\\n            Thread.sleep(100);\\n        } catch (InterruptedException e) {}\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer oldPlayer = (ServerPlayer) getGame().getCurrentPlayer();\\n        if (oldPlayer != player) {\\n            logger.warning(\\\"It is not \\\" + player.getName() + \\\"'s turn!\\\");\\n            throw new IllegalArgumentException(\\\"It is not \\\" + player.getName() + \\\"'s turn!\\\");\\n        }\\n        player.clearModelMessages();\\n        freeColServer.getModelController().clearTaskRegister();\\n        Player winner = checkForWinner();\\n        if (winner != null && (!freeColServer.isSingleplayer() || !winner.isAI())) {\\n            Element gameEndedElement = Message.createNewRootElement(\\\"gameEnded\\\");\\n            gameEndedElement.setAttribute(\\\"winner\\\", winner.getId());\\n            freeColServer.getServer().sendToAll(gameEndedElement, null);\\n                        if (FreeCol.getFreeColClient() == null) {\\n                new Timer(true).schedule(new TimerTask() {\\n                    @Override\\n                    public void run() {\\n                        System.exit(0);\\n                    }\\n                }, 20000);\\n            }\\n            return;\\n        }\\n        ServerPlayer newPlayer = (ServerPlayer) nextPlayer();\\n        if (newPlayer != null \\n            && !newPlayer.isAI()\\n            && (!newPlayer.isConnected() || debugOnlyAITurns > 0)) {\\n            endTurn(newPlayer);\\n            return;\\n        }\\n    }\\n    private Player nextPlayer() {\\n        final FreeColServer freeColServer = getFreeColServer();\\n        if (!isHumanPlayersLeft()) {\\n            getGame().setCurrentPlayer(null);\\n            return null;\\n        }\\n        if (getGame().isNextPlayerInNewTurn()) {\\n            getGame().newTurn();\\n            if (debugOnlyAITurns > 0) {\\n                debugOnlyAITurns--;\\n            }\\n            Element newTurnElement = Message.createNewRootElement(\\\"newTurn\\\");\\n            freeColServer.getServer().sendToAll(newTurnElement, null);\\n        }\\n        ServerPlayer newPlayer = (ServerPlayer) getGame().getNextPlayer();\\n        getGame().setCurrentPlayer(newPlayer);\\n        if (newPlayer == null) {\\n            getGame().setCurrentPlayer(null);\\n            return null;\\n        }\\n        synchronized (newPlayer) {\\n            if (checkForDeath(newPlayer)) {\\n                newPlayer.setDead(true);\\n                Element setDeadElement = Message.createNewRootElement(\\\"setDead\\\");\\n                setDeadElement.setAttribute(\\\"player\\\", newPlayer.getId());\\n                freeColServer.getServer().sendToAll(setDeadElement, null);\\n                return nextPlayer();\\n            }\\n        }\\n        if (newPlayer.isEuropean()) {\\n            try {        \\n                Market market = newPlayer.getMarket();\\n                                List<GoodsType> goodsTypes = FreeCol.getSpecification().getGoodsTypeList();\\n                GoodsType typeToRemove = goodsTypes.get(getPseudoRandom().nextInt(goodsTypes.size()));\\n                if (typeToRemove.isStorable()) {\\n                    int amountToRemove = getPseudoRandom().nextInt(21);\\n                    market.remove(typeToRemove, amountToRemove);\\n                    Element updateElement = Message.createNewRootElement(\\\"marketElement\\\");\\n                    updateElement.setAttribute(\\\"type\\\", typeToRemove.getId());\\n                    updateElement.setAttribute(\\\"amount\\\", String.valueOf(-amountToRemove));\\n                    newPlayer.getConnection().send(updateElement);\\n                }\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send message to: \\\" + newPlayer.getName() +\\n                               \\\" with connection \\\" + newPlayer.getConnection());\\n            }\\n            if (newPlayer.getCurrentFather() == null && newPlayer.getSettlements().size() > 0) {\\n                chooseFoundingFather(newPlayer);\\n            }\\n            if (newPlayer.getMonarch() != null) {\\n                monarchAction(newPlayer);\\n            }\\n            bombardEnemyShips(newPlayer);\\n        }\\n        else if (newPlayer.isIndian()) {\\n            for (IndianSettlement indianSettlement: newPlayer.getIndianSettlements()) {\\n                if (indianSettlement.checkForNewMissionaryConvert()) {\\n                                        Unit missionary = indianSettlement.getMissionary();\\n                    ServerPlayer european = (ServerPlayer) missionary.getOwner();\\n                                        Tile settlementTile = indianSettlement.getTile();\\n                    Tile targetTile = null;\\n                    Iterator<Position> ffi = getGame().getMap().getFloodFillIterator(settlementTile.getPosition());\\n                    while (ffi.hasNext()) {\\n                        Tile t = getGame().getMap().getTile(ffi.next());\\n                        if (settlementTile.getDistanceTo(t) > IndianSettlement.MAX_CONVERT_DISTANCE) {\\n                            break;\\n                        }\\n                        if (t.getSettlement() != null && t.getSettlement().getOwner() == european) {\\n                            targetTile = t;\\n                            break;\\n                        }\\n                    }\\n                    if (targetTile != null) {\\n                        List<UnitType> converts = FreeCol.getSpecification().getUnitTypesWithAbility(\\\"model.ability.convert\\\");\\n                        if (converts.size() > 0) {\\n                                                        Unit brave = indianSettlement.getUnitIterator().next();\\n                            String nationId = brave.getOwner().getNationID();\\n                            brave.dispose();\\n                            ModelController modelController = getGame().getModelController();\\n                            int random = modelController.getRandom(indianSettlement.getId() + \\\"getNewConvertType\\\", converts.size());\\n                            UnitType unitType = converts.get(random);\\n                            Unit unit = modelController.createUnit(indianSettlement.getId() + \\\"newTurn100missionary\\\", targetTile,\\n                                    european, unitType);\\n                                                        try {\\n                                Element updateElement = Message.createNewRootElement(\\\"newConvert\\\");\\n                                updateElement.setAttribute(\\\"nation\\\", nationId);\\n                                updateElement.setAttribute(\\\"colonyTile\\\", targetTile.getId());\\n                                updateElement.appendChild(unit.toXMLElement(european,updateElement.getOwnerDocument()));\\n                                european.getConnection().send(updateElement);\\n                                logger.info(\\\"New convert created for \\\" + european.getName() + \\\" with ID=\\\" + unit.getId());\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + european.getName());\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        Element setCurrentPlayerElement = Message.createNewRootElement(\\\"setCurrentPlayer\\\");\\n        setCurrentPlayerElement.setAttribute(\\\"player\\\", newPlayer.getId());\\n        freeColServer.getServer().sendToAll(setCurrentPlayerElement, null);\\n        return newPlayer;\\n    }\\n    private boolean isHumanPlayersLeft() {\\n        for (Player player : getFreeColServer().getGame().getPlayers()) {\\n            if (!player.isDead() && !player.isAI() && ((ServerPlayer) player).isConnected()) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    private void chooseFoundingFather(ServerPlayer player) {\\n        final ServerPlayer nextPlayer = player;\\n        Thread t = new Thread(FreeCol.SERVER_THREAD+\\\"FoundingFather-thread\\\") {\\n                public void run() {\\n                    List<FoundingFather> randomFoundingFathers = getRandomFoundingFathers(nextPlayer);\\n                    boolean atLeastOneChoice = false;\\n                    Element chooseFoundingFatherElement = Message.createNewRootElement(\\\"chooseFoundingFather\\\");\\n                    for (FoundingFather father : randomFoundingFathers) {\\n                        chooseFoundingFatherElement.setAttribute(father.getType().toString(),\\n                                                                 father.getId());\\n                        atLeastOneChoice = true;\\n                    }\\n                    if (!atLeastOneChoice) {\\n                        nextPlayer.setCurrentFather(null);\\n                    } else {\\n                        try {\\n                            Element reply = nextPlayer.getConnection().ask(chooseFoundingFatherElement);\\n                            FoundingFather father = FreeCol.getSpecification().\\n                                getFoundingFather(reply.getAttribute(\\\"foundingFather\\\"));\\n                            if (!randomFoundingFathers.contains(father)) {\\n                                throw new IllegalArgumentException();\\n                            }\\n                            nextPlayer.setCurrentFather(father);\\n                        } catch (IOException e) {\\n                            logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                        }\\n                    }\\n                }\\n            };\\n        t.start();\\n    }\\n    private List<FoundingFather> getRandomFoundingFathers(Player player) {\\n        int age = getGame().getTurn().getAge();\\n        List<FoundingFather> randomFoundingFathers = new ArrayList<FoundingFather>();\\n        EnumMap<FoundingFatherType, Integer> weightSums = new\\n            EnumMap<FoundingFatherType, Integer>(FoundingFatherType.class);\\n        for (FoundingFather father : FreeCol.getSpecification().getFoundingFathers()) {\\n            if (!player.hasFather(father) && father.isAvailableTo(player)) {\\n                Integer weightSum = weightSums.get(father.getType());\\n                if (weightSum == null) {\\n                    weightSum = new Integer(0);\\n                }\\n                weightSums.put(father.getType(), weightSum + father.getWeight(age));\\n            }\\n        }\\n        for (java.util.Map.Entry<FoundingFatherType, Integer> entry : weightSums.entrySet()) {\\n            if (entry.getValue() != 0) {\\n                int r = getPseudoRandom().nextInt(entry.getValue()) + 1;\\n                int weightSum = 0;\\n                for (FoundingFather father : FreeCol.getSpecification().getFoundingFathers()) {\\n                    if (!player.hasFather(father) && father.getType() == entry.getKey()) {\\n                        weightSum += father.getWeight(age);\\n                        if (weightSum >= r) {\\n                            randomFoundingFathers.add(father);\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return randomFoundingFathers;\\n    }\\n    public Player checkForWinner() {\\n        List<Player> players = getGame().getPlayers();\\n        GameOptions go = getGame().getGameOptions();\\n        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_REF)) {\\n            for (Player player : players) {\\n                if (!player.isAI() && player.getPlayerType() == PlayerType.INDEPENDENT) {\\n                    return player;\\n                }\\n            }\\n        }\\n        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_EUROPEANS)) {\\n            Player winner = null;\\n            for (Player player : players) {\\n                if (!player.isDead() && player.isEuropean() && !player.isREF()) {\\n                    if (winner != null) {\\n                                                winner = null;\\n                        break;\\n                    } else {\\n                        winner = player;\\n                    }\\n                }\\n            }\\n            if (winner != null) {\\n                return winner;\\n            }\\n        }\\n        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_HUMANS)) {\\n            Player winner = null;\\n            for (Player player : players) {\\n                if (!player.isDead() && !player.isAI()) {\\n                    if (winner != null) {\\n                                                winner = null;\\n                        break;\\n                    } else {\\n                        winner = player;\\n                    }\\n                }\\n            }\\n            if (winner != null) {\\n                return winner;\\n            }\\n        }\\n        return null;\\n    }\\n    private boolean checkForDeath(Player player) {\\n        if (player.isREF()) {\\n            return false;\\n        }\\n                if (!player.getSettlements().isEmpty()) {\\n            return false;\\n        }\\n                boolean hasCarrier = false;\\n        List<Unit> unitList = player.getUnits();\\n        for(Unit unit : unitList){\\n            boolean isValidUnit = false;\\n            if(unit.isCarrier()){\\n                hasCarrier = true;\\n                logger.info(\\\"Still has carrier\\\");\\n                continue;\\n            }\\n                        if(unit.isColonist()){\\n                isValidUnit = true;\\n            }\\n                        if(unit.isOffensiveUnit()){\\n                isValidUnit = true;\\n            }\\n            if(!isValidUnit){\\n                continue;\\n            }\\n                        Location unitLocation = unit.getLocation();\\n                        if(unitLocation instanceof Tile){\\n                logger.info(\\\"Found colonist in new world\\\");\\n                return false;\\n            }\\n                        if(unit.isOnCarrier()){\\n                Unit carrier = (Unit) unitLocation;\\n                                if(carrier.getLocation() instanceof Tile){\\n                    logger.info(\\\"Found colonist aboard carrier in new world\\\");\\n                    return false;\\n                }   \\n            }\\n        }\\n        if (!player.isEuropean() || player.getEurope() == null) {\\n            return true;\\n        }\\n                if (getGame().getTurn().getYear() >= 1600) {\\n            logger.info(\\\"No presence in new world after 1600\\\");\\n            return true;\\n        }\\n        int goldNeeded = 0;\\n        if(!hasCarrier){\\n            Iterator<UnitType> navalUnits = FreeCol.getSpecification().getUnitTypesWithAbility(\\\"model.ability.navalUnit\\\").iterator();\\n            int lowerPrice = Integer.MAX_VALUE;\\n            while(navalUnits.hasNext()){\\n                UnitType unit = navalUnits.next();\\n                int unitPrice = player.getEurope().getUnitPrice(unit);\\n                                if(unitPrice == UnitType.UNDEFINED){\\n                    continue;\\n                }\\n                if(unitPrice < lowerPrice){\\n                    lowerPrice = unitPrice;\\n                }\\n            }\\n                        if(lowerPrice == Integer.MAX_VALUE){\\n                logger.warning(\\\"Couldnt find naval unit to buy\\\");\\n                return true;\\n            }\\n            goldNeeded += lowerPrice;\\n                        if(goldNeeded > player.getGold()){\\n                logger.info(\\\"Does not have enough money to buy carrier\\\");\\n                return true;\\n            }\\n            logger.info(\\\"Has enough money to buy carrier, has=\\\" + player.getGold() + \\\", needs=\\\" + lowerPrice);\\n        }\\n        Iterator<Unit> unitIterator = player.getEurope().getUnitIterator();\\n        while (unitIterator.hasNext()) {\\n            Unit unit = unitIterator.next();\\n            if (unit.isCarrier()) {\\n                if(unit.getGoodsCount() > 0){\\n                    logger.info(\\\"Has goods to sell\\\");\\n                    return false;\\n                }\\n                continue;\\n            }\\n            if (unit.isColonist()){\\n                logger.info(\\\"Has colonist unit waiting in port\\\");\\n                return false;\\n            }\\n        }\\n        int goldToRecruit =  player.getEurope().getRecruitPrice();\\n        Iterator<UnitType> trainedUnits = FreeCol.getSpecification().getUnitTypesTrainedInEurope().iterator();\\n        int goldToTrain = Integer.MAX_VALUE;\\n        while(trainedUnits.hasNext()){\\n            UnitType unit = trainedUnits.next();\\n            if(!unit.hasAbility(\\\"model.ability.foundColony\\\")){\\n                continue;\\n            }\\n            int unitPrice = player.getEurope().getUnitPrice(unit);\\n                        if(unitPrice == UnitType.UNDEFINED){\\n                continue;\\n            }\\n            if(unitPrice < goldToTrain){\\n                goldToTrain = unitPrice;\\n            }\\n        }\\n        goldNeeded += Math.min(goldToTrain, goldToRecruit);\\n                if(goldNeeded > player.getGold()){\\n            logger.info(\\\"Does not have enough money for recruiting or training\\\");\\n            return true;\\n        }\\n        return false;\\n    }\\n    private void monarchAction(ServerPlayer player) {\\n        final ServerPlayer nextPlayer = player;\\n        Thread t = new Thread(\\\"monarchAction\\\") {\\n                public void run() {\\n                    try {\\n                        Monarch monarch = nextPlayer.getMonarch();\\n                        MonarchAction action = monarch.getAction();\\n                        Element monarchActionElement = Message.createNewRootElement(\\\"monarchAction\\\");\\n                        monarchActionElement.setAttribute(\\\"action\\\", String.valueOf(action));\\n                        switch (action) {\\n                        case RAISE_TAX:\\n                            int oldTax = nextPlayer.getTax();\\n                            int newTax = monarch.getNewTax(MonarchAction.RAISE_TAX);\\n                            if (newTax > 100) {\\n                                logger.warning(\\\"Tax rate exceeds 100 percent.\\\");\\n                                return;\\n                            }\\n                            Goods goods = nextPlayer.getMostValuableGoods();\\n                            if (goods == null) {\\n                                return;\\n                            }\\n                            monarchActionElement.setAttribute(\\\"amount\\\", String.valueOf(newTax));\\n                            monarchActionElement.setAttribute(\\\"goods\\\", goods.getName());\\n                            monarchActionElement.setAttribute(\\\"force\\\", String.valueOf(false));\\n                            try {\\n                                nextPlayer.setTax(newTax);                                 Element reply = nextPlayer.getConnection().ask(monarchActionElement);\\n                                boolean accepted = Boolean.valueOf(reply.getAttribute(\\\"accepted\\\")).booleanValue();\\n                                if (!accepted) {\\n                                    Colony colony = (Colony) goods.getLocation();\\n                                    if (colony.getGoodsCount(goods.getType()) >= goods.getAmount()) {\\n                                        nextPlayer.setTax(oldTax);                                         Element removeGoodsElement = Message.createNewRootElement(\\\"removeGoods\\\");\\n                                        colony.removeGoods(goods);\\n                                        nextPlayer.setArrears(goods);\\n                                        colony.getFeatureContainer().addModifier(Modifier\\n                                            .createTeaPartyModifier(getGame().getTurn()));\\n                                        removeGoodsElement.appendChild(goods.toXMLElement(nextPlayer, removeGoodsElement\\n                                                                                          .getOwnerDocument()));\\n                                        nextPlayer.getConnection().send(removeGoodsElement);\\n                                    } else {\\n                                                                                monarchActionElement.setAttribute(\\\"force\\\", String.valueOf(true));\\n                                        nextPlayer.getConnection().send(monarchActionElement);\\n                                    }\\n                                }\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case LOWER_TAX:\\n                            int taxLowered = monarch.getNewTax(MonarchAction.LOWER_TAX);\\n                            if (taxLowered < 0) {\\n                                logger.warning(\\\"Tax rate less than 0 percent.\\\");\\n                                return;\\n                            }\\n                            monarchActionElement.setAttribute(\\\"amount\\\", String.valueOf(taxLowered));\\n                            try {\\n                                nextPlayer.setTax(taxLowered);                                 nextPlayer.getConnection().send(monarchActionElement); \\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case ADD_TO_REF:\\n                            List<AbstractUnit> unitsToAdd = monarch.addToREF();\\n                            monarch.addToREF(unitsToAdd);\\n                            Element additionElement = monarchActionElement.getOwnerDocument().createElement(\\\"addition\\\");\\n                            for (AbstractUnit unit : unitsToAdd) {\\n                                additionElement.appendChild(unit.toXMLElement(nextPlayer,additionElement.getOwnerDocument()));\\n                            }\\n                            monarchActionElement.appendChild(additionElement);\\n                            try {\\n                                nextPlayer.getConnection().send(monarchActionElement);\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case DECLARE_WAR:\\n                            Player enemy = monarch.declareWar();\\n                            if (enemy == null) {\\n                                                                logger.warning(\\\"Declared war on nobody.\\\");\\n                                return;\\n                            }\\n                                                        if(nextPlayer.isAI()){\\n                                nextPlayer.modifyTension(enemy, Tension.TENSION_ADD_DECLARE_WAR_FROM_PEACE);\\n                            }\\n                            nextPlayer.changeRelationWithPlayer(enemy, Stance.WAR);\\n                            monarchActionElement.setAttribute(\\\"enemy\\\", enemy.getId());\\n                            try {\\n                                nextPlayer.getConnection().send(monarchActionElement);\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case OFFER_MERCENARIES:\\n                            Element mercenaryElement = monarchActionElement.getOwnerDocument().createElement(\\\"mercenaries\\\");\\n                            List<AbstractUnit> units = monarch.getMercenaries();\\n                            int price = monarch.getPrice(units, true);\\n                            monarchActionElement.setAttribute(\\\"price\\\", String.valueOf(price));\\n                            for (AbstractUnit unit : units) {\\n                                mercenaryElement.appendChild(unit.toXMLElement(monarchActionElement.getOwnerDocument()));\\n                            }\\n                            monarchActionElement.appendChild(mercenaryElement);\\n                            try {\\n                                Element reply = nextPlayer.getConnection().ask(monarchActionElement);\\n                                boolean accepted = Boolean.valueOf(reply.getAttribute(\\\"accepted\\\")).booleanValue();\\n                                if (accepted) {\\n                                    Element updateElement = Message.createNewRootElement(\\\"monarchAction\\\");\\n                                    updateElement.setAttribute(\\\"action\\\", String.valueOf(MonarchAction.ADD_UNITS));\\n                                    nextPlayer.modifyGold(-price);\\n                                    createUnits(units, updateElement, nextPlayer);\\n                                    nextPlayer.getConnection().send(updateElement);\\n                                }\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case NO_ACTION:\\n                                                        break;\\n                        }\\n                    } catch (Exception e) {\\n                        logger.log(Level.WARNING, \\\"Monarch action failed!\\\", e);\\n                    }\\n                }\\n            };\\n        t.start();\\n    }\\n    public ServerPlayer createREFPlayer(ServerPlayer player){\\n        Nation refNation = Specification.getSpecification().getNation(player.getNation().getRefId());\\n        ServerPlayer refPlayer = getFreeColServer().addAIPlayer(refNation);\\n        refPlayer.setEntryLocation(player.getEntryLocation());\\n                player.setStance(refPlayer, Stance.PEACE);\\n        refPlayer.setTension(player, new Tension(Tension.Level.CONTENT.getLimit()));\\n        player.setTension(refPlayer, new Tension(Tension.Level.CONTENT.getLimit()));\\n        return refPlayer;\\n    }\\n    private void createUnits(List<AbstractUnit> units, Element element, ServerPlayer nextPlayer) {\\n        String musketsTypeStr = null;\\n        String horsesTypeStr = null;\\n        if(nextPlayer.isIndian()){\\n                musketsTypeStr = \\\"model.equipment.indian.muskets\\\";\\n            horsesTypeStr = \\\"model.equipment.indian.horses\\\";\\n        } else {\\n                musketsTypeStr = \\\"model.equipment.muskets\\\";\\n            horsesTypeStr = \\\"model.equipment.horses\\\";\\n        }\\n        final EquipmentType muskets = FreeCol.getSpecification().getEquipmentType(musketsTypeStr);\\n        final EquipmentType horses = FreeCol.getSpecification().getEquipmentType(horsesTypeStr);\\n        EquipmentType[] soldier = new EquipmentType[] { muskets };\\n        EquipmentType[] dragoon = new EquipmentType[] { horses, muskets };\\n        for (AbstractUnit unit : units) {\\n            EquipmentType[] equipment = EquipmentType.NO_EQUIPMENT;\\n            for (int count = 0; count < unit.getNumber(); count++) {\\n                switch(unit.getRole()) {\\n                case SOLDIER:\\n                    equipment = soldier;\\n                    break;\\n                case DRAGOON:\\n                    equipment = dragoon;\\n                    break;\\n                default:\\n                }\\n                Unit newUnit = new Unit(getGame(), nextPlayer.getEurope(), nextPlayer,\\n                                        unit.getUnitType(), UnitState.ACTIVE, equipment);\\n                                if (element != null) {\\n                    element.appendChild(newUnit.toXMLElement(nextPlayer, element.getOwnerDocument()));\\n                }\\n            }\\n        }\\n    }\\n    public List<Unit> createREFUnits(ServerPlayer player, ServerPlayer refPlayer){\\n        EquipmentType muskets = Specification.getSpecification().getEquipmentType(\\\"model.equipment.muskets\\\");\\n        EquipmentType horses = Specification.getSpecification().getEquipmentType(\\\"model.equipment.horses\\\");\\n        List<Unit> unitsList = new ArrayList<Unit>();\\n        List<Unit> navalUnits = new ArrayList<Unit>();\\n        List<Unit> landUnits = new ArrayList<Unit>();\\n                for (AbstractUnit unit : player.getMonarch().getNavalUnits()) {\\n            for (int index = 0; index < unit.getNumber(); index++) {\\n                Unit newUnit = new Unit(getGame(), refPlayer.getEurope(), refPlayer,\\n                                        unit.getUnitType(), UnitState.TO_AMERICA);\\n                navalUnits.add(newUnit);\\n            }\\n        }\\n        unitsList.addAll(navalUnits);\\n                for (AbstractUnit unit : player.getMonarch().getLandUnits()) {\\n            EquipmentType[] equipment = EquipmentType.NO_EQUIPMENT;\\n            switch(unit.getRole()) {\\n            case SOLDIER:\\n                equipment = new EquipmentType[] { muskets };\\n                break;\\n            case DRAGOON:\\n                equipment = new EquipmentType[] { horses, muskets };\\n                break;\\n            default:\\n            }\\n            for (int index = 0; index < unit.getNumber(); index++) {\\n                landUnits.add(new Unit(getGame(), refPlayer.getEurope(), refPlayer,\\n                                        unit.getUnitType(), UnitState.ACTIVE, equipment));\\n            }\\n        }\\n        unitsList.addAll(landUnits);\\n                Iterator<Unit> carriers = navalUnits.iterator();\\n        for(Unit unit : landUnits){\\n                        boolean noSpaceForUnit=true;\\n            for(Unit carrier : navalUnits){\\n                if (unit.getSpaceTaken() <= carrier.getSpaceLeft()) {\\n                    noSpaceForUnit=false;\\n                    break;\\n                }\\n            }\\n                        if(noSpaceForUnit){\\n                continue;\\n            }\\n                        Unit carrier = null;\\n            while (carrier == null){\\n                                if (!carriers.hasNext()) {\\n                    carriers = navalUnits.iterator();\\n                }\\n                carrier = carriers.next();\\n                                if (unit.getSpaceTaken() > carrier.getSpaceLeft()) {\\n                    carrier = null;\\n                }\\n            }\\n                        unit.setLocation(carrier);\\n                                }\\n        return unitsList;\\n    }\\n    public boolean createMission(IndianSettlement settlement,Unit missionary){\\n        settlement.setMissionary(missionary);\\n                return true;\\n    }\\n    private void bombardEnemyShips(ServerPlayer currentPlayer) {\\n        logger.finest(\\\"Entering method bombardEnemyShips.\\\");\\n        Map map = getFreeColServer().getGame().getMap();\\n        CombatModel combatModel = getFreeColServer().getGame().getCombatModel();\\n        for (Settlement settlement : currentPlayer.getSettlements()) {\\n            Colony colony = (Colony) settlement;\\n            if (colony.canBombardEnemyShip()){\\n                logger.fine(\\\"Colony \\\" + colony.getName() + \\\" can bombard enemy ships.\\\");\\n                Position colonyPosition = colony.getTile().getPosition();\\n                for (Direction direction : Direction.values()) {\\n                    Tile tile = map.getTile(Map.getAdjacent(colonyPosition, direction));\\n                                        if(tile == null || tile.isLand()){\\n                        continue;\\n                    }\\n                                                            List<Unit> unitList = new ArrayList<Unit>(tile.getUnitList());\\n                    Iterator<Unit> unitIterator = unitList.iterator();\\n                    while (unitIterator.hasNext()) {\\n                        Unit unit = unitIterator.next();\\n                        Player player = unit.getOwner();\\n                                                if(player == currentPlayer){\\n                                continue;\\n                        }\\n                                                if(currentPlayer.getStance(player) != Stance.WAR &&\\n                                                !unit.hasAbility(\\\"model.ability.piracy\\\")){\\n                                continue;\\n                        }\\n                        logger.info(colony.getName() + \\\" found enemy unit to bombard: \\\" + unit.getName() + \\\"(\\\" + unit.getOwner().getNationAsString() + \\\")\\\");\\n                                                CombatModel.CombatResult result = combatModel.generateAttackResult(colony, unit);\\n                                                Location repairLocation = null;\\n                        if(result.type == CombatModel.CombatResultType.WIN){\\n                                        repairLocation = player.getRepairLocation(unit);\\n                        }\\n                                                getGame().getCombatModel().bombard(colony, unit, result, repairLocation);\\n                                                                        int plunderGold = -1;\\n                        Iterator<Player> enemyPlayerIterator = getFreeColServer().getGame().getPlayerIterator();\\n                        while (enemyPlayerIterator.hasNext()) {\\n                                ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();\\n                                if (                                                enemyPlayer.getConnection() == null) {\\n                                        continue;\\n                                }\\n                                                                if(!unit.isVisibleTo(enemyPlayer)){\\n                                        continue;\\n                                }\\n                                Element opponentAttackElement = Message.createNewRootElement(\\\"opponentAttack\\\");                                 \\n                                opponentAttackElement.setAttribute(\\\"direction\\\", direction.toString());\\n                                opponentAttackElement.setAttribute(\\\"result\\\", result.type.toString());\\n                                opponentAttackElement.setAttribute(\\\"plunderGold\\\", Integer.toString(plunderGold));\\n                            opponentAttackElement.setAttribute(\\\"colony\\\", colony.getId());\\n                                opponentAttackElement.setAttribute(\\\"defender\\\", unit.getId());\\n                                opponentAttackElement.setAttribute(\\\"damage\\\", String.valueOf(result.damage));\\n                                                                if(enemyPlayer == player && repairLocation != null){\\n                                        opponentAttackElement.setAttribute(\\\"repairIn\\\", repairLocation.getId());\\n                                }\\n                                                                if (!enemyPlayer.canSee(colony.getTile())) {\\n                                        opponentAttackElement.setAttribute(\\\"update\\\", \\\"tile\\\");\\n                                        enemyPlayer.setExplored(colony.getTile());\\n                                        opponentAttackElement.appendChild(colony.getTile().toXMLElement(\\n                                                        enemyPlayer, opponentAttackElement.getOwnerDocument()));\\n                                }\\n                                                                if (enemyPlayer.canSee(unit.getTile())) { \\n                            opponentAttackElement.setAttribute(\\\"update\\\", \\\"unit\\\");\\n                            opponentAttackElement.appendChild(unit.toXMLElement(enemyPlayer, opponentAttackElement.getOwnerDocument()));\\n                                }\\n                                                                try {\\n                                        enemyPlayer.getConnection().send(opponentAttackElement);\\n                                } catch (IOException e) {\\n                                        logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName()\\n                                                        + \\\" with connection \\\" + enemyPlayer.getConnection());\\n                                }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    public java.util.Map<String,Object> getTransactionSession(Unit unit, Settlement settlement){\\n        java.util.Map<String, java.util.Map<String,Object>> unitTransactions = null;\\n        if(transactionSessions.containsKey(unit.getId())){\\n            unitTransactions = transactionSessions.get(unit.getId());\\n            if(unitTransactions.containsKey(settlement.getId())){\\n                return unitTransactions.get(settlement.getId());\\n            }\\n        }\\n                java.util.Map<String,Object> session = new HashMap<String,Object>();\\n                session.put(\\\"canGift\\\", true);\\n        session.put(\\\"canSell\\\", true);\\n        session.put(\\\"canBuy\\\", true);\\n        session.put(\\\"actionTaken\\\", false);\\n        session.put(\\\"hasSpaceLeft\\\", unit.getSpaceLeft() != 0);\\n        session.put(\\\"unitMoves\\\", unit.getMovesLeft());\\n        if(settlement.getOwner().getStance(unit.getOwner()) == Stance.WAR){\\n            session.put(\\\"canSell\\\", false);\\n            session.put(\\\"canBuy\\\", false);\\n        }\\n        else{\\n        \\t            if(unit.getSpaceTaken() == 0){\\n                session.put(\\\"canSell\\\", false);\\n            }\\n        }\\n                if(unit.getOwner().isAI()){\\n            return session;\\n        }\\n                if(unitTransactions == null){\\n            unitTransactions = new HashMap<String,java.util.Map<String, Object>>();\\n            transactionSessions.put(unit.getId(), unitTransactions);\\n        }\\n        unitTransactions.put(settlement.getId(), session);\\n        return session;\\n    }\\n    public void closeTransactionSession(Unit unit, Settlement settlement){\\n        java.util.Map<String, java.util.Map<String,Object>> unitTransactions;\\n                if(unit.getOwner().isAI()){\\n          return;  \\n        }\\n        if(!transactionSessions.containsKey(unit.getId())){\\n            throw new IllegalStateException(\\\"Trying to close a non-existing session\\\");\\n        }\\n        unitTransactions = transactionSessions.get(unit.getId());   \\n        if(!unitTransactions.containsKey(settlement.getId())){\\n            throw new IllegalStateException(\\\"Trying to close a non-existing session\\\");\\n        }\\n        unitTransactions.remove(settlement.getId());\\n        if(unitTransactions.isEmpty()){\\n            transactionSessions.remove(unit.getId());\\n        }\\n    }\\n    public boolean isTransactionSessionOpen(Unit unit, Settlement settlement){\\n                if(unit.getOwner().isAI()){\\n            return true;\\n        }\\n        if(!transactionSessions.containsKey(unit.getId())){\\n            return false;\\n        }\\n        if(settlement != null &&\\n           !transactionSessions.get(unit.getId()).containsKey(settlement.getId())){\\n                return false;\\n        }\\n        return true;\\n    }\\n}\""
        },
        {
            "content": "### Analysis of `Canvas.java` and `InGameController`\n\n#### **Canvas.java**\n- **Role**: This class serves as the main graphical interface component in the FreeCol client, extending `JDesktopPane`. It manages various UI elements like panels, dialogs, and internal frames for game interactions.\n- **Key Responsibilities**:\n  - Displays and manages different game-related panels (e.g., colony panel, Europe panel).\n  - Handles user interactions such as mouse and keyboard events.\n  - Coordinates with other GUI components to update the visual state of the game.\n\n#### **InGameController**\n- **Role**: A server-side controller that manages game logic during gameplay. It handles player turns, game progression, and interactions between players and the game world.\n- **Key Responsibilities**:\n  - Controls the flow of the game, including ending turns and determining the next player.\n  - Manages AI behavior and responses.\n  - Processes in-game actions such as declaring war, recruiting units, and handling economic changes.\n\n### **Connection Between Canvas.java and InGameController**\nWhile there are no direct coupling dependencies between these two classes, they play complementary roles:\n- **Canvas.java** is responsible for presenting the game state and handling user input.\n- **InGameController** processes game logic and updates the game state based on player actions.\n\nChanges in `Canvas.java` may affect how users interact with features managed by `InGameController`, particularly when new UI elements or interaction patterns are introduced that influence game logic.\n\n### Next Steps\nTo further explore potential ripple effects, we should examine the conceptual coupling between `Canvas.java` and other entities, especially those with high co-change confidence values like `GUI` and `FreeColClient`. Understanding their conceptual relationships will help identify which entities need synchronization.\n\nLet's start by analyzing the conceptual coupling between `Canvas.java` and `GUI`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_e1fcdb142b994b70ba9167",
                    "function": {
                        "arguments": "{\"entity1\": \"Canvas.java\", \"entity2\": \"GUI\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.83272225\""
        },
        {
            "content": "The conceptual coupling between `Canvas.java` and `GUI` is quite high (0.8327), indicating that these entities share significant semantic similarity or functional overlap. This suggests that changes in `Canvas.java` are likely to impact `GUI`, and vice versa.\n\n### Key Insights:\n- **Canvas.java** manages the visual components of the game interface.\n- **GUI** likely serves as a central manager for graphical elements and user interactions, coordinating with various panels and views.\n\nGiven this strong relationship, it's crucial to synchronize any changes in `Canvas.java` with updates in `GUI` to maintain consistency in the user experience and functionality.\n\n### Next Steps:\nTo better understand how `GUI` interacts with other components, let's retrieve its source code to explore its responsibilities and relationships further.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_f70787e3224941d094e60d",
                    "function": {
                        "arguments": "{\"entity\": \"GUI\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package net.sf.freecol.client.gui;\\nimport java.awt.AlphaComposite;\\nimport java.awt.Color;\\nimport java.awt.Composite;\\nimport java.awt.Dimension;\\nimport java.awt.Font;\\nimport java.awt.FontMetrics;\\nimport java.awt.Graphics;\\nimport java.awt.Graphics2D;\\nimport java.awt.Image;\\nimport java.awt.Point;\\nimport java.awt.Polygon;\\nimport java.awt.Rectangle;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.awt.font.TextLayout;\\nimport java.awt.geom.GeneralPath;\\nimport java.awt.geom.Rectangle2D;\\nimport java.awt.image.BufferedImage;\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Random;\\nimport java.util.Vector;\\nimport java.util.logging.Logger;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.JLabel;\\nimport javax.swing.JLayeredPane;\\nimport javax.swing.UIManager;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.client.ClientOptions;\\nimport net.sf.freecol.client.FreeColClient;\\nimport net.sf.freecol.client.gui.i18n.Messages;\\nimport net.sf.freecol.client.gui.panel.MapControls;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.Game;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.PathNode;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tension;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.TileImprovement;\\nimport net.sf.freecol.common.model.TileItemContainer;\\nimport net.sf.freecol.common.model.TileType;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.Map.Direction;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.model.Unit.UnitState;\\nimport net.sf.freecol.common.resources.ResourceManager;\\npublic final class GUI {\\n    private static final Logger logger = Logger.getLogger(GUI.class.getName());\\n    private final FreeColClient freeColClient;\\n    private Dimension size;\\n    private ImageLibrary lib;\\n    private TerrainCursor cursor;\\n    private ViewMode viewMode;\\n    private boolean inGame;\\n    private final Vector<GUIMessage> messages;\\n    private Map.Position selectedTile;\\n    private Map.Position focus = null;\\n    private Unit activeUnit;\\n    private PathNode currentPath;\\n    private PathNode gotoPath = null;\\n    private boolean gotoStarted = false;\\n        private int tileHeight,\\n    tileWidth,\\n    topSpace,\\n    topRows,\\n        bottomRows,\\n    leftSpace,\\n    rightSpace;\\n        private int bottomRow = -1;\\n        private int topRow;\\n            private int bottomRowY;\\n            private int topRowY;\\n        private int leftColumn;\\n        private int rightColumn;\\n            private int leftColumnX;\\n        public static final int UNIT_OFFSET = 20,\\n    TEXT_OFFSET_X = 2,     TEXT_OFFSET_Y = 13,     STATE_OFFSET_X = 25,\\n    STATE_OFFSET_Y = 10,\\n    ALARM_OFFSET_X = 37,\\n    ALARM_OFFSET_Y = 10,\\n    RUMOUR_OFFSET_X = 40,\\n    RUMOUR_OFFSET_Y = 5,\\n    MISSION_OFFSET_X = 49,\\n    MISSION_OFFSET_Y = 10,\\n    OTHER_UNITS_OFFSET_X = -5,     OTHER_UNITS_OFFSET_Y = 1,\\n    OTHER_UNITS_WIDTH = 3,\\n    MAX_OTHER_UNITS = 10,\\n    MESSAGE_COUNT = 3,\\n    MESSAGE_AGE = 30000; \\n    private boolean displayGrid = false;\\n    private int displayTileText = 0;\\n    private GeneralPath gridPath = null;\\n        public boolean displayCoordinates = false;\\n    public boolean displayColonyValue = false;\\n    public Player displayColonyValuePlayer = null;\\n    public boolean debugShowMission = false;\\n    public boolean debugShowMissionInfo = false;\\n    private volatile boolean blinkingMarqueeEnabled;\\n    private Image cursorImage;\\n    private JLabel coatOfArms;\\n    private JLabel greyLayer;\\n    private JLabel waitingForMsg;\\n    public GUI(FreeColClient freeColClient, Dimension size, ImageLibrary lib) {\\n        this.freeColClient = freeColClient;\\n        this.size = size;\\n        setImageLibrary(lib);\\n        inGame = false;\\n        logger.info(\\\"GUI created.\\\");\\n        messages = new Vector<GUIMessage>(MESSAGE_COUNT);\\n        viewMode = new ViewMode(this);\\n        logger.info(\\\"Starting in Move Units View Mode\\\");\\n        displayGrid = freeColClient.getClientOptions().getBoolean(ClientOptions.DISPLAY_GRID);\\n        displayTileText = freeColClient.getClientOptions().getDisplayTileText();\\n        blinkingMarqueeEnabled = true;\\n        cursor = new net.sf.freecol.client.gui.TerrainCursor();\\n    }\\n    public void setImageLibrary(ImageLibrary lib) {\\n        this.lib = lib;\\n        cursorImage = lib.getMiscImage(ImageLibrary.UNIT_SELECT);\\n        TileType tileType = FreeCol.getSpecification().getTileTypeList().get(0);\\n        tileHeight = lib.getTerrainImageHeight(tileType);\\n        tileWidth = lib.getTerrainImageWidth(tileType);\\n        updateMapDisplayVariables();\\n    }\\n    private void updateMapDisplayVariables() {\\n                topSpace = (size.height - tileHeight) / 2;\\n        if ((topSpace % (tileHeight / 2)) != 0) {\\n            topRows = topSpace / (tileHeight / 2) + 2;\\n        } else {\\n            topRows = topSpace / (tileHeight / 2) + 1;\\n        }\\n        bottomRows = topRows;\\n        leftSpace = (size.width - tileWidth) / 2;\\n        rightSpace = leftSpace;\\n    }\\n    public ViewMode getViewMode(){\\n        return viewMode;\\n    }\\n    public void startCursorBlinking() {\\n        final FreeColClient theFreeColClient = freeColClient; \\n        ActionListener taskPerformer = new ActionListener() {\\n            public void actionPerformed(ActionEvent event) {\\n                if (!blinkingMarqueeEnabled) return;\\n                if (getActiveUnit() != null && getActiveUnit().getTile() != null) {\\n                                        theFreeColClient.getCanvas().refreshTile(getActiveUnit().getTile());            \\n                }               \\n            }\\n        };\\n        cursor.addActionListener(taskPerformer);\\n        cursor.startBlinking();\\n    }\\n    public TerrainCursor getCursor(){\\n        return cursor;\\n    }\\n    public void setSize(Dimension size) {\\n        this.size = size;\\n        updateMapDisplayVariables();\\n    }\\n    public void moveTileCursor(Direction direction){\\n        Tile selectedTile = freeColClient.getGame().getMap().getTile(getSelectedTile());\\n        if(selectedTile != null){   \\n            Tile newTile = freeColClient.getGame().getMap().getNeighbourOrNull(direction, selectedTile);\\n            if(newTile != null)\\n                setSelectedTile(newTile.getPosition());\\n        }\\n        else{\\n            logger.warning(\\\"selectedTile is null\\\");\\n        }\\n    }\\n    public void setSelectedTile(Position selectedTile) {\\n        setSelectedTile(selectedTile, false);\\n    }\\n    public void setSelectedTile(Position selectedTile, boolean clearGoToOrders) {\\n        Game gameData = freeColClient.getGame();\\n        if (selectedTile != null && !gameData.getMap().isValid(selectedTile)) {\\n            return;\\n        }\\n        Position oldPosition = this.selectedTile;\\n        this.selectedTile = selectedTile;\\n        if (viewMode.getView() == ViewMode.MOVE_UNITS_MODE) {\\n            if (activeUnit == null ||\\n                (activeUnit.getTile() != null &&\\n                 !activeUnit.getTile().getPosition().equals(selectedTile))) {\\n                Tile t = gameData.getMap().getTile(selectedTile);\\n                if (t != null && t.getSettlement() != null) {\\n                    Settlement s = t.getSettlement();\\n                    if (s instanceof Colony && s.getOwner().equals(freeColClient.getMyPlayer())) {\\n                                                setFocus(selectedTile);\\n                        freeColClient.getCanvas().showColonyPanel((Colony) s);\\n                        return;\\n                    } else if (s instanceof IndianSettlement) {\\n                                                setFocus(selectedTile);\\n                        freeColClient.getCanvas().showIndianSettlementPanel((IndianSettlement)s);\\n                        return;\\n                    }\\n                }\\n                                Unit unitInFront = getUnitInFront(gameData.getMap().getTile(selectedTile));\\n                if (unitInFront != null) {\\n                    setActiveUnit(unitInFront);\\n                    updateGotoPathForActiveUnit();\\n                } else {\\n                    setFocus(selectedTile);\\n                }\\n            } else if (activeUnit.getTile() != null &&\\n                    activeUnit.getTile().getPosition().equals(selectedTile)) {\\n                                if (clearGoToOrders && activeUnit.getDestination() != null) {\\n                    freeColClient.getInGameController().clearGotoOrders(activeUnit);\\n                    updateGotoPathForActiveUnit();\\n                }\\n            }\\n        }\\n        freeColClient.getActionManager().update();\\n        freeColClient.getCanvas().updateJMenuBar();\\n        int x = 0, y = 0;\\n        MapControls mapControls = freeColClient.getCanvas().getMapControls();\\n        if (mapControls != null) {\\n            x = getWidth() - mapControls.getInfoPanelWidth();\\n            y = getHeight() - mapControls.getInfoPanelHeight();\\n        }\\n        freeColClient.getCanvas().repaint(x, y, getWidth(), getHeight());\\n                if ((!onScreen(selectedTile) &&\\n             freeColClient.getClientOptions().getBoolean(ClientOptions.JUMP_TO_ACTIVE_UNIT)) ||\\n            freeColClient.getClientOptions().getBoolean(ClientOptions.ALWAYS_CENTER)) {\\n                setFocus(selectedTile);\\n        } else {\\n            if (oldPosition != null) {\\n                freeColClient.getCanvas().refreshTile(oldPosition);\\n            }\\n            if (selectedTile != null) {\\n                freeColClient.getCanvas().refreshTile(selectedTile);\\n            }\\n        }\\n    }\\n    public void showColonyPanel(Position selectedTile) {\\n        Game gameData = freeColClient.getGame();\\n        if (selectedTile != null && !gameData.getMap().isValid(selectedTile)) {\\n            return;\\n        }\\n        if (viewMode.getView() == ViewMode.MOVE_UNITS_MODE) {\\n            Tile t = gameData.getMap().getTile(selectedTile);\\n            if (t != null && t.getSettlement() != null && t.getSettlement() instanceof Colony\\n                && t.getSettlement().getOwner().equals(freeColClient.getMyPlayer())) {\\n                setFocus(selectedTile);\\n                stopBlinking();\\n                freeColClient.getCanvas().showColonyPanel((Colony) t.getSettlement());\\n                return;\\n            }\\n        }\\n    }\\n    public void restartBlinking() {\\n        blinkingMarqueeEnabled = true;\\n    }\\n    public void stopBlinking() {\\n        blinkingMarqueeEnabled = false;\\n    }\\n    public Unit getUnitInFront(Tile unitTile) {\\n        if (unitTile == null || unitTile.getUnitCount() <= 0) {\\n            return null;\\n        }\\n        if (activeUnit != null && activeUnit.getTile() == unitTile) {\\n            return activeUnit;\\n        } else {\\n            if (unitTile.getSettlement() == null) {\\n                Unit bestDefendingUnit = null;\\n                if (activeUnit != null) {\\n                    bestDefendingUnit = unitTile.getDefendingUnit(activeUnit);\\n                    if (bestDefendingUnit != null) {\\n                        return bestDefendingUnit;\\n                    }\\n                }\\n                Unit movableUnit = unitTile.getMovableUnit();\\n                if (movableUnit != null && movableUnit.getLocation() == movableUnit.getTile()) {\\n                    return movableUnit;\\n                } else {\\n                    Unit bestPick = null;\\n                    Iterator<Unit> unitIterator = unitTile.getUnitIterator();\\n                    while (unitIterator.hasNext()) {\\n                        Unit u = unitIterator.next();\\n                        if (bestPick == null || bestPick.getMovesLeft() < u.getMovesLeft()) {\\n                            bestPick = u;\\n                        }\\n                    }\\n                    return bestPick;\\n                }\\n            } else {\\n                return null;\\n            }\\n        }\\n    }\\n    public Position getSelectedTile() {\\n        return selectedTile;\\n    }\\n    public Unit getActiveUnit() {\\n        return activeUnit;\\n    }\\n    public void setActiveUnit(Unit activeUnit) {\\n        if (activeUnit != null && activeUnit.getOwner() != freeColClient.getMyPlayer()) {\\n            freeColClient.getCanvas().repaint(0, 0, getWidth(), getHeight());\\n            return;\\n        }\\n        if (activeUnit != null && activeUnit.getTile() == null) {\\n            activeUnit = null;\\n        }\\n        this.activeUnit = activeUnit;\\n        if (activeUnit != null) {\\n            if (freeColClient.getGame().getCurrentPlayer() == freeColClient.getMyPlayer()) {\\n                if (activeUnit.getState() != UnitState.ACTIVE) {\\n                    freeColClient.getInGameController().clearOrders(activeUnit);\\n                }\\n            } else {\\n                freeColClient.getInGameController().clearGotoOrders(activeUnit);\\n            }\\n        }\\n        updateGotoPathForActiveUnit();\\n                if(viewMode.getView() == ViewMode.VIEW_TERRAIN_MODE && activeUnit != null)\\n            viewMode.changeViewMode(ViewMode.MOVE_UNITS_MODE);\\n                if (activeUnit != null) {\\n            setSelectedTile(activeUnit.getTile().getPosition());\\n        } else {\\n            freeColClient.getActionManager().update();\\n            freeColClient.getCanvas().updateJMenuBar();\\n            int x = 0, y = 0;\\n            MapControls mapControls = freeColClient.getCanvas().getMapControls();\\n            if (mapControls != null) {\\n                x = getWidth() - mapControls.getInfoPanelWidth();\\n                y = getHeight() - mapControls.getInfoPanelHeight();\\n            }\\n            freeColClient.getCanvas().repaint(x, y, getWidth(), getHeight());\\n        }\\n    }\\n    public Position getFocus() {\\n        return focus;\\n    }\\n    public void setFocus(Position focus) {\\n        this.focus = focus;\\n        forceReposition();\\n        freeColClient.getCanvas().repaint(0, 0, getWidth(), getHeight());\\n    }\\n    public void setFocusImmediately(Position focus) {\\n        this.focus = focus;\\n        forceReposition();\\n        freeColClient.getCanvas().paintImmediately(0, 0, getWidth(), getHeight());\\n    }\\n    public void setFocus(int x, int y) {\\n        setFocus(new Map.Position(x,y));\\n    }\\n    public int getMessageCount() {\\n        return messages.size();\\n    }\\n    public GUIMessage getMessage(int index) {\\n        return messages.get(index);\\n    }\\n    public synchronized void addMessage(GUIMessage message) {\\n        if (getMessageCount() == MESSAGE_COUNT) {\\n            messages.remove(0);\\n        }\\n        messages.add(message);\\n        freeColClient.getCanvas().repaint(0, 0, getWidth(), getHeight());\\n    }\\n    public synchronized boolean removeOldMessages() {\\n        long currentTime = new Date().getTime();\\n        boolean result = false;\\n        int i = 0;\\n        while (i < getMessageCount()) {\\n            long messageCreationTime = getMessage(i).getCreationTime().getTime();\\n            if ((currentTime - messageCreationTime) >= MESSAGE_AGE) {\\n                result = true;\\n                messages.remove(i);\\n            } else {\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n    public int getWidth() {\\n        return size.width;\\n    }\\n    public int getHeight() {\\n        return size.height;\\n    }\\n    public void display(Graphics2D g) {\\n        if ((freeColClient.getGame() != null)\\n                && (freeColClient.getGame().getMap() != null)\\n                && (focus != null)\\n                && inGame) {\\n            removeOldMessages();\\n            displayMap(g);\\n        } else {\\n            if (freeColClient.isMapEditor()) {\\n                g.setColor(Color.black);\\n                g.fillRect(0, 0, size.width, size.height);                \\n            } else {\\n                Image bgImage = ResourceManager.getImage(\\\"CanvasBackgroundImage\\\", size);\\n                if (bgImage != null) {\\n                    g.drawImage(bgImage, 0, 0, freeColClient.getCanvas());\\n                                        String versionStr = \\\"v. \\\" + FreeCol.getVersion();\\n                    Font oldFont = g.getFont();\\n                    Color oldColor = g.getColor();\\n                    Font newFont = oldFont.deriveFont(Font.BOLD);\\n                    TextLayout layout = new TextLayout(versionStr, newFont, g.getFontRenderContext());\\n                    Rectangle2D bounds = layout.getBounds();\\n                    float x = getWidth() - (float) bounds.getWidth() - 5;\\n                    float y = getHeight() - (float) bounds.getHeight();\\n                    g.setColor(Color.white);\\n                    layout.draw(g, x, y);\\n                                        g.setFont(oldFont);\\n                    g.setColor(oldColor);\\n                } else {\\n                    g.setColor(Color.black);\\n                    g.fillRect(0, 0, size.width, size.height);\\n                }\\n            }\\n        }\\n    }\\n    private int getLeftColumns() {\\n        return getLeftColumns(focus.getY());\\n    }\\n    private int getLeftColumns(int y) {\\n        int leftColumns;\\n        if ((y % 2) == 0) {\\n            leftColumns = leftSpace / tileWidth + 1;\\n            if ((leftSpace % tileWidth) > 32) {\\n                leftColumns++;\\n            }\\n        } else {\\n            leftColumns = leftSpace / tileWidth + 1;\\n            if ((leftSpace % tileWidth) == 0) {\\n                leftColumns--;\\n            }\\n        }\\n        return leftColumns;\\n    }\\n    private int getRightColumns() {\\n        return getRightColumns(focus.getY());\\n    }\\n    private int getRightColumns(int y) {\\n        int rightColumns;\\n        if ((y % 2) == 0) {\\n            rightColumns = rightSpace / tileWidth + 1;\\n            if ((rightSpace % tileWidth) == 0) {\\n                rightColumns--;\\n            }\\n        } else {\\n            rightColumns = rightSpace / tileWidth + 1;\\n            if ((rightSpace % tileWidth) > 32) {\\n                rightColumns++;\\n            }\\n        }\\n        return rightColumns;\\n    }\\n    private void positionMap() {\\n        Game gameData = freeColClient.getGame();\\n        if (focus == null) {\\n            return;\\n        }\\n        int x = focus.getX(),\\n            y = focus.getY();\\n        int leftColumns = getLeftColumns(),\\n            rightColumns = getRightColumns();\\n        if (y < topRows) {\\n                        bottomRow = (size.height / (tileHeight / 2)) - 1;\\n            if ((size.height % (tileHeight / 2)) != 0) {\\n                bottomRow++;\\n            }\\n            topRow = 0;\\n            bottomRowY = bottomRow * (tileHeight / 2);\\n            topRowY = 0;\\n        } else if (y >= (gameData.getMap().getHeight() - bottomRows)) {\\n                        bottomRow = gameData.getMap().getHeight() - 1;\\n            topRow = size.height / (tileHeight / 2);\\n            if ((size.height % (tileHeight / 2)) > 0) {\\n                topRow++;\\n            }\\n            topRow = gameData.getMap().getHeight() - topRow;\\n            bottomRowY = size.height - tileHeight;\\n            topRowY = bottomRowY - (bottomRow - topRow) * (tileHeight / 2);\\n        } else {\\n                        bottomRow = y + bottomRows;\\n            topRow = y - topRows;\\n            bottomRowY = topSpace + (tileHeight / 2) * bottomRows;\\n            topRowY = topSpace - topRows * (tileHeight / 2);\\n        }\\n        if (x < leftColumns) {\\n                        leftColumn = 0;\\n            rightColumn = size.width / tileWidth - 1;\\n            if ((size.width % tileWidth) > 0) {\\n                rightColumn++;\\n            }\\n            leftColumnX = 0;\\n        } else if (x >= (gameData.getMap().getWidth() - rightColumns)) {\\n                        rightColumn = gameData.getMap().getWidth() - 1;\\n            leftColumn = size.width / tileWidth;\\n            if ((size.width % tileWidth) > 0) {\\n                leftColumn++;\\n            }\\n            leftColumnX = size.width - tileWidth - tileWidth / 2 -\\n                leftColumn * tileWidth;\\n            leftColumn = rightColumn - leftColumn;\\n        } else {\\n                        leftColumn = x - leftColumns;\\n            rightColumn = x + rightColumns;\\n            leftColumnX = (size.width - tileWidth) / 2 - leftColumns * tileWidth;\\n        }\\n    }\\n    private void displayGotoPath(Graphics2D g, PathNode gotoPath) {\\n        if (gotoPath != null) {\\n            PathNode temp = gotoPath;\\n            while (temp != null) {\\n                Point p = getTilePosition(temp.getTile());\\n                if (p != null) {\\n                    Tile tile = temp.getTile();\\n                    Image image;\\n                    final Color textColor; \\n                    if (temp.getTurns() == 0) {\\n                        g.setColor(Color.GREEN);                        \\n                        image = getPathImage(activeUnit);\\n                        if (activeUnit != null \\n                                && tile.isExplored()\\n                                && activeUnit.isNaval()\\n                                && tile.isLand() \\n                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {\\n                            image = getPathImage(activeUnit.getFirstUnit());\\n                        }\\n                        textColor = Color.BLACK;\\n                    } else {\\n                        g.setColor(Color.RED);\\n                        image = getPathNextTurnImage(activeUnit);\\n                        if (activeUnit != null\\n                                && tile.isExplored()\\n                                && activeUnit.isNaval()\\n                                && tile.isLand() \\n                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {\\n                            image = getPathNextTurnImage(activeUnit.getFirstUnit());\\n                        }\\n                        textColor = Color.WHITE;\\n                    }                \\n                    if (image != null) {\\n                        g.drawImage(image, p.x + (tileWidth - image.getWidth(null))/2, p.y + (tileHeight - image.getHeight(null))/2, null);\\n                    } else {\\n                        g.fillOval(p.x + tileWidth/2, p.y + tileHeight/2, 10, 10);\\n                        g.setColor(Color.BLACK);\\n                        g.drawOval(p.x + tileWidth/2, p.y + tileHeight/2, 10, 10);\\n                    }                \\n                    if (temp.getTurns() > 0) {\\n                        BufferedImage stringImage = createStringImage(g, Integer.toString(temp.getTurns()), textColor, tileWidth, 12);\\n                        g.drawImage(stringImage, p.x + (tileWidth - stringImage.getWidth(null))/2, p.y + (tileHeight - stringImage.getHeight()) / 2, null);\\n                    }\\n                }                    \\n                temp = temp.next;\\n            }\\n        }\\n    }\\n    private int getXOffset(int clipLeftX, int tileY) {\\n        int xx = clipLeftX;\\n        if ((tileY % 2) != 0) {\\n            xx += tileWidth / 2;\\n        }\\n        return xx;\\n    }\\n    private void displayMap(Graphics2D g) {\\n        Rectangle clipBounds = g.getClipBounds();\\n        Map map = freeColClient.getGame().getMap();\\n        if (bottomRow < 0) {\\n            positionMap();\\n        }\\n        int clipTopRow = (clipBounds.y - topRowY) / (tileHeight / 2) - 1;\\n        int clipTopY = topRowY + clipTopRow * (tileHeight / 2);\\n        clipTopRow = topRow + clipTopRow;\\n        int clipLeftCol = (clipBounds.x - leftColumnX) / tileWidth - 1;\\n        int clipLeftX = leftColumnX + clipLeftCol * tileWidth;\\n        clipLeftCol = leftColumn + clipLeftCol;\\n        int clipBottomRow = (clipBounds.y + clipBounds.height - topRowY) / (tileHeight / 2);\\n        clipBottomRow = topRow + clipBottomRow;\\n        int clipRightCol = (clipBounds.x + clipBounds.width - leftColumnX) / tileWidth;\\n        clipRightCol = leftColumn + clipRightCol;\\n        if (displayGrid) {\\n            gridPath = new GeneralPath();\\n            gridPath.moveTo(0, 0);\\n            int nextX = tileWidth / 2;\\n            int nextY = - (tileHeight / 2);\\n            for (int i = 0; i <= ((clipRightCol - clipLeftCol) * 2 + 1); i++) {\\n                gridPath.lineTo(nextX, nextY);\\n                nextX += tileWidth / 2;\\n                if (nextY == - (tileHeight / 2)) {\\n                    nextY = 0;\\n                }\\n                else {\\n                    nextY = - (tileHeight / 2);\\n                }\\n            }\\n        }\\n        g.setColor(Color.black);\\n        g.fillRect(clipBounds.x, clipBounds.y, clipBounds.width, clipBounds.height);\\n        int xx;\\n        int yy = clipTopY;\\n                for (int tileY = clipTopRow; tileY <= clipBottomRow; tileY++) {\\n            xx = getXOffset(clipLeftX, tileY);\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                displayBaseTile(g, map, map.getTile(tileX, tileY), xx, yy, true);\\n                xx += tileWidth;\\n            }\\n            yy += tileHeight / 2;\\n        }\\n        List<Unit> darkUnits = new ArrayList<Unit>();\\n        List<Integer> darkUnitsX = new ArrayList<Integer>();\\n        List<Integer> darkUnitsY = new ArrayList<Integer>();\\n        yy = clipTopY;\\n                for (int tileY = clipTopRow; tileY <= clipBottomRow; tileY++) {\\n            xx = getXOffset(clipLeftX, tileY);\\n            if (displayGrid) {\\n                                g.translate(xx, yy + (tileHeight / 2));\\n                g.setColor(Color.BLACK);\\n                g.draw(gridPath);\\n                g.translate(- xx, - (yy + (tileHeight / 2)));\\n            }\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                Tile tile = map.getTile(tileX, tileY);\\n                                displayTileOverlays(g, map, tile, xx, yy, true, true);\\n                if (viewMode.displayTileCursor(tile,xx,yy)) {\\n                    drawCursor(g, xx, yy);\\n                }\\n                xx += tileWidth;\\n            }\\n            xx = getXOffset(clipLeftX, tileY);\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                Unit unitInFront = getUnitInFront(map.getTile(tileX, tileY));\\n                if (unitInFront != null) {\\n                    displayUnit(g, unitInFront, xx, yy);\\n                    if (unitInFront.isUndead()) {\\n                        darkUnits.add(unitInFront);\\n                        darkUnitsX.add(xx);\\n                        darkUnitsY.add(yy);\\n                    }\\n                }\\n                xx += tileWidth;\\n            }\\n            yy += tileHeight / 2;\\n        }\\n        if (darkUnits.size() > 0) {\\n            g.setColor(Color.BLACK);\\n            final Image im = getImageLibrary().getMiscImage(ImageLibrary.DARKNESS);\\n            for (int index=0; index<darkUnits.size(); index++) {\\n                final Unit u = darkUnits.get(index);\\n                final int x = darkUnitsX.get(index);\\n                final int y = darkUnitsY.get(index);            \\n                g.drawImage(im, x  + tileWidth/2 - im.getWidth(null)/2, y + tileHeight/2 - im.getHeight(null)/2, null);\\n                displayUnit(g, u, x, y);\\n            }\\n        }\\n                yy = clipTopY;\\n                for (int tileY = clipTopRow; tileY <= clipBottomRow; tileY++) {\\n            xx = getXOffset(clipLeftX, tileY);\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                Tile tile = map.getTile(tileX, tileY);\\n                if (tile != null && tile.getSettlement() instanceof Colony) {\\n                    Colony colony = (Colony) tile.getSettlement();\\n                    BufferedImage stringImage =\\n                        createColonyNameImage(g, colony,\\n                                              lib.getTerrainImageWidth(tile.getType()) * 4/3, 16);\\n                    g.drawImage(stringImage, \\n                                xx + (lib.getTerrainImageWidth(tile.getType()) - \\n                                      stringImage.getWidth())/2 + 1,\\n                                yy + (lib.getSettlementImage(colony).getHeight(null) + 1), null);\\n                }\\n                xx += tileWidth;\\n            }\\n            yy += tileHeight / 2;\\n        }\\n        displayGotoPath(g, currentPath);\\n        displayGotoPath(g, gotoPath);\\n        Canvas canvas = freeColClient.getCanvas();\\n                if (coatOfArms != null) {\\n            canvas.remove(coatOfArms, false);\\n            coatOfArms = null;\\n        }\\n        if (waitingForMsg != null) {\\n            canvas.remove(waitingForMsg, false);\\n            waitingForMsg = null;\\n        }\\n        if (!freeColClient.isMapEditor()\\n                && freeColClient.getGame() != null\\n                && freeColClient.getMyPlayer() != freeColClient.getGame().getCurrentPlayer()) {\\n            if (greyLayer == null) {\\n                greyLayer = buildGreyLayer();\\n            } else if (!greyLayer.getSize().equals(size)) {\\n                canvas.remove(greyLayer, false);\\n                greyLayer = buildGreyLayer();\\n            }\\n            if (greyLayer.getParent() == null) {                 canvas.add(greyLayer, JLayeredPane.DEFAULT_LAYER, false);\\n                canvas.moveToFront(greyLayer);\\n            }\\n            final Color currentPlayerColor = freeColClient.getGame().getCurrentPlayer().getColor();\\n            final String nation = freeColClient.getGame().getCurrentPlayer().getNationAsString();\\n            Image im = createStringImage(g, \\n                    Messages.message(\\\"waitingFor\\\", \\\"%nation%\\\", nation),\\n                    currentPlayerColor,\\n                    640,\\n                    18);\\n            final ImageIcon coatOfArmsIcon = lib.getCoatOfArmsImageIcon(freeColClient.getGame().getCurrentPlayer().getNation());\\n            final int cHeight = (coatOfArmsIcon != null) ? coatOfArmsIcon.getIconHeight() : 0;\\n            final int cWidth = (coatOfArmsIcon != null) ? coatOfArmsIcon.getIconWidth() : 0;\\n            waitingForMsg = new JLabel(new ImageIcon(im));\\n            waitingForMsg.setBounds((size.width - im.getWidth(null)) / 2, (size.height - im.getHeight(null) - cHeight) / 2, im.getWidth(null), im.getHeight(null));\\n            canvas.add(waitingForMsg, JLayeredPane.DEFAULT_LAYER, false);\\n            canvas.moveToFront(waitingForMsg);\\n            if (coatOfArmsIcon != null) {\\n                coatOfArms = new JLabel(coatOfArmsIcon);\\n                coatOfArms.setBounds((size.width - cWidth) / 2, (size.height - cHeight) / 2 + im.getHeight(null), cWidth, cHeight);\\n                canvas.add(coatOfArms, JLayeredPane.DEFAULT_LAYER, false);\\n                canvas.moveToFront(coatOfArms);\\n            }\\n        }\\n        else {\\n            if (greyLayer != null && greyLayer.getParent() != null) {\\n                canvas.remove(greyLayer, false);\\n            }\\n        }\\n                synchronized (this) {\\n            BufferedImage si = createStringImage(g, \\\"getSizes\\\", Color.WHITE, size.width, 12);\\n            yy = size.height - 300 - getMessageCount() * si.getHeight();            xx = 40;\\n            for (int i = 0; i < getMessageCount(); i++) {\\n                GUIMessage message = getMessage(i);\\n                g.drawImage(createStringImage(g, message.getMessage(), message.getColor(), size.width, 12), xx, yy, null);\\n                yy += si.getHeight();\\n            }\\n        }\\n    }\\n    private JLabel buildGreyLayer() {\\n        BufferedImage greyLayerImg = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_ARGB);\\n        Graphics2D greyG = greyLayerImg.createGraphics();\\n        greyG.setColor(Color.BLACK);\\n        Composite oldComposite = greyG.getComposite();\\n        greyG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.6f));\\n        greyG.fill(new Rectangle(0, 0, size.width, size.height));\\n        greyG.setComposite(oldComposite);\\n        JLabel toReturn = new JLabel(new ImageIcon(greyLayerImg));\\n        toReturn.setBounds(0, 0, size.width, size.height);\\n        return toReturn;\\n    }\\n    private Image getPathImage(Unit u) {\\n        if (u == null) {\\n            return null;\\n        } else {\\n            return ResourceManager.getImage(\\\"path.\\\" + u.getPathTypeImage() + \\\".image\\\");\\n        }\\n    }\\n    private Image getPathNextTurnImage(Unit u) {\\n        if (u == null) {\\n            return null;\\n        } else {\\n            return ResourceManager.getImage(\\\"path.\\\" + u.getPathTypeImage() + \\\".nextTurn.image\\\");\\n        }\\n    }\\n    public BufferedImage createStringImage(Graphics2D g, String nameString, Color color, int maxWidth, int preferredFontSize) {\\n        return createStringImage(null, g, nameString, color, maxWidth, preferredFontSize);\\n    }\\n    public BufferedImage createStringImage(JComponent c, String nameString, Color color, int maxWidth, int preferredFontSize) {\\n        return createStringImage(c, null, nameString, color, maxWidth, preferredFontSize);\\n    }    \\n    private BufferedImage createStringImage(JComponent c, Graphics g, String nameString, Color color, int maxWidth, int preferredFontSize) {        \\n        if (color == null) {\\n            logger.warning(\\\"createStringImage called with color null\\\");\\n            color = Color.WHITE;\\n        }\\n        Font nameFont = (c != null) ? c.getFont() : g.getFont();\\n        FontMetrics nameFontMetrics = (c != null) ? c.getFontMetrics(nameFont) : g.getFontMetrics(nameFont);\\n        BufferedImage bi = null;\\n        int fontSize = preferredFontSize;\\n        do {\\n            nameFont = nameFont.deriveFont(Font.BOLD, fontSize);            \\n            nameFontMetrics = (c != null) ? c.getFontMetrics(nameFont) : g.getFontMetrics(nameFont);\\n            bi = new BufferedImage(nameFontMetrics.stringWidth(nameString) + 4, nameFontMetrics.getMaxAscent() + nameFontMetrics.getMaxDescent(), BufferedImage.TYPE_INT_ARGB);\\n            fontSize -= 2;\\n        } while (bi.getWidth() > maxWidth);\\n        Graphics2D big = bi.createGraphics();\\n        big.setColor(color);\\n        big.setFont(nameFont);\\n        big.drawString(nameString, 2, nameFontMetrics.getMaxAscent());\\n        int playerColor = color.getRGB();\\n        for (int biX=0; biX<bi.getWidth(); biX++) {\\n            for (int biY=0; biY<bi.getHeight(); biY++) {\\n                int r = bi.getRGB(biX, biY);\\n                if (r == playerColor) {\\n                    continue;\\n                }\\n                for (int cX=-1; cX <=1; cX++) {\\n                    for (int cY=-1; cY <=1; cY++) {\\n                        if (biX+cX >= 0 && biY+cY >= 0 && biX+cX < bi.getWidth() && biY+cY < bi.getHeight() && bi.getRGB(biX + cX, biY + cY) == playerColor) {\\n                            bi.setRGB(biX, biY, getStringBorderColor(color).getRGB());\\n                            continue;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return bi;\\n    }\\n    private BufferedImage createColonyNameImage(Graphics g, Colony colony,\\n                                                int maxWidth, int preferredFontSize) {        \\n        return createStringImage((Graphics2D) g,\\n                colony.getName(),\\n                colony.getOwner().getColor(),\\n                maxWidth,\\n                preferredFontSize);\\n    }\\n    public void drawRoad(Graphics2D g, long seed, int x1, int y1, int x2, int y2) {\\n        final int MAX_CORR = 4;\\n        Color oldColor = g.getColor();\\n        Random roadRandom = new Random(seed);\\n        int i = Math.max(Math.abs(x2-x1), Math.abs(y2-y1));\\n        int baseX = x1;\\n        int baseY = y1;\\n        double addX = (x2-x1)/((double) i);\\n        double addY = (y2-y1)/((double) i);\\n        int corr = 0;\\n        int xCorr = 0;\\n        int yCorr = 0;\\n        int lastDiff = 1;\\n        g.setColor(new Color(128, 64, 0));\\n        g.drawLine(baseX, baseY, baseX, baseY);\\n        for (int j=1; j<=i; j++) {\\n            int oldCorr = corr;\\n                            corr = corr + roadRandom.nextInt(3)-1;\\n                if (oldCorr != corr) {\\n                    lastDiff = oldCorr - corr;\\n                }\\n            if (Math.abs(corr) > MAX_CORR || Math.abs(corr) >= i-j) {\\n                if (corr > 0) {\\n                    corr--;\\n                } else {\\n                    corr++;\\n                }\\n            }\\n            if (corr != oldCorr) {\\n                g.setColor(new Color(128, 128, 0));\\n                g.drawLine(baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr, baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr);\\n            } else {\\n                int oldXCorr = 0;\\n                int oldYCorr = 0;\\n                if (x2-x1 == 0) {\\n                    oldXCorr = corr+lastDiff;\\n                    oldYCorr = 0;\\n                } else if (y2-y1 == 0) {\\n                    oldXCorr = 0;\\n                    oldYCorr = corr+lastDiff;\\n                } else {\\n                    if (corr > 0) {\\n                        oldXCorr = corr+lastDiff;\\n                    } else {\\n                        oldYCorr = corr+lastDiff;\\n                    }\\n                }\\n                g.setColor(new Color(128, 128, 0));\\n                g.drawLine(baseX+(int) (j*addX)+oldXCorr, baseY+(int) (j*addY)+oldYCorr, baseX+(int) (j*addX)+oldXCorr, baseY+(int) (j*addY)+oldYCorr);\\n            }\\n            if (x2-x1 == 0) {\\n                xCorr = corr;\\n                yCorr = 0;\\n            } else if (y2-y1 == 0) {\\n                xCorr = 0;\\n                yCorr = corr;\\n            } else {\\n                if (corr > 0) {\\n                    xCorr = corr;\\n                } else {\\n                    yCorr = corr;\\n                }\\n            }\\n            g.setColor(new Color(128, 64, 0));\\n            g.drawLine(baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr, baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr);\\n        }\\n        g.setColor(oldColor);\\n    }\\n    public void displayColonyTile(Graphics2D g, Map map, Tile tile, int x, int y, Colony colony) {\\n        displayBaseTile(g, map, tile, x, y, false);        \\n        Unit occupyingUnit = colony.getColonyTile(tile).getOccupyingUnit();\\n        Settlement settlement = tile.getOwningSettlement();\\n        int price = colony.getOwner().getLandPrice(tile);\\n        if ((settlement != null &&\\n             (settlement instanceof Colony && settlement != colony) ||\\n             (settlement instanceof IndianSettlement && price > 0)) ||\\n            occupyingUnit != null) {\\n                        g.drawImage(lib.getMiscImage(ImageLibrary.TILE_TAKEN), x, y, null);\\n        }\\n        displayTileOverlays(g, map, tile, x, y, false, false);\\n        if (price > 0 && tile.getSettlement() == null) {\\n                        Image image = lib.getMiscImage(ImageLibrary.TILE_OWNED_BY_INDIANS);\\n            g.drawImage(image, x+tileWidth/2-image.getWidth(null)/2, y+tileHeight/2-image.getHeight(null)/2, null);\\n        }\\n        if (occupyingUnit != null) {\\n            ImageIcon image = lib.getScaledImageIcon(lib.getUnitImageIcon(occupyingUnit), 0.5f);\\n            g.drawImage(image.getImage(), (x + tileWidth / 4) - image.getIconWidth() / 2,\\n                    (y + tileHeight / 2) - image.getIconHeight() / 2, null);\\n                        displayOccupationIndicator(g, occupyingUnit, x + (int) (STATE_OFFSET_X * lib.getScalingFactor()), y);\\n        }\\n    }\\n    public void displayTerrain(Graphics2D g, Map map, Tile tile, int x, int y) {\\n        displayBaseTile(g, map, tile, x, y, true);\\n        displayAdditionsAndImprovements(g, map, tile, x, y);\\n            }\\n    public void displayTile(Graphics2D g, Map map, Tile tile, int x, int y) {\\n        displayTile(g, map, tile, x, y, true);\\n    }\\n    public void displayTile(Graphics2D g, Map map, Tile tile, int x, int y, boolean drawUnexploredBorders) {\\n        displayBaseTile(g, map, tile, x, y, drawUnexploredBorders);\\n        displayTileOverlays(g, map, tile, x, y, drawUnexploredBorders, true);\\n    }\\n    private void displayBaseTile(Graphics2D g, Map map, Tile tile, int x, int y, boolean drawUnexploredBorders) {\\n        if (tile == null) {\\n            return;\\n        }\\n        g.drawImage(lib.getTerrainImage(tile.getType(), tile.getX(), tile.getY()), x, y, null);\\n        Map.Position pos = new Map.Position(tile.getX(), tile.getY());\\n        for (Direction direction : Direction.values()) {\\n            Map.Position p = Map.getAdjacent(pos, direction);\\n            if (map.isValid(p)) {\\n                Tile borderingTile = map.getTile(p.x, p.y);\\n                if (borderingTile == null) {\\n                                        logger.warning(\\\"Bordering Tile was null.\\\");\\n                    continue;\\n                }\\n                if (!drawUnexploredBorders && !borderingTile.isExplored() &&\\n                    (direction == Direction.SE || direction == Direction.S ||\\n                     direction == Direction.SW)) {\\n                    continue;\\n                }\\n                if (tile.getType() == borderingTile.getType()) {\\n                                        continue;\\n                }\\n                else if (tile.isLand() && !borderingTile.isLand()) {\\n                                        continue;\\n                }\\n                else if (!tile.isLand() && borderingTile.isLand() && borderingTile.isExplored()) {\\n                                        if (borderingTile.getType().getArtCoast() != null) {\\n                        g.drawImage(lib.getCoastImage(borderingTile.getType(), direction,\\n                                                        tile.getX(), tile.getY()),\\n                                                        x, y, null);\\n                    }\\n                                        g.drawImage(lib.getBorderImage(borderingTile.getType(), direction,\\n                                                    tile.getX(), tile.getY()),\\n                                                    x, y, null);\\n                } else if (tile.isExplored() && borderingTile.isExplored()) {\\n                    if (tile.getType().getArtBasic().equals(borderingTile.getType().getArtBasic())) {\\n                                                continue;\\n                    }\\n                    else if (borderingTile.getType().getIndex() < tile.getType().getIndex()) {\\n                                                g.drawImage(lib.getBorderImage(borderingTile.getType(), direction,\\n                                                        tile.getX(), tile.getY()),\\n                                                        x, y, null);\\n                    }\\n                }\\n            }\\n        }\\n    }    \\n    private void displayTileOverlays(Graphics2D g, Map map, Tile tile, int x, int y,\\n                                     boolean drawUnexploredBorders, boolean withNumber) {\\n        if (tile != null) {\\n            if (drawUnexploredBorders) {\\n                displayUnexploredBorders(g, map, tile, x, y);\\n            }\\n            displayAdditionsAndImprovements(g, map, tile, x, y);\\n            displaySettlement(g, map, tile, x, y, withNumber);\\n            displayFogOfWar(g, map, tile, x, y);\\n            displayOptionalValues(g, map, tile, x, y);\\n        }\\n    }\\n    private void displayAdditionsAndImprovements(Graphics2D g, Map map, Tile tile, int x, int y) {  \\n        Map.Position pos = new Map.Position(tile.getX(), tile.getY());\\n        if (!tile.isExplored()) {\\n            g.drawImage(lib.getTerrainImage(null, tile.getX(), tile.getY()), x, y, null);\\n        } else {\\n                        if (tile.getType().getArtOverlay() != null) {\\n                g.drawImage(lib.getOverlayImage(tile.getType(), tile.getX(), tile.getY()), x, y - (int) (32 * lib.getScalingFactor()), null);\\n            }\\n            TileItemContainer tic = tile.getTileItemContainer();\\n            if (tic == null) {\\n                if(tile.isForested()) {\\n                    g.drawImage(lib.getForestImage(tile.getType()), x, y, null);\\n                }\\n            } else {\\n                List<TileImprovement> tiList = tile.getCompletedTileImprovements();\\n                List<TileImprovement> tiList2 = new ArrayList<TileImprovement>();\\n                                                for (TileImprovement ti : tiList) {\\n                    if (ti == tic.getRiver() || ti == tic.getRoad())\\n                        continue;\\n                    if (!ti.getType().isArtOverTrees()) {\\n                        tiList2.add(ti);\\n                    } else if (ti.getType().getArtOverlay() != null) {\\n                                                g.drawImage(ResourceManager.getImage(ti.getType().getArtOverlay()), x, y, null);\\n                    }\\n                }\\n                                if (tic.hasRiver() && tic.getRiver().getMagnitude() < TileImprovement.FJORD_RIVER) {\\n                    g.drawImage(lib.getRiverImage(tic.getRiverStyle()), x, y, null);\\n                }\\n                if (tile.isForested()) {\\n                    g.drawImage(lib.getForestImage(tile.getType()), x, y, null);\\n                }\\n                for (TileImprovement ti : tiList2) {\\n                    if (ti == tic.getRiver() || ti == tic.getRoad())\\n                        continue;\\n                    if (ti.getType().getArtOverlay() != null) {\\n                                                g.drawImage(ResourceManager.getImage(ti.getType().getArtOverlay()), x, y, null);\\n                    }\\n                }\\n                if (tile.hasResource()) {\\n                    Image bonusImage = lib.getBonusImage(tic.getResource().getType());\\n                    if (bonusImage != null) {\\n                        g.drawImage(bonusImage, x + tileWidth/2 - bonusImage.getWidth(null)/2,\\n                                    y + tileHeight/2 - bonusImage.getHeight(null)/2, null);\\n                    }\\n                }\\n                                if (tile.hasRoad()) {\\n                    long seed = Long.parseLong(Integer.toString(tile.getX()) + Integer.toString(tile.getY()));\\n                    boolean connectedRoad = false;\\n                    for (Direction direction : Direction.values()) {\\n                        Map.Position p = Map.getAdjacent(pos, direction);\\n                        if (map.isValid(p)) {\\n                            Tile borderingTile = map.getTile(p);\\n                            if (borderingTile.hasRoad()) {\\n                                connectedRoad =  true;\\n                                int nx = x + tileWidth/2;\\n                                int ny = y + tileHeight/2;\\n                                switch (direction) {\\n                                case N : nx = x + tileWidth/2; ny = y; break;\\n                                case NE: nx = x + (tileWidth*3)/4; ny = y + tileHeight/4; break;\\n                                case E : nx = x + tileWidth; ny = y + tileHeight/2; break;\\n                                case SE: nx = x + (tileWidth*3)/4; ny = y + (tileHeight*3)/4; break;\\n                                case S : nx = x + tileWidth/2; ny = y + tileHeight; break;\\n                                case SW: nx = x + tileWidth/4; ny = y + (tileHeight*3)/4; break;\\n                                case W : nx = x; ny = y + tileHeight/2; break;\\n                                case NW: nx = x + tileWidth/4; ny = y + tileHeight/4; break;\\n                                }\\n                                drawRoad(g, seed, x + tileWidth/2, y + tileHeight/2, nx, ny);\\n                            }\\n                        }\\n                    }\\n                    if (!connectedRoad) {\\n                        drawRoad(g, seed, x + tileWidth/2 - 10, y + tileHeight/2, x + tileWidth/2 + 10, y + tileHeight/2);\\n                        drawRoad(g, seed, x + tileWidth/2, y + tileHeight/2 - 10, x + tileWidth/2, y + tileHeight/2 + 10);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    private void displaySettlement(Graphics2D g, Map map, Tile tile, int x, int y, boolean withNumber) {  \\n        if (tile.isExplored()) {\\n            Settlement settlement = tile.getSettlement();\\n            if (settlement != null) {\\n                if (settlement instanceof Colony) {\\n                    Image colonyImage = lib.getSettlementImage(settlement);\\n                                        g.drawImage(colonyImage,\\n                                x + (lib.getTerrainImageWidth(tile.getType()) -\\n                                     colonyImage.getWidth(null)) / 2,\\n                                y + (lib.getTerrainImageHeight(tile.getType()) -\\n                                     colonyImage.getHeight(null)) / 2, null);\\n                    if (withNumber) {\\n                        String populationString = Integer.toString(((Colony)settlement).getUnitCount());\\n                        Color theColor = null;\\n                        int bonus = ((Colony)settlement).getProductionBonus();\\n                        switch (bonus) {\\n                        case 2:\\n                            theColor = Color.BLUE;\\n                            break;\\n                        case 1:\\n                            theColor = Color.GREEN;\\n                            break;\\n                        case -1:\\n                            theColor = Color.ORANGE;\\n                            break;\\n                        case -2:\\n                            theColor = Color.RED;\\n                            break;\\n                        default:\\n                            theColor = Color.WHITE;\\n                        break;\\n                        }\\n                        BufferedImage stringImage = createStringImage(g, populationString, theColor, lib.getTerrainImageWidth(tile.getType()), 12);\\n                        g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType()) - stringImage.getWidth())/2 + 1, y + ((lib.getTerrainImageHeight(tile.getType()) - stringImage.getHeight()) / 2) + 1, null);\\n                    }\\n                    g.setColor(Color.BLACK);\\n                } else if (settlement instanceof IndianSettlement) {\\n                    IndianSettlement indianSettlement = (IndianSettlement) settlement;\\n                    Image settlementImage = lib.getSettlementImage(settlement);\\n                                        g.drawImage(settlementImage,\\n                                x + (lib.getTerrainImageWidth(tile.getType()) -\\n                                     settlementImage.getWidth(null)) / 2,\\n                                y + (lib.getTerrainImageHeight(tile.getType()) - \\n                                     settlementImage.getHeight(null)) / 2, null);\\n                                        g.drawImage(lib.getColorChip(indianSettlement.getOwner().getColor()),\\n                                x + (int) (STATE_OFFSET_X * lib.getScalingFactor()),\\n                                y + (int) (STATE_OFFSET_Y * lib.getScalingFactor()), null);\\n                                        Unit missionary = indianSettlement.getMissionary();\\n                    if (missionary != null) {\\n                        boolean expert = missionary.hasAbility(\\\"model.ability.expertMissionary\\\");\\n                        g.drawImage(lib.getMissionChip(missionary.getOwner().getColor(), expert),\\n                                    x + (int) (STATE_OFFSET_X * lib.getScalingFactor()) +\\n                                    (MISSION_OFFSET_X - STATE_OFFSET_X),\\n                                    y + (int) (MISSION_OFFSET_Y * lib.getScalingFactor()), null);\\n                    }\\n                                        if (freeColClient.getMyPlayer() != null) {\\n                        Tension alarm = indianSettlement.getAlarm(freeColClient.getMyPlayer());\\n                        if (alarm != null) {\\n                                                        final boolean visited = indianSettlement.hasBeenVisited(freeColClient.getMyPlayer());\\n                            g.drawImage(lib.getAlarmChip(alarm.getLevel(), visited),\\n                                        x + (int) (STATE_OFFSET_X * lib.getScalingFactor()) +\\n                                        (ALARM_OFFSET_X - STATE_OFFSET_X),\\n                                        y + (int) (ALARM_OFFSET_Y  * lib.getScalingFactor()), null);\\n                        }\\n                    }\\n                    g.setColor(Color.BLACK);\\n                    if (indianSettlement.isCapital()) {\\n                                                g.drawString(\\\"*\\\",\\n                                     x + (STATE_OFFSET_X * lib.getScalingFactor()) + TEXT_OFFSET_X + 1,\\n                                     y + (int) (STATE_OFFSET_Y * lib.getScalingFactor()) + TEXT_OFFSET_Y + 2);\\n                    } else {\\n                        g.drawString(\\\"-\\\", \\n                                     x + (int) (STATE_OFFSET_X * lib.getScalingFactor()) + TEXT_OFFSET_X,\\n                                     y + (int) (STATE_OFFSET_Y * lib.getScalingFactor()) + TEXT_OFFSET_Y);\\n                    }\\n                } else {\\n                    logger.warning(\\\"Requested to draw unknown settlement type.\\\");\\n                }\\n            } else if (tile.hasLostCityRumour()) {\\n                g.drawImage(lib.getMiscImage(ImageLibrary.LOST_CITY_RUMOUR),\\n                            x + (int) (RUMOUR_OFFSET_X * lib.getScalingFactor()),\\n                            y + (int) (RUMOUR_OFFSET_Y * lib.getScalingFactor()), null);\\n            }\\n        }\\n    }\\n    private void displayFogOfWar(Graphics2D g, Map map, Tile tile, int x, int y) {  \\n        if (tile.isExplored()) {\\n            final boolean displayFogOfWar = freeColClient.getClientOptions().getBoolean(ClientOptions.DISPLAY_FOG_OF_WAR);\\n            if (displayFogOfWar\\n                    && freeColClient.getMyPlayer() != null\\n                    && !freeColClient.getMyPlayer().canSee(tile)) {\\n                g.setColor(Color.BLACK);\\n                Composite oldComposite = g.getComposite();\\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));\\n                Polygon pol = new Polygon(new int[] {x + tileWidth/2, x + tileWidth, x + tileWidth/2, x},\\n                                          new int[] {y, y + tileHeight/2, y + tileHeight, y + tileHeight/2},\\n                                          4);\\n                g.fill(pol);\\n                g.setComposite(oldComposite);\\n            }\\n        }\\n    }\\n    private void displayUnexploredBorders(Graphics2D g, Map map, Tile tile, int x, int y) {  \\n        if (tile.isExplored()) {\\n            Map.Position pos = new Map.Position(tile.getX(), tile.getY());\\n            for (Direction direction : Direction.values()) {\\n                Map.Position p = Map.getAdjacent(pos, direction);\\n                if (map.isValid(p)) {\\n                    Tile borderingTile = map.getTile(p);\\n                    if (borderingTile == null || borderingTile.isExplored()){\\n                        continue;\\n                    }\\n                    g.drawImage(lib.getBorderImage(null, direction, tile.getX(), tile.getY()), x, y, null);\\n                }\\n            }\\n        }\\n    }\\n    private void displayOptionalValues(Graphics2D g, Map map, Tile tile, int x, int y) {\\n        switch (displayTileText) {\\n        case ClientOptions.DISPLAY_TILE_TEXT_EMPTY:\\n            break;\\n        case ClientOptions.DISPLAY_TILE_TEXT_NAMES:\\n            if (tile.getName() != null) {\\n                String tileName = tile.getName();\\n                g.setColor(Color.BLACK);\\n                int b = getBreakingPoint(tileName);\\n                if (b == -1) {\\n                    g.drawString(tileName, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));\\n                } else {\\n                    g.drawString(tileName.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);\\n                    g.drawString(tileName.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);\\n                }\\n            }\\n            break;\\n        case ClientOptions.DISPLAY_TILE_TEXT_OWNERS:\\n            if (tile.getOwner() != null) {\\n                String tileOwner = tile.getOwner().getNationAsString();\\n                g.setColor(Color.BLACK);\\n                int b = getBreakingPoint(tileOwner);\\n                if (b == -1) {\\n                    g.drawString(tileOwner, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));\\n                } else {\\n                    g.drawString(tileOwner.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);\\n                    g.drawString(tileOwner.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);\\n                }\\n            }\\n            break;\\n        case ClientOptions.DISPLAY_TILE_TEXT_REGIONS:\\n            if (tile.getRegion() != null) {\\n                String regionString = tile.getRegion().getDisplayName();\\n                g.setColor(Color.BLACK);\\n                int b = getBreakingPoint(regionString);\\n                if (b == -1) {\\n                    g.drawString(regionString, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));\\n                } else {\\n                    g.drawString(regionString.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);\\n                    g.drawString(regionString.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);\\n                }\\n            }\\n            break;\\n        default:\\n            logger.warning(\\\"displayTileText out of range\\\");\\n            break;\\n        }\\n        g.setColor(Color.BLACK);\\n        if (displayCoordinates) {\\n            String posString = tile.getX() + \\\", \\\" + tile.getY();\\n            g.drawString(posString, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(posString))/2, y + (lib.getTerrainImageHeight(tile.getType()) - g.getFontMetrics().getAscent())/2);\\n        }\\n        if (displayColonyValue && tile.isExplored() && tile.isLand()) {\\n            String valueString;\\n            if (displayColonyValuePlayer == null) {\\n                valueString = Integer.toString(tile.getColonyValue());\\n            } else {\\n                valueString = Integer.toString(displayColonyValuePlayer.getColonyValue(tile));\\n            }\\n            g.drawString(valueString, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(valueString))/2, y + (lib.getTerrainImageHeight(tile.getType()) - g.getFontMetrics().getAscent())/2);\\n        }\\n    }\\n    public void stopGoto() {\\n        freeColClient.getCanvas().setCursor(null);\\n        setGotoPath(null);\\n        updateGotoPathForActiveUnit();\\n        gotoStarted = false;\\n    }\\n    public void startGoto() {\\n        gotoStarted = true;\\n        freeColClient.getCanvas().setCursor((java.awt.Cursor) UIManager.get(\\\"cursor.go\\\"));\\n        setGotoPath(null);\\n    }\\n    public boolean isGotoStarted() {\\n        return gotoStarted;\\n    }\\n    public void updateGotoPathForActiveUnit() {\\n        if (activeUnit == null || activeUnit.getDestination() == null) {\\n            currentPath = null;\\n        } else {\\n            if (activeUnit.getDestination() instanceof Europe) {\\n                currentPath = freeColClient.getGame().getMap().findPathToEurope(activeUnit, activeUnit.getTile());\\n            } else if (activeUnit.getDestination().getTile() == activeUnit.getTile()) {\\n                                currentPath = null;\\n            } else {\\n                currentPath = activeUnit.findPath(activeUnit.getDestination().getTile());\\n            }\\n        }\\n    }\\n    public void setGotoPath(PathNode gotoPath) {\\n        this.gotoPath = gotoPath;\\n        freeColClient.getCanvas().refresh();\\n    }\\n    public PathNode getGotoPath() {\\n        return gotoPath;\\n    }\\n    public void setDisplayGrid(boolean displayGrid) {\\n        this.displayGrid = displayGrid;\\n    }\\n    public void setDisplayTileText(int tileTextType) {\\n        this.displayTileText = tileTextType;\\n    }\\n    public int getBreakingPoint(String string) {\\n        int center = string.length() / 2;\\n        int bestIndex = string.indexOf(' ');\\n        int index = 0;\\n        while (index != -1 && index != bestIndex) {\\n            if (Math.abs(center-index) < Math.abs(center-bestIndex)) {\\n                bestIndex = index;\\n            }\\n            index = string.indexOf(' ', bestIndex);\\n        }\\n        if (bestIndex == 0 || bestIndex == string.length()) {\\n            return -1;\\n        } else {\\n            return bestIndex;\\n        }\\n    }\\n    private Image getOccupationIndicatorImage(Unit unit) {\\n        Image chip = lib.getColorChip(unit.getOwner().getColor());\\n        BufferedImage img = new BufferedImage(chip.getWidth(null), chip.getHeight(null), BufferedImage.TYPE_INT_ARGB);\\n        Graphics g = img.getGraphics();\\n        g.drawImage(chip, 0, 0, null);\\n        g.setColor(getForegroundColor(unit.getOwner().getColor()));\\n        String occupationString;\\n        if (unit.getOwner() != freeColClient.getMyPlayer()\\n                && unit.isNaval()) {\\n            occupationString = Integer.toString(unit.getVisibleGoodsCount());\\n        } else {\\n            occupationString = unit.getOccupationIndicator();\\n            if (unit.getState() == UnitState.FORTIFIED)\\n                g.setColor(Color.GRAY);\\n        }\\n        g.drawString(occupationString, TEXT_OFFSET_X, TEXT_OFFSET_Y);\\n        return img;\\n    }\\n    private Color getForegroundColor(Color background) {\\n        if (background.getRed() * 0.3\\n                + background.getGreen() * 0.59\\n                + background.getBlue() * 0.11 < 126) {\\n            return Color.WHITE;\\n        } else {\\n            return Color.BLACK;\\n        }\\n    }\\n    private Color getStringBorderColor(Color color) {\\n        if (color.getRed() * 0.3\\n                + color.getGreen() * 0.59\\n                + color.getBlue() * 0.11 < 10) {\\n            return Color.WHITE;\\n        } else {\\n            return Color.BLACK;\\n        }\\n    }\\n    public void displayOccupationIndicator(Graphics g, Unit unit, int x, int y) {\\n        g.drawImage(getOccupationIndicatorImage(unit), x, y, null);\\n    }\\n    private void displayUnit(Graphics2D g, Unit unit, int x, int y) {\\n        try {\\n                                    if (viewMode.displayUnitCursor(unit,x,y)) {\\n                drawCursor(g,x,y);\\n            }\\n                                    Image image = lib.getUnitImageIcon(unit, unit.getState() == UnitState.SENTRY).getImage();\\n            Point p = getUnitImagePositionInTile(image, x, y);\\n            g.drawImage(image, p.x, p.y, null);\\n                        displayOccupationIndicator(g, unit, x + (int) (STATE_OFFSET_X * lib.getScalingFactor()), y);\\n                        int unitsOnTile = 0;\\n            if (unit.getTile() != null) {\\n                                                                unitsOnTile = unit.getTile().getTotalUnitCount();\\n            }\\n            if (unitsOnTile > 1) {\\n                g.setColor(Color.WHITE);\\n                int unitLinesY = y + OTHER_UNITS_OFFSET_Y;\\n                for (int i = 0; (i < unitsOnTile) && (i < MAX_OTHER_UNITS); i++) {\\n                    g.drawLine(x + (int) ((STATE_OFFSET_X + OTHER_UNITS_OFFSET_X) * lib.getScalingFactor()), unitLinesY, x + (int) ((STATE_OFFSET_X + OTHER_UNITS_OFFSET_X + OTHER_UNITS_WIDTH) * lib.getScalingFactor()), unitLinesY);\\n                    unitLinesY += 2;\\n                }\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n                if (debugShowMission && freeColClient.getFreeColServer() != null) {\\n            net.sf.freecol.server.ai.AIUnit au = (net.sf.freecol.server.ai.AIUnit) freeColClient.getFreeColServer().getAIMain().getAIObject(unit);\\n            if (au != null) {\\n                g.setColor(Color.WHITE);\\n                String text = (unit.getOwner().isAI()) ? \\\"\\\" : \\\"(\\\";\\n                String debuggingInfo = \\\"\\\";\\n                if (au.getMission() != null) {\\n                    String missionName = au.getMission().getClass().toString();\\n                    missionName = missionName.substring(missionName.lastIndexOf('.') + 1);\\n                    text += missionName;\\n                    if (debugShowMissionInfo) {\\n                        debuggingInfo = au.getMission().getDebuggingInfo();\\n                    }\\n                } else {\\n                    text += \\\"No mission\\\";\\n                }                \\n                text += (unit.getOwner().isAI()) ? \\\"\\\" : \\\")\\\";\\n                g.drawString(text, x , y);\\n                g.drawString(debuggingInfo, x , y+25);\\n            }\\n        }\\n    }\\n    private Point getUnitImagePositionInTile(Image unitImage, int tileX, int tileY) {\\n        return getUnitImagePositionInTile(unitImage.getWidth(null), unitImage.getHeight(null), tileX, tileY);\\n    }\\n    private Point getUnitImagePositionInTile(int unitImageWidth, int unitImageHeight, int tileX, int tileY) {\\n        int unitX = ((tileX + getTileWidth() / 2) - unitImageWidth / 2);\\n        int unitY = (tileY + getTileHeight() / 2) - unitImageHeight / 2 -\\n                    (int) (UNIT_OFFSET * lib.getScalingFactor());\\n        return new Point(unitX, unitY);\\n    }\\n    public Point getUnitLabelPositionInTile(JLabel unitLabel, Tile tile) {\\n        return getUnitLabelPositionInTile(unitLabel, getTilePosition(tile));\\n    }\\n    public Point getUnitLabelPositionInTile(JLabel unitLabel, Point tileP) {\\n        if (tileP != null) {\\n            int labelX = tileP.x;\\n            int labelY = (tileP.y + getTileHeight() / 2) - unitLabel.getHeight() / 2 -\\n                        (int) (UNIT_OFFSET * lib.getScalingFactor());\\n            return new Point(labelX, labelY);\\n        } else {\\n            return null;\\n        }\\n    }\\n    public JLabel getUnitLabel(Unit unit) {\\n        Image unitImg = lib.getUnitImageIcon(unit).getImage();\\n        Image chipImg = getOccupationIndicatorImage(unit);\\n        final int width = tileWidth/2 + unitImg.getWidth(null)/2;\\n        final int height = unitImg.getHeight(null);\\n        BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\\n        Graphics g = img.getGraphics();\\n        final int unitX = width - unitImg.getWidth(null);\\n        g.drawImage(unitImg, unitX, 0, null);\\n        final int chipX = ((int)(STATE_OFFSET_X * lib.getScalingFactor()));\\n        final int chipY = (int) (((height / 2 + UNIT_OFFSET*lib.getScalingFactor())) - tileHeight / 2);\\n        g.drawImage(chipImg, chipX, chipY, null);\\n        JLabel label = new JLabel(new ImageIcon(img));\\n        label.setBounds(0, 0, width, height);\\n        return label;\\n    }\\n    private void drawCursor(Graphics2D g, int x, int y) {\\n        g.drawImage(cursorImage, x, y, null);\\n    }\\n    public void setInGame(boolean inGame) {\\n        this.inGame = inGame;\\n    }\\n    public boolean isInGame() {\\n        return inGame;\\n    }\\n    public boolean onScreen(int x, int y) {\\n        if (bottomRow < 0) {\\n            positionMap();\\n            return y - 2 > topRow && y + 4 < bottomRow && x - 1 > leftColumn && x + 2 < rightColumn;\\n        } else {\\n            return y - 2 > topRow && y + 4 < bottomRow && x - 1 > leftColumn && x + 2 < rightColumn;\\n        }\\n    }\\n    public boolean onScreen(Position position) {\\n        return onScreen(position.getX(), position.getY());\\n    }\\n    public Map.Position convertToMapCoordinates(int x, int y) {\\n        Game gameData = freeColClient.getGame();\\n        if ((gameData == null) || (gameData.getMap() == null)) {\\n            return null;\\n        }\\n        int leftOffset;\\n        if (focus.getX() < getLeftColumns()) {\\n                        if ((focus.getY() % 2) == 0) {\\n                leftOffset = tileWidth * focus.getX() + tileWidth / 2;\\n            } else {\\n                leftOffset = tileWidth * (focus.getX() + 1);\\n            }\\n        } else if (focus.getX() >= (gameData.getMap().getWidth() - getRightColumns())) {\\n                        if ((focus.getY() % 2) == 0) {\\n                leftOffset = size.width - (gameData.getMap().getWidth() - focus.getX()) * tileWidth;\\n            } else {\\n                leftOffset = size.width - (gameData.getMap().getWidth() - focus.getX() - 1) * tileWidth - tileWidth / 2;\\n            }\\n        } else {\\n            if ((focus.getY() % 2) == 0) {\\n                leftOffset = (size.width / 2);\\n            } else {\\n                leftOffset = (size.width / 2) + tileWidth / 2;\\n            }\\n        }\\n        int topOffset;\\n        if (focus.getY() < topRows) {\\n                        topOffset = (focus.getY() + 1) * (tileHeight / 2);\\n        } else if (focus.getY() >= (gameData.getMap().getHeight() - bottomRows)) {\\n                        topOffset = size.height - (gameData.getMap().getHeight() - focus.getY()) * (tileHeight / 2);\\n        } else {\\n            topOffset = (size.height / 2);\\n        }\\n                                        int diffUp = (topOffset - y) / (tileHeight / 4),\\n            diffLeft = (leftOffset - x) / (tileWidth / 4);\\n                        int orDiffUp = diffUp,\\n            orDiffLeft = diffLeft,\\n            remainderUp = (topOffset - y) % (tileHeight / 4),\\n            remainderLeft = (leftOffset - x) % (tileWidth / 4);\\n        if ((diffUp % 2) == 0) {\\n            diffUp = diffUp / 2;\\n        } else {\\n            if (diffUp < 0) {\\n                diffUp = (diffUp / 2) - 1;\\n            } else {\\n                diffUp = (diffUp / 2) + 1;\\n            }\\n        }\\n        if ((diffLeft % 2) == 0) {\\n            diffLeft = diffLeft / 2;\\n        } else {\\n            if (diffLeft < 0) {\\n                diffLeft = (diffLeft / 2) - 1;\\n            } else {\\n                diffLeft = (diffLeft / 2) + 1;\\n            }\\n        }\\n        boolean done = false;\\n        while (!done) {\\n            if ((diffUp % 2) == 0) {\\n                if ((diffLeft % 2) == 0) {\\n                    diffLeft = diffLeft / 2;\\n                    done = true;\\n                } else {\\n                                        if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2) > remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2) > remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            }\\n                        } else if (orDiffUp == 0) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2) > -remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2) > -remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        }\\n                    } else if ((orDiffLeft % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    } else if ((orDiffUp % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffUp == 0) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        }\\n                    } else {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    }\\n                }\\n            } else {\\n                if ((diffLeft % 2) == 0) {\\n                                        if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((remainderUp * 2) > remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((remainderUp * 2) > -remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffLeft == 0) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((-remainderUp * 2) > remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2) > -remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        }\\n                    } else if ((orDiffLeft % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft++;\\n                                } else {\\n                                    diffUp--;\\n                                }\\n                            } else {\\n                                                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft--;\\n                                } else {\\n                                    diffUp--;\\n                                }\\n                            }\\n                        } else if (orDiffLeft == 0) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft++;\\n                                } else {\\n                                    diffUp++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft--;\\n                                } else {\\n                                    diffUp++;\\n                                }\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    } else if ((orDiffUp % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        }\\n                    } else {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    }\\n                } else {\\n                    if ((focus.getY() % 2) == 0) {\\n                        if (diffLeft < 0) {\\n                            diffLeft = diffLeft / 2;\\n                        } else {\\n                            diffLeft = (diffLeft / 2) + 1;\\n                        }\\n                    } else {\\n                        if (diffLeft < 0) {\\n                            diffLeft = (diffLeft / 2) - 1;\\n                        } else {\\n                            diffLeft = diffLeft / 2;\\n                        }\\n                    }\\n                    done = true;\\n                }\\n            }\\n        }\\n        return new Map.Position(focus.getX() - diffLeft, focus.getY() - diffUp);\\n    }\\n    public boolean isMapNearTop(int y) {\\n        if (y < topRows) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public boolean isMapNearBottom(int y) {\\n        if (y >= (freeColClient.getGame().getMap().getHeight() - bottomRows)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public boolean isMapNearLeft(int x, int y) {\\n        if (x < getLeftColumns(y)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public boolean isMapNearRight(int x, int y) {\\n        if (x >= (freeColClient.getGame().getMap().getWidth() - getRightColumns(y))) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public ImageLibrary getImageLibrary() {\\n        return lib;\\n    }\\n    public Point getTilePosition(Tile t) {\\n        if (t.getY() >= topRow \\n                && t.getY() <= bottomRow \\n                && t.getX() >= leftColumn \\n                && t.getX() <= rightColumn) {\\n            int x = ((t.getX() - leftColumn) * tileWidth) + leftColumnX;\\n            int y = ((t.getY() - topRow) * tileHeight / 2) + topRowY;\\n            if ((t.getY() % 2) != 0) {     \\n                x += tileWidth / 2;\\n            }\\n            return new Point(x, y);\\n        } else {\\n            return null;\\n        }\\n    }\\n    public Rectangle getTileBounds(Tile tile) {\\n        return getTileBounds(tile.getX(), tile.getY());\\n    }\\n    public Rectangle getTileBounds(int x, int y) {\\n        Rectangle result = new Rectangle(0, 0, size.width, size.height);\\n        if (y >= topRow && y <= bottomRow && x >= leftColumn && x <= rightColumn) {\\n            result.y = ((y - topRow) * tileHeight / 2) + topRowY - tileHeight;\\n            result.x = ((x - leftColumn) * tileWidth) + leftColumnX;\\n            if ((y % 2) != 0) {\\n                result.x += tileWidth / 2;\\n            }\\n            result.width = tileWidth;\\n            result.height = tileHeight * 2;\\n        }\\n        return result;\\n    }\\n    public void forceReposition() {\\n        bottomRow = -1;\\n    }\\n    public int getTileHeight() {\\n        return tileHeight;\\n    }\\n    public int getTileWidth() {\\n        return tileWidth;\\n    }\\n}\""
        },
        {
            "content": "### Analysis of `GUI.java`\n\n#### **Key Responsibilities**:\n- **Map Display**: Manages the rendering of the game map, including tiles, settlements, and units.\n- **User Interaction**: Handles visual feedback for user interactions such as unit selection, movement paths, and settlement information.\n- **Game State Visualization**: Displays game state elements like fog of war, tile ownership, and mission indicators.\n\n#### **Relationship with `Canvas.java`**:\n- `Canvas.java` relies on `GUI` to render most of the game's visual components. It uses `GUI` methods to display panels and manage internal frames.\n- Changes in `Canvas.java`, especially those affecting UI layout or interaction logic, can necessitate updates in `GUI` to maintain consistency in rendering and user experience.\n\n### Entities to Synchronize\nBased on co-change relationships and conceptual coupling, the following entities should be synchronized with changes made to `Canvas.java`:\n\n1. **InGameController**\n   - High co-change confidence (~29.01%) suggests frequent related modifications.\n   - Manages game progression and player actions that may influence UI behavior.\n\n2. **FreeColClient**\n   - Strong co-change relationship (~13.58% confidence).\n   - Coordinates client-side operations, including input handling and communication with the server.\n\n3. **GUI**\n   - High conceptual coupling (0.8327) indicates strong semantic overlap.\n   - Directly used by `Canvas.java` for rendering game visuals.\n\n4. **MapControls**\n   - Frequently changed together with `Canvas.java` (~7.41% confidence).\n   - Manages controls for navigating and interacting with the game map.\n\n### Final Steps\nTo ensure completeness, let's verify the coupling dependencies between `Canvas.java` and `MapControls` to understand how they interact directly.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_70107c693f1e474ba90b00",
                    "function": {
                        "arguments": "{\"entity1\": \"Canvas.java\", \"entity2\": \"MapControls\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"ReturnType(RT): Return Type found: getMapControls returns MapControls,  \", \"Class Member Variable Usage Variable (CMAUA): Coupling found in method updateSizes, at line: 367. Instance of MapControls member variable mapControls is used directly.  Coupling found in method getMapControls, at line: 2270. Instance of MapControls member variable mapControls is used directly.\"]"
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `Canvas.java`  \nChange set: [GUI, InGameController, FreeColClient, MapControls, InGameInputHandler, ActionManager, ColonyPanel, ServerListPanel, ClientOptionsDialog, TradeRouteDialog, MapGeneratorOptionsDialog, EuropePanel, StartGamePanel, ChatPanel, BuildQueuePanel, TilePanel, MonarchPanel, ReportPanel, FreeColDialog, StatusPanel, ColopediaPanel, EventPanel, ReportMilitaryPanel, ReportNavalPanel, ReportLabourPanel, ReportColonyPanel, ReportRequirementsPanel, ReportTurnPanel, ReportProductionPanel, ReportReligiousPanel, ReportHighScoresPanel, ReportIndianPanel, ReportForeignAffairPanel, ReportCargoPanel, ReportExplorationPanel, ReportHistoryPanel, ReportContinentalCongressPanel, ReportTradePanel, ReportEducationAction, ReportMilitaryAction, ReportProductionAction]  \n\nDetails:  \n- **GUI**: High conceptual coupling (0.8327) and direct usage in Canvas methods for rendering game visuals and managing UI state.  \n- **InGameController**: Frequently co-changed with high confidence (~29.01%), manages game progression affecting UI updates.  \n- **FreeColClient**: Strong co-change relationship (~13.58% confidence), coordinates client-side operations linked to UI actions.  \n- **MapControls**: Direct coupling dependencies found; used by Canvas for map navigation and control management.  \n- **InGameInputHandler**: Co-change support 27, likely involved in handling input that affects UI behavior.  \n- **ActionManager**: Co-change support 12, manages UI-triggered actions tied to Canvas-based interactions.  \n- **ColonyPanel**: Frequently displayed from Canvas, needs alignment in layout or interaction logic changes.  \n- **ServerListPanel**: Used in connection workflows initiated from Canvas.  \n- **ClientOptionsDialog**: Displayed via Canvas, needs synchronization if UI settings are affected.  \n- **TradeRouteDialog**: Triggered from internal frames managed by Canvas.  \n- **MapGeneratorOptionsDialog**: Related to game setup UI handled by Canvas.  \n- **EuropePanel**: Managed through Canvas's display logic during Europe-related views.  \n- **StartGamePanel**: Initialized and shown by Canvas, sensitive to startup UI flow changes.  \n- **ChatPanel**: Integrated into the main interface via Canvas.  \n- **BuildQueuePanel**: Opened from Canvas, affected by unit/building-related UI changes.  \n- **TilePanel**: Triggered for tile details, must align with Canvas rendering context.  \n- **MonarchPanel**: Tied to monarch action flows possibly triggered from Canvas-level events.  \n- **ReportPanel**: Base class for various reports shown via Canvas.  \n- **FreeColDialog**: Base dialog class, frequently extended by panels shown via Canvas.  \n- **StatusPanel**: Managed directly by Canvas for status updates.  \n- **ColopediaPanel**: Displayed as part of in-game information flow.  \n- **EventPanel**: Shown via Canvas for event notifications.  \n- **ReportMilitaryPanel, ReportNavalPanel, ReportLabourPanel, ReportColonyPanel, ReportRequirementsPanel, ReportTurnPanel, ReportProductionPanel, ReportReligiousPanel, ReportHighScoresPanel, ReportIndianPanel, ReportForeignAffairPanel, ReportCargoPanel, ReportExplorationPanel, ReportHistoryPanel, ReportContinentalCongressPanel, ReportTradePanel, ReportMilitaryAction, ReportProductionAction, ReportEducationAction**: All report panels/dialogs accessed through Canvas-driven logic, requiring synchronized visual or functional updates.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14",
                    "m15",
                    "m16",
                    "m17"
                ],
                "response_message": "m18"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `freecol`, a well-known Java open source project. The starting entity you need to deal with is Canvas.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_57dc6e4ef0b04c9d96ca17",
                        "function": {
                            "arguments": "{\"entity\": \"Canvas.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"CanvasMouseListener\", \"3\", \"0.018518518518518517\"], [\"FreeColClient\", \"22\", \"0.13580246913580246\"], [\"InGameController\", \"47\", \"0.29012345679012347\"], [\"Messages\", \"2\", \"0.012345679012345678\"], [\"InGameInputHandler\", \"27\", \"0.16666666666666666\"], [\"Monarch\", \"1\", \"0.006172839506172839\"], [\"FreeColDialog\", \"16\", \"0.09876543209876543\"], [\"MonarchPanel\", \"5\", \"0.030864197530864196\"], [\"TilePanel\", \"13\", \"0.08024691358024691\"], [\"Addition\", \"1\", \"0.006172839506172839\"], [\"AIInGameInputHandler\", \"3\", \"0.018518518518518517\"], [\"FreeColLookAndFeel\", \"8\", \"0.04938271604938271\"], [\"DeclarationDialog\", \"1\", \"0.006172839506172839\"], [\"FAFile\", \"1\", \"0.006172839506172839\"], [\"ConnectController\", \"14\", \"0.08641975308641975\"], [\"InputHandler\", \"2\", \"0.012345679012345678\"], [\"GUI\", \"24\", \"0.14814814814814814\"], [\"EuropePanel\", \"13\", \"0.08024691358024691\"], [\"FreeColGameObject\", \"2\", \"0.012345679012345678\"], [\"ModelMessage\", \"3\", \"0.018518518518518517\"], [\"GoodsContainer\", \"1\", \"0.006172839506172839\"], [\"Market\", \"2\", \"0.012345679012345678\"], [\"AIGoods\", \"2\", \"0.012345679012345678\"], [\"FreeColMenuBar\", \"7\", \"0.043209876543209874\"], [\"FreeColImageBorder\", \"1\", \"0.006172839506172839\"], [\"FreeColServer\", \"4\", \"0.024691358024691357\"], [\"OptionMap\", \"1\", \"0.006172839506172839\"], [\"FreeCol\", \"6\", \"0.037037037037037035\"], [\"LoadingSavegameDialog\", \"1\", \"0.006172839506172839\"], [\"MainPanel\", \"4\", \"0.024691358024691357\"], [\"ClientOptions\", \"8\", \"0.04938271604938271\"], [\"StartGamePanel\", \"15\", \"0.09259259259259259\"], [\"MapGeneratorOptionsDialog\", \"6\", \"0.037037037037037035\"], [\"MapGeneratorOptions\", \"1\", \"0.006172839506172839\"], [\"OptionMapUI\", \"2\", \"0.012345679012345678\"], [\"AbstractOption\", \"1\", \"0.006172839506172839\"], [\"IntegerOption\", \"1\", \"0.006172839506172839\"], [\"BooleanOption\", \"1\", \"0.006172839506172839\"], [\"OptionGroupUI\", \"2\", \"0.012345679012345678\"], [\"OptionUpdater\", \"1\", \"0.006172839506172839\"], [\"GameOptionsDialog\", \"4\", \"0.024691358024691357\"], [\"SelectOption\", \"1\", \"0.006172839506172839\"], [\"ClientOptionsDialog\", \"6\", \"0.037037037037037035\"], [\"FreeColActionUI\", \"1\", \"0.006172839506172839\"], [\"PreGameInputHandler\", \"2\", \"0.012345679012345678\"], [\"SelectOptionUI\", \"1\", \"0.006172839506172839\"], [\"IntegerOptionUI\", \"1\", \"0.006172839506172839\"], [\"BooleanOptionUI\", \"1\", \"0.006172839506172839\"], [\"ReportNavalAction\", \"3\", \"0.018518518518518517\"], [\"ActionManager\", \"12\", \"0.07407407407407407\"], [\"ReportMilitaryPanel\", \"3\", \"0.018518518518518517\"], [\"Goods\", \"1\", \"0.006172839506172839\"], [\"UnitLabel\", \"8\", \"0.04938271604938271\"], [\"ReportNavalPanel\", \"3\", \"0.018518518518518517\"], [\"ReportLabourPanel\", \"2\", \"0.012345679012345678\"], [\"ReportColonyPanel\", \"3\", \"0.018518518518518517\"], [\"ReportProductionPanel\", \"1\", \"0.006172839506172839\"], [\"ReportPanel\", \"6\", \"0.037037037037037035\"], [\"ReportReligiousPanel\", \"1\", \"0.006172839506172839\"], [\"ReportColonyAction\", \"3\", \"0.018518518518518517\"], [\"ColonyPanel\", \"15\", \"0.09259259259259259\"], [\"DefaultTransferHandler\", \"5\", \"0.030864197530864196\"], [\"DragListener\", \"8\", \"0.04938271604938271\"], [\"ColopediaPanel\", \"8\", \"0.04938271604938271\"], [\"ReportTurnPanel\", \"6\", \"0.037037037037037035\"], [\"ReportTurnAction\", \"1\", \"0.006172839506172839\"], [\"TradeRouteDialog\", \"4\", \"0.024691358024691357\"], [\"Stop\", \"1\", \"0.006172839506172839\"], [\"TradeRoute\", \"1\", \"0.006172839506172839\"], [\"TradeRouteInputDialog\", \"5\", \"0.030864197530864196\"], [\"TradeRouteAction\", \"4\", \"0.024691358024691357\"], [\"CanvasKeyListener\", \"2\", \"0.012345679012345678\"], [\"MiniMap\", \"2\", \"0.012345679012345678\"], [\"MapControls\", \"6\", \"0.037037037037037035\"], [\"MapControlsAction\", \"1\", \"0.006172839506172839\"], [\"ReportRequirementsAction\", \"3\", \"0.018518518518518517\"], [\"ReportRequirementsPanel\", \"2\", \"0.012345679012345678\"], [\"PreGameController\", \"7\", \"0.043209876543209874\"], [\"MapEditorMenuBar\", \"4\", \"0.024691358024691357\"], [\"InGameMenuBar\", \"8\", \"0.04938271604938271\"], [\"TradeItem\", \"1\", \"0.006172839506172839\"], [\"GoodsTradeItem\", \"1\", \"0.006172839506172839\"], [\"DiplomaticTrade\", \"1\", \"0.006172839506172839\"], [\"ColonyTradeItem\", \"1\", \"0.006172839506172839\"], [\"GoldTradeItem\", \"1\", \"0.006172839506172839\"], [\"StanceTradeItem\", \"1\", \"0.006172839506172839\"], [\"UnitTradeItem\", \"1\", \"0.006172839506172839\"], [\"NegotiationDialog\", \"1\", \"0.006172839506172839\"], [\"ToAmericaPanel\", \"5\", \"0.030864197530864196\"], [\"VictoryPanel\", \"7\", \"0.043209876543209874\"], [\"ReportUnitPanel\", \"1\", \"0.006172839506172839\"], [\"ReportCargoPanel\", \"1\", \"0.006172839506172839\"], [\"ReportCargoAction\", \"3\", \"0.018518518518518517\"], [\"TrainDialog\", \"3\", \"0.018518518518518517\"], [\"RecruitDialog\", \"2\", \"0.012345679012345678\"], [\"ChooseFoundingFatherDialog\", \"2\", \"0.012345679012345678\"], [\"AIPlayer\", \"1\", \"0.006172839506172839\"], [\"FoundingFatherPanel\", \"2\", \"0.012345679012345678\"], [\"ShowSelectFoundingFatherSwingTask\", \"2\", \"0.012345679012345678\"], [\"ReportForeignAffairPanel\", \"3\", \"0.018518518518518517\"], [\"FreeColMenuTest\", \"2\", \"0.012345679012345678\"], [\"WindowedFrame\", \"3\", \"0.018518518518518517\"], [\"ChangeWindowedModeAction\", \"2\", \"0.012345679012345678\"], [\"Specification\", \"1\", \"0.006172839506172839\"], [\"NewPanel\", \"6\", \"0.037037037037037035\"], [\"UserConnectionHandler\", \"2\", \"0.012345679012345678\"], [\"MapEditorController\", \"13\", \"0.08024691358024691\"], [\"PlayersTableModel\", \"3\", \"0.018518518518518517\"], [\"NationCellRenderer\", \"1\", \"0.006172839506172839\"], [\"AdvantageCellRenderer\", \"2\", \"0.012345679012345678\"], [\"PersistentObject\", \"2\", \"0.012345679012345678\"], [\"MarketLabel\", \"1\", \"0.006172839506172839\"], [\"GoodsLabel\", \"1\", \"0.006172839506172839\"], [\"ProductionLabel\", \"2\", \"0.012345679012345678\"], [\"PurchaseDialog\", \"1\", \"0.006172839506172839\"], [\"EmigrationPanel\", \"2\", \"0.012345679012345678\"], [\"MapEditorTransformPanel\", \"3\", \"0.018518518518518517\"], [\"CargoLabel\", \"1\", \"0.006172839506172839\"], [\"ColopediaSkillAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaUnitAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaBuildingAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaGoodsAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaFatherAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaTerrainAction\", \"2\", \"0.012345679012345678\"], [\"ColopediaTreeItem\", \"1\", \"0.006172839506172839\"], [\"ImageLibrary\", \"2\", \"0.012345679012345678\"], [\"ShowInformationMessageSwingTask\", \"4\", \"0.024691358024691357\"], [\"ShowConfirmDialogSwingTask\", \"3\", \"0.018518518518518517\"], [\"ShowModelMessageSwingTask\", \"2\", \"0.012345679012345678\"], [\"ShowMonarchPanelSwingTask\", \"4\", \"0.024691358024691357\"], [\"ServerListPanel\", \"4\", \"0.024691358024691357\"], [\"AboutAction\", \"3\", \"0.018518518518518517\"], [\"AboutPanel\", \"2\", \"0.012345679012345678\"], [\"ShowVictoryPanelSwingTask\", \"3\", \"0.018518518518518517\"], [\"ViewMode\", \"1\", \"0.006172839506172839\"], [\"Region\", \"1\", \"0.006172839506172839\"], [\"ReportExplorationPanel\", \"2\", \"0.012345679012345678\"], [\"ReportExplorationAction\", \"3\", \"0.018518518518518517\"], [\"ChoiceItem\", \"2\", \"0.012345679012345678\"], [\"SimpleCombatModel\", \"1\", \"0.006172839506172839\"], [\"PreCombatDialog\", \"3\", \"0.018518518518518517\"], [\"BuildQueue\", \"1\", \"0.006172839506172839\"], [\"BuildQueuePanel\", \"3\", \"0.018518518518518517\"], [\"BuildQueueTransferHandler\", \"1\", \"0.006172839506172839\"], [\"BuildQueueCellRenderer\", \"1\", \"0.006172839506172839\"], [\"MarketPanel\", \"2\", \"0.012345679012345678\"], [\"HighScore\", \"4\", \"0.024691358024691357\"], [\"ReportHighScoresAction\", \"2\", \"0.012345679012345678\"], [\"RetireAction\", \"1\", \"0.006172839506172839\"], [\"ReportHighScoresPanel\", \"5\", \"0.030864197530864196\"], [\"EventPanel\", \"3\", \"0.018518518518518517\"], [\"FindColonyAction\", \"4\", \"0.024691358024691357\"], [\"FindColonyDialog\", \"3\", \"0.018518518518518517\"], [\"ScaleMapAction\", \"3\", \"0.018518518518518517\"], [\"NewEmptyMapAction\", \"3\", \"0.018518518518518517\"], [\"DetermineHighSeasAction\", \"1\", \"0.006172839506172839\"], [\"ColonyTile\", \"1\", \"0.006172839506172839\"], [\"SelectAmountDialog\", \"2\", \"0.012345679012345678\"], [\"WarehouseGoodsPanel\", \"1\", \"0.006172839506172839\"], [\"WarehouseDialog\", \"1\", \"0.006172839506172839\"], [\"GoodsPanel\", \"1\", \"0.006172839506172839\"], [\"DebugMenu\", \"8\", \"0.04938271604938271\"], [\"Video\", \"1\", \"0.006172839506172839\"], [\"ResourceManager\", \"1\", \"0.006172839506172839\"], [\"VideoComponent\", \"2\", \"0.012345679012345678\"], [\"ResourceFactory\", \"1\", \"0.006172839506172839\"], [\"VideoResource\", \"1\", \"0.006172839506172839\"], [\"InfoPanel\", \"3\", \"0.018518518518518517\"], [\"FreeColPanel\", \"6\", \"0.037037037037037035\"], [\"ToEuropePanel\", \"1\", \"0.006172839506172839\"], [\"TileInfoPanel\", \"1\", \"0.006172839506172839\"], [\"EndTurnPanel\", \"3\", \"0.018518518518518517\"], [\"DumpCargoDialog\", \"1\", \"0.006172839506172839\"], [\"CanvasMapEditorMouseListener\", \"5\", \"0.030864197530864196\"], [\"FullScreenFrame\", \"2\", \"0.012345679012345678\"], [\"UserInputHandler\", \"2\", \"0.012345679012345678\"], [\"UpdateMenuBarSwingTask\", \"2\", \"0.012345679012345678\"], [\"Colony\", \"1\", \"0.006172839506172839\"], [\"SaveAndQuitAction\", \"1\", \"0.006172839506172839\"], [\"UnloadAction\", \"1\", \"0.006172839506172839\"], [\"EditSettlementDialog\", \"1\", \"0.006172839506172839\"], [\"TilePopup\", \"10\", \"0.06172839506172839\"], [\"FindSettlementDialog\", \"2\", \"0.012345679012345678\"], [\"UnitMoveAnimationCanvasSwingTask\", \"4\", \"0.024691358024691357\"], [\"ResourceTransform\", \"1\", \"0.006172839506172839\"], [\"SerializationTest\", \"1\", \"0.006172839506172839\"], [\"ShowMapGeneratorOptionsAction\", \"3\", \"0.018518518518518517\"], [\"ChatPanel\", \"2\", \"0.012345679012345678\"], [\"FreeColListUI\", \"1\", \"0.006172839506172839\"], [\"FreeColComboBoxUI\", \"1\", \"0.006172839506172839\"], [\"FreeColTableHeaderUI\", \"1\", \"0.006172839506172839\"], [\"FreeColButtonUI\", \"1\", \"0.006172839506172839\"], [\"FreeColTableUI\", \"1\", \"0.006172839506172839\"], [\"FreeColLabelUI\", \"1\", \"0.006172839506172839\"], [\"FreeColScrollPaneUI\", \"1\", \"0.006172839506172839\"], [\"FreeColComboBoxRenderer\", \"1\", \"0.006172839506172839\"], [\"ReceivingThread\", \"1\", \"0.006172839506172839\"], [\"Connection\", \"1\", \"0.006172839506172839\"], [\"Server\", \"1\", \"0.006172839506172839\"], [\"MiniMapZoomInAction\", \"1\", \"0.006172839506172839\"], [\"MiniMapZoomOutAction\", \"1\", \"0.006172839506172839\"], [\"DifficultyDialog\", \"1\", \"0.006172839506172839\"], [\"OptionsDialog\", \"2\", \"0.012345679012345678\"], [\"ShowGameOptionsAction\", \"2\", \"0.012345679012345678\"], [\"CanvasMouseMotionListener\", \"1\", \"0.006172839506172839\"], [\"ServerPlayer\", \"1\", \"0.006172839506172839\"], [\"TilePopupAction\", \"1\", \"0.006172839506172839\"], [\"GotoTileAction\", \"1\", \"0.006172839506172839\"], [\"ChangeSet\", \"1\", \"0.006172839506172839\"], [\"SpyChange\", \"1\", \"0.006172839506172839\"], [\"SpyColonySwingTask\", \"1\", \"0.006172839506172839\"], [\"UnitButton\", \"1\", \"0.006172839506172839\"], [\"ServerAPI\", \"2\", \"0.012345679012345678\"], [\"WindowedFrameListener\", \"1\", \"0.006172839506172839\"], [\"QuitAction\", \"1\", \"0.006172839506172839\"], [\"UnitAttackAnimationCanvasSwingTask\", \"3\", \"0.018518518518518517\"], [\"UnitImageAnimation\", \"2\", \"0.012345679012345678\"], [\"EndTurnDialog\", \"1\", \"0.006172839506172839\"], [\"UnitAttackAnimation\", \"2\", \"0.012345679012345678\"], [\"UnitMoveAnimation\", \"2\", \"0.012345679012345678\"], [\"WorkProductionPanel\", \"1\", \"0.006172839506172839\"], [\"MapViewer\", \"3\", \"0.018518518518518517\"], [\"ShowErrorMessageSwingTask\", \"1\", \"0.006172839506172839\"], [\"ShowInputDialogSwingTask\", \"1\", \"0.006172839506172839\"], [\"NoResultCanvasSwingTask\", \"1\", \"0.006172839506172839\"], [\"Animations\", \"1\", \"0.006172839506172839\"], [\"StatusPanel\", \"1\", \"0.006172839506172839\"], [\"StatisticsPanel\", \"1\", \"0.006172839506172839\"], [\"ReportLabourAction\", \"2\", \"0.012345679012345678\"], [\"ReportIndianAction\", \"2\", \"0.012345679012345678\"], [\"ReportIndianPanel\", \"1\", \"0.006172839506172839\"], [\"ReportForeignAction\", \"2\", \"0.012345679012345678\"], [\"CargoPanel\", \"1\", \"0.006172839506172839\"], [\"IndianSettlementPanel\", \"1\", \"0.006172839506172839\"], [\"ColonyCargoPanel\", \"1\", \"0.006172839506172839\"], [\"EuropeCargoPanel\", \"1\", \"0.006172839506172839\"], [\"DisplayTileTextAction\", \"1\", \"0.006172839506172839\"], [\"RefreshCanvasSwingTask\", \"1\", \"0.006172839506172839\"], [\"DisplayBordersAction\", \"1\", \"0.006172839506172839\"], [\"DisplayGridAction\", \"1\", \"0.006172839506172839\"], [\"PlayersTable\", \"3\", \"0.018518518518518517\"], [\"BuildQueueMouseAdapter\", \"1\", \"0.006172839506172839\"], [\"ColopediaAction\", \"1\", \"0.006172839506172839\"], [\"ConstructionPanel\", \"2\", \"0.012345679012345678\"], [\"BuildingsPanel\", \"1\", \"0.006172839506172839\"], [\"ReportContinentalCongressAction\", \"1\", \"0.006172839506172839\"], [\"ReportEducationAction\", \"1\", \"0.006172839506172839\"], [\"ShowDifficultyAction\", \"1\", \"0.006172839506172839\"], [\"ReportHistoryAction\", \"1\", \"0.006172839506172839\"], [\"ReportTradeAction\", \"1\", \"0.006172839506172839\"], [\"ReportMilitaryAction\", \"1\", \"0.006172839506172839\"], [\"ReportReligionAction\", \"1\", \"0.006172839506172839\"], [\"ReportProductionAction\", \"1\", \"0.006172839506172839\"], [\"MoveAction\", \"1\", \"0.006172839506172839\"]]"
            },
            "m5": {
                "content": "Based on the co-change relationships retrieved, we can identify entities that have a significant history of being modified together with `Canvas.java`. To prioritize the list, we'll focus on entities with higher confidence values, as they indicate a stronger correlation.\n\n### Top Co-Changed Entities with High Confidence:\n1. **InGameController** (Support: 47, Confidence: ~29.01%)\n2. **GUI** (Support: 24, Confidence: ~14.81%)\n3. **FreeColClient** (Support: 22, Confidence: ~13.58%)\n4. **InGameInputHandler** (Support: 27, Confidence: ~16.67%)\n5. **ActionManager** (Support: 12, Confidence: ~7.41%)\n\n### Suggested Approach:\nLet's analyze one of these top entities to determine its relationship with `Canvas.java`. Starting with `InGameController`, which has the highest confidence value, would provide insight into why it is frequently changed together with `Canvas.java`.\n\nI will retrieve the coupling dependencies between `Canvas.java` and `InGameController` to understand their direct or indirect relationship.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_cb0b1074dcb143fe89d8d7",
                        "function": {
                            "arguments": "{\"entity1\": \"Canvas.java\", \"entity2\": \"InGameController\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m7": {
                "content": "The result indicates that there are no direct coupling dependencies between `Canvas.java` and `InGameController`. This means their co-change relationship is likely due to indirect dependencies or shared functional responsibilities rather than direct code-level interactions.\n\n### Next Steps:\nTo better understand the connection, we can explore what roles these entities play in the system by analyzing their source code. Let's start by retrieving the source code for `Canvas.java` and `InGameController` to identify their functionalities and potential indirect relationships.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_409c6376eb6f4d158abeff",
                        "function": {
                            "arguments": "{\"entity\": \"Canvas.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package net.sf.freecol.client.gui;\\nimport java.awt.Component;\\nimport java.awt.Dimension;\\nimport java.awt.Graphics;\\nimport java.awt.Graphics2D;\\nimport java.awt.Image;\\nimport java.awt.Point;\\nimport java.awt.Rectangle;\\nimport java.awt.event.KeyListener;\\nimport java.awt.event.MouseAdapter;\\nimport java.awt.event.MouseEvent;\\nimport java.awt.event.MouseListener;\\nimport java.awt.event.MouseMotionListener;\\nimport java.io.File;\\nimport java.util.ArrayList;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.MissingResourceException;\\nimport java.util.logging.Logger;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.JDesktopPane;\\nimport javax.swing.JInternalFrame;\\nimport javax.swing.JLayeredPane;\\nimport javax.swing.JMenuBar;\\nimport javax.swing.JMenuItem;\\nimport javax.swing.JPopupMenu;\\nimport javax.swing.JScrollPane;\\nimport javax.swing.ScrollPaneConstants;\\nimport javax.swing.SwingUtilities;\\nimport javax.swing.filechooser.FileFilter;\\nimport javax.swing.plaf.basic.BasicInternalFrameUI;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.client.FreeColClient;\\nimport net.sf.freecol.client.gui.action.MapControlsAction;\\nimport net.sf.freecol.client.gui.i18n.Messages;\\nimport net.sf.freecol.client.gui.panel.BuildQueuePanel;\\nimport net.sf.freecol.client.gui.panel.ChatPanel;\\nimport net.sf.freecol.client.gui.panel.ChoiceItem;\\nimport net.sf.freecol.client.gui.panel.ChooseFoundingFatherDialog;\\nimport net.sf.freecol.client.gui.panel.ClientOptionsDialog;\\nimport net.sf.freecol.client.gui.panel.ColonyPanel;\\nimport net.sf.freecol.client.gui.panel.ColopediaPanel;\\nimport net.sf.freecol.client.gui.panel.DeclarationDialog;\\nimport net.sf.freecol.client.gui.panel.DumpCargoDialog;\\nimport net.sf.freecol.client.gui.panel.EmigrationPanel;\\nimport net.sf.freecol.client.gui.panel.ErrorPanel;\\nimport net.sf.freecol.client.gui.panel.EuropePanel;\\nimport net.sf.freecol.client.gui.panel.EventPanel;\\nimport net.sf.freecol.client.gui.panel.FreeColDialog;\\nimport net.sf.freecol.client.gui.panel.FreeColImageBorder;\\nimport net.sf.freecol.client.gui.panel.FreeColPanel;\\nimport net.sf.freecol.client.gui.panel.GameOptionsDialog;\\nimport net.sf.freecol.client.gui.panel.IndianSettlementPanel;\\nimport net.sf.freecol.client.gui.panel.InformationDialog;\\nimport net.sf.freecol.client.gui.panel.LoadingSavegameDialog;\\nimport net.sf.freecol.client.gui.panel.MainPanel;\\nimport net.sf.freecol.client.gui.panel.MapControls;\\nimport net.sf.freecol.client.gui.panel.MapGeneratorOptionsDialog;\\nimport net.sf.freecol.client.gui.panel.MonarchPanel;\\nimport net.sf.freecol.client.gui.panel.NegotiationDialog;\\nimport net.sf.freecol.client.gui.panel.NewPanel;\\nimport net.sf.freecol.client.gui.panel.PreCombatDialog;\\nimport net.sf.freecol.client.gui.panel.RecruitDialog;\\nimport net.sf.freecol.client.gui.panel.ReportCargoPanel;\\nimport net.sf.freecol.client.gui.panel.ReportColonyPanel;\\nimport net.sf.freecol.client.gui.panel.ReportContinentalCongressPanel;\\nimport net.sf.freecol.client.gui.panel.ReportExplorationPanel;\\nimport net.sf.freecol.client.gui.panel.ReportForeignAffairPanel;\\nimport net.sf.freecol.client.gui.panel.ReportHighScoresPanel;\\nimport net.sf.freecol.client.gui.panel.ReportHistoryPanel;\\nimport net.sf.freecol.client.gui.panel.ReportIndianPanel;\\nimport net.sf.freecol.client.gui.panel.ReportLabourPanel;\\nimport net.sf.freecol.client.gui.panel.ReportMilitaryPanel;\\nimport net.sf.freecol.client.gui.panel.ReportNavalPanel;\\nimport net.sf.freecol.client.gui.panel.ReportPanel;\\nimport net.sf.freecol.client.gui.panel.ReportReligiousPanel;\\nimport net.sf.freecol.client.gui.panel.ReportRequirementsPanel;\\nimport net.sf.freecol.client.gui.panel.ReportTradePanel;\\nimport net.sf.freecol.client.gui.panel.ReportTurnPanel;\\nimport net.sf.freecol.client.gui.panel.RiverStylePanel;\\nimport net.sf.freecol.client.gui.panel.SelectAmountDialog;\\nimport net.sf.freecol.client.gui.panel.ServerListPanel;\\nimport net.sf.freecol.client.gui.panel.StartGamePanel;\\nimport net.sf.freecol.client.gui.panel.StatusPanel;\\nimport net.sf.freecol.client.gui.panel.TilePanel;\\nimport net.sf.freecol.client.gui.panel.TradeRouteDialog;\\nimport net.sf.freecol.client.gui.panel.TradeRouteInputDialog;\\nimport net.sf.freecol.client.gui.panel.TrainDialog;\\nimport net.sf.freecol.client.gui.panel.WarehouseDialog;\\nimport net.sf.freecol.common.ServerInfo;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.DiplomaticTrade;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.FoundingFather;\\nimport net.sf.freecol.common.model.FreeColGameObject;\\nimport net.sf.freecol.common.model.FreeColGameObjectType;\\nimport net.sf.freecol.common.model.FreeColObject;\\nimport net.sf.freecol.common.model.Game;\\nimport net.sf.freecol.common.model.Goods;\\nimport net.sf.freecol.common.model.GoodsType;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.LostCityRumour;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.ModelMessage;\\nimport net.sf.freecol.common.model.Monarch.MonarchAction;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.TradeRoute;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.WorkLocation;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.resources.ResourceManager;\\nimport net.sf.freecol.server.generator.MapGeneratorOptions;\\npublic final class Canvas extends JDesktopPane {\\n    private static final Logger logger = Logger.getLogger(Canvas.class.getName());\\n    public static enum ScoutAction {\\n        CANCEL,\\n        INDIAN_SETTLEMENT_SPEAK,\\n        INDIAN_SETTLEMENT_TRIBUTE,\\n        INDIAN_SETTLEMENT_ATTACK,\\n        FOREIGN_COLONY_NEGOTIATE,\\n        FOREIGN_COLONY_SPY,\\n        FOREIGN_COLONY_ATTACK\\n    }\\n    public static enum MissionaryAction {\\n        CANCEL,\\n        ESTABLISH_MISSION,\\n        DENOUNCE_HERESY,\\n        INCITE_INDIANS\\n    }\\n    public static enum BoycottAction {\\n        CANCEL,\\n        PAY_ARREARS,\\n        DUMP_CARGO\\n    }\\n    private static final Integer MAIN_LAYER = JLayeredPane.DEFAULT_LAYER;\\n    private static final Integer STATUS_LAYER = JLayeredPane.POPUP_LAYER;\\n    private static final int EXIT = 0, RECRUIT = 1, PURCHASE = 2, TRAIN = 3, UNLOAD = 4;\\n    private FreeColDialog europeOpenDialog = null;\\n    private final FreeColClient freeColClient;\\n    private final MainPanel mainPanel;\\n    private final StartGamePanel startGamePanel;\\n    private final EuropePanel europePanel;\\n    private final StatusPanel statusPanel;\\n    private final ChatPanel chatPanel;\\n    private final GUI gui;\\n    private final ServerListPanel serverListPanel;\\n    private final ClientOptionsDialog clientOptionsDialog;\\n    private final LoadingSavegameDialog loadingSavegameDialog;\\n    private final GUI colonyTileGUI;\\n    private JMenuBar jMenuBar;\\n    private boolean clientOptionsDialogShowing = false;\\n    private MapControls mapControls;\\n    private Dimension oldSize = null;\\n    private Dimension initialSize = null;\\n    public Canvas(FreeColClient client, Dimension size, GUI gui) {\\n        this.freeColClient = client;\\n        this.gui = gui;\\n        colonyTileGUI = new GUI(client, size, freeColClient.getImageLibrary());\\n        initialSize = size;\\n        setLocation(0, 0);\\n        setSize(size);\\n        setDoubleBuffered(true);\\n        setOpaque(false);\\n        setLayout(null);\\n        mainPanel = new MainPanel(this, freeColClient);\\n        startGamePanel = new StartGamePanel(this, freeColClient);\\n        serverListPanel = new ServerListPanel(this, freeColClient, freeColClient.getConnectController());\\n        europePanel = new EuropePanel(this, freeColClient, freeColClient.getInGameController());\\n        statusPanel = new StatusPanel(this);\\n        chatPanel = new ChatPanel(this, freeColClient);\\n        clientOptionsDialog = new ClientOptionsDialog(this, freeColClient);\\n        loadingSavegameDialog = new LoadingSavegameDialog(this, freeColClient);\\n        setFocusable(true);\\n        setFocusTraversalKeysEnabled(false);\\n                Runtime runtime = Runtime.getRuntime();\\n        runtime.addShutdownHook(new Thread(FreeCol.CLIENT_THREAD+\\\"Quitting Game\\\") {\\n            @Override\\n            public void run() {\\n                freeColClient.getConnectController().quitGame(true);\\n            }\\n        });\\n        logger.info(\\\"Canvas created.\\\");\\n    }\\n    @Override\\n    public Dimension getMinimumSize() {\\n        return new Dimension(640, 480);\\n    }\\n    @Override\\n    public Dimension getPreferredSize() {\\n        return initialSize;\\n    }\\n    public GUI getColonyTileGUI() {\\n        return colonyTileGUI;\\n    }\\n    public ClientOptionsDialog getClientOptionsDialog() {\\n        return clientOptionsDialog;\\n    }\\n    public void setJMenuBar(JMenuBar mb) {\\n        if (jMenuBar != null) {\\n            remove(jMenuBar);\\n        }\\n        mb.setLocation(0, 0);\\n        mb.setSize(getWidth(), (int) mb.getPreferredSize().getHeight());\\n        add(mb);\\n        jMenuBar = mb;\\n    }\\n    public JMenuBar getJMenuBar() {\\n        return jMenuBar;\\n    }\\n    public void updateGoldLabel() {\\n        getJMenuBar().repaint();\\n    }\\n    public void updateSizes() {\\n        if (oldSize == null) {\\n            oldSize = getSize();\\n        }\\n        if (oldSize.width != getWidth() || oldSize.height != getHeight()) {\\n            if (jMenuBar != null) {\\n                jMenuBar.setSize(getWidth(), (int) jMenuBar.getPreferredSize().getHeight());\\n            }\\n            MapControlsAction mca = (MapControlsAction) freeColClient.getActionManager().getFreeColAction(MapControlsAction.id);\\n            MapControls mc = mca.getMapControls();\\n            if (mc != null && mc.isShowing()) {\\n                mc.removeFromComponent(this);\\n                mc.addToComponent(this);\\n                mapControls = mc;\\n            }\\n            if (europePanel != null) {\\n                JInternalFrame f = getInternalFrame(europePanel);\\n                if (f != null) {\\n                    f.setSize(getWidth(), getHeight() - getMenuBarHeight());\\n                    f.setLocation(0, getMenuBarHeight());\\n                }\\n            }\\n            gui.setSize(getSize());\\n            gui.forceReposition();\\n            oldSize = getSize();\\n        }\\n    }\\n    @Override\\n    public void paintComponent(Graphics g) {\\n        updateSizes();\\n        Graphics2D g2d = (Graphics2D) g;\\n        gui.display(g2d);\\n    }\\n    public int getMenuBarHeight() {\\n        if (jMenuBar == null) {\\n            return 0;\\n        } else if (jMenuBar instanceof FreeColMenuBar) {\\n            return ((FreeColMenuBar) jMenuBar).getOpaqueHeight();\\n        } else {\\n            return jMenuBar.getHeight();\\n        }\\n    }\\n    public void showStartGamePanel(Game game, Player player, boolean singlePlayerMode, int players,\\n                                   int advantages, boolean additionalNations) {\\n        closeMenus();\\n        if (game != null && player != null) {\\n            startGamePanel.initialize(singlePlayerMode, additionalNations, advantages);\\n            addAsFrame(startGamePanel);\\n            startGamePanel.requestFocus();\\n        } else {\\n            logger.warning(\\\"Tried to open 'StartGamePanel' without having 'game' and/or 'player' set.\\\");\\n        }\\n    }\\n    public void showServerListPanel(String username, ArrayList<ServerInfo> serverList) {\\n        closeMenus();\\n        serverListPanel.initialize(username, serverList);\\n        addAsFrame(serverListPanel);\\n        serverListPanel.requestFocus();\\n    }\\n    public boolean showWarehouseDialog(Colony colony) {\\n        WarehouseDialog warehouseDialog = new WarehouseDialog(this);\\n        warehouseDialog.initialize(colony);\\n                addAsFrame(warehouseDialog);\\n        warehouseDialog.requestFocus();\\n        boolean response = warehouseDialog.getResponseBoolean();\\n        remove(warehouseDialog);\\n        return response;\\n    }\\n    public DiplomaticTrade showNegotiationDialog(Unit unit, Settlement settlement, DiplomaticTrade agreement) {\\n        NegotiationDialog negotiationDialog = new NegotiationDialog(this, unit, settlement, agreement);\\n        negotiationDialog.initialize();\\n                addAsFrame(negotiationDialog);\\n        DiplomaticTrade offer = (DiplomaticTrade) negotiationDialog.getResponse();\\n        remove(negotiationDialog);\\n        return offer;\\n    }\\n    public void showPanel(FreeColPanel panel) {\\n        closeMenus();\\n        addAsFrame(panel);\\n        panel.requestFocus();\\n    }\\n    public void showPanel(FreeColPanel panel, boolean centered) {\\n        closeMenus();\\n        addAsFrame(panel, false, centered);\\n        panel.requestFocus();\\n    }\\n    public void showSubPanel(FreeColPanel panel) {\\n        addAsFrame(panel);\\n        panel.requestFocus();\\n    }\\n        public void showChatPanel() {\\n    \\t    \\tif(freeColClient.isSingleplayer()){\\n    \\t\\treturn;\\n    \\t}\\n        closeMenus();\\n        addAsFrame(chatPanel);\\n        chatPanel.requestFocus();\\n    }\\n    public int showSelectAmountDialog(GoodsType goodsType, int available, boolean needToPay) {\\n        SelectAmountDialog dialog = new SelectAmountDialog(this, goodsType, available, needToPay);\\n        dialog.initialize();\\n        addAsFrame(dialog);\\n        dialog.requestFocus();\\n        int amount = dialog.getResponseInt();\\n        remove(dialog);\\n        return amount;\\n    }\\n    public void showModelMessages(ModelMessage... modelMessages) {\\n        if (modelMessages.length == 1) {\\n            String id = modelMessages[0].getId();\\n            if (\\\"EventPanel.MEETING_NATIVES\\\".equals(id)) {\\n                showEventDialog(EventPanel.MEETING_NATIVES);\\n                return;\\n            } else if (\\\"EventPanel.MEETING_AZTEC\\\".equals(id)) {\\n                showEventDialog(EventPanel.MEETING_AZTEC);\\n                return;\\n            }\\n        }\\n        String okText = \\\"ok\\\";\\n        String cancelText = \\\"display\\\";\\n        String[] messageText = new String[modelMessages.length];\\n        ImageIcon[] messageIcon = new ImageIcon[modelMessages.length];\\n        try {\\n            okText = Messages.message(okText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + okText + \\\".\\\");\\n        }\\n        try {\\n            cancelText = Messages.message(cancelText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + cancelText + \\\".\\\");\\n        }\\n        for (int i = 0; i < modelMessages.length; i++) {\\n            try {\\n                messageText[i] = Messages.message(modelMessages[i].getId(), modelMessages[i].getData());\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + modelMessages[i].getId() + \\\".\\\");\\n            }\\n            messageIcon[i] = getImageIcon(modelMessages[i].getDisplay(), false);\\n        }\\n                FreeColGameObject source = modelMessages[0].getSource();\\n        if ((source instanceof Europe && !europePanel.isShowing())\\n                || (source instanceof Colony || source instanceof WorkLocation)) {\\n            FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(messageText, messageIcon, okText,\\n                    cancelText);\\n            addAsFrame(confirmDialog);\\n            confirmDialog.requestFocus();\\n            if (!confirmDialog.getResponseBoolean()) {\\n                remove(confirmDialog);\\n                if (source instanceof Europe) {\\n                    showEuropePanel();\\n                } else if (source instanceof Colony) {\\n                    showColonyPanel((Colony) source);\\n                } else if (source instanceof WorkLocation) {\\n                    showColonyPanel(((WorkLocation) source).getColony());\\n                }\\n            } else {\\n                remove(confirmDialog);\\n                if (!isShowingSubPanel()) {\\n                    freeColClient.getInGameController().nextModelMessage();\\n                }\\n            }\\n        } else {\\n            InformationDialog informationDialog = new InformationDialog(messageText, messageIcon);\\n            addAsFrame(informationDialog);\\n            informationDialog.requestFocus();\\n            informationDialog.getResponse();\\n            remove(informationDialog);\\n            if (!isShowingSubPanel()) {\\n                freeColClient.getInGameController().nextModelMessage();\\n            }\\n        }\\n    }\\n    public ImageIcon getImageIcon(Object display, boolean small) {\\n        ImageLibrary imageLibrary = getGUI().getImageLibrary();\\n        Image image = null;\\n        if (display == null) {\\n            return new ImageIcon();\\n        } else if (display instanceof GoodsType) {\\n            GoodsType goodsType = (GoodsType) display;\\n            try {\\n                image = imageLibrary.getGoodsImage(goodsType);\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for goods \\\" + goodsType.getName());\\n            }\\n        } else if (display instanceof Unit) {\\n            Unit unit = (Unit) display;\\n            try {\\n                image = imageLibrary.getUnitImageIcon(unit.getType()).getImage();\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for unit \\\" + unit.getName());\\n            }\\n        } else if (display instanceof Settlement) {\\n            Settlement settlement = (Settlement) display;\\n            try {\\n                image = imageLibrary.getSettlementImage(settlement);\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for settlement \\\" + settlement);\\n            }\\n        } else if (display instanceof LostCityRumour) {\\n            try {\\n                image = imageLibrary.getMiscImage(ImageLibrary.LOST_CITY_RUMOUR);\\n            } catch (Exception e) {\\n                logger.warning(\\\"could not find image for lost city rumour\\\");\\n            }\\n        } else if (display instanceof Player) {\\n            image = imageLibrary.getCoatOfArmsImage(((Player) display).getNation());\\n        } \\n        if (image != null && small) {\\n            return new ImageIcon(image.getScaledInstance((image.getWidth(null) / 3) * 2,\\n                                                         (image.getHeight(null) / 3) *2,\\n                                                         Image.SCALE_SMOOTH));\\n        } else {\\n            return (image != null) ? new ImageIcon(image) : null;\\n        }\\n    }\\n        public void showDeclarationDialog() {\\n        DeclarationDialog declarationDialog = new DeclarationDialog(this, freeColClient);\\n        declarationDialog.initialize();\\n        addAsFrame(declarationDialog);\\n        declarationDialog.requestFocus();\\n        declarationDialog.getResponseBoolean();\\n        remove(declarationDialog);\\n    }\\n    public Object showFreeColDialog(FreeColDialog freeColDialog) {\\n        addAsFrame(freeColDialog);\\n        freeColDialog.requestFocus();\\n        Object response = freeColDialog.getResponse();\\n        remove(freeColDialog);\\n        return response;\\n    }\\n    public boolean showConfirmDialog(String text, String okText, String cancelText, String... replace) {\\n        try {\\n            text = Messages.message(text, replace);\\n            okText = Messages.message(okText);\\n            cancelText = Messages.message(cancelText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + text + \\\", \\\" + okText + \\\" or \\\" + cancelText + \\\".\\\");\\n        }\\n        FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(text, okText, cancelText);\\n        addAsFrame(confirmDialog);\\n        confirmDialog.requestFocus();\\n        boolean response = confirmDialog.getResponseBoolean();\\n        remove(confirmDialog);\\n        return response;\\n    }\\n    public boolean showPreCombatDialog(Unit attacker, Unit defender, Settlement settlement) {\\n        FreeColDialog preCombatDialog = new PreCombatDialog(attacker, defender, settlement, this);\\n        addAsFrame(preCombatDialog);\\n        preCombatDialog.requestFocus();\\n        boolean response = preCombatDialog.getResponseBoolean();\\n        remove(preCombatDialog);\\n        return response;\\n    }\\n    public boolean showConfirmDialog(ModelMessage[] messages, String okText, String cancelText) {\\n        try {\\n            okText = Messages.message(okText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + okText + \\\".\\\");\\n        }\\n        try {\\n            cancelText = Messages.message(cancelText);\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + cancelText + \\\".\\\");\\n        }\\n        String[] texts = new String[messages.length];\\n        ImageIcon[] images = new ImageIcon[messages.length];\\n        for (int i = 0; i < messages.length; i++) {\\n            String id = messages[i].getId();\\n            try {\\n                texts[i] = Messages.message(id, messages[i].getData());\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + id + \\\".\\\");\\n            }\\n            images[i] = getImageIcon(messages[i].getDisplay(), false);\\n        }\\n        FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(texts, images, okText, cancelText);\\n        addAsFrame(confirmDialog);\\n        confirmDialog.requestFocus();\\n        boolean response = confirmDialog.getResponseBoolean();\\n        remove(confirmDialog);\\n        return response;\\n    }\\n    public boolean isClientOptionsDialogShowing() {\\n        return clientOptionsDialogShowing;\\n    }\\n    public boolean isMapboardActionsEnabled() {\\n        return !isShowingSubPanel();\\n    }\\n    public boolean isShowingSubPanel() {\\n        Component[] components = getComponents();\\n        for (Component c : components) {\\n            if (c instanceof ToolBoxFrame) {\\n                continue;\\n            }\\n            if (c instanceof JInternalFrame) {\\n                return true;\\n            } else if (c instanceof JInternalFrame.JDesktopIcon) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    public boolean showGameOptionsDialog(boolean editable) {\\n        GameOptionsDialog gameOptionsDialog = new GameOptionsDialog(this, freeColClient);\\n        gameOptionsDialog.initialize(editable);\\n        addAsFrame(gameOptionsDialog);\\n        gameOptionsDialog.requestFocus();\\n        boolean r = gameOptionsDialog.getResponseBoolean();\\n        remove(gameOptionsDialog);\\n        return r;\\n    }\\n    public LoadingSavegameDialog getLoadingSavegameDialog() {\\n        return loadingSavegameDialog;\\n    }\\n    public boolean showLoadingSavegameDialog(boolean publicServer, boolean singleplayer) {\\n        loadingSavegameDialog.initialize(publicServer, singleplayer);\\n        addAsFrame(loadingSavegameDialog);\\n        loadingSavegameDialog.requestFocus();\\n        boolean r = loadingSavegameDialog.getResponseBoolean();\\n        remove(loadingSavegameDialog);\\n        return r;\\n    }\\n    public boolean showClientOptionsDialog() {\\n        clientOptionsDialog.initialize();\\n        clientOptionsDialogShowing = true;\\n        addAsFrame(clientOptionsDialog);\\n        clientOptionsDialog.requestFocus();\\n        boolean r = clientOptionsDialog.getResponseBoolean();\\n        remove(clientOptionsDialog);\\n        clientOptionsDialogShowing = false;\\n        freeColClient.getActionManager().update();\\n        return r;\\n    }\\n    public boolean showMapGeneratorOptionsDialog(boolean editable) {\\n        final MapGeneratorOptions mgo = freeColClient.getPreGameController().getMapGeneratorOptions();\\n        return showMapGeneratorOptionsDialog(editable, mgo);\\n    }\\n    public boolean showMapGeneratorOptionsDialog(boolean editable, MapGeneratorOptions mgo) {\\n        MapGeneratorOptionsDialog mapGeneratorOptionsDialog = new MapGeneratorOptionsDialog(this, freeColClient);\\n        mapGeneratorOptionsDialog.initialize(editable, mgo);\\n        addAsFrame(mapGeneratorOptionsDialog);\\n        mapGeneratorOptionsDialog.requestFocus();\\n        boolean r = mapGeneratorOptionsDialog.getResponseBoolean();\\n        remove(mapGeneratorOptionsDialog);\\n        return r;\\n    }\\n    public File showLoadDialog(File directory) {\\n        return showLoadDialog(directory, new FileFilter[] { FreeColDialog.getFSGFileFilter() });\\n    }\\n    public File showLoadDialog(File directory, FileFilter[] fileFilters) {\\n        FreeColDialog loadDialog = FreeColDialog.createLoadDialog(directory, fileFilters);\\n        addAsFrame(loadDialog);\\n        loadDialog.requestFocus();\\n        File response = (File) loadDialog.getResponse();\\n        while (response != null && !response.isFile()) {\\n            errorMessage(\\\"noSuchFile\\\");\\n            response = (File) loadDialog.getResponse();\\n        }\\n        remove(loadDialog);\\n        return response;\\n    }\\n    public File showSaveDialog(File directory, String defaultName) {\\n        return showSaveDialog(directory, \\\".fsg\\\", new FileFilter[] { FreeColDialog.getFSGFileFilter() }, defaultName);\\n    }\\n    public File showSaveDialog(File directory, String standardName, FileFilter[] fileFilters, String defaultName) {\\n        FreeColDialog saveDialog = FreeColDialog.createSaveDialog(directory, standardName, fileFilters, defaultName);\\n        addAsFrame(saveDialog);\\n        saveDialog.requestFocus();\\n        File response = (File) saveDialog.getResponse();\\n        remove(saveDialog);\\n        return response;\\n    }\\n    public BoycottAction showBoycottedGoodsDialog(Goods goods, Europe europe) {\\n        int arrears = europe.getOwner().getArrears(goods.getType());\\n        FreeColDialog boycottedGoodsDialog = FreeColDialog\\n            .createChoiceDialog(Messages.message(\\\"boycottedGoods.text\\\", \\n                                                 \\\"%goods%\\\", goods.getName(), \\n                                                 \\\"%europe%\\\", europe.getName(),\\n                                                 \\\"%amount%\\\", String.valueOf(arrears)),\\n                                null,\\n                                new ChoiceItem(Messages.message(\\\"boycottedGoods.payArrears\\\"),\\n                                               BoycottAction.PAY_ARREARS),\\n                                new ChoiceItem(Messages.message(\\\"boycottedGoods.dumpGoods\\\"),\\n                                               BoycottAction.DUMP_CARGO),\\n                                new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                               BoycottAction.CANCEL));\\n        addAsFrame(boycottedGoodsDialog);\\n        ChoiceItem response = (ChoiceItem) boycottedGoodsDialog.getResponse();\\n        remove(boycottedGoodsDialog);\\n        return (BoycottAction) response.getObject();\\n    }\\n    public ScoutAction showScoutIndianSettlementDialog(IndianSettlement settlement) {\\n        StringBuilder text = new StringBuilder(400);\\n        text.append(Messages.message(settlement.getAlarmLevelMessage(freeColClient.getMyPlayer()),\\n                                     \\\"%nation%\\\", settlement.getOwner().getNationAsString()));\\n        text.append(\\\"\\\\n\\\\n\\\");\\n        text.append(Messages.message(\\\"scoutSettlement.greetings\\\",\\n                                     \\\"%nation%\\\", settlement.getOwner().getNationAsString(),\\n                                     \\\"%number%\\\", String.valueOf(settlement.getOwner().getNumberOfSettlements())));\\n        text.append(\\\" \\\");\\n        if (settlement.getLearnableSkill() != null) {\\n            text.append(Messages.message(\\\"scoutSettlement.skill\\\", \\\"%skill%\\\",\\n                                         settlement.getLearnableSkill().getName()));\\n            text.append(\\\" \\\");\\n        }\\n        text.append(Messages.message(\\\"scoutSettlement.trade\\\",\\n                                     \\\"%goods1%\\\", settlement.getWantedGoods()[0].getName(),\\n                                     \\\"%goods2%\\\", settlement.getWantedGoods()[1].getName(),\\n                                     \\\"%goods3%\\\", settlement.getWantedGoods()[2].getName()));\\n        text.append(\\\"\\\\n\\\\n\\\");\\n        FreeColDialog scoutDialog = FreeColDialog\\n            .createChoiceDialog(text.toString(), null,\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.speak\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_SPEAK),\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.tribute\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_TRIBUTE),\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.attack\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_ATTACK),\\n                                new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                               ScoutAction.CANCEL));\\n        addAsFrame(scoutDialog);\\n        scoutDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) scoutDialog.getResponse();\\n        ScoutAction response = (ScoutAction) responseItem.getObject();\\n        remove(scoutDialog);\\n        return response;\\n    }\\n    public ScoutAction showScoutForeignColonyDialog(Colony colony, Unit unit) {\\n        String mainText = Messages.message(\\\"scoutColony.text\\\", \\n                                           \\\"%unit%\\\", unit.getName(), \\n                                           \\\"%colony%\\\", colony.getName());\\n        FreeColDialog scoutDialog = FreeColDialog\\n        .createChoiceDialog(mainText, null,\\n                            new ChoiceItem(Messages.message(\\\"scoutColony.negotiate\\\"), \\n                                           ScoutAction.FOREIGN_COLONY_NEGOTIATE),\\n                            new ChoiceItem(Messages.message(\\\"scoutColony.spy\\\"),\\n                                           ScoutAction.FOREIGN_COLONY_SPY),\\n                            new ChoiceItem(Messages.message(\\\"scoutColony.attack\\\"),\\n                                           ScoutAction.FOREIGN_COLONY_ATTACK),\\n                            new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                           ScoutAction.CANCEL));\\n        addAsFrame(scoutDialog);\\n        scoutDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) scoutDialog.getResponse();\\n        ScoutAction response = (ScoutAction) responseItem.getObject();\\n        remove(scoutDialog);\\n        return response;\\n    }\\n    public ScoutAction showArmedUnitIndianSettlementDialog(IndianSettlement settlement) {\\n        String introText = Messages.message(settlement.getAlarmLevelMessage(freeColClient.getMyPlayer()),\\n                \\\"%nation%\\\", settlement.getOwner().getNationAsString());\\n        FreeColDialog armedUnitDialog = FreeColDialog\\n            .createChoiceDialog(introText, null,\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.tribute\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_TRIBUTE),\\n                                new ChoiceItem(Messages.message(\\\"scoutSettlement.attack\\\"),\\n                                               ScoutAction.INDIAN_SETTLEMENT_ATTACK),\\n                                new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                                               ScoutAction.CANCEL));\\n        addAsFrame(armedUnitDialog);\\n        armedUnitDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) armedUnitDialog.getResponse();\\n        ScoutAction response = (ScoutAction) responseItem.getObject();\\n        remove(armedUnitDialog);\\n        return response;\\n    }\\n    public List<Object> showUseMissionaryDialog(IndianSettlement settlement) {\\n        StringBuilder introText = new StringBuilder(Messages\\n                                                    .message(settlement.getAlarmLevelMessage(freeColClient.getMyPlayer()),\\n                     \\\"%nation%\\\", settlement.getOwner().getNationAsString()));\\n        introText.append(\\\"\\\\n\\\\n\\\");\\n        introText.append(Messages.message(\\\"missionarySettlement.question\\\"));\\n        ChoiceItem establish = new ChoiceItem(Messages.message(\\\"missionarySettlement.establish\\\"),\\n                MissionaryAction.ESTABLISH_MISSION);\\n        ChoiceItem heresy = new ChoiceItem(Messages.message(\\\"missionarySettlement.heresy\\\"),\\n                MissionaryAction.DENOUNCE_HERESY);\\n        ChoiceItem incite = new ChoiceItem(Messages.message(\\\"missionarySettlement.incite\\\"),\\n                MissionaryAction.INCITE_INDIANS);\\n        ChoiceItem cancel = new ChoiceItem(Messages.message(\\\"cancel\\\"),\\n                MissionaryAction.CANCEL);\\n        FreeColDialog missionaryDialog;\\n        if (settlement.getMissionary() == null) {\\n                        missionaryDialog = FreeColDialog.createChoiceDialog(introText.toString(), null,\\n                    establish, incite, cancel);\\n        } else {\\n                        missionaryDialog = FreeColDialog.createChoiceDialog(introText.toString(), null,\\n                    heresy, incite, cancel);\\n        }\\n        addAsFrame(missionaryDialog);\\n        missionaryDialog.requestFocus();\\n        ChoiceItem responseItem = (ChoiceItem) missionaryDialog.getResponse();\\n        MissionaryAction response = (MissionaryAction) responseItem.getObject();\\n        ArrayList<Object> returnValue = new ArrayList<Object>();\\n                returnValue.add(response);\\n        remove(missionaryDialog);\\n        if (MissionaryAction.INCITE_INDIANS.equals(response)) {\\n            FreeColDialog inciteDialog = FreeColDialog.createInciteDialog(freeColClient.getGame().getEuropeanPlayers(),\\n                    freeColClient.getMyPlayer());\\n            addAsFrame(inciteDialog);\\n            inciteDialog.requestFocus();\\n            Player response2 = (Player) inciteDialog.getResponse();\\n            if (response2 != null) {\\n                returnValue.add(response2);\\n            } else {\\n                returnValue.clear();\\n                returnValue.add(MissionaryAction.CANCEL);\\n            }\\n            remove(inciteDialog);\\n        }\\n        return returnValue;\\n    }\\n    public boolean showInciteDialog(Player enemy, int amount) {\\n        String message = Messages.message(\\\"missionarySettlement.inciteConfirm\\\");\\n        message = message.replaceAll(\\\"%player%\\\", enemy.getName());\\n        message = message.replaceAll(\\\"%amount%\\\", String.valueOf(amount));\\n        FreeColDialog confirmDialog = FreeColDialog.createConfirmDialog(message, Messages.message(\\\"yes\\\"), Messages\\n                .message(\\\"no\\\"));\\n        addAsFrame(confirmDialog);\\n        confirmDialog.requestFocus();\\n        boolean result = confirmDialog.getResponseBoolean();\\n        remove(confirmDialog);\\n        return result;\\n    }\\n    public String showInputDialog(String text, String defaultValue, String okText, String cancelText,\\n                                  String... data) {\\n        try {\\n            text = Messages.message(text, data);\\n            okText = Messages.message(okText);\\n            if (cancelText != null) {\\n                cancelText = Messages.message(cancelText);\\n            }\\n        } catch (MissingResourceException e) {\\n            logger.warning(\\\"could not find message with id: \\\" + text + \\\", \\\" + okText + \\\" or \\\" + cancelText + \\\".\\\");\\n        }\\n        FreeColDialog inputDialog = FreeColDialog.createInputDialog(text, defaultValue, okText, cancelText);\\n        addAsFrame(inputDialog);\\n        inputDialog.requestFocus();\\n        String response = (String) inputDialog.getResponse();\\n                if ((response != null) && (response.length() == 0)) {\\n            String okTxt = \\\"ok\\\";\\n            String txt = \\\"enterSomeText\\\";\\n            try {\\n                okTxt = Messages.message(okTxt);\\n                txt = Messages.message(txt);\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + txt + \\\" or \\\" + okTxt + \\\".\\\");\\n            }\\n            InformationDialog informationDialog = new InformationDialog(txt, null);\\n            do {\\n                remove(inputDialog);\\n                addAsFrame(informationDialog);\\n                informationDialog.requestFocus();\\n                informationDialog.getResponse();\\n                remove(informationDialog);\\n                addAsFrame(inputDialog);\\n                inputDialog.requestFocus();\\n                response = (String) inputDialog.getResponse();\\n            } while ((response != null) && (response.length() == 0));\\n        }\\n        remove(inputDialog);\\n        return response;\\n    }\\n    public Object showChoiceDialog(String text, String cancelText, Iterator<?> iterator) {\\n        ArrayList<ChoiceItem> a = new ArrayList<ChoiceItem>();\\n        while (iterator.hasNext()) {\\n            a.add(new ChoiceItem(iterator.next()));\\n        }\\n        return showChoiceDialog(text, cancelText, a.toArray(new ChoiceItem[0]));\\n    }\\n    public Object showChoiceDialog(String text, String cancelText, ChoiceItem... objects) {\\n        FreeColDialog choiceDialog = FreeColDialog.createChoiceDialog(text, cancelText, objects);\\n        if (choiceDialog.getHeight() > getHeight() / 3) {\\n            choiceDialog.setSize(choiceDialog.getWidth(), (getHeight() * 2) / 3);\\n        }\\n        addAsFrame(choiceDialog);\\n        choiceDialog.requestFocus();\\n        Object response = choiceDialog.getResponse();\\n        remove(choiceDialog);\\n        return response;\\n    }\\n    public void showStatusPanel(String message) {\\n        statusPanel.setStatusMessage(message);\\n        addCentered(statusPanel, STATUS_LAYER);\\n    }\\n    public void closeStatusPanel() {\\n        if (statusPanel.isVisible()) {\\n            remove(statusPanel);\\n        }\\n    }\\n    public void showColopediaPanel(ColopediaPanel.PanelType type) {\\n        ColopediaPanel colopediaPanel = new ColopediaPanel(this);\\n        colopediaPanel.initialize(type);\\n        addAsFrame(colopediaPanel);\\n        colopediaPanel.requestFocus();\\n    }\\n    public void showColopediaPanel(ColopediaPanel.PanelType panelType,\\n                                   FreeColGameObjectType objectType) {\\n        ColopediaPanel colopediaPanel = new ColopediaPanel(this);\\n        colopediaPanel.initialize(panelType, objectType);\\n        addAsFrame(colopediaPanel);\\n        colopediaPanel.requestFocus();\\n    }\\n    public void showReportPanel(String classname) {\\n        ReportPanel reportPanel = null;\\n        if (\\\"net.sf.freecol.client.gui.panel.ReportReligiousPanel\\\".equals(classname)) {\\n            reportPanel = new ReportReligiousPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportLabourPanel\\\".equals(classname)) {\\n            reportPanel = new ReportLabourPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportForeignAffairPanel\\\".equals(classname)) {\\n            reportPanel = new ReportForeignAffairPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportIndianPanel\\\".equals(classname)) {\\n            reportPanel = new ReportIndianPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportTurnPanel\\\".equals(classname)) {\\n            reportPanel = new ReportTurnPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportContinentalCongressPanel\\\".equals(classname)) {\\n            reportPanel = new ReportContinentalCongressPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportTradePanel\\\".equals(classname)) {\\n            reportPanel = new ReportTradePanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportMilitaryPanel\\\".equals(classname)) {\\n            reportPanel = new ReportMilitaryPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportNavalPanel\\\".equals(classname)) {\\n            reportPanel = new ReportNavalPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportCargoPanel\\\".equals(classname)) {\\n            reportPanel = new ReportCargoPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportColonyPanel\\\".equals(classname)) {\\n            reportPanel = new ReportColonyPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportRequirementsPanel\\\".equals(classname)) {\\n            reportPanel = new ReportRequirementsPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportExplorationPanel\\\".equals(classname)) {\\n            reportPanel = new ReportExplorationPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportHistoryPanel\\\".equals(classname)) {\\n            reportPanel = new ReportHistoryPanel(this);\\n        } else if (\\\"net.sf.freecol.client.gui.panel.ReportHighScoresPanel\\\".equals(classname)) {\\n            reportPanel = new ReportHighScoresPanel(this);\\n        } else {\\n            logger.warning(\\\"Request for Report panel could not be processed.  Name=\\\" + classname);\\n        }\\n        if (reportPanel != null) {\\n            reportPanel.initialize();\\n            addAsFrame(reportPanel);\\n            reportPanel.requestFocus();\\n        }\\n    }\\n    public FoundingFather showChooseFoundingFatherDialog(List<FoundingFather> possibleFoundingFathers) {\\n        closeStatusPanel();\\n        ChooseFoundingFatherDialog chooseFoundingFatherDialog = new ChooseFoundingFatherDialog(this);\\n        chooseFoundingFatherDialog.initialize(possibleFoundingFathers);\\n        addAsFrame(chooseFoundingFatherDialog);\\n        chooseFoundingFatherDialog.requestFocus();\\n        int response = chooseFoundingFatherDialog.getResponseInt();\\n        remove(chooseFoundingFatherDialog);\\n        return possibleFoundingFathers.get(response);\\n    }\\n    public boolean showEventDialog(int eventID) {\\n        EventPanel eventPanel = new EventPanel(this, freeColClient);\\n        eventPanel.initialize(eventID);\\n        addAsFrame(eventPanel);\\n        eventPanel.requestFocus();\\n        boolean response = eventPanel.getResponseBoolean();\\n        remove(eventPanel);\\n        return response;\\n    }\\n    public void showEuropePanel() {\\n        closeMenus();\\n        if (freeColClient.getGame() == null) {\\n            errorMessage(\\\"europe.noGame\\\");\\n        } else {\\n            europePanel.initialize(freeColClient.getMyPlayer().getEurope(), freeColClient.getGame());\\n            JInternalFrame f = addAsSimpleFrame(europePanel);\\n            f.setBorder(null);\\n            f.setSize(getWidth(), getHeight() - getMenuBarHeight());\\n            f.setLocation(0, getMenuBarHeight());\\n            f.moveToBack();\\n        }\\n    }\\n    public int showEuropeDialog(EuropePanel.EuropeAction europeAction) {\\n                try {\\n            if (europeOpenDialog != null) {\\n                europeOpenDialog.setResponse(new Integer(-1));\\n            }\\n        } catch (NumberFormatException e) {\\n            logger.warning(\\\"Canvas.showEuropeDialog: Invalid europeDialogType\\\");\\n        }\\n        FreeColDialog localDialog = null;\\n                switch (europeAction) {\\n        case EXIT:\\n        case UNLOAD:\\n        case SAIL:\\n            return -1;\\n        case RECRUIT:\\n            localDialog = new RecruitDialog(this);\\n            break;\\n        case PURCHASE:\\n        case TRAIN:\\n            localDialog = new TrainDialog(this, europeAction);\\n            break;\\n        }\\n        localDialog.initialize();\\n        europeOpenDialog = localDialog;         \\n        addAsFrame(localDialog);\\n        localDialog.requestFocus();\\n        int response = localDialog.getResponseInt();\\n        remove(localDialog);\\n        if (europeOpenDialog == localDialog) {\\n            europeOpenDialog = null;            }\\n        return response;\\n    }\\n    public TradeRoute showTradeRouteDialog(TradeRoute selectedRoute) {\\n        TradeRouteDialog tradeRouteDialog = new TradeRouteDialog(this);\\n        tradeRouteDialog.initialize();\\n        tradeRouteDialog.setSelectedRoute(selectedRoute);\\n        addAsFrame(tradeRouteDialog);\\n        tradeRouteDialog.requestFocus();\\n        TradeRoute response = (TradeRoute) tradeRouteDialog.getResponse();\\n        remove(tradeRouteDialog);\\n        return response;\\n    }\\n    public boolean showTradeRouteInputDialog(TradeRoute route) {\\n        TradeRouteInputDialog tradeRouteInputDialog = new TradeRouteInputDialog(this);\\n        tradeRouteInputDialog.initialize(route);\\n        addAsFrame(tradeRouteInputDialog);\\n        tradeRouteInputDialog.requestFocus();\\n        boolean response = tradeRouteInputDialog.getResponseBoolean();\\n        remove(tradeRouteInputDialog);\\n        return response;\\n    }\\n    public void showColonyPanel(Colony colony) {\\n        freeColClient.getGUI().stopBlinking();\\n        ColonyPanel colonyPanel = new ColonyPanel(this, freeColClient);\\n        colonyPanel.initialize(colony, freeColClient.getGame());\\n        addAsFrame(colonyPanel);\\n        colonyPanel.requestFocus();\\n    }\\n    public void showBuildQueuePanel(Colony colony) {\\n        BuildQueuePanel buildQueuePanel = new BuildQueuePanel(this);\\n        buildQueuePanel.initialize(colony);\\n        addAsFrame(buildQueuePanel);\\n        buildQueuePanel.requestFocus();\\n    }\\n    public void showIndianSettlementPanel(IndianSettlement settlement) {\\n        closeMenus();\\n        IndianSettlementPanel indianSettlementPanel = new IndianSettlementPanel(freeColClient);\\n        indianSettlementPanel.initialize(settlement);\\n        addAsFrame(indianSettlementPanel);\\n        indianSettlementPanel.requestFocus();\\n        indianSettlementPanel.getResponseBoolean();\\n        remove(indianSettlementPanel);\\n    }\\n    public ChoiceItem showIndianSettlementTradeDlg(boolean showBuy, boolean showSell, boolean showGift){\\n        ArrayList<ChoiceItem> choices = new ArrayList<ChoiceItem>();\\n        if(showBuy){\\n            choices.add(new ChoiceItem(Messages.message(\\\"tradeProposition.toBuy\\\"), 1));\\n        }\\n        if(showSell){\\n            choices.add(new ChoiceItem(Messages.message(\\\"tradeProposition.toSell\\\"), 2));\\n        }\\n        if(showGift){\\n            choices.add(new ChoiceItem(Messages.message(\\\"tradeProposition.toGift\\\"), 3));\\n        }\\n        ChoiceItem choice = (ChoiceItem) showChoiceDialog(Messages.message(\\\"tradeProposition.welcome\\\"), \\n                          Messages.message(\\\"tradeProposition.cancel\\\"), \\n                          choices.toArray(new ChoiceItem[0]));\\n        return choice;\\n    }\\n    public void showTilePanel(Tile tile) {\\n        TilePanel tilePanel = new TilePanel(this);\\n        tilePanel.initialize(tile);\\n        addAsFrame(tilePanel);\\n        tilePanel.requestFocus();\\n        tilePanel.getResponseBoolean();\\n        remove(tilePanel);\\n    }\\n    public void showDumpCargoDialog(Unit unit) {\\n        DumpCargoDialog dumpCargoDialog = new DumpCargoDialog(this);\\n        dumpCargoDialog.initialize(unit);\\n        addAsFrame(dumpCargoDialog);\\n        dumpCargoDialog.requestFocus();\\n        dumpCargoDialog.getResponseBoolean();\\n        remove(dumpCargoDialog);\\n    }\\n    public boolean showMonarchPanel(MonarchAction action, String... replace) {\\n        closeStatusPanel();\\n        MonarchPanel monarchPanel = new MonarchPanel(this);\\n        monarchPanel.initialize(action, replace);\\n        addAsFrame(monarchPanel);\\n        monarchPanel.requestFocus();\\n        boolean response = monarchPanel.getResponseBoolean();\\n        remove(monarchPanel);\\n        return response;\\n    }\\n    public int showEmigrationPanel() {\\n        return showEmigrationPanel(false);\\n    }\\n    public int showEmigrationPanel(boolean fountainOfYouth) {\\n        EmigrationPanel emigrationPanel = new EmigrationPanel(this);\\n        emigrationPanel.initialize(freeColClient.getMyPlayer().getEurope(), fountainOfYouth);\\n        addAsFrame(emigrationPanel);\\n        emigrationPanel.requestFocus();\\n        int response = emigrationPanel.getResponseInt();\\n        remove(emigrationPanel);\\n        return response;\\n    }\\n    public int showRiverStylePanel() {\\n        RiverStylePanel riverStylePanel = new RiverStylePanel(this);\\n        addAsFrame(riverStylePanel);\\n        riverStylePanel.requestFocus();\\n        int response = riverStylePanel.getResponseInt();\\n        remove(riverStylePanel);\\n        return response;\\n    }\\n    public void updateJMenuBar() {\\n        if (jMenuBar instanceof FreeColMenuBar) {\\n            ((FreeColMenuBar) jMenuBar).update();\\n        }\\n    }\\n    public void resetFreeColMenuBar() {\\n        if (jMenuBar instanceof FreeColMenuBar) {\\n            ((FreeColMenuBar) jMenuBar).reset();\\n        }\\n    }\\n    @Override\\n    public void remove(Component comp) {\\n        remove(comp, true);\\n    }\\n    private JInternalFrame getInternalFrame(final Component c) {\\n        Component temp = c;\\n        while (temp != null && !(temp instanceof JInternalFrame)) {\\n            temp = temp.getParent();\\n        }\\n        return (JInternalFrame) temp;\\n    }\\n    public void remove(Component comp, boolean update) {\\n        if (comp == null) {\\n            return;\\n        }\\n        final Rectangle updateBounds = comp.getBounds();\\n        if (comp == jMenuBar) {\\n            jMenuBar = null;\\n            super.remove(comp);\\n        } else {\\n            final JInternalFrame frame = getInternalFrame(comp);\\n            if (frame != null && frame != comp) {\\n                                frame.dispose();\\n            } else {\\n                super.remove(comp);\\n            }\\n        }\\n        repaint(updateBounds.x, updateBounds.y, updateBounds.width, updateBounds.height);\\n        final boolean takeFocus = (comp != statusPanel);\\n        if (update) {\\n            updateJMenuBar();\\n            freeColClient.getActionManager().update();\\n            if (takeFocus && !isShowingSubPanel()) {\\n                takeFocus();\\n            }\\n        }\\n    }\\n    @Override\\n    public Component add(Component comp) {\\n        add(comp, null);\\n        return comp;\\n    }\\n    public Component addCentered(Component comp) {\\n        addCentered(comp, null);\\n        return comp;\\n    }\\n    public JInternalFrame addAsFrame(JComponent comp) {\\n        return addAsFrame(comp, false);\\n    }\\n    public JInternalFrame addAsToolBox(JComponent comp) {\\n        return addAsFrame(comp, true);\\n    }\\n    private JInternalFrame addAsFrame(JComponent comp, boolean toolBox) {\\n        return addAsFrame(comp, toolBox, true);\\n    }\\n    private JInternalFrame addAsFrame(JComponent comp, boolean toolBox, boolean centered) {\\n        final int FRAME_EMPTY_SPACE = 60;\\n        final JInternalFrame f = (toolBox) ? new ToolBoxFrame() : new JInternalFrame();\\n        if (f.getContentPane() instanceof JComponent) {\\n            JComponent c = (JComponent) f.getContentPane();\\n            c.setOpaque(false);\\n            c.setBorder(null);\\n        }\\n        if (comp.getBorder() != null) {\\n            Image menuborderN = ResourceManager.getImage(\\\"menuborder.n.image\\\");\\n            Image menuborderNW = ResourceManager.getImage(\\\"menuborder.nw.image\\\");\\n            Image menuborderNE = ResourceManager.getImage(\\\"menuborder.ne.image\\\");\\n            Image menuborderW = ResourceManager.getImage(\\\"menuborder.w.image\\\");\\n            Image menuborderE = ResourceManager.getImage(\\\"menuborder.e.image\\\");\\n            Image menuborderS = ResourceManager.getImage(\\\"menuborder.s.image\\\");\\n            Image menuborderSW = ResourceManager.getImage(\\\"menuborder.sw.image\\\");\\n            Image menuborderSE = ResourceManager.getImage(\\\"menuborder.se.image\\\");\\n            final FreeColImageBorder imageBorder = new FreeColImageBorder(menuborderN, menuborderW, menuborderS,\\n                    menuborderE, menuborderNW, menuborderNE, menuborderSW, menuborderSE);\\n            f.setBorder(imageBorder);\\n            comp.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\\n        } else {\\n            f.setBorder(null);\\n        }\\n        final FrameMotionListener fml = new FrameMotionListener(f);\\n        comp.addMouseMotionListener(fml);\\n        comp.addMouseListener(fml);\\n        if (f.getUI() instanceof BasicInternalFrameUI) {\\n            BasicInternalFrameUI biu = (BasicInternalFrameUI) f.getUI();\\n            biu.setNorthPane(null);\\n            biu.setSouthPane(null);\\n            biu.setWestPane(null);\\n            biu.setEastPane(null);\\n        }\\n        f.getContentPane().add(comp);\\n        f.setOpaque(false);\\n        f.pack();\\n        int width = f.getWidth();\\n        int height = f.getHeight();\\n        if (width > getWidth() - FRAME_EMPTY_SPACE) {\\n            width = Math.min(width, getWidth());\\n        }\\n        if (height > getHeight() - FRAME_EMPTY_SPACE) {\\n            height = Math.min(height, getHeight() - getMenuBarHeight());\\n        }\\n        f.setSize(width, height);\\n        if (centered) {\\n            addCentered(f, MODAL_LAYER);\\n        } else {\\n            f.setLocation(0, getMenuBarHeight());\\n            add(f, MODAL_LAYER);\\n        }\\n        f.setName(comp.getClass().getSimpleName());\\n        f.setFrameIcon(null);\\n        f.setVisible(true);\\n        f.setResizable(true);\\n        try {\\n            f.setSelected(true);\\n        } catch (java.beans.PropertyVetoException e) {\\n        }\\n        return f;\\n    }\\n    public JInternalFrame addAsSimpleFrame(JComponent comp) {\\n        final JInternalFrame f = new JInternalFrame();\\n        JScrollPane scrollPane =\\n            new JScrollPane(comp, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, \\n                            ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);\\n        f.getContentPane().add(scrollPane);\\n        f.pack();\\n        addCentered(f);\\n        f.setName(comp.getClass().getSimpleName());\\n        if (f.getUI() instanceof BasicInternalFrameUI) {\\n            BasicInternalFrameUI biu = (BasicInternalFrameUI) f.getUI();\\n            biu.setNorthPane(null);\\n        }\\n        f.setFrameIcon(null);\\n        f.setVisible(true);\\n        f.setResizable(false);\\n        try {\\n            f.setSelected(true);\\n        } catch (java.beans.PropertyVetoException e) {\\n        }\\n        return f;\\n    }\\n    public void deactivateMovable(JComponent c) {\\n        for (MouseListener ml : c.getMouseListeners()) {\\n            if (ml instanceof FrameMotionListener) {\\n                c.removeMouseListener(ml);\\n            }\\n        }\\n        for (MouseMotionListener ml : c.getMouseMotionListeners()) {\\n            if (ml instanceof FrameMotionListener) {\\n                c.removeMouseMotionListener(ml);\\n            }\\n        }\\n    }\\n    public void addCentered(Component comp, Integer i) {\\n        comp.setLocation(getWidth() / 2 - comp.getWidth() / 2, (getHeight() + getMenuBarHeight()) / 2\\n                - comp.getHeight() / 2);\\n        add(comp, i);\\n    }\\n    public void add(Component comp, Integer i) {\\n        add(comp, i, true);\\n    }\\n    public void add(Component comp, Integer i, boolean update) {\\n        if (comp != statusPanel && !(comp instanceof JMenuItem) && !(comp instanceof FreeColDialog)\\n                && statusPanel.isVisible()) {\\n            remove(statusPanel, false);\\n        }\\n        try {\\n            if (i == null) {\\n                super.add(comp);\\n            } else {\\n                super.add(comp, i);\\n            }\\n        } catch(Exception e) {\\n            logger.warning(\\\"add component failed with layer \\\" + i);\\n        }\\n        if (update) {\\n            updateJMenuBar();\\n            freeColClient.getActionManager().update();\\n        }\\n    }\\n    private void takeFocus() {\\n        if (!isShowingSubPanel()) {\\n            requestFocus();\\n        }\\n    }\\n    public EuropePanel getEuropePanel() {\\n        return europePanel;\\n    }\\n    public MapControls getMapControls() {\\n        return mapControls;\\n    }\\n    public void showPopup(JPopupMenu popup, int x, int y) {\\n                popup.show(this, x, y);\\n        popup.repaint();\\n    }\\n    public void showTilePopup(Map.Position pos, int x, int y) {\\n        if (pos != null) {\\n            Tile t = freeColClient.getGame().getMap().getTile(pos.getX(), pos.getY());\\n            if (t != null) {\\n                TilePopup tp = new TilePopup(t, freeColClient, this, getGUI());\\n                if (tp.hasItem()) {\\n                    showPopup(tp, x, y);\\n                } else if (t.isExplored()) {\\n                    showTilePanel(t);\\n                }\\n            }\\n        }\\n    }\\n    public void errorMessage(String messageID) {\\n        errorMessage(messageID, \\\"Unspecified error: \\\" + messageID);\\n    }\\n    public void errorMessage(String messageID, String message) {\\n        if (messageID != null) {\\n            try {\\n                message = Messages.message(messageID);\\n            } catch (MissingResourceException e) {\\n                logger.warning(\\\"could not find message with id: \\\" + messageID);\\n            }\\n        }\\n        ErrorPanel errorPanel = new ErrorPanel(this);\\n        errorPanel.initialize(message);\\n        addAsFrame(errorPanel);\\n        errorPanel.requestFocus();\\n        errorPanel.getResponse();\\n        remove(errorPanel);\\n    }\\n    public void showInformationMessage(String messageId) {\\n        showInformationMessage(messageId, null, new String[0]);\\n    }\\n    public void showInformationMessage(String messageId, FreeColObject displayObject) {\\n        showInformationMessage(messageId, displayObject, new String[0]);\\n    }\\n    public void showInformationMessage(String messageId, String... replace) {\\n        showInformationMessage(messageId, null, replace);\\n    }\\n    public void showInformationMessage(String messageId, FreeColObject displayObject, String... replace) {\\n        String text;\\n        try {\\n            text = Messages.message(messageId, replace);\\n        } catch (MissingResourceException e) {\\n            text = messageId;\\n            logger.warning(\\\"Missing i18n resource: \\\" + messageId);\\n        }\\n        ImageIcon icon = null;\\n        if (displayObject != null) {\\n            icon = getImageIcon(displayObject, false);\\n        }\\n        InformationDialog infoDialog = new InformationDialog(text, icon);\\n        addAsFrame(infoDialog);\\n        infoDialog.requestFocus();\\n        infoDialog.getResponse();\\n        remove(infoDialog);\\n    }\\n    public void refresh() {\\n        gui.forceReposition();\\n        repaint(0, 0, getWidth(), getHeight());\\n    }\\n    public void refreshTile(int x, int y) {\\n        if (x >= 0 && y >= 0) {\\n            repaint(gui.getTileBounds(x, y));\\n        }\\n    }\\n    public void refreshTile(Tile t) {\\n        refreshTile(t.getX(), t.getY());\\n    }\\n    public void refreshTile(Position p) {\\n        refreshTile(p.getX(), p.getY());\\n    }\\n    public void closeMenus() {\\n        for (JInternalFrame frame : getAllFrames()) {\\n            frame.dispose();\\n        }\\n    }\\n    public void showMainPanel() {\\n        closeMenus();\\n        addCentered(mainPanel, MAIN_LAYER);\\n        mainPanel.requestFocus();\\n    }\\n    public MainPanel getMainPanel() {\\n        return mainPanel;\\n    }\\n    public void closeMainPanel() {\\n        remove(mainPanel);\\n    }\\n    public void showOpenGamePanel() {\\n        errorMessage(\\\"openGame.unimplemented\\\");\\n    }\\n    public StartGamePanel getStartGamePanel() {\\n        return startGamePanel;\\n    }\\n    public void displayChatMessage(Player sender, String message, boolean privateChat) {\\n        gui.addMessage(new GUIMessage(sender.getName() + \\\": \\\" + message, sender.getColor()));\\n    }\\n    public void displayChatMessage(String message) {\\n        displayChatMessage(freeColClient.getMyPlayer(), message, false);\\n    }\\n    public void quit() {\\n        if (showConfirmDialog(\\\"quitDialog.areYouSure.text\\\", \\\"ok\\\", \\\"cancel\\\")) {\\n            freeColClient.quit();\\n        }\\n    }\\n    public void retire() {\\n        if (showConfirmDialog(\\\"retireDialog.areYouSure.text\\\", \\\"ok\\\", \\\"cancel\\\")) {\\n            if (freeColClient.retire()) {\\n                showReportPanel(ReportHighScoresPanel.class.getName());\\n            }\\n                                    quit();\\n        }\\n    }\\n    public void returnToTitle() {\\n                                        closeMenus();\\n        removeInGameComponents();\\n        showMainPanel();\\n        repaint();\\n    }\\n    public void removeInGameComponents() {\\n                KeyListener[] keyListeners = getKeyListeners();\\n        for (int i = 0; i < keyListeners.length; ++i) {\\n            removeKeyListener(keyListeners[i]);\\n        }\\n        MouseListener[] mouseListeners = getMouseListeners();\\n        for (int i = 0; i < mouseListeners.length; ++i) {\\n            removeMouseListener(mouseListeners[i]);\\n        }\\n        MouseMotionListener[] mouseMotionListeners = getMouseMotionListeners();\\n        for (int i = 0; i < mouseMotionListeners.length; ++i) {\\n            removeMouseMotionListener(mouseMotionListeners[i]);\\n        }\\n                        getGUI().getViewMode().changeViewMode(ViewMode.MOVE_UNITS_MODE);\\n        if (jMenuBar != null) {\\n            remove(jMenuBar);\\n        }\\n        for (Component c : getComponents()) {\\n            remove(c, false);\\n        }\\n    }\\n    public boolean containsInGameComponents() {\\n        KeyListener[] keyListeners = getKeyListeners();\\n        if (keyListeners.length > 0) {\\n            return true;\\n        }\\n        MouseListener[] mouseListeners = getMouseListeners();\\n        if (mouseListeners.length > 0) {\\n            return true;\\n        }\\n        MouseMotionListener[] mouseMotionListeners = getMouseMotionListeners();\\n        if (mouseMotionListeners.length > 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public GUI getGUI() {\\n        return gui;\\n    }\\n    public FreeColClient getClient() {\\n        return freeColClient;\\n    }\\n    public void newGame() {\\n        if (!showConfirmDialog(\\\"stopCurrentGame.text\\\", \\\"stopCurrentGame.yes\\\", \\\"stopCurrentGame.no\\\")) {\\n            return;\\n        }\\n        freeColClient.getConnectController().quitGame(true);\\n        removeInGameComponents();\\n        showPanel(new NewPanel(this));\\n    }\\n    class ToolBoxFrame extends JInternalFrame {\\n    }\\n    class FrameMotionListener extends MouseAdapter implements MouseMotionListener {\\n        private JInternalFrame f;\\n        private Point loc = null;\\n        FrameMotionListener(JInternalFrame f) {\\n            this.f = f;\\n        }\\n        @Override\\n        public void mousePressed(MouseEvent e) {\\n            if (f.getDesktopPane() == null || f.getDesktopPane().getDesktopManager() == null) {\\n                return;\\n            }\\n            loc = SwingUtilities.convertPoint((Component) e.getSource(), e.getX(), e.getY(), null);\\n            f.getDesktopPane().getDesktopManager().beginDraggingFrame(f);\\n        }\\n        @Override\\n        public void mouseReleased(MouseEvent e) {\\n            if (loc == null || f.getDesktopPane() == null || f.getDesktopPane().getDesktopManager() == null) {\\n                return;\\n            }\\n            f.getDesktopPane().getDesktopManager().endDraggingFrame(f);\\n        }\\n        public void mouseDragged(MouseEvent e) {\\n            if (loc == null || f.getDesktopPane() == null || f.getDesktopPane().getDesktopManager() == null) {\\n                return;\\n            }\\n            Point p = SwingUtilities.convertPoint((Component) e.getSource(), e.getX(), e.getY(), null);\\n            int moveX = loc.x - p.x;\\n            int moveY = loc.y - p.y;\\n            f.getDesktopPane().getDesktopManager().dragFrame(f, f.getX() - moveX, f.getY() - moveY);\\n            loc = p;\\n        }\\n        public void mouseMoved(MouseEvent arg0) {\\n        }\\n    }\\n}\""
            },
            "m9": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_db884522eb994f76bc2ff3",
                        "function": {
                            "arguments": "{\"entity\": \"InGameController\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package net.sf.freecol.server.control;\\nimport java.io.IOException;\\nimport java.util.ArrayList;\\nimport java.util.EnumMap;\\nimport java.util.HashMap;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Timer;\\nimport java.util.TimerTask;\\nimport java.util.logging.Level;\\nimport java.util.logging.Logger;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.common.Specification;\\nimport net.sf.freecol.common.model.AbstractUnit;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.CombatModel;\\nimport net.sf.freecol.common.model.EquipmentType;\\nimport net.sf.freecol.common.model.FoundingFather;\\nimport net.sf.freecol.common.model.GameOptions;\\nimport net.sf.freecol.common.model.Goods;\\nimport net.sf.freecol.common.model.GoodsType;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.Location;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.Market;\\nimport net.sf.freecol.common.model.ModelController;\\nimport net.sf.freecol.common.model.Modifier;\\nimport net.sf.freecol.common.model.Monarch;\\nimport net.sf.freecol.common.model.Nation;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tension;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.UnitType;\\nimport net.sf.freecol.common.model.FoundingFather.FoundingFatherType;\\nimport net.sf.freecol.common.model.Map.Direction;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.model.Monarch.MonarchAction;\\nimport net.sf.freecol.common.model.Player.PlayerType;\\nimport net.sf.freecol.common.model.Player.Stance;\\nimport net.sf.freecol.common.model.Unit.UnitState;\\nimport net.sf.freecol.common.networking.Message;\\nimport net.sf.freecol.server.FreeColServer;\\nimport net.sf.freecol.server.model.ServerPlayer;\\nimport org.w3c.dom.Element;\\npublic final class InGameController extends Controller {\\n    private static Logger logger = Logger.getLogger(InGameController.class.getName());\\n    public int debugOnlyAITurns = 0;\\n    private java.util.Map<String,java.util.Map<String, java.util.Map<String,Object>>> transactionSessions;\\n    public InGameController(FreeColServer freeColServer) {\\n        super(freeColServer);\\n        transactionSessions = new HashMap<String,java.util.Map<String, java.util.Map<String,Object>>>();\\n    }\\n    public void endTurn(ServerPlayer player) {\\n        try {\\n            Thread.sleep(100);\\n        } catch (InterruptedException e) {}\\n        FreeColServer freeColServer = getFreeColServer();\\n        ServerPlayer oldPlayer = (ServerPlayer) getGame().getCurrentPlayer();\\n        if (oldPlayer != player) {\\n            logger.warning(\\\"It is not \\\" + player.getName() + \\\"'s turn!\\\");\\n            throw new IllegalArgumentException(\\\"It is not \\\" + player.getName() + \\\"'s turn!\\\");\\n        }\\n        player.clearModelMessages();\\n        freeColServer.getModelController().clearTaskRegister();\\n        Player winner = checkForWinner();\\n        if (winner != null && (!freeColServer.isSingleplayer() || !winner.isAI())) {\\n            Element gameEndedElement = Message.createNewRootElement(\\\"gameEnded\\\");\\n            gameEndedElement.setAttribute(\\\"winner\\\", winner.getId());\\n            freeColServer.getServer().sendToAll(gameEndedElement, null);\\n                        if (FreeCol.getFreeColClient() == null) {\\n                new Timer(true).schedule(new TimerTask() {\\n                    @Override\\n                    public void run() {\\n                        System.exit(0);\\n                    }\\n                }, 20000);\\n            }\\n            return;\\n        }\\n        ServerPlayer newPlayer = (ServerPlayer) nextPlayer();\\n        if (newPlayer != null \\n            && !newPlayer.isAI()\\n            && (!newPlayer.isConnected() || debugOnlyAITurns > 0)) {\\n            endTurn(newPlayer);\\n            return;\\n        }\\n    }\\n    private Player nextPlayer() {\\n        final FreeColServer freeColServer = getFreeColServer();\\n        if (!isHumanPlayersLeft()) {\\n            getGame().setCurrentPlayer(null);\\n            return null;\\n        }\\n        if (getGame().isNextPlayerInNewTurn()) {\\n            getGame().newTurn();\\n            if (debugOnlyAITurns > 0) {\\n                debugOnlyAITurns--;\\n            }\\n            Element newTurnElement = Message.createNewRootElement(\\\"newTurn\\\");\\n            freeColServer.getServer().sendToAll(newTurnElement, null);\\n        }\\n        ServerPlayer newPlayer = (ServerPlayer) getGame().getNextPlayer();\\n        getGame().setCurrentPlayer(newPlayer);\\n        if (newPlayer == null) {\\n            getGame().setCurrentPlayer(null);\\n            return null;\\n        }\\n        synchronized (newPlayer) {\\n            if (checkForDeath(newPlayer)) {\\n                newPlayer.setDead(true);\\n                Element setDeadElement = Message.createNewRootElement(\\\"setDead\\\");\\n                setDeadElement.setAttribute(\\\"player\\\", newPlayer.getId());\\n                freeColServer.getServer().sendToAll(setDeadElement, null);\\n                return nextPlayer();\\n            }\\n        }\\n        if (newPlayer.isEuropean()) {\\n            try {        \\n                Market market = newPlayer.getMarket();\\n                                List<GoodsType> goodsTypes = FreeCol.getSpecification().getGoodsTypeList();\\n                GoodsType typeToRemove = goodsTypes.get(getPseudoRandom().nextInt(goodsTypes.size()));\\n                if (typeToRemove.isStorable()) {\\n                    int amountToRemove = getPseudoRandom().nextInt(21);\\n                    market.remove(typeToRemove, amountToRemove);\\n                    Element updateElement = Message.createNewRootElement(\\\"marketElement\\\");\\n                    updateElement.setAttribute(\\\"type\\\", typeToRemove.getId());\\n                    updateElement.setAttribute(\\\"amount\\\", String.valueOf(-amountToRemove));\\n                    newPlayer.getConnection().send(updateElement);\\n                }\\n            } catch (IOException e) {\\n                logger.warning(\\\"Could not send message to: \\\" + newPlayer.getName() +\\n                               \\\" with connection \\\" + newPlayer.getConnection());\\n            }\\n            if (newPlayer.getCurrentFather() == null && newPlayer.getSettlements().size() > 0) {\\n                chooseFoundingFather(newPlayer);\\n            }\\n            if (newPlayer.getMonarch() != null) {\\n                monarchAction(newPlayer);\\n            }\\n            bombardEnemyShips(newPlayer);\\n        }\\n        else if (newPlayer.isIndian()) {\\n            for (IndianSettlement indianSettlement: newPlayer.getIndianSettlements()) {\\n                if (indianSettlement.checkForNewMissionaryConvert()) {\\n                                        Unit missionary = indianSettlement.getMissionary();\\n                    ServerPlayer european = (ServerPlayer) missionary.getOwner();\\n                                        Tile settlementTile = indianSettlement.getTile();\\n                    Tile targetTile = null;\\n                    Iterator<Position> ffi = getGame().getMap().getFloodFillIterator(settlementTile.getPosition());\\n                    while (ffi.hasNext()) {\\n                        Tile t = getGame().getMap().getTile(ffi.next());\\n                        if (settlementTile.getDistanceTo(t) > IndianSettlement.MAX_CONVERT_DISTANCE) {\\n                            break;\\n                        }\\n                        if (t.getSettlement() != null && t.getSettlement().getOwner() == european) {\\n                            targetTile = t;\\n                            break;\\n                        }\\n                    }\\n                    if (targetTile != null) {\\n                        List<UnitType> converts = FreeCol.getSpecification().getUnitTypesWithAbility(\\\"model.ability.convert\\\");\\n                        if (converts.size() > 0) {\\n                                                        Unit brave = indianSettlement.getUnitIterator().next();\\n                            String nationId = brave.getOwner().getNationID();\\n                            brave.dispose();\\n                            ModelController modelController = getGame().getModelController();\\n                            int random = modelController.getRandom(indianSettlement.getId() + \\\"getNewConvertType\\\", converts.size());\\n                            UnitType unitType = converts.get(random);\\n                            Unit unit = modelController.createUnit(indianSettlement.getId() + \\\"newTurn100missionary\\\", targetTile,\\n                                    european, unitType);\\n                                                        try {\\n                                Element updateElement = Message.createNewRootElement(\\\"newConvert\\\");\\n                                updateElement.setAttribute(\\\"nation\\\", nationId);\\n                                updateElement.setAttribute(\\\"colonyTile\\\", targetTile.getId());\\n                                updateElement.appendChild(unit.toXMLElement(european,updateElement.getOwnerDocument()));\\n                                european.getConnection().send(updateElement);\\n                                logger.info(\\\"New convert created for \\\" + european.getName() + \\\" with ID=\\\" + unit.getId());\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + european.getName());\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        Element setCurrentPlayerElement = Message.createNewRootElement(\\\"setCurrentPlayer\\\");\\n        setCurrentPlayerElement.setAttribute(\\\"player\\\", newPlayer.getId());\\n        freeColServer.getServer().sendToAll(setCurrentPlayerElement, null);\\n        return newPlayer;\\n    }\\n    private boolean isHumanPlayersLeft() {\\n        for (Player player : getFreeColServer().getGame().getPlayers()) {\\n            if (!player.isDead() && !player.isAI() && ((ServerPlayer) player).isConnected()) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    private void chooseFoundingFather(ServerPlayer player) {\\n        final ServerPlayer nextPlayer = player;\\n        Thread t = new Thread(FreeCol.SERVER_THREAD+\\\"FoundingFather-thread\\\") {\\n                public void run() {\\n                    List<FoundingFather> randomFoundingFathers = getRandomFoundingFathers(nextPlayer);\\n                    boolean atLeastOneChoice = false;\\n                    Element chooseFoundingFatherElement = Message.createNewRootElement(\\\"chooseFoundingFather\\\");\\n                    for (FoundingFather father : randomFoundingFathers) {\\n                        chooseFoundingFatherElement.setAttribute(father.getType().toString(),\\n                                                                 father.getId());\\n                        atLeastOneChoice = true;\\n                    }\\n                    if (!atLeastOneChoice) {\\n                        nextPlayer.setCurrentFather(null);\\n                    } else {\\n                        try {\\n                            Element reply = nextPlayer.getConnection().ask(chooseFoundingFatherElement);\\n                            FoundingFather father = FreeCol.getSpecification().\\n                                getFoundingFather(reply.getAttribute(\\\"foundingFather\\\"));\\n                            if (!randomFoundingFathers.contains(father)) {\\n                                throw new IllegalArgumentException();\\n                            }\\n                            nextPlayer.setCurrentFather(father);\\n                        } catch (IOException e) {\\n                            logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                        }\\n                    }\\n                }\\n            };\\n        t.start();\\n    }\\n    private List<FoundingFather> getRandomFoundingFathers(Player player) {\\n        int age = getGame().getTurn().getAge();\\n        List<FoundingFather> randomFoundingFathers = new ArrayList<FoundingFather>();\\n        EnumMap<FoundingFatherType, Integer> weightSums = new\\n            EnumMap<FoundingFatherType, Integer>(FoundingFatherType.class);\\n        for (FoundingFather father : FreeCol.getSpecification().getFoundingFathers()) {\\n            if (!player.hasFather(father) && father.isAvailableTo(player)) {\\n                Integer weightSum = weightSums.get(father.getType());\\n                if (weightSum == null) {\\n                    weightSum = new Integer(0);\\n                }\\n                weightSums.put(father.getType(), weightSum + father.getWeight(age));\\n            }\\n        }\\n        for (java.util.Map.Entry<FoundingFatherType, Integer> entry : weightSums.entrySet()) {\\n            if (entry.getValue() != 0) {\\n                int r = getPseudoRandom().nextInt(entry.getValue()) + 1;\\n                int weightSum = 0;\\n                for (FoundingFather father : FreeCol.getSpecification().getFoundingFathers()) {\\n                    if (!player.hasFather(father) && father.getType() == entry.getKey()) {\\n                        weightSum += father.getWeight(age);\\n                        if (weightSum >= r) {\\n                            randomFoundingFathers.add(father);\\n                            break;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return randomFoundingFathers;\\n    }\\n    public Player checkForWinner() {\\n        List<Player> players = getGame().getPlayers();\\n        GameOptions go = getGame().getGameOptions();\\n        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_REF)) {\\n            for (Player player : players) {\\n                if (!player.isAI() && player.getPlayerType() == PlayerType.INDEPENDENT) {\\n                    return player;\\n                }\\n            }\\n        }\\n        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_EUROPEANS)) {\\n            Player winner = null;\\n            for (Player player : players) {\\n                if (!player.isDead() && player.isEuropean() && !player.isREF()) {\\n                    if (winner != null) {\\n                                                winner = null;\\n                        break;\\n                    } else {\\n                        winner = player;\\n                    }\\n                }\\n            }\\n            if (winner != null) {\\n                return winner;\\n            }\\n        }\\n        if (go.getBoolean(GameOptions.VICTORY_DEFEAT_HUMANS)) {\\n            Player winner = null;\\n            for (Player player : players) {\\n                if (!player.isDead() && !player.isAI()) {\\n                    if (winner != null) {\\n                                                winner = null;\\n                        break;\\n                    } else {\\n                        winner = player;\\n                    }\\n                }\\n            }\\n            if (winner != null) {\\n                return winner;\\n            }\\n        }\\n        return null;\\n    }\\n    private boolean checkForDeath(Player player) {\\n        if (player.isREF()) {\\n            return false;\\n        }\\n                if (!player.getSettlements().isEmpty()) {\\n            return false;\\n        }\\n                boolean hasCarrier = false;\\n        List<Unit> unitList = player.getUnits();\\n        for(Unit unit : unitList){\\n            boolean isValidUnit = false;\\n            if(unit.isCarrier()){\\n                hasCarrier = true;\\n                logger.info(\\\"Still has carrier\\\");\\n                continue;\\n            }\\n                        if(unit.isColonist()){\\n                isValidUnit = true;\\n            }\\n                        if(unit.isOffensiveUnit()){\\n                isValidUnit = true;\\n            }\\n            if(!isValidUnit){\\n                continue;\\n            }\\n                        Location unitLocation = unit.getLocation();\\n                        if(unitLocation instanceof Tile){\\n                logger.info(\\\"Found colonist in new world\\\");\\n                return false;\\n            }\\n                        if(unit.isOnCarrier()){\\n                Unit carrier = (Unit) unitLocation;\\n                                if(carrier.getLocation() instanceof Tile){\\n                    logger.info(\\\"Found colonist aboard carrier in new world\\\");\\n                    return false;\\n                }   \\n            }\\n        }\\n        if (!player.isEuropean() || player.getEurope() == null) {\\n            return true;\\n        }\\n                if (getGame().getTurn().getYear() >= 1600) {\\n            logger.info(\\\"No presence in new world after 1600\\\");\\n            return true;\\n        }\\n        int goldNeeded = 0;\\n        if(!hasCarrier){\\n            Iterator<UnitType> navalUnits = FreeCol.getSpecification().getUnitTypesWithAbility(\\\"model.ability.navalUnit\\\").iterator();\\n            int lowerPrice = Integer.MAX_VALUE;\\n            while(navalUnits.hasNext()){\\n                UnitType unit = navalUnits.next();\\n                int unitPrice = player.getEurope().getUnitPrice(unit);\\n                                if(unitPrice == UnitType.UNDEFINED){\\n                    continue;\\n                }\\n                if(unitPrice < lowerPrice){\\n                    lowerPrice = unitPrice;\\n                }\\n            }\\n                        if(lowerPrice == Integer.MAX_VALUE){\\n                logger.warning(\\\"Couldnt find naval unit to buy\\\");\\n                return true;\\n            }\\n            goldNeeded += lowerPrice;\\n                        if(goldNeeded > player.getGold()){\\n                logger.info(\\\"Does not have enough money to buy carrier\\\");\\n                return true;\\n            }\\n            logger.info(\\\"Has enough money to buy carrier, has=\\\" + player.getGold() + \\\", needs=\\\" + lowerPrice);\\n        }\\n        Iterator<Unit> unitIterator = player.getEurope().getUnitIterator();\\n        while (unitIterator.hasNext()) {\\n            Unit unit = unitIterator.next();\\n            if (unit.isCarrier()) {\\n                if(unit.getGoodsCount() > 0){\\n                    logger.info(\\\"Has goods to sell\\\");\\n                    return false;\\n                }\\n                continue;\\n            }\\n            if (unit.isColonist()){\\n                logger.info(\\\"Has colonist unit waiting in port\\\");\\n                return false;\\n            }\\n        }\\n        int goldToRecruit =  player.getEurope().getRecruitPrice();\\n        Iterator<UnitType> trainedUnits = FreeCol.getSpecification().getUnitTypesTrainedInEurope().iterator();\\n        int goldToTrain = Integer.MAX_VALUE;\\n        while(trainedUnits.hasNext()){\\n            UnitType unit = trainedUnits.next();\\n            if(!unit.hasAbility(\\\"model.ability.foundColony\\\")){\\n                continue;\\n            }\\n            int unitPrice = player.getEurope().getUnitPrice(unit);\\n                        if(unitPrice == UnitType.UNDEFINED){\\n                continue;\\n            }\\n            if(unitPrice < goldToTrain){\\n                goldToTrain = unitPrice;\\n            }\\n        }\\n        goldNeeded += Math.min(goldToTrain, goldToRecruit);\\n                if(goldNeeded > player.getGold()){\\n            logger.info(\\\"Does not have enough money for recruiting or training\\\");\\n            return true;\\n        }\\n        return false;\\n    }\\n    private void monarchAction(ServerPlayer player) {\\n        final ServerPlayer nextPlayer = player;\\n        Thread t = new Thread(\\\"monarchAction\\\") {\\n                public void run() {\\n                    try {\\n                        Monarch monarch = nextPlayer.getMonarch();\\n                        MonarchAction action = monarch.getAction();\\n                        Element monarchActionElement = Message.createNewRootElement(\\\"monarchAction\\\");\\n                        monarchActionElement.setAttribute(\\\"action\\\", String.valueOf(action));\\n                        switch (action) {\\n                        case RAISE_TAX:\\n                            int oldTax = nextPlayer.getTax();\\n                            int newTax = monarch.getNewTax(MonarchAction.RAISE_TAX);\\n                            if (newTax > 100) {\\n                                logger.warning(\\\"Tax rate exceeds 100 percent.\\\");\\n                                return;\\n                            }\\n                            Goods goods = nextPlayer.getMostValuableGoods();\\n                            if (goods == null) {\\n                                return;\\n                            }\\n                            monarchActionElement.setAttribute(\\\"amount\\\", String.valueOf(newTax));\\n                            monarchActionElement.setAttribute(\\\"goods\\\", goods.getName());\\n                            monarchActionElement.setAttribute(\\\"force\\\", String.valueOf(false));\\n                            try {\\n                                nextPlayer.setTax(newTax);                                 Element reply = nextPlayer.getConnection().ask(monarchActionElement);\\n                                boolean accepted = Boolean.valueOf(reply.getAttribute(\\\"accepted\\\")).booleanValue();\\n                                if (!accepted) {\\n                                    Colony colony = (Colony) goods.getLocation();\\n                                    if (colony.getGoodsCount(goods.getType()) >= goods.getAmount()) {\\n                                        nextPlayer.setTax(oldTax);                                         Element removeGoodsElement = Message.createNewRootElement(\\\"removeGoods\\\");\\n                                        colony.removeGoods(goods);\\n                                        nextPlayer.setArrears(goods);\\n                                        colony.getFeatureContainer().addModifier(Modifier\\n                                            .createTeaPartyModifier(getGame().getTurn()));\\n                                        removeGoodsElement.appendChild(goods.toXMLElement(nextPlayer, removeGoodsElement\\n                                                                                          .getOwnerDocument()));\\n                                        nextPlayer.getConnection().send(removeGoodsElement);\\n                                    } else {\\n                                                                                monarchActionElement.setAttribute(\\\"force\\\", String.valueOf(true));\\n                                        nextPlayer.getConnection().send(monarchActionElement);\\n                                    }\\n                                }\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case LOWER_TAX:\\n                            int taxLowered = monarch.getNewTax(MonarchAction.LOWER_TAX);\\n                            if (taxLowered < 0) {\\n                                logger.warning(\\\"Tax rate less than 0 percent.\\\");\\n                                return;\\n                            }\\n                            monarchActionElement.setAttribute(\\\"amount\\\", String.valueOf(taxLowered));\\n                            try {\\n                                nextPlayer.setTax(taxLowered);                                 nextPlayer.getConnection().send(monarchActionElement); \\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case ADD_TO_REF:\\n                            List<AbstractUnit> unitsToAdd = monarch.addToREF();\\n                            monarch.addToREF(unitsToAdd);\\n                            Element additionElement = monarchActionElement.getOwnerDocument().createElement(\\\"addition\\\");\\n                            for (AbstractUnit unit : unitsToAdd) {\\n                                additionElement.appendChild(unit.toXMLElement(nextPlayer,additionElement.getOwnerDocument()));\\n                            }\\n                            monarchActionElement.appendChild(additionElement);\\n                            try {\\n                                nextPlayer.getConnection().send(monarchActionElement);\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case DECLARE_WAR:\\n                            Player enemy = monarch.declareWar();\\n                            if (enemy == null) {\\n                                                                logger.warning(\\\"Declared war on nobody.\\\");\\n                                return;\\n                            }\\n                                                        if(nextPlayer.isAI()){\\n                                nextPlayer.modifyTension(enemy, Tension.TENSION_ADD_DECLARE_WAR_FROM_PEACE);\\n                            }\\n                            nextPlayer.changeRelationWithPlayer(enemy, Stance.WAR);\\n                            monarchActionElement.setAttribute(\\\"enemy\\\", enemy.getId());\\n                            try {\\n                                nextPlayer.getConnection().send(monarchActionElement);\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case OFFER_MERCENARIES:\\n                            Element mercenaryElement = monarchActionElement.getOwnerDocument().createElement(\\\"mercenaries\\\");\\n                            List<AbstractUnit> units = monarch.getMercenaries();\\n                            int price = monarch.getPrice(units, true);\\n                            monarchActionElement.setAttribute(\\\"price\\\", String.valueOf(price));\\n                            for (AbstractUnit unit : units) {\\n                                mercenaryElement.appendChild(unit.toXMLElement(monarchActionElement.getOwnerDocument()));\\n                            }\\n                            monarchActionElement.appendChild(mercenaryElement);\\n                            try {\\n                                Element reply = nextPlayer.getConnection().ask(monarchActionElement);\\n                                boolean accepted = Boolean.valueOf(reply.getAttribute(\\\"accepted\\\")).booleanValue();\\n                                if (accepted) {\\n                                    Element updateElement = Message.createNewRootElement(\\\"monarchAction\\\");\\n                                    updateElement.setAttribute(\\\"action\\\", String.valueOf(MonarchAction.ADD_UNITS));\\n                                    nextPlayer.modifyGold(-price);\\n                                    createUnits(units, updateElement, nextPlayer);\\n                                    nextPlayer.getConnection().send(updateElement);\\n                                }\\n                            } catch (IOException e) {\\n                                logger.warning(\\\"Could not send message to: \\\" + nextPlayer.getName());\\n                            }\\n                            break;\\n                        case NO_ACTION:\\n                                                        break;\\n                        }\\n                    } catch (Exception e) {\\n                        logger.log(Level.WARNING, \\\"Monarch action failed!\\\", e);\\n                    }\\n                }\\n            };\\n        t.start();\\n    }\\n    public ServerPlayer createREFPlayer(ServerPlayer player){\\n        Nation refNation = Specification.getSpecification().getNation(player.getNation().getRefId());\\n        ServerPlayer refPlayer = getFreeColServer().addAIPlayer(refNation);\\n        refPlayer.setEntryLocation(player.getEntryLocation());\\n                player.setStance(refPlayer, Stance.PEACE);\\n        refPlayer.setTension(player, new Tension(Tension.Level.CONTENT.getLimit()));\\n        player.setTension(refPlayer, new Tension(Tension.Level.CONTENT.getLimit()));\\n        return refPlayer;\\n    }\\n    private void createUnits(List<AbstractUnit> units, Element element, ServerPlayer nextPlayer) {\\n        String musketsTypeStr = null;\\n        String horsesTypeStr = null;\\n        if(nextPlayer.isIndian()){\\n                musketsTypeStr = \\\"model.equipment.indian.muskets\\\";\\n            horsesTypeStr = \\\"model.equipment.indian.horses\\\";\\n        } else {\\n                musketsTypeStr = \\\"model.equipment.muskets\\\";\\n            horsesTypeStr = \\\"model.equipment.horses\\\";\\n        }\\n        final EquipmentType muskets = FreeCol.getSpecification().getEquipmentType(musketsTypeStr);\\n        final EquipmentType horses = FreeCol.getSpecification().getEquipmentType(horsesTypeStr);\\n        EquipmentType[] soldier = new EquipmentType[] { muskets };\\n        EquipmentType[] dragoon = new EquipmentType[] { horses, muskets };\\n        for (AbstractUnit unit : units) {\\n            EquipmentType[] equipment = EquipmentType.NO_EQUIPMENT;\\n            for (int count = 0; count < unit.getNumber(); count++) {\\n                switch(unit.getRole()) {\\n                case SOLDIER:\\n                    equipment = soldier;\\n                    break;\\n                case DRAGOON:\\n                    equipment = dragoon;\\n                    break;\\n                default:\\n                }\\n                Unit newUnit = new Unit(getGame(), nextPlayer.getEurope(), nextPlayer,\\n                                        unit.getUnitType(), UnitState.ACTIVE, equipment);\\n                                if (element != null) {\\n                    element.appendChild(newUnit.toXMLElement(nextPlayer, element.getOwnerDocument()));\\n                }\\n            }\\n        }\\n    }\\n    public List<Unit> createREFUnits(ServerPlayer player, ServerPlayer refPlayer){\\n        EquipmentType muskets = Specification.getSpecification().getEquipmentType(\\\"model.equipment.muskets\\\");\\n        EquipmentType horses = Specification.getSpecification().getEquipmentType(\\\"model.equipment.horses\\\");\\n        List<Unit> unitsList = new ArrayList<Unit>();\\n        List<Unit> navalUnits = new ArrayList<Unit>();\\n        List<Unit> landUnits = new ArrayList<Unit>();\\n                for (AbstractUnit unit : player.getMonarch().getNavalUnits()) {\\n            for (int index = 0; index < unit.getNumber(); index++) {\\n                Unit newUnit = new Unit(getGame(), refPlayer.getEurope(), refPlayer,\\n                                        unit.getUnitType(), UnitState.TO_AMERICA);\\n                navalUnits.add(newUnit);\\n            }\\n        }\\n        unitsList.addAll(navalUnits);\\n                for (AbstractUnit unit : player.getMonarch().getLandUnits()) {\\n            EquipmentType[] equipment = EquipmentType.NO_EQUIPMENT;\\n            switch(unit.getRole()) {\\n            case SOLDIER:\\n                equipment = new EquipmentType[] { muskets };\\n                break;\\n            case DRAGOON:\\n                equipment = new EquipmentType[] { horses, muskets };\\n                break;\\n            default:\\n            }\\n            for (int index = 0; index < unit.getNumber(); index++) {\\n                landUnits.add(new Unit(getGame(), refPlayer.getEurope(), refPlayer,\\n                                        unit.getUnitType(), UnitState.ACTIVE, equipment));\\n            }\\n        }\\n        unitsList.addAll(landUnits);\\n                Iterator<Unit> carriers = navalUnits.iterator();\\n        for(Unit unit : landUnits){\\n                        boolean noSpaceForUnit=true;\\n            for(Unit carrier : navalUnits){\\n                if (unit.getSpaceTaken() <= carrier.getSpaceLeft()) {\\n                    noSpaceForUnit=false;\\n                    break;\\n                }\\n            }\\n                        if(noSpaceForUnit){\\n                continue;\\n            }\\n                        Unit carrier = null;\\n            while (carrier == null){\\n                                if (!carriers.hasNext()) {\\n                    carriers = navalUnits.iterator();\\n                }\\n                carrier = carriers.next();\\n                                if (unit.getSpaceTaken() > carrier.getSpaceLeft()) {\\n                    carrier = null;\\n                }\\n            }\\n                        unit.setLocation(carrier);\\n                                }\\n        return unitsList;\\n    }\\n    public boolean createMission(IndianSettlement settlement,Unit missionary){\\n        settlement.setMissionary(missionary);\\n                return true;\\n    }\\n    private void bombardEnemyShips(ServerPlayer currentPlayer) {\\n        logger.finest(\\\"Entering method bombardEnemyShips.\\\");\\n        Map map = getFreeColServer().getGame().getMap();\\n        CombatModel combatModel = getFreeColServer().getGame().getCombatModel();\\n        for (Settlement settlement : currentPlayer.getSettlements()) {\\n            Colony colony = (Colony) settlement;\\n            if (colony.canBombardEnemyShip()){\\n                logger.fine(\\\"Colony \\\" + colony.getName() + \\\" can bombard enemy ships.\\\");\\n                Position colonyPosition = colony.getTile().getPosition();\\n                for (Direction direction : Direction.values()) {\\n                    Tile tile = map.getTile(Map.getAdjacent(colonyPosition, direction));\\n                                        if(tile == null || tile.isLand()){\\n                        continue;\\n                    }\\n                                                            List<Unit> unitList = new ArrayList<Unit>(tile.getUnitList());\\n                    Iterator<Unit> unitIterator = unitList.iterator();\\n                    while (unitIterator.hasNext()) {\\n                        Unit unit = unitIterator.next();\\n                        Player player = unit.getOwner();\\n                                                if(player == currentPlayer){\\n                                continue;\\n                        }\\n                                                if(currentPlayer.getStance(player) != Stance.WAR &&\\n                                                !unit.hasAbility(\\\"model.ability.piracy\\\")){\\n                                continue;\\n                        }\\n                        logger.info(colony.getName() + \\\" found enemy unit to bombard: \\\" + unit.getName() + \\\"(\\\" + unit.getOwner().getNationAsString() + \\\")\\\");\\n                                                CombatModel.CombatResult result = combatModel.generateAttackResult(colony, unit);\\n                                                Location repairLocation = null;\\n                        if(result.type == CombatModel.CombatResultType.WIN){\\n                                        repairLocation = player.getRepairLocation(unit);\\n                        }\\n                                                getGame().getCombatModel().bombard(colony, unit, result, repairLocation);\\n                                                                        int plunderGold = -1;\\n                        Iterator<Player> enemyPlayerIterator = getFreeColServer().getGame().getPlayerIterator();\\n                        while (enemyPlayerIterator.hasNext()) {\\n                                ServerPlayer enemyPlayer = (ServerPlayer) enemyPlayerIterator.next();\\n                                if (                                                enemyPlayer.getConnection() == null) {\\n                                        continue;\\n                                }\\n                                                                if(!unit.isVisibleTo(enemyPlayer)){\\n                                        continue;\\n                                }\\n                                Element opponentAttackElement = Message.createNewRootElement(\\\"opponentAttack\\\");                                 \\n                                opponentAttackElement.setAttribute(\\\"direction\\\", direction.toString());\\n                                opponentAttackElement.setAttribute(\\\"result\\\", result.type.toString());\\n                                opponentAttackElement.setAttribute(\\\"plunderGold\\\", Integer.toString(plunderGold));\\n                            opponentAttackElement.setAttribute(\\\"colony\\\", colony.getId());\\n                                opponentAttackElement.setAttribute(\\\"defender\\\", unit.getId());\\n                                opponentAttackElement.setAttribute(\\\"damage\\\", String.valueOf(result.damage));\\n                                                                if(enemyPlayer == player && repairLocation != null){\\n                                        opponentAttackElement.setAttribute(\\\"repairIn\\\", repairLocation.getId());\\n                                }\\n                                                                if (!enemyPlayer.canSee(colony.getTile())) {\\n                                        opponentAttackElement.setAttribute(\\\"update\\\", \\\"tile\\\");\\n                                        enemyPlayer.setExplored(colony.getTile());\\n                                        opponentAttackElement.appendChild(colony.getTile().toXMLElement(\\n                                                        enemyPlayer, opponentAttackElement.getOwnerDocument()));\\n                                }\\n                                                                if (enemyPlayer.canSee(unit.getTile())) { \\n                            opponentAttackElement.setAttribute(\\\"update\\\", \\\"unit\\\");\\n                            opponentAttackElement.appendChild(unit.toXMLElement(enemyPlayer, opponentAttackElement.getOwnerDocument()));\\n                                }\\n                                                                try {\\n                                        enemyPlayer.getConnection().send(opponentAttackElement);\\n                                } catch (IOException e) {\\n                                        logger.warning(\\\"Could not send message to: \\\" + enemyPlayer.getName()\\n                                                        + \\\" with connection \\\" + enemyPlayer.getConnection());\\n                                }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    public java.util.Map<String,Object> getTransactionSession(Unit unit, Settlement settlement){\\n        java.util.Map<String, java.util.Map<String,Object>> unitTransactions = null;\\n        if(transactionSessions.containsKey(unit.getId())){\\n            unitTransactions = transactionSessions.get(unit.getId());\\n            if(unitTransactions.containsKey(settlement.getId())){\\n                return unitTransactions.get(settlement.getId());\\n            }\\n        }\\n                java.util.Map<String,Object> session = new HashMap<String,Object>();\\n                session.put(\\\"canGift\\\", true);\\n        session.put(\\\"canSell\\\", true);\\n        session.put(\\\"canBuy\\\", true);\\n        session.put(\\\"actionTaken\\\", false);\\n        session.put(\\\"hasSpaceLeft\\\", unit.getSpaceLeft() != 0);\\n        session.put(\\\"unitMoves\\\", unit.getMovesLeft());\\n        if(settlement.getOwner().getStance(unit.getOwner()) == Stance.WAR){\\n            session.put(\\\"canSell\\\", false);\\n            session.put(\\\"canBuy\\\", false);\\n        }\\n        else{\\n        \\t            if(unit.getSpaceTaken() == 0){\\n                session.put(\\\"canSell\\\", false);\\n            }\\n        }\\n                if(unit.getOwner().isAI()){\\n            return session;\\n        }\\n                if(unitTransactions == null){\\n            unitTransactions = new HashMap<String,java.util.Map<String, Object>>();\\n            transactionSessions.put(unit.getId(), unitTransactions);\\n        }\\n        unitTransactions.put(settlement.getId(), session);\\n        return session;\\n    }\\n    public void closeTransactionSession(Unit unit, Settlement settlement){\\n        java.util.Map<String, java.util.Map<String,Object>> unitTransactions;\\n                if(unit.getOwner().isAI()){\\n          return;  \\n        }\\n        if(!transactionSessions.containsKey(unit.getId())){\\n            throw new IllegalStateException(\\\"Trying to close a non-existing session\\\");\\n        }\\n        unitTransactions = transactionSessions.get(unit.getId());   \\n        if(!unitTransactions.containsKey(settlement.getId())){\\n            throw new IllegalStateException(\\\"Trying to close a non-existing session\\\");\\n        }\\n        unitTransactions.remove(settlement.getId());\\n        if(unitTransactions.isEmpty()){\\n            transactionSessions.remove(unit.getId());\\n        }\\n    }\\n    public boolean isTransactionSessionOpen(Unit unit, Settlement settlement){\\n                if(unit.getOwner().isAI()){\\n            return true;\\n        }\\n        if(!transactionSessions.containsKey(unit.getId())){\\n            return false;\\n        }\\n        if(settlement != null &&\\n           !transactionSessions.get(unit.getId()).containsKey(settlement.getId())){\\n                return false;\\n        }\\n        return true;\\n    }\\n}\""
            },
            "m11": {
                "content": "### Analysis of `Canvas.java` and `InGameController`\n\n#### **Canvas.java**\n- **Role**: This class serves as the main graphical interface component in the FreeCol client, extending `JDesktopPane`. It manages various UI elements like panels, dialogs, and internal frames for game interactions.\n- **Key Responsibilities**:\n  - Displays and manages different game-related panels (e.g., colony panel, Europe panel).\n  - Handles user interactions such as mouse and keyboard events.\n  - Coordinates with other GUI components to update the visual state of the game.\n\n#### **InGameController**\n- **Role**: A server-side controller that manages game logic during gameplay. It handles player turns, game progression, and interactions between players and the game world.\n- **Key Responsibilities**:\n  - Controls the flow of the game, including ending turns and determining the next player.\n  - Manages AI behavior and responses.\n  - Processes in-game actions such as declaring war, recruiting units, and handling economic changes.\n\n### **Connection Between Canvas.java and InGameController**\nWhile there are no direct coupling dependencies between these two classes, they play complementary roles:\n- **Canvas.java** is responsible for presenting the game state and handling user input.\n- **InGameController** processes game logic and updates the game state based on player actions.\n\nChanges in `Canvas.java` may affect how users interact with features managed by `InGameController`, particularly when new UI elements or interaction patterns are introduced that influence game logic.\n\n### Next Steps\nTo further explore potential ripple effects, we should examine the conceptual coupling between `Canvas.java` and other entities, especially those with high co-change confidence values like `GUI` and `FreeColClient`. Understanding their conceptual relationships will help identify which entities need synchronization.\n\nLet's start by analyzing the conceptual coupling between `Canvas.java` and `GUI`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_e1fcdb142b994b70ba9167",
                        "function": {
                            "arguments": "{\"entity1\": \"Canvas.java\", \"entity2\": \"GUI\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.83272225\""
            },
            "m13": {
                "content": "The conceptual coupling between `Canvas.java` and `GUI` is quite high (0.8327), indicating that these entities share significant semantic similarity or functional overlap. This suggests that changes in `Canvas.java` are likely to impact `GUI`, and vice versa.\n\n### Key Insights:\n- **Canvas.java** manages the visual components of the game interface.\n- **GUI** likely serves as a central manager for graphical elements and user interactions, coordinating with various panels and views.\n\nGiven this strong relationship, it's crucial to synchronize any changes in `Canvas.java` with updates in `GUI` to maintain consistency in the user experience and functionality.\n\n### Next Steps:\nTo better understand how `GUI` interacts with other components, let's retrieve its source code to explore its responsibilities and relationships further.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_f70787e3224941d094e60d",
                        "function": {
                            "arguments": "{\"entity\": \"GUI\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m14": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package net.sf.freecol.client.gui;\\nimport java.awt.AlphaComposite;\\nimport java.awt.Color;\\nimport java.awt.Composite;\\nimport java.awt.Dimension;\\nimport java.awt.Font;\\nimport java.awt.FontMetrics;\\nimport java.awt.Graphics;\\nimport java.awt.Graphics2D;\\nimport java.awt.Image;\\nimport java.awt.Point;\\nimport java.awt.Polygon;\\nimport java.awt.Rectangle;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.awt.font.TextLayout;\\nimport java.awt.geom.GeneralPath;\\nimport java.awt.geom.Rectangle2D;\\nimport java.awt.image.BufferedImage;\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.Iterator;\\nimport java.util.List;\\nimport java.util.Random;\\nimport java.util.Vector;\\nimport java.util.logging.Logger;\\nimport javax.swing.ImageIcon;\\nimport javax.swing.JComponent;\\nimport javax.swing.JLabel;\\nimport javax.swing.JLayeredPane;\\nimport javax.swing.UIManager;\\nimport net.sf.freecol.FreeCol;\\nimport net.sf.freecol.client.ClientOptions;\\nimport net.sf.freecol.client.FreeColClient;\\nimport net.sf.freecol.client.gui.i18n.Messages;\\nimport net.sf.freecol.client.gui.panel.MapControls;\\nimport net.sf.freecol.common.model.Colony;\\nimport net.sf.freecol.common.model.Europe;\\nimport net.sf.freecol.common.model.Game;\\nimport net.sf.freecol.common.model.IndianSettlement;\\nimport net.sf.freecol.common.model.Map;\\nimport net.sf.freecol.common.model.PathNode;\\nimport net.sf.freecol.common.model.Player;\\nimport net.sf.freecol.common.model.Settlement;\\nimport net.sf.freecol.common.model.Tension;\\nimport net.sf.freecol.common.model.Tile;\\nimport net.sf.freecol.common.model.TileImprovement;\\nimport net.sf.freecol.common.model.TileItemContainer;\\nimport net.sf.freecol.common.model.TileType;\\nimport net.sf.freecol.common.model.Unit;\\nimport net.sf.freecol.common.model.Map.Direction;\\nimport net.sf.freecol.common.model.Map.Position;\\nimport net.sf.freecol.common.model.Unit.UnitState;\\nimport net.sf.freecol.common.resources.ResourceManager;\\npublic final class GUI {\\n    private static final Logger logger = Logger.getLogger(GUI.class.getName());\\n    private final FreeColClient freeColClient;\\n    private Dimension size;\\n    private ImageLibrary lib;\\n    private TerrainCursor cursor;\\n    private ViewMode viewMode;\\n    private boolean inGame;\\n    private final Vector<GUIMessage> messages;\\n    private Map.Position selectedTile;\\n    private Map.Position focus = null;\\n    private Unit activeUnit;\\n    private PathNode currentPath;\\n    private PathNode gotoPath = null;\\n    private boolean gotoStarted = false;\\n        private int tileHeight,\\n    tileWidth,\\n    topSpace,\\n    topRows,\\n        bottomRows,\\n    leftSpace,\\n    rightSpace;\\n        private int bottomRow = -1;\\n        private int topRow;\\n            private int bottomRowY;\\n            private int topRowY;\\n        private int leftColumn;\\n        private int rightColumn;\\n            private int leftColumnX;\\n        public static final int UNIT_OFFSET = 20,\\n    TEXT_OFFSET_X = 2,     TEXT_OFFSET_Y = 13,     STATE_OFFSET_X = 25,\\n    STATE_OFFSET_Y = 10,\\n    ALARM_OFFSET_X = 37,\\n    ALARM_OFFSET_Y = 10,\\n    RUMOUR_OFFSET_X = 40,\\n    RUMOUR_OFFSET_Y = 5,\\n    MISSION_OFFSET_X = 49,\\n    MISSION_OFFSET_Y = 10,\\n    OTHER_UNITS_OFFSET_X = -5,     OTHER_UNITS_OFFSET_Y = 1,\\n    OTHER_UNITS_WIDTH = 3,\\n    MAX_OTHER_UNITS = 10,\\n    MESSAGE_COUNT = 3,\\n    MESSAGE_AGE = 30000; \\n    private boolean displayGrid = false;\\n    private int displayTileText = 0;\\n    private GeneralPath gridPath = null;\\n        public boolean displayCoordinates = false;\\n    public boolean displayColonyValue = false;\\n    public Player displayColonyValuePlayer = null;\\n    public boolean debugShowMission = false;\\n    public boolean debugShowMissionInfo = false;\\n    private volatile boolean blinkingMarqueeEnabled;\\n    private Image cursorImage;\\n    private JLabel coatOfArms;\\n    private JLabel greyLayer;\\n    private JLabel waitingForMsg;\\n    public GUI(FreeColClient freeColClient, Dimension size, ImageLibrary lib) {\\n        this.freeColClient = freeColClient;\\n        this.size = size;\\n        setImageLibrary(lib);\\n        inGame = false;\\n        logger.info(\\\"GUI created.\\\");\\n        messages = new Vector<GUIMessage>(MESSAGE_COUNT);\\n        viewMode = new ViewMode(this);\\n        logger.info(\\\"Starting in Move Units View Mode\\\");\\n        displayGrid = freeColClient.getClientOptions().getBoolean(ClientOptions.DISPLAY_GRID);\\n        displayTileText = freeColClient.getClientOptions().getDisplayTileText();\\n        blinkingMarqueeEnabled = true;\\n        cursor = new net.sf.freecol.client.gui.TerrainCursor();\\n    }\\n    public void setImageLibrary(ImageLibrary lib) {\\n        this.lib = lib;\\n        cursorImage = lib.getMiscImage(ImageLibrary.UNIT_SELECT);\\n        TileType tileType = FreeCol.getSpecification().getTileTypeList().get(0);\\n        tileHeight = lib.getTerrainImageHeight(tileType);\\n        tileWidth = lib.getTerrainImageWidth(tileType);\\n        updateMapDisplayVariables();\\n    }\\n    private void updateMapDisplayVariables() {\\n                topSpace = (size.height - tileHeight) / 2;\\n        if ((topSpace % (tileHeight / 2)) != 0) {\\n            topRows = topSpace / (tileHeight / 2) + 2;\\n        } else {\\n            topRows = topSpace / (tileHeight / 2) + 1;\\n        }\\n        bottomRows = topRows;\\n        leftSpace = (size.width - tileWidth) / 2;\\n        rightSpace = leftSpace;\\n    }\\n    public ViewMode getViewMode(){\\n        return viewMode;\\n    }\\n    public void startCursorBlinking() {\\n        final FreeColClient theFreeColClient = freeColClient; \\n        ActionListener taskPerformer = new ActionListener() {\\n            public void actionPerformed(ActionEvent event) {\\n                if (!blinkingMarqueeEnabled) return;\\n                if (getActiveUnit() != null && getActiveUnit().getTile() != null) {\\n                                        theFreeColClient.getCanvas().refreshTile(getActiveUnit().getTile());            \\n                }               \\n            }\\n        };\\n        cursor.addActionListener(taskPerformer);\\n        cursor.startBlinking();\\n    }\\n    public TerrainCursor getCursor(){\\n        return cursor;\\n    }\\n    public void setSize(Dimension size) {\\n        this.size = size;\\n        updateMapDisplayVariables();\\n    }\\n    public void moveTileCursor(Direction direction){\\n        Tile selectedTile = freeColClient.getGame().getMap().getTile(getSelectedTile());\\n        if(selectedTile != null){   \\n            Tile newTile = freeColClient.getGame().getMap().getNeighbourOrNull(direction, selectedTile);\\n            if(newTile != null)\\n                setSelectedTile(newTile.getPosition());\\n        }\\n        else{\\n            logger.warning(\\\"selectedTile is null\\\");\\n        }\\n    }\\n    public void setSelectedTile(Position selectedTile) {\\n        setSelectedTile(selectedTile, false);\\n    }\\n    public void setSelectedTile(Position selectedTile, boolean clearGoToOrders) {\\n        Game gameData = freeColClient.getGame();\\n        if (selectedTile != null && !gameData.getMap().isValid(selectedTile)) {\\n            return;\\n        }\\n        Position oldPosition = this.selectedTile;\\n        this.selectedTile = selectedTile;\\n        if (viewMode.getView() == ViewMode.MOVE_UNITS_MODE) {\\n            if (activeUnit == null ||\\n                (activeUnit.getTile() != null &&\\n                 !activeUnit.getTile().getPosition().equals(selectedTile))) {\\n                Tile t = gameData.getMap().getTile(selectedTile);\\n                if (t != null && t.getSettlement() != null) {\\n                    Settlement s = t.getSettlement();\\n                    if (s instanceof Colony && s.getOwner().equals(freeColClient.getMyPlayer())) {\\n                                                setFocus(selectedTile);\\n                        freeColClient.getCanvas().showColonyPanel((Colony) s);\\n                        return;\\n                    } else if (s instanceof IndianSettlement) {\\n                                                setFocus(selectedTile);\\n                        freeColClient.getCanvas().showIndianSettlementPanel((IndianSettlement)s);\\n                        return;\\n                    }\\n                }\\n                                Unit unitInFront = getUnitInFront(gameData.getMap().getTile(selectedTile));\\n                if (unitInFront != null) {\\n                    setActiveUnit(unitInFront);\\n                    updateGotoPathForActiveUnit();\\n                } else {\\n                    setFocus(selectedTile);\\n                }\\n            } else if (activeUnit.getTile() != null &&\\n                    activeUnit.getTile().getPosition().equals(selectedTile)) {\\n                                if (clearGoToOrders && activeUnit.getDestination() != null) {\\n                    freeColClient.getInGameController().clearGotoOrders(activeUnit);\\n                    updateGotoPathForActiveUnit();\\n                }\\n            }\\n        }\\n        freeColClient.getActionManager().update();\\n        freeColClient.getCanvas().updateJMenuBar();\\n        int x = 0, y = 0;\\n        MapControls mapControls = freeColClient.getCanvas().getMapControls();\\n        if (mapControls != null) {\\n            x = getWidth() - mapControls.getInfoPanelWidth();\\n            y = getHeight() - mapControls.getInfoPanelHeight();\\n        }\\n        freeColClient.getCanvas().repaint(x, y, getWidth(), getHeight());\\n                if ((!onScreen(selectedTile) &&\\n             freeColClient.getClientOptions().getBoolean(ClientOptions.JUMP_TO_ACTIVE_UNIT)) ||\\n            freeColClient.getClientOptions().getBoolean(ClientOptions.ALWAYS_CENTER)) {\\n                setFocus(selectedTile);\\n        } else {\\n            if (oldPosition != null) {\\n                freeColClient.getCanvas().refreshTile(oldPosition);\\n            }\\n            if (selectedTile != null) {\\n                freeColClient.getCanvas().refreshTile(selectedTile);\\n            }\\n        }\\n    }\\n    public void showColonyPanel(Position selectedTile) {\\n        Game gameData = freeColClient.getGame();\\n        if (selectedTile != null && !gameData.getMap().isValid(selectedTile)) {\\n            return;\\n        }\\n        if (viewMode.getView() == ViewMode.MOVE_UNITS_MODE) {\\n            Tile t = gameData.getMap().getTile(selectedTile);\\n            if (t != null && t.getSettlement() != null && t.getSettlement() instanceof Colony\\n                && t.getSettlement().getOwner().equals(freeColClient.getMyPlayer())) {\\n                setFocus(selectedTile);\\n                stopBlinking();\\n                freeColClient.getCanvas().showColonyPanel((Colony) t.getSettlement());\\n                return;\\n            }\\n        }\\n    }\\n    public void restartBlinking() {\\n        blinkingMarqueeEnabled = true;\\n    }\\n    public void stopBlinking() {\\n        blinkingMarqueeEnabled = false;\\n    }\\n    public Unit getUnitInFront(Tile unitTile) {\\n        if (unitTile == null || unitTile.getUnitCount() <= 0) {\\n            return null;\\n        }\\n        if (activeUnit != null && activeUnit.getTile() == unitTile) {\\n            return activeUnit;\\n        } else {\\n            if (unitTile.getSettlement() == null) {\\n                Unit bestDefendingUnit = null;\\n                if (activeUnit != null) {\\n                    bestDefendingUnit = unitTile.getDefendingUnit(activeUnit);\\n                    if (bestDefendingUnit != null) {\\n                        return bestDefendingUnit;\\n                    }\\n                }\\n                Unit movableUnit = unitTile.getMovableUnit();\\n                if (movableUnit != null && movableUnit.getLocation() == movableUnit.getTile()) {\\n                    return movableUnit;\\n                } else {\\n                    Unit bestPick = null;\\n                    Iterator<Unit> unitIterator = unitTile.getUnitIterator();\\n                    while (unitIterator.hasNext()) {\\n                        Unit u = unitIterator.next();\\n                        if (bestPick == null || bestPick.getMovesLeft() < u.getMovesLeft()) {\\n                            bestPick = u;\\n                        }\\n                    }\\n                    return bestPick;\\n                }\\n            } else {\\n                return null;\\n            }\\n        }\\n    }\\n    public Position getSelectedTile() {\\n        return selectedTile;\\n    }\\n    public Unit getActiveUnit() {\\n        return activeUnit;\\n    }\\n    public void setActiveUnit(Unit activeUnit) {\\n        if (activeUnit != null && activeUnit.getOwner() != freeColClient.getMyPlayer()) {\\n            freeColClient.getCanvas().repaint(0, 0, getWidth(), getHeight());\\n            return;\\n        }\\n        if (activeUnit != null && activeUnit.getTile() == null) {\\n            activeUnit = null;\\n        }\\n        this.activeUnit = activeUnit;\\n        if (activeUnit != null) {\\n            if (freeColClient.getGame().getCurrentPlayer() == freeColClient.getMyPlayer()) {\\n                if (activeUnit.getState() != UnitState.ACTIVE) {\\n                    freeColClient.getInGameController().clearOrders(activeUnit);\\n                }\\n            } else {\\n                freeColClient.getInGameController().clearGotoOrders(activeUnit);\\n            }\\n        }\\n        updateGotoPathForActiveUnit();\\n                if(viewMode.getView() == ViewMode.VIEW_TERRAIN_MODE && activeUnit != null)\\n            viewMode.changeViewMode(ViewMode.MOVE_UNITS_MODE);\\n                if (activeUnit != null) {\\n            setSelectedTile(activeUnit.getTile().getPosition());\\n        } else {\\n            freeColClient.getActionManager().update();\\n            freeColClient.getCanvas().updateJMenuBar();\\n            int x = 0, y = 0;\\n            MapControls mapControls = freeColClient.getCanvas().getMapControls();\\n            if (mapControls != null) {\\n                x = getWidth() - mapControls.getInfoPanelWidth();\\n                y = getHeight() - mapControls.getInfoPanelHeight();\\n            }\\n            freeColClient.getCanvas().repaint(x, y, getWidth(), getHeight());\\n        }\\n    }\\n    public Position getFocus() {\\n        return focus;\\n    }\\n    public void setFocus(Position focus) {\\n        this.focus = focus;\\n        forceReposition();\\n        freeColClient.getCanvas().repaint(0, 0, getWidth(), getHeight());\\n    }\\n    public void setFocusImmediately(Position focus) {\\n        this.focus = focus;\\n        forceReposition();\\n        freeColClient.getCanvas().paintImmediately(0, 0, getWidth(), getHeight());\\n    }\\n    public void setFocus(int x, int y) {\\n        setFocus(new Map.Position(x,y));\\n    }\\n    public int getMessageCount() {\\n        return messages.size();\\n    }\\n    public GUIMessage getMessage(int index) {\\n        return messages.get(index);\\n    }\\n    public synchronized void addMessage(GUIMessage message) {\\n        if (getMessageCount() == MESSAGE_COUNT) {\\n            messages.remove(0);\\n        }\\n        messages.add(message);\\n        freeColClient.getCanvas().repaint(0, 0, getWidth(), getHeight());\\n    }\\n    public synchronized boolean removeOldMessages() {\\n        long currentTime = new Date().getTime();\\n        boolean result = false;\\n        int i = 0;\\n        while (i < getMessageCount()) {\\n            long messageCreationTime = getMessage(i).getCreationTime().getTime();\\n            if ((currentTime - messageCreationTime) >= MESSAGE_AGE) {\\n                result = true;\\n                messages.remove(i);\\n            } else {\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n    public int getWidth() {\\n        return size.width;\\n    }\\n    public int getHeight() {\\n        return size.height;\\n    }\\n    public void display(Graphics2D g) {\\n        if ((freeColClient.getGame() != null)\\n                && (freeColClient.getGame().getMap() != null)\\n                && (focus != null)\\n                && inGame) {\\n            removeOldMessages();\\n            displayMap(g);\\n        } else {\\n            if (freeColClient.isMapEditor()) {\\n                g.setColor(Color.black);\\n                g.fillRect(0, 0, size.width, size.height);                \\n            } else {\\n                Image bgImage = ResourceManager.getImage(\\\"CanvasBackgroundImage\\\", size);\\n                if (bgImage != null) {\\n                    g.drawImage(bgImage, 0, 0, freeColClient.getCanvas());\\n                                        String versionStr = \\\"v. \\\" + FreeCol.getVersion();\\n                    Font oldFont = g.getFont();\\n                    Color oldColor = g.getColor();\\n                    Font newFont = oldFont.deriveFont(Font.BOLD);\\n                    TextLayout layout = new TextLayout(versionStr, newFont, g.getFontRenderContext());\\n                    Rectangle2D bounds = layout.getBounds();\\n                    float x = getWidth() - (float) bounds.getWidth() - 5;\\n                    float y = getHeight() - (float) bounds.getHeight();\\n                    g.setColor(Color.white);\\n                    layout.draw(g, x, y);\\n                                        g.setFont(oldFont);\\n                    g.setColor(oldColor);\\n                } else {\\n                    g.setColor(Color.black);\\n                    g.fillRect(0, 0, size.width, size.height);\\n                }\\n            }\\n        }\\n    }\\n    private int getLeftColumns() {\\n        return getLeftColumns(focus.getY());\\n    }\\n    private int getLeftColumns(int y) {\\n        int leftColumns;\\n        if ((y % 2) == 0) {\\n            leftColumns = leftSpace / tileWidth + 1;\\n            if ((leftSpace % tileWidth) > 32) {\\n                leftColumns++;\\n            }\\n        } else {\\n            leftColumns = leftSpace / tileWidth + 1;\\n            if ((leftSpace % tileWidth) == 0) {\\n                leftColumns--;\\n            }\\n        }\\n        return leftColumns;\\n    }\\n    private int getRightColumns() {\\n        return getRightColumns(focus.getY());\\n    }\\n    private int getRightColumns(int y) {\\n        int rightColumns;\\n        if ((y % 2) == 0) {\\n            rightColumns = rightSpace / tileWidth + 1;\\n            if ((rightSpace % tileWidth) == 0) {\\n                rightColumns--;\\n            }\\n        } else {\\n            rightColumns = rightSpace / tileWidth + 1;\\n            if ((rightSpace % tileWidth) > 32) {\\n                rightColumns++;\\n            }\\n        }\\n        return rightColumns;\\n    }\\n    private void positionMap() {\\n        Game gameData = freeColClient.getGame();\\n        if (focus == null) {\\n            return;\\n        }\\n        int x = focus.getX(),\\n            y = focus.getY();\\n        int leftColumns = getLeftColumns(),\\n            rightColumns = getRightColumns();\\n        if (y < topRows) {\\n                        bottomRow = (size.height / (tileHeight / 2)) - 1;\\n            if ((size.height % (tileHeight / 2)) != 0) {\\n                bottomRow++;\\n            }\\n            topRow = 0;\\n            bottomRowY = bottomRow * (tileHeight / 2);\\n            topRowY = 0;\\n        } else if (y >= (gameData.getMap().getHeight() - bottomRows)) {\\n                        bottomRow = gameData.getMap().getHeight() - 1;\\n            topRow = size.height / (tileHeight / 2);\\n            if ((size.height % (tileHeight / 2)) > 0) {\\n                topRow++;\\n            }\\n            topRow = gameData.getMap().getHeight() - topRow;\\n            bottomRowY = size.height - tileHeight;\\n            topRowY = bottomRowY - (bottomRow - topRow) * (tileHeight / 2);\\n        } else {\\n                        bottomRow = y + bottomRows;\\n            topRow = y - topRows;\\n            bottomRowY = topSpace + (tileHeight / 2) * bottomRows;\\n            topRowY = topSpace - topRows * (tileHeight / 2);\\n        }\\n        if (x < leftColumns) {\\n                        leftColumn = 0;\\n            rightColumn = size.width / tileWidth - 1;\\n            if ((size.width % tileWidth) > 0) {\\n                rightColumn++;\\n            }\\n            leftColumnX = 0;\\n        } else if (x >= (gameData.getMap().getWidth() - rightColumns)) {\\n                        rightColumn = gameData.getMap().getWidth() - 1;\\n            leftColumn = size.width / tileWidth;\\n            if ((size.width % tileWidth) > 0) {\\n                leftColumn++;\\n            }\\n            leftColumnX = size.width - tileWidth - tileWidth / 2 -\\n                leftColumn * tileWidth;\\n            leftColumn = rightColumn - leftColumn;\\n        } else {\\n                        leftColumn = x - leftColumns;\\n            rightColumn = x + rightColumns;\\n            leftColumnX = (size.width - tileWidth) / 2 - leftColumns * tileWidth;\\n        }\\n    }\\n    private void displayGotoPath(Graphics2D g, PathNode gotoPath) {\\n        if (gotoPath != null) {\\n            PathNode temp = gotoPath;\\n            while (temp != null) {\\n                Point p = getTilePosition(temp.getTile());\\n                if (p != null) {\\n                    Tile tile = temp.getTile();\\n                    Image image;\\n                    final Color textColor; \\n                    if (temp.getTurns() == 0) {\\n                        g.setColor(Color.GREEN);                        \\n                        image = getPathImage(activeUnit);\\n                        if (activeUnit != null \\n                                && tile.isExplored()\\n                                && activeUnit.isNaval()\\n                                && tile.isLand() \\n                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {\\n                            image = getPathImage(activeUnit.getFirstUnit());\\n                        }\\n                        textColor = Color.BLACK;\\n                    } else {\\n                        g.setColor(Color.RED);\\n                        image = getPathNextTurnImage(activeUnit);\\n                        if (activeUnit != null\\n                                && tile.isExplored()\\n                                && activeUnit.isNaval()\\n                                && tile.isLand() \\n                                && (tile.getColony() == null || tile.getColony().getOwner() != activeUnit.getOwner())) {\\n                            image = getPathNextTurnImage(activeUnit.getFirstUnit());\\n                        }\\n                        textColor = Color.WHITE;\\n                    }                \\n                    if (image != null) {\\n                        g.drawImage(image, p.x + (tileWidth - image.getWidth(null))/2, p.y + (tileHeight - image.getHeight(null))/2, null);\\n                    } else {\\n                        g.fillOval(p.x + tileWidth/2, p.y + tileHeight/2, 10, 10);\\n                        g.setColor(Color.BLACK);\\n                        g.drawOval(p.x + tileWidth/2, p.y + tileHeight/2, 10, 10);\\n                    }                \\n                    if (temp.getTurns() > 0) {\\n                        BufferedImage stringImage = createStringImage(g, Integer.toString(temp.getTurns()), textColor, tileWidth, 12);\\n                        g.drawImage(stringImage, p.x + (tileWidth - stringImage.getWidth(null))/2, p.y + (tileHeight - stringImage.getHeight()) / 2, null);\\n                    }\\n                }                    \\n                temp = temp.next;\\n            }\\n        }\\n    }\\n    private int getXOffset(int clipLeftX, int tileY) {\\n        int xx = clipLeftX;\\n        if ((tileY % 2) != 0) {\\n            xx += tileWidth / 2;\\n        }\\n        return xx;\\n    }\\n    private void displayMap(Graphics2D g) {\\n        Rectangle clipBounds = g.getClipBounds();\\n        Map map = freeColClient.getGame().getMap();\\n        if (bottomRow < 0) {\\n            positionMap();\\n        }\\n        int clipTopRow = (clipBounds.y - topRowY) / (tileHeight / 2) - 1;\\n        int clipTopY = topRowY + clipTopRow * (tileHeight / 2);\\n        clipTopRow = topRow + clipTopRow;\\n        int clipLeftCol = (clipBounds.x - leftColumnX) / tileWidth - 1;\\n        int clipLeftX = leftColumnX + clipLeftCol * tileWidth;\\n        clipLeftCol = leftColumn + clipLeftCol;\\n        int clipBottomRow = (clipBounds.y + clipBounds.height - topRowY) / (tileHeight / 2);\\n        clipBottomRow = topRow + clipBottomRow;\\n        int clipRightCol = (clipBounds.x + clipBounds.width - leftColumnX) / tileWidth;\\n        clipRightCol = leftColumn + clipRightCol;\\n        if (displayGrid) {\\n            gridPath = new GeneralPath();\\n            gridPath.moveTo(0, 0);\\n            int nextX = tileWidth / 2;\\n            int nextY = - (tileHeight / 2);\\n            for (int i = 0; i <= ((clipRightCol - clipLeftCol) * 2 + 1); i++) {\\n                gridPath.lineTo(nextX, nextY);\\n                nextX += tileWidth / 2;\\n                if (nextY == - (tileHeight / 2)) {\\n                    nextY = 0;\\n                }\\n                else {\\n                    nextY = - (tileHeight / 2);\\n                }\\n            }\\n        }\\n        g.setColor(Color.black);\\n        g.fillRect(clipBounds.x, clipBounds.y, clipBounds.width, clipBounds.height);\\n        int xx;\\n        int yy = clipTopY;\\n                for (int tileY = clipTopRow; tileY <= clipBottomRow; tileY++) {\\n            xx = getXOffset(clipLeftX, tileY);\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                displayBaseTile(g, map, map.getTile(tileX, tileY), xx, yy, true);\\n                xx += tileWidth;\\n            }\\n            yy += tileHeight / 2;\\n        }\\n        List<Unit> darkUnits = new ArrayList<Unit>();\\n        List<Integer> darkUnitsX = new ArrayList<Integer>();\\n        List<Integer> darkUnitsY = new ArrayList<Integer>();\\n        yy = clipTopY;\\n                for (int tileY = clipTopRow; tileY <= clipBottomRow; tileY++) {\\n            xx = getXOffset(clipLeftX, tileY);\\n            if (displayGrid) {\\n                                g.translate(xx, yy + (tileHeight / 2));\\n                g.setColor(Color.BLACK);\\n                g.draw(gridPath);\\n                g.translate(- xx, - (yy + (tileHeight / 2)));\\n            }\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                Tile tile = map.getTile(tileX, tileY);\\n                                displayTileOverlays(g, map, tile, xx, yy, true, true);\\n                if (viewMode.displayTileCursor(tile,xx,yy)) {\\n                    drawCursor(g, xx, yy);\\n                }\\n                xx += tileWidth;\\n            }\\n            xx = getXOffset(clipLeftX, tileY);\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                Unit unitInFront = getUnitInFront(map.getTile(tileX, tileY));\\n                if (unitInFront != null) {\\n                    displayUnit(g, unitInFront, xx, yy);\\n                    if (unitInFront.isUndead()) {\\n                        darkUnits.add(unitInFront);\\n                        darkUnitsX.add(xx);\\n                        darkUnitsY.add(yy);\\n                    }\\n                }\\n                xx += tileWidth;\\n            }\\n            yy += tileHeight / 2;\\n        }\\n        if (darkUnits.size() > 0) {\\n            g.setColor(Color.BLACK);\\n            final Image im = getImageLibrary().getMiscImage(ImageLibrary.DARKNESS);\\n            for (int index=0; index<darkUnits.size(); index++) {\\n                final Unit u = darkUnits.get(index);\\n                final int x = darkUnitsX.get(index);\\n                final int y = darkUnitsY.get(index);            \\n                g.drawImage(im, x  + tileWidth/2 - im.getWidth(null)/2, y + tileHeight/2 - im.getHeight(null)/2, null);\\n                displayUnit(g, u, x, y);\\n            }\\n        }\\n                yy = clipTopY;\\n                for (int tileY = clipTopRow; tileY <= clipBottomRow; tileY++) {\\n            xx = getXOffset(clipLeftX, tileY);\\n                        for (int tileX = clipLeftCol; tileX <= clipRightCol; tileX++) {\\n                Tile tile = map.getTile(tileX, tileY);\\n                if (tile != null && tile.getSettlement() instanceof Colony) {\\n                    Colony colony = (Colony) tile.getSettlement();\\n                    BufferedImage stringImage =\\n                        createColonyNameImage(g, colony,\\n                                              lib.getTerrainImageWidth(tile.getType()) * 4/3, 16);\\n                    g.drawImage(stringImage, \\n                                xx + (lib.getTerrainImageWidth(tile.getType()) - \\n                                      stringImage.getWidth())/2 + 1,\\n                                yy + (lib.getSettlementImage(colony).getHeight(null) + 1), null);\\n                }\\n                xx += tileWidth;\\n            }\\n            yy += tileHeight / 2;\\n        }\\n        displayGotoPath(g, currentPath);\\n        displayGotoPath(g, gotoPath);\\n        Canvas canvas = freeColClient.getCanvas();\\n                if (coatOfArms != null) {\\n            canvas.remove(coatOfArms, false);\\n            coatOfArms = null;\\n        }\\n        if (waitingForMsg != null) {\\n            canvas.remove(waitingForMsg, false);\\n            waitingForMsg = null;\\n        }\\n        if (!freeColClient.isMapEditor()\\n                && freeColClient.getGame() != null\\n                && freeColClient.getMyPlayer() != freeColClient.getGame().getCurrentPlayer()) {\\n            if (greyLayer == null) {\\n                greyLayer = buildGreyLayer();\\n            } else if (!greyLayer.getSize().equals(size)) {\\n                canvas.remove(greyLayer, false);\\n                greyLayer = buildGreyLayer();\\n            }\\n            if (greyLayer.getParent() == null) {                 canvas.add(greyLayer, JLayeredPane.DEFAULT_LAYER, false);\\n                canvas.moveToFront(greyLayer);\\n            }\\n            final Color currentPlayerColor = freeColClient.getGame().getCurrentPlayer().getColor();\\n            final String nation = freeColClient.getGame().getCurrentPlayer().getNationAsString();\\n            Image im = createStringImage(g, \\n                    Messages.message(\\\"waitingFor\\\", \\\"%nation%\\\", nation),\\n                    currentPlayerColor,\\n                    640,\\n                    18);\\n            final ImageIcon coatOfArmsIcon = lib.getCoatOfArmsImageIcon(freeColClient.getGame().getCurrentPlayer().getNation());\\n            final int cHeight = (coatOfArmsIcon != null) ? coatOfArmsIcon.getIconHeight() : 0;\\n            final int cWidth = (coatOfArmsIcon != null) ? coatOfArmsIcon.getIconWidth() : 0;\\n            waitingForMsg = new JLabel(new ImageIcon(im));\\n            waitingForMsg.setBounds((size.width - im.getWidth(null)) / 2, (size.height - im.getHeight(null) - cHeight) / 2, im.getWidth(null), im.getHeight(null));\\n            canvas.add(waitingForMsg, JLayeredPane.DEFAULT_LAYER, false);\\n            canvas.moveToFront(waitingForMsg);\\n            if (coatOfArmsIcon != null) {\\n                coatOfArms = new JLabel(coatOfArmsIcon);\\n                coatOfArms.setBounds((size.width - cWidth) / 2, (size.height - cHeight) / 2 + im.getHeight(null), cWidth, cHeight);\\n                canvas.add(coatOfArms, JLayeredPane.DEFAULT_LAYER, false);\\n                canvas.moveToFront(coatOfArms);\\n            }\\n        }\\n        else {\\n            if (greyLayer != null && greyLayer.getParent() != null) {\\n                canvas.remove(greyLayer, false);\\n            }\\n        }\\n                synchronized (this) {\\n            BufferedImage si = createStringImage(g, \\\"getSizes\\\", Color.WHITE, size.width, 12);\\n            yy = size.height - 300 - getMessageCount() * si.getHeight();            xx = 40;\\n            for (int i = 0; i < getMessageCount(); i++) {\\n                GUIMessage message = getMessage(i);\\n                g.drawImage(createStringImage(g, message.getMessage(), message.getColor(), size.width, 12), xx, yy, null);\\n                yy += si.getHeight();\\n            }\\n        }\\n    }\\n    private JLabel buildGreyLayer() {\\n        BufferedImage greyLayerImg = new BufferedImage(size.width, size.height, BufferedImage.TYPE_INT_ARGB);\\n        Graphics2D greyG = greyLayerImg.createGraphics();\\n        greyG.setColor(Color.BLACK);\\n        Composite oldComposite = greyG.getComposite();\\n        greyG.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.6f));\\n        greyG.fill(new Rectangle(0, 0, size.width, size.height));\\n        greyG.setComposite(oldComposite);\\n        JLabel toReturn = new JLabel(new ImageIcon(greyLayerImg));\\n        toReturn.setBounds(0, 0, size.width, size.height);\\n        return toReturn;\\n    }\\n    private Image getPathImage(Unit u) {\\n        if (u == null) {\\n            return null;\\n        } else {\\n            return ResourceManager.getImage(\\\"path.\\\" + u.getPathTypeImage() + \\\".image\\\");\\n        }\\n    }\\n    private Image getPathNextTurnImage(Unit u) {\\n        if (u == null) {\\n            return null;\\n        } else {\\n            return ResourceManager.getImage(\\\"path.\\\" + u.getPathTypeImage() + \\\".nextTurn.image\\\");\\n        }\\n    }\\n    public BufferedImage createStringImage(Graphics2D g, String nameString, Color color, int maxWidth, int preferredFontSize) {\\n        return createStringImage(null, g, nameString, color, maxWidth, preferredFontSize);\\n    }\\n    public BufferedImage createStringImage(JComponent c, String nameString, Color color, int maxWidth, int preferredFontSize) {\\n        return createStringImage(c, null, nameString, color, maxWidth, preferredFontSize);\\n    }    \\n    private BufferedImage createStringImage(JComponent c, Graphics g, String nameString, Color color, int maxWidth, int preferredFontSize) {        \\n        if (color == null) {\\n            logger.warning(\\\"createStringImage called with color null\\\");\\n            color = Color.WHITE;\\n        }\\n        Font nameFont = (c != null) ? c.getFont() : g.getFont();\\n        FontMetrics nameFontMetrics = (c != null) ? c.getFontMetrics(nameFont) : g.getFontMetrics(nameFont);\\n        BufferedImage bi = null;\\n        int fontSize = preferredFontSize;\\n        do {\\n            nameFont = nameFont.deriveFont(Font.BOLD, fontSize);            \\n            nameFontMetrics = (c != null) ? c.getFontMetrics(nameFont) : g.getFontMetrics(nameFont);\\n            bi = new BufferedImage(nameFontMetrics.stringWidth(nameString) + 4, nameFontMetrics.getMaxAscent() + nameFontMetrics.getMaxDescent(), BufferedImage.TYPE_INT_ARGB);\\n            fontSize -= 2;\\n        } while (bi.getWidth() > maxWidth);\\n        Graphics2D big = bi.createGraphics();\\n        big.setColor(color);\\n        big.setFont(nameFont);\\n        big.drawString(nameString, 2, nameFontMetrics.getMaxAscent());\\n        int playerColor = color.getRGB();\\n        for (int biX=0; biX<bi.getWidth(); biX++) {\\n            for (int biY=0; biY<bi.getHeight(); biY++) {\\n                int r = bi.getRGB(biX, biY);\\n                if (r == playerColor) {\\n                    continue;\\n                }\\n                for (int cX=-1; cX <=1; cX++) {\\n                    for (int cY=-1; cY <=1; cY++) {\\n                        if (biX+cX >= 0 && biY+cY >= 0 && biX+cX < bi.getWidth() && biY+cY < bi.getHeight() && bi.getRGB(biX + cX, biY + cY) == playerColor) {\\n                            bi.setRGB(biX, biY, getStringBorderColor(color).getRGB());\\n                            continue;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return bi;\\n    }\\n    private BufferedImage createColonyNameImage(Graphics g, Colony colony,\\n                                                int maxWidth, int preferredFontSize) {        \\n        return createStringImage((Graphics2D) g,\\n                colony.getName(),\\n                colony.getOwner().getColor(),\\n                maxWidth,\\n                preferredFontSize);\\n    }\\n    public void drawRoad(Graphics2D g, long seed, int x1, int y1, int x2, int y2) {\\n        final int MAX_CORR = 4;\\n        Color oldColor = g.getColor();\\n        Random roadRandom = new Random(seed);\\n        int i = Math.max(Math.abs(x2-x1), Math.abs(y2-y1));\\n        int baseX = x1;\\n        int baseY = y1;\\n        double addX = (x2-x1)/((double) i);\\n        double addY = (y2-y1)/((double) i);\\n        int corr = 0;\\n        int xCorr = 0;\\n        int yCorr = 0;\\n        int lastDiff = 1;\\n        g.setColor(new Color(128, 64, 0));\\n        g.drawLine(baseX, baseY, baseX, baseY);\\n        for (int j=1; j<=i; j++) {\\n            int oldCorr = corr;\\n                            corr = corr + roadRandom.nextInt(3)-1;\\n                if (oldCorr != corr) {\\n                    lastDiff = oldCorr - corr;\\n                }\\n            if (Math.abs(corr) > MAX_CORR || Math.abs(corr) >= i-j) {\\n                if (corr > 0) {\\n                    corr--;\\n                } else {\\n                    corr++;\\n                }\\n            }\\n            if (corr != oldCorr) {\\n                g.setColor(new Color(128, 128, 0));\\n                g.drawLine(baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr, baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr);\\n            } else {\\n                int oldXCorr = 0;\\n                int oldYCorr = 0;\\n                if (x2-x1 == 0) {\\n                    oldXCorr = corr+lastDiff;\\n                    oldYCorr = 0;\\n                } else if (y2-y1 == 0) {\\n                    oldXCorr = 0;\\n                    oldYCorr = corr+lastDiff;\\n                } else {\\n                    if (corr > 0) {\\n                        oldXCorr = corr+lastDiff;\\n                    } else {\\n                        oldYCorr = corr+lastDiff;\\n                    }\\n                }\\n                g.setColor(new Color(128, 128, 0));\\n                g.drawLine(baseX+(int) (j*addX)+oldXCorr, baseY+(int) (j*addY)+oldYCorr, baseX+(int) (j*addX)+oldXCorr, baseY+(int) (j*addY)+oldYCorr);\\n            }\\n            if (x2-x1 == 0) {\\n                xCorr = corr;\\n                yCorr = 0;\\n            } else if (y2-y1 == 0) {\\n                xCorr = 0;\\n                yCorr = corr;\\n            } else {\\n                if (corr > 0) {\\n                    xCorr = corr;\\n                } else {\\n                    yCorr = corr;\\n                }\\n            }\\n            g.setColor(new Color(128, 64, 0));\\n            g.drawLine(baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr, baseX+(int) (j*addX)+xCorr, baseY+(int) (j*addY)+yCorr);\\n        }\\n        g.setColor(oldColor);\\n    }\\n    public void displayColonyTile(Graphics2D g, Map map, Tile tile, int x, int y, Colony colony) {\\n        displayBaseTile(g, map, tile, x, y, false);        \\n        Unit occupyingUnit = colony.getColonyTile(tile).getOccupyingUnit();\\n        Settlement settlement = tile.getOwningSettlement();\\n        int price = colony.getOwner().getLandPrice(tile);\\n        if ((settlement != null &&\\n             (settlement instanceof Colony && settlement != colony) ||\\n             (settlement instanceof IndianSettlement && price > 0)) ||\\n            occupyingUnit != null) {\\n                        g.drawImage(lib.getMiscImage(ImageLibrary.TILE_TAKEN), x, y, null);\\n        }\\n        displayTileOverlays(g, map, tile, x, y, false, false);\\n        if (price > 0 && tile.getSettlement() == null) {\\n                        Image image = lib.getMiscImage(ImageLibrary.TILE_OWNED_BY_INDIANS);\\n            g.drawImage(image, x+tileWidth/2-image.getWidth(null)/2, y+tileHeight/2-image.getHeight(null)/2, null);\\n        }\\n        if (occupyingUnit != null) {\\n            ImageIcon image = lib.getScaledImageIcon(lib.getUnitImageIcon(occupyingUnit), 0.5f);\\n            g.drawImage(image.getImage(), (x + tileWidth / 4) - image.getIconWidth() / 2,\\n                    (y + tileHeight / 2) - image.getIconHeight() / 2, null);\\n                        displayOccupationIndicator(g, occupyingUnit, x + (int) (STATE_OFFSET_X * lib.getScalingFactor()), y);\\n        }\\n    }\\n    public void displayTerrain(Graphics2D g, Map map, Tile tile, int x, int y) {\\n        displayBaseTile(g, map, tile, x, y, true);\\n        displayAdditionsAndImprovements(g, map, tile, x, y);\\n            }\\n    public void displayTile(Graphics2D g, Map map, Tile tile, int x, int y) {\\n        displayTile(g, map, tile, x, y, true);\\n    }\\n    public void displayTile(Graphics2D g, Map map, Tile tile, int x, int y, boolean drawUnexploredBorders) {\\n        displayBaseTile(g, map, tile, x, y, drawUnexploredBorders);\\n        displayTileOverlays(g, map, tile, x, y, drawUnexploredBorders, true);\\n    }\\n    private void displayBaseTile(Graphics2D g, Map map, Tile tile, int x, int y, boolean drawUnexploredBorders) {\\n        if (tile == null) {\\n            return;\\n        }\\n        g.drawImage(lib.getTerrainImage(tile.getType(), tile.getX(), tile.getY()), x, y, null);\\n        Map.Position pos = new Map.Position(tile.getX(), tile.getY());\\n        for (Direction direction : Direction.values()) {\\n            Map.Position p = Map.getAdjacent(pos, direction);\\n            if (map.isValid(p)) {\\n                Tile borderingTile = map.getTile(p.x, p.y);\\n                if (borderingTile == null) {\\n                                        logger.warning(\\\"Bordering Tile was null.\\\");\\n                    continue;\\n                }\\n                if (!drawUnexploredBorders && !borderingTile.isExplored() &&\\n                    (direction == Direction.SE || direction == Direction.S ||\\n                     direction == Direction.SW)) {\\n                    continue;\\n                }\\n                if (tile.getType() == borderingTile.getType()) {\\n                                        continue;\\n                }\\n                else if (tile.isLand() && !borderingTile.isLand()) {\\n                                        continue;\\n                }\\n                else if (!tile.isLand() && borderingTile.isLand() && borderingTile.isExplored()) {\\n                                        if (borderingTile.getType().getArtCoast() != null) {\\n                        g.drawImage(lib.getCoastImage(borderingTile.getType(), direction,\\n                                                        tile.getX(), tile.getY()),\\n                                                        x, y, null);\\n                    }\\n                                        g.drawImage(lib.getBorderImage(borderingTile.getType(), direction,\\n                                                    tile.getX(), tile.getY()),\\n                                                    x, y, null);\\n                } else if (tile.isExplored() && borderingTile.isExplored()) {\\n                    if (tile.getType().getArtBasic().equals(borderingTile.getType().getArtBasic())) {\\n                                                continue;\\n                    }\\n                    else if (borderingTile.getType().getIndex() < tile.getType().getIndex()) {\\n                                                g.drawImage(lib.getBorderImage(borderingTile.getType(), direction,\\n                                                        tile.getX(), tile.getY()),\\n                                                        x, y, null);\\n                    }\\n                }\\n            }\\n        }\\n    }    \\n    private void displayTileOverlays(Graphics2D g, Map map, Tile tile, int x, int y,\\n                                     boolean drawUnexploredBorders, boolean withNumber) {\\n        if (tile != null) {\\n            if (drawUnexploredBorders) {\\n                displayUnexploredBorders(g, map, tile, x, y);\\n            }\\n            displayAdditionsAndImprovements(g, map, tile, x, y);\\n            displaySettlement(g, map, tile, x, y, withNumber);\\n            displayFogOfWar(g, map, tile, x, y);\\n            displayOptionalValues(g, map, tile, x, y);\\n        }\\n    }\\n    private void displayAdditionsAndImprovements(Graphics2D g, Map map, Tile tile, int x, int y) {  \\n        Map.Position pos = new Map.Position(tile.getX(), tile.getY());\\n        if (!tile.isExplored()) {\\n            g.drawImage(lib.getTerrainImage(null, tile.getX(), tile.getY()), x, y, null);\\n        } else {\\n                        if (tile.getType().getArtOverlay() != null) {\\n                g.drawImage(lib.getOverlayImage(tile.getType(), tile.getX(), tile.getY()), x, y - (int) (32 * lib.getScalingFactor()), null);\\n            }\\n            TileItemContainer tic = tile.getTileItemContainer();\\n            if (tic == null) {\\n                if(tile.isForested()) {\\n                    g.drawImage(lib.getForestImage(tile.getType()), x, y, null);\\n                }\\n            } else {\\n                List<TileImprovement> tiList = tile.getCompletedTileImprovements();\\n                List<TileImprovement> tiList2 = new ArrayList<TileImprovement>();\\n                                                for (TileImprovement ti : tiList) {\\n                    if (ti == tic.getRiver() || ti == tic.getRoad())\\n                        continue;\\n                    if (!ti.getType().isArtOverTrees()) {\\n                        tiList2.add(ti);\\n                    } else if (ti.getType().getArtOverlay() != null) {\\n                                                g.drawImage(ResourceManager.getImage(ti.getType().getArtOverlay()), x, y, null);\\n                    }\\n                }\\n                                if (tic.hasRiver() && tic.getRiver().getMagnitude() < TileImprovement.FJORD_RIVER) {\\n                    g.drawImage(lib.getRiverImage(tic.getRiverStyle()), x, y, null);\\n                }\\n                if (tile.isForested()) {\\n                    g.drawImage(lib.getForestImage(tile.getType()), x, y, null);\\n                }\\n                for (TileImprovement ti : tiList2) {\\n                    if (ti == tic.getRiver() || ti == tic.getRoad())\\n                        continue;\\n                    if (ti.getType().getArtOverlay() != null) {\\n                                                g.drawImage(ResourceManager.getImage(ti.getType().getArtOverlay()), x, y, null);\\n                    }\\n                }\\n                if (tile.hasResource()) {\\n                    Image bonusImage = lib.getBonusImage(tic.getResource().getType());\\n                    if (bonusImage != null) {\\n                        g.drawImage(bonusImage, x + tileWidth/2 - bonusImage.getWidth(null)/2,\\n                                    y + tileHeight/2 - bonusImage.getHeight(null)/2, null);\\n                    }\\n                }\\n                                if (tile.hasRoad()) {\\n                    long seed = Long.parseLong(Integer.toString(tile.getX()) + Integer.toString(tile.getY()));\\n                    boolean connectedRoad = false;\\n                    for (Direction direction : Direction.values()) {\\n                        Map.Position p = Map.getAdjacent(pos, direction);\\n                        if (map.isValid(p)) {\\n                            Tile borderingTile = map.getTile(p);\\n                            if (borderingTile.hasRoad()) {\\n                                connectedRoad =  true;\\n                                int nx = x + tileWidth/2;\\n                                int ny = y + tileHeight/2;\\n                                switch (direction) {\\n                                case N : nx = x + tileWidth/2; ny = y; break;\\n                                case NE: nx = x + (tileWidth*3)/4; ny = y + tileHeight/4; break;\\n                                case E : nx = x + tileWidth; ny = y + tileHeight/2; break;\\n                                case SE: nx = x + (tileWidth*3)/4; ny = y + (tileHeight*3)/4; break;\\n                                case S : nx = x + tileWidth/2; ny = y + tileHeight; break;\\n                                case SW: nx = x + tileWidth/4; ny = y + (tileHeight*3)/4; break;\\n                                case W : nx = x; ny = y + tileHeight/2; break;\\n                                case NW: nx = x + tileWidth/4; ny = y + tileHeight/4; break;\\n                                }\\n                                drawRoad(g, seed, x + tileWidth/2, y + tileHeight/2, nx, ny);\\n                            }\\n                        }\\n                    }\\n                    if (!connectedRoad) {\\n                        drawRoad(g, seed, x + tileWidth/2 - 10, y + tileHeight/2, x + tileWidth/2 + 10, y + tileHeight/2);\\n                        drawRoad(g, seed, x + tileWidth/2, y + tileHeight/2 - 10, x + tileWidth/2, y + tileHeight/2 + 10);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    private void displaySettlement(Graphics2D g, Map map, Tile tile, int x, int y, boolean withNumber) {  \\n        if (tile.isExplored()) {\\n            Settlement settlement = tile.getSettlement();\\n            if (settlement != null) {\\n                if (settlement instanceof Colony) {\\n                    Image colonyImage = lib.getSettlementImage(settlement);\\n                                        g.drawImage(colonyImage,\\n                                x + (lib.getTerrainImageWidth(tile.getType()) -\\n                                     colonyImage.getWidth(null)) / 2,\\n                                y + (lib.getTerrainImageHeight(tile.getType()) -\\n                                     colonyImage.getHeight(null)) / 2, null);\\n                    if (withNumber) {\\n                        String populationString = Integer.toString(((Colony)settlement).getUnitCount());\\n                        Color theColor = null;\\n                        int bonus = ((Colony)settlement).getProductionBonus();\\n                        switch (bonus) {\\n                        case 2:\\n                            theColor = Color.BLUE;\\n                            break;\\n                        case 1:\\n                            theColor = Color.GREEN;\\n                            break;\\n                        case -1:\\n                            theColor = Color.ORANGE;\\n                            break;\\n                        case -2:\\n                            theColor = Color.RED;\\n                            break;\\n                        default:\\n                            theColor = Color.WHITE;\\n                        break;\\n                        }\\n                        BufferedImage stringImage = createStringImage(g, populationString, theColor, lib.getTerrainImageWidth(tile.getType()), 12);\\n                        g.drawImage(stringImage, x + (lib.getTerrainImageWidth(tile.getType()) - stringImage.getWidth())/2 + 1, y + ((lib.getTerrainImageHeight(tile.getType()) - stringImage.getHeight()) / 2) + 1, null);\\n                    }\\n                    g.setColor(Color.BLACK);\\n                } else if (settlement instanceof IndianSettlement) {\\n                    IndianSettlement indianSettlement = (IndianSettlement) settlement;\\n                    Image settlementImage = lib.getSettlementImage(settlement);\\n                                        g.drawImage(settlementImage,\\n                                x + (lib.getTerrainImageWidth(tile.getType()) -\\n                                     settlementImage.getWidth(null)) / 2,\\n                                y + (lib.getTerrainImageHeight(tile.getType()) - \\n                                     settlementImage.getHeight(null)) / 2, null);\\n                                        g.drawImage(lib.getColorChip(indianSettlement.getOwner().getColor()),\\n                                x + (int) (STATE_OFFSET_X * lib.getScalingFactor()),\\n                                y + (int) (STATE_OFFSET_Y * lib.getScalingFactor()), null);\\n                                        Unit missionary = indianSettlement.getMissionary();\\n                    if (missionary != null) {\\n                        boolean expert = missionary.hasAbility(\\\"model.ability.expertMissionary\\\");\\n                        g.drawImage(lib.getMissionChip(missionary.getOwner().getColor(), expert),\\n                                    x + (int) (STATE_OFFSET_X * lib.getScalingFactor()) +\\n                                    (MISSION_OFFSET_X - STATE_OFFSET_X),\\n                                    y + (int) (MISSION_OFFSET_Y * lib.getScalingFactor()), null);\\n                    }\\n                                        if (freeColClient.getMyPlayer() != null) {\\n                        Tension alarm = indianSettlement.getAlarm(freeColClient.getMyPlayer());\\n                        if (alarm != null) {\\n                                                        final boolean visited = indianSettlement.hasBeenVisited(freeColClient.getMyPlayer());\\n                            g.drawImage(lib.getAlarmChip(alarm.getLevel(), visited),\\n                                        x + (int) (STATE_OFFSET_X * lib.getScalingFactor()) +\\n                                        (ALARM_OFFSET_X - STATE_OFFSET_X),\\n                                        y + (int) (ALARM_OFFSET_Y  * lib.getScalingFactor()), null);\\n                        }\\n                    }\\n                    g.setColor(Color.BLACK);\\n                    if (indianSettlement.isCapital()) {\\n                                                g.drawString(\\\"*\\\",\\n                                     x + (STATE_OFFSET_X * lib.getScalingFactor()) + TEXT_OFFSET_X + 1,\\n                                     y + (int) (STATE_OFFSET_Y * lib.getScalingFactor()) + TEXT_OFFSET_Y + 2);\\n                    } else {\\n                        g.drawString(\\\"-\\\", \\n                                     x + (int) (STATE_OFFSET_X * lib.getScalingFactor()) + TEXT_OFFSET_X,\\n                                     y + (int) (STATE_OFFSET_Y * lib.getScalingFactor()) + TEXT_OFFSET_Y);\\n                    }\\n                } else {\\n                    logger.warning(\\\"Requested to draw unknown settlement type.\\\");\\n                }\\n            } else if (tile.hasLostCityRumour()) {\\n                g.drawImage(lib.getMiscImage(ImageLibrary.LOST_CITY_RUMOUR),\\n                            x + (int) (RUMOUR_OFFSET_X * lib.getScalingFactor()),\\n                            y + (int) (RUMOUR_OFFSET_Y * lib.getScalingFactor()), null);\\n            }\\n        }\\n    }\\n    private void displayFogOfWar(Graphics2D g, Map map, Tile tile, int x, int y) {  \\n        if (tile.isExplored()) {\\n            final boolean displayFogOfWar = freeColClient.getClientOptions().getBoolean(ClientOptions.DISPLAY_FOG_OF_WAR);\\n            if (displayFogOfWar\\n                    && freeColClient.getMyPlayer() != null\\n                    && !freeColClient.getMyPlayer().canSee(tile)) {\\n                g.setColor(Color.BLACK);\\n                Composite oldComposite = g.getComposite();\\n                g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.2f));\\n                Polygon pol = new Polygon(new int[] {x + tileWidth/2, x + tileWidth, x + tileWidth/2, x},\\n                                          new int[] {y, y + tileHeight/2, y + tileHeight, y + tileHeight/2},\\n                                          4);\\n                g.fill(pol);\\n                g.setComposite(oldComposite);\\n            }\\n        }\\n    }\\n    private void displayUnexploredBorders(Graphics2D g, Map map, Tile tile, int x, int y) {  \\n        if (tile.isExplored()) {\\n            Map.Position pos = new Map.Position(tile.getX(), tile.getY());\\n            for (Direction direction : Direction.values()) {\\n                Map.Position p = Map.getAdjacent(pos, direction);\\n                if (map.isValid(p)) {\\n                    Tile borderingTile = map.getTile(p);\\n                    if (borderingTile == null || borderingTile.isExplored()){\\n                        continue;\\n                    }\\n                    g.drawImage(lib.getBorderImage(null, direction, tile.getX(), tile.getY()), x, y, null);\\n                }\\n            }\\n        }\\n    }\\n    private void displayOptionalValues(Graphics2D g, Map map, Tile tile, int x, int y) {\\n        switch (displayTileText) {\\n        case ClientOptions.DISPLAY_TILE_TEXT_EMPTY:\\n            break;\\n        case ClientOptions.DISPLAY_TILE_TEXT_NAMES:\\n            if (tile.getName() != null) {\\n                String tileName = tile.getName();\\n                g.setColor(Color.BLACK);\\n                int b = getBreakingPoint(tileName);\\n                if (b == -1) {\\n                    g.drawString(tileName, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));\\n                } else {\\n                    g.drawString(tileName.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);\\n                    g.drawString(tileName.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileName.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);\\n                }\\n            }\\n            break;\\n        case ClientOptions.DISPLAY_TILE_TEXT_OWNERS:\\n            if (tile.getOwner() != null) {\\n                String tileOwner = tile.getOwner().getNationAsString();\\n                g.setColor(Color.BLACK);\\n                int b = getBreakingPoint(tileOwner);\\n                if (b == -1) {\\n                    g.drawString(tileOwner, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));\\n                } else {\\n                    g.drawString(tileOwner.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);\\n                    g.drawString(tileOwner.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(tileOwner.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);\\n                }\\n            }\\n            break;\\n        case ClientOptions.DISPLAY_TILE_TEXT_REGIONS:\\n            if (tile.getRegion() != null) {\\n                String regionString = tile.getRegion().getDisplayName();\\n                g.setColor(Color.BLACK);\\n                int b = getBreakingPoint(regionString);\\n                if (b == -1) {\\n                    g.drawString(regionString, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString))/2, y + (lib.getTerrainImageHeight(tile.getType())/2));\\n                } else {\\n                    g.drawString(regionString.substring(0, b), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(0, b)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 - (g.getFontMetrics().getAscent()*2)/3);\\n                    g.drawString(regionString.substring(b+1), x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(regionString.substring(b+1)))/2, y + lib.getTerrainImageHeight(tile.getType())/2 + (g.getFontMetrics().getAscent()*2)/3);\\n                }\\n            }\\n            break;\\n        default:\\n            logger.warning(\\\"displayTileText out of range\\\");\\n            break;\\n        }\\n        g.setColor(Color.BLACK);\\n        if (displayCoordinates) {\\n            String posString = tile.getX() + \\\", \\\" + tile.getY();\\n            g.drawString(posString, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(posString))/2, y + (lib.getTerrainImageHeight(tile.getType()) - g.getFontMetrics().getAscent())/2);\\n        }\\n        if (displayColonyValue && tile.isExplored() && tile.isLand()) {\\n            String valueString;\\n            if (displayColonyValuePlayer == null) {\\n                valueString = Integer.toString(tile.getColonyValue());\\n            } else {\\n                valueString = Integer.toString(displayColonyValuePlayer.getColonyValue(tile));\\n            }\\n            g.drawString(valueString, x + (lib.getTerrainImageWidth(tile.getType()) - g.getFontMetrics().stringWidth(valueString))/2, y + (lib.getTerrainImageHeight(tile.getType()) - g.getFontMetrics().getAscent())/2);\\n        }\\n    }\\n    public void stopGoto() {\\n        freeColClient.getCanvas().setCursor(null);\\n        setGotoPath(null);\\n        updateGotoPathForActiveUnit();\\n        gotoStarted = false;\\n    }\\n    public void startGoto() {\\n        gotoStarted = true;\\n        freeColClient.getCanvas().setCursor((java.awt.Cursor) UIManager.get(\\\"cursor.go\\\"));\\n        setGotoPath(null);\\n    }\\n    public boolean isGotoStarted() {\\n        return gotoStarted;\\n    }\\n    public void updateGotoPathForActiveUnit() {\\n        if (activeUnit == null || activeUnit.getDestination() == null) {\\n            currentPath = null;\\n        } else {\\n            if (activeUnit.getDestination() instanceof Europe) {\\n                currentPath = freeColClient.getGame().getMap().findPathToEurope(activeUnit, activeUnit.getTile());\\n            } else if (activeUnit.getDestination().getTile() == activeUnit.getTile()) {\\n                                currentPath = null;\\n            } else {\\n                currentPath = activeUnit.findPath(activeUnit.getDestination().getTile());\\n            }\\n        }\\n    }\\n    public void setGotoPath(PathNode gotoPath) {\\n        this.gotoPath = gotoPath;\\n        freeColClient.getCanvas().refresh();\\n    }\\n    public PathNode getGotoPath() {\\n        return gotoPath;\\n    }\\n    public void setDisplayGrid(boolean displayGrid) {\\n        this.displayGrid = displayGrid;\\n    }\\n    public void setDisplayTileText(int tileTextType) {\\n        this.displayTileText = tileTextType;\\n    }\\n    public int getBreakingPoint(String string) {\\n        int center = string.length() / 2;\\n        int bestIndex = string.indexOf(' ');\\n        int index = 0;\\n        while (index != -1 && index != bestIndex) {\\n            if (Math.abs(center-index) < Math.abs(center-bestIndex)) {\\n                bestIndex = index;\\n            }\\n            index = string.indexOf(' ', bestIndex);\\n        }\\n        if (bestIndex == 0 || bestIndex == string.length()) {\\n            return -1;\\n        } else {\\n            return bestIndex;\\n        }\\n    }\\n    private Image getOccupationIndicatorImage(Unit unit) {\\n        Image chip = lib.getColorChip(unit.getOwner().getColor());\\n        BufferedImage img = new BufferedImage(chip.getWidth(null), chip.getHeight(null), BufferedImage.TYPE_INT_ARGB);\\n        Graphics g = img.getGraphics();\\n        g.drawImage(chip, 0, 0, null);\\n        g.setColor(getForegroundColor(unit.getOwner().getColor()));\\n        String occupationString;\\n        if (unit.getOwner() != freeColClient.getMyPlayer()\\n                && unit.isNaval()) {\\n            occupationString = Integer.toString(unit.getVisibleGoodsCount());\\n        } else {\\n            occupationString = unit.getOccupationIndicator();\\n            if (unit.getState() == UnitState.FORTIFIED)\\n                g.setColor(Color.GRAY);\\n        }\\n        g.drawString(occupationString, TEXT_OFFSET_X, TEXT_OFFSET_Y);\\n        return img;\\n    }\\n    private Color getForegroundColor(Color background) {\\n        if (background.getRed() * 0.3\\n                + background.getGreen() * 0.59\\n                + background.getBlue() * 0.11 < 126) {\\n            return Color.WHITE;\\n        } else {\\n            return Color.BLACK;\\n        }\\n    }\\n    private Color getStringBorderColor(Color color) {\\n        if (color.getRed() * 0.3\\n                + color.getGreen() * 0.59\\n                + color.getBlue() * 0.11 < 10) {\\n            return Color.WHITE;\\n        } else {\\n            return Color.BLACK;\\n        }\\n    }\\n    public void displayOccupationIndicator(Graphics g, Unit unit, int x, int y) {\\n        g.drawImage(getOccupationIndicatorImage(unit), x, y, null);\\n    }\\n    private void displayUnit(Graphics2D g, Unit unit, int x, int y) {\\n        try {\\n                                    if (viewMode.displayUnitCursor(unit,x,y)) {\\n                drawCursor(g,x,y);\\n            }\\n                                    Image image = lib.getUnitImageIcon(unit, unit.getState() == UnitState.SENTRY).getImage();\\n            Point p = getUnitImagePositionInTile(image, x, y);\\n            g.drawImage(image, p.x, p.y, null);\\n                        displayOccupationIndicator(g, unit, x + (int) (STATE_OFFSET_X * lib.getScalingFactor()), y);\\n                        int unitsOnTile = 0;\\n            if (unit.getTile() != null) {\\n                                                                unitsOnTile = unit.getTile().getTotalUnitCount();\\n            }\\n            if (unitsOnTile > 1) {\\n                g.setColor(Color.WHITE);\\n                int unitLinesY = y + OTHER_UNITS_OFFSET_Y;\\n                for (int i = 0; (i < unitsOnTile) && (i < MAX_OTHER_UNITS); i++) {\\n                    g.drawLine(x + (int) ((STATE_OFFSET_X + OTHER_UNITS_OFFSET_X) * lib.getScalingFactor()), unitLinesY, x + (int) ((STATE_OFFSET_X + OTHER_UNITS_OFFSET_X + OTHER_UNITS_WIDTH) * lib.getScalingFactor()), unitLinesY);\\n                    unitLinesY += 2;\\n                }\\n            }\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n                if (debugShowMission && freeColClient.getFreeColServer() != null) {\\n            net.sf.freecol.server.ai.AIUnit au = (net.sf.freecol.server.ai.AIUnit) freeColClient.getFreeColServer().getAIMain().getAIObject(unit);\\n            if (au != null) {\\n                g.setColor(Color.WHITE);\\n                String text = (unit.getOwner().isAI()) ? \\\"\\\" : \\\"(\\\";\\n                String debuggingInfo = \\\"\\\";\\n                if (au.getMission() != null) {\\n                    String missionName = au.getMission().getClass().toString();\\n                    missionName = missionName.substring(missionName.lastIndexOf('.') + 1);\\n                    text += missionName;\\n                    if (debugShowMissionInfo) {\\n                        debuggingInfo = au.getMission().getDebuggingInfo();\\n                    }\\n                } else {\\n                    text += \\\"No mission\\\";\\n                }                \\n                text += (unit.getOwner().isAI()) ? \\\"\\\" : \\\")\\\";\\n                g.drawString(text, x , y);\\n                g.drawString(debuggingInfo, x , y+25);\\n            }\\n        }\\n    }\\n    private Point getUnitImagePositionInTile(Image unitImage, int tileX, int tileY) {\\n        return getUnitImagePositionInTile(unitImage.getWidth(null), unitImage.getHeight(null), tileX, tileY);\\n    }\\n    private Point getUnitImagePositionInTile(int unitImageWidth, int unitImageHeight, int tileX, int tileY) {\\n        int unitX = ((tileX + getTileWidth() / 2) - unitImageWidth / 2);\\n        int unitY = (tileY + getTileHeight() / 2) - unitImageHeight / 2 -\\n                    (int) (UNIT_OFFSET * lib.getScalingFactor());\\n        return new Point(unitX, unitY);\\n    }\\n    public Point getUnitLabelPositionInTile(JLabel unitLabel, Tile tile) {\\n        return getUnitLabelPositionInTile(unitLabel, getTilePosition(tile));\\n    }\\n    public Point getUnitLabelPositionInTile(JLabel unitLabel, Point tileP) {\\n        if (tileP != null) {\\n            int labelX = tileP.x;\\n            int labelY = (tileP.y + getTileHeight() / 2) - unitLabel.getHeight() / 2 -\\n                        (int) (UNIT_OFFSET * lib.getScalingFactor());\\n            return new Point(labelX, labelY);\\n        } else {\\n            return null;\\n        }\\n    }\\n    public JLabel getUnitLabel(Unit unit) {\\n        Image unitImg = lib.getUnitImageIcon(unit).getImage();\\n        Image chipImg = getOccupationIndicatorImage(unit);\\n        final int width = tileWidth/2 + unitImg.getWidth(null)/2;\\n        final int height = unitImg.getHeight(null);\\n        BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\\n        Graphics g = img.getGraphics();\\n        final int unitX = width - unitImg.getWidth(null);\\n        g.drawImage(unitImg, unitX, 0, null);\\n        final int chipX = ((int)(STATE_OFFSET_X * lib.getScalingFactor()));\\n        final int chipY = (int) (((height / 2 + UNIT_OFFSET*lib.getScalingFactor())) - tileHeight / 2);\\n        g.drawImage(chipImg, chipX, chipY, null);\\n        JLabel label = new JLabel(new ImageIcon(img));\\n        label.setBounds(0, 0, width, height);\\n        return label;\\n    }\\n    private void drawCursor(Graphics2D g, int x, int y) {\\n        g.drawImage(cursorImage, x, y, null);\\n    }\\n    public void setInGame(boolean inGame) {\\n        this.inGame = inGame;\\n    }\\n    public boolean isInGame() {\\n        return inGame;\\n    }\\n    public boolean onScreen(int x, int y) {\\n        if (bottomRow < 0) {\\n            positionMap();\\n            return y - 2 > topRow && y + 4 < bottomRow && x - 1 > leftColumn && x + 2 < rightColumn;\\n        } else {\\n            return y - 2 > topRow && y + 4 < bottomRow && x - 1 > leftColumn && x + 2 < rightColumn;\\n        }\\n    }\\n    public boolean onScreen(Position position) {\\n        return onScreen(position.getX(), position.getY());\\n    }\\n    public Map.Position convertToMapCoordinates(int x, int y) {\\n        Game gameData = freeColClient.getGame();\\n        if ((gameData == null) || (gameData.getMap() == null)) {\\n            return null;\\n        }\\n        int leftOffset;\\n        if (focus.getX() < getLeftColumns()) {\\n                        if ((focus.getY() % 2) == 0) {\\n                leftOffset = tileWidth * focus.getX() + tileWidth / 2;\\n            } else {\\n                leftOffset = tileWidth * (focus.getX() + 1);\\n            }\\n        } else if (focus.getX() >= (gameData.getMap().getWidth() - getRightColumns())) {\\n                        if ((focus.getY() % 2) == 0) {\\n                leftOffset = size.width - (gameData.getMap().getWidth() - focus.getX()) * tileWidth;\\n            } else {\\n                leftOffset = size.width - (gameData.getMap().getWidth() - focus.getX() - 1) * tileWidth - tileWidth / 2;\\n            }\\n        } else {\\n            if ((focus.getY() % 2) == 0) {\\n                leftOffset = (size.width / 2);\\n            } else {\\n                leftOffset = (size.width / 2) + tileWidth / 2;\\n            }\\n        }\\n        int topOffset;\\n        if (focus.getY() < topRows) {\\n                        topOffset = (focus.getY() + 1) * (tileHeight / 2);\\n        } else if (focus.getY() >= (gameData.getMap().getHeight() - bottomRows)) {\\n                        topOffset = size.height - (gameData.getMap().getHeight() - focus.getY()) * (tileHeight / 2);\\n        } else {\\n            topOffset = (size.height / 2);\\n        }\\n                                        int diffUp = (topOffset - y) / (tileHeight / 4),\\n            diffLeft = (leftOffset - x) / (tileWidth / 4);\\n                        int orDiffUp = diffUp,\\n            orDiffLeft = diffLeft,\\n            remainderUp = (topOffset - y) % (tileHeight / 4),\\n            remainderLeft = (leftOffset - x) % (tileWidth / 4);\\n        if ((diffUp % 2) == 0) {\\n            diffUp = diffUp / 2;\\n        } else {\\n            if (diffUp < 0) {\\n                diffUp = (diffUp / 2) - 1;\\n            } else {\\n                diffUp = (diffUp / 2) + 1;\\n            }\\n        }\\n        if ((diffLeft % 2) == 0) {\\n            diffLeft = diffLeft / 2;\\n        } else {\\n            if (diffLeft < 0) {\\n                diffLeft = (diffLeft / 2) - 1;\\n            } else {\\n                diffLeft = (diffLeft / 2) + 1;\\n            }\\n        }\\n        boolean done = false;\\n        while (!done) {\\n            if ((diffUp % 2) == 0) {\\n                if ((diffLeft % 2) == 0) {\\n                    diffLeft = diffLeft / 2;\\n                    done = true;\\n                } else {\\n                                        if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2) > remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2) > remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            }\\n                        } else if (orDiffUp == 0) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2) > -remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2) > -remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        }\\n                    } else if ((orDiffLeft % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    } else if ((orDiffUp % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if ((orDiffLeft > 0) && (orDiffUp == 0)) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffUp == 0) {\\n                            if (remainderUp > 0) {\\n                                                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        }\\n                    } else {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    }\\n                }\\n            } else {\\n                if ((diffLeft % 2) == 0) {\\n                                        if (((orDiffLeft % 2) == 0) && ((orDiffUp % 2) == 0)) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((remainderUp * 2) > remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((remainderUp * 2) > -remainderLeft) {\\n                                    diffUp++;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffLeft == 0) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((-remainderUp * 2) > remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2) > -remainderLeft) {\\n                                    diffUp--;\\n                                } else {\\n                                    diffLeft--;\\n                                }\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        }\\n                    } else if ((orDiffLeft % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else if ((orDiffUp > 0) && (orDiffLeft == 0)) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft++;\\n                                } else {\\n                                    diffUp--;\\n                                }\\n                            } else {\\n                                                                if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft--;\\n                                } else {\\n                                    diffUp--;\\n                                }\\n                            }\\n                        } else if (orDiffLeft == 0) {\\n                            if (remainderLeft > 0) {\\n                                                                if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft++;\\n                                } else {\\n                                    diffUp++;\\n                                }\\n                            } else {\\n                                                                if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                    diffLeft--;\\n                                } else {\\n                                    diffUp++;\\n                                }\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    } else if ((orDiffUp % 2) == 0) {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp++;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2 + remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft--;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2 - remainderLeft) > (tileWidth / 4)) {\\n                                diffUp--;\\n                            } else {\\n                                diffLeft++;\\n                            }\\n                        }\\n                    } else {\\n                        if ((orDiffLeft > 0) && (orDiffUp > 0)) {\\n                                                        if ((remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffUp > 0) {\\n                                                        if ((remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp--;\\n                            }\\n                        } else if (orDiffLeft > 0) {\\n                                                        if ((-remainderUp * 2) > remainderLeft) {\\n                                diffLeft--;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        } else {\\n                                                        if ((-remainderUp * 2) > -remainderLeft) {\\n                                diffLeft++;\\n                            } else {\\n                                diffUp++;\\n                            }\\n                        }\\n                    }\\n                } else {\\n                    if ((focus.getY() % 2) == 0) {\\n                        if (diffLeft < 0) {\\n                            diffLeft = diffLeft / 2;\\n                        } else {\\n                            diffLeft = (diffLeft / 2) + 1;\\n                        }\\n                    } else {\\n                        if (diffLeft < 0) {\\n                            diffLeft = (diffLeft / 2) - 1;\\n                        } else {\\n                            diffLeft = diffLeft / 2;\\n                        }\\n                    }\\n                    done = true;\\n                }\\n            }\\n        }\\n        return new Map.Position(focus.getX() - diffLeft, focus.getY() - diffUp);\\n    }\\n    public boolean isMapNearTop(int y) {\\n        if (y < topRows) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public boolean isMapNearBottom(int y) {\\n        if (y >= (freeColClient.getGame().getMap().getHeight() - bottomRows)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public boolean isMapNearLeft(int x, int y) {\\n        if (x < getLeftColumns(y)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public boolean isMapNearRight(int x, int y) {\\n        if (x >= (freeColClient.getGame().getMap().getWidth() - getRightColumns(y))) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    public ImageLibrary getImageLibrary() {\\n        return lib;\\n    }\\n    public Point getTilePosition(Tile t) {\\n        if (t.getY() >= topRow \\n                && t.getY() <= bottomRow \\n                && t.getX() >= leftColumn \\n                && t.getX() <= rightColumn) {\\n            int x = ((t.getX() - leftColumn) * tileWidth) + leftColumnX;\\n            int y = ((t.getY() - topRow) * tileHeight / 2) + topRowY;\\n            if ((t.getY() % 2) != 0) {     \\n                x += tileWidth / 2;\\n            }\\n            return new Point(x, y);\\n        } else {\\n            return null;\\n        }\\n    }\\n    public Rectangle getTileBounds(Tile tile) {\\n        return getTileBounds(tile.getX(), tile.getY());\\n    }\\n    public Rectangle getTileBounds(int x, int y) {\\n        Rectangle result = new Rectangle(0, 0, size.width, size.height);\\n        if (y >= topRow && y <= bottomRow && x >= leftColumn && x <= rightColumn) {\\n            result.y = ((y - topRow) * tileHeight / 2) + topRowY - tileHeight;\\n            result.x = ((x - leftColumn) * tileWidth) + leftColumnX;\\n            if ((y % 2) != 0) {\\n                result.x += tileWidth / 2;\\n            }\\n            result.width = tileWidth;\\n            result.height = tileHeight * 2;\\n        }\\n        return result;\\n    }\\n    public void forceReposition() {\\n        bottomRow = -1;\\n    }\\n    public int getTileHeight() {\\n        return tileHeight;\\n    }\\n    public int getTileWidth() {\\n        return tileWidth;\\n    }\\n}\""
            },
            "m15": {
                "content": "### Analysis of `GUI.java`\n\n#### **Key Responsibilities**:\n- **Map Display**: Manages the rendering of the game map, including tiles, settlements, and units.\n- **User Interaction**: Handles visual feedback for user interactions such as unit selection, movement paths, and settlement information.\n- **Game State Visualization**: Displays game state elements like fog of war, tile ownership, and mission indicators.\n\n#### **Relationship with `Canvas.java`**:\n- `Canvas.java` relies on `GUI` to render most of the game's visual components. It uses `GUI` methods to display panels and manage internal frames.\n- Changes in `Canvas.java`, especially those affecting UI layout or interaction logic, can necessitate updates in `GUI` to maintain consistency in rendering and user experience.\n\n### Entities to Synchronize\nBased on co-change relationships and conceptual coupling, the following entities should be synchronized with changes made to `Canvas.java`:\n\n1. **InGameController**\n   - High co-change confidence (~29.01%) suggests frequent related modifications.\n   - Manages game progression and player actions that may influence UI behavior.\n\n2. **FreeColClient**\n   - Strong co-change relationship (~13.58% confidence).\n   - Coordinates client-side operations, including input handling and communication with the server.\n\n3. **GUI**\n   - High conceptual coupling (0.8327) indicates strong semantic overlap.\n   - Directly used by `Canvas.java` for rendering game visuals.\n\n4. **MapControls**\n   - Frequently changed together with `Canvas.java` (~7.41% confidence).\n   - Manages controls for navigating and interacting with the game map.\n\n### Final Steps\nTo ensure completeness, let's verify the coupling dependencies between `Canvas.java` and `MapControls` to understand how they interact directly.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_70107c693f1e474ba90b00",
                        "function": {
                            "arguments": "{\"entity1\": \"Canvas.java\", \"entity2\": \"MapControls\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m16": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"ReturnType(RT): Return Type found: getMapControls returns MapControls,  \", \"Class Member Variable Usage Variable (CMAUA): Coupling found in method updateSizes, at line: 367. Instance of MapControls member variable mapControls is used directly.  Coupling found in method getMapControls, at line: 2270. Instance of MapControls member variable mapControls is used directly.\"]"
            },
            "m17": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m18": {
                "content": "Title: Diagnosis of starting entity `Canvas.java`  \nChange set: [GUI, InGameController, FreeColClient, MapControls, InGameInputHandler, ActionManager, ColonyPanel, ServerListPanel, ClientOptionsDialog, TradeRouteDialog, MapGeneratorOptionsDialog, EuropePanel, StartGamePanel, ChatPanel, BuildQueuePanel, TilePanel, MonarchPanel, ReportPanel, FreeColDialog, StatusPanel, ColopediaPanel, EventPanel, ReportMilitaryPanel, ReportNavalPanel, ReportLabourPanel, ReportColonyPanel, ReportRequirementsPanel, ReportTurnPanel, ReportProductionPanel, ReportReligiousPanel, ReportHighScoresPanel, ReportIndianPanel, ReportForeignAffairPanel, ReportCargoPanel, ReportExplorationPanel, ReportHistoryPanel, ReportContinentalCongressPanel, ReportTradePanel, ReportEducationAction, ReportMilitaryAction, ReportProductionAction]  \n\nDetails:  \n- **GUI**: High conceptual coupling (0.8327) and direct usage in Canvas methods for rendering game visuals and managing UI state.  \n- **InGameController**: Frequently co-changed with high confidence (~29.01%), manages game progression affecting UI updates.  \n- **FreeColClient**: Strong co-change relationship (~13.58% confidence), coordinates client-side operations linked to UI actions.  \n- **MapControls**: Direct coupling dependencies found; used by Canvas for map navigation and control management.  \n- **InGameInputHandler**: Co-change support 27, likely involved in handling input that affects UI behavior.  \n- **ActionManager**: Co-change support 12, manages UI-triggered actions tied to Canvas-based interactions.  \n- **ColonyPanel**: Frequently displayed from Canvas, needs alignment in layout or interaction logic changes.  \n- **ServerListPanel**: Used in connection workflows initiated from Canvas.  \n- **ClientOptionsDialog**: Displayed via Canvas, needs synchronization if UI settings are affected.  \n- **TradeRouteDialog**: Triggered from internal frames managed by Canvas.  \n- **MapGeneratorOptionsDialog**: Related to game setup UI handled by Canvas.  \n- **EuropePanel**: Managed through Canvas's display logic during Europe-related views.  \n- **StartGamePanel**: Initialized and shown by Canvas, sensitive to startup UI flow changes.  \n- **ChatPanel**: Integrated into the main interface via Canvas.  \n- **BuildQueuePanel**: Opened from Canvas, affected by unit/building-related UI changes.  \n- **TilePanel**: Triggered for tile details, must align with Canvas rendering context.  \n- **MonarchPanel**: Tied to monarch action flows possibly triggered from Canvas-level events.  \n- **ReportPanel**: Base class for various reports shown via Canvas.  \n- **FreeColDialog**: Base dialog class, frequently extended by panels shown via Canvas.  \n- **StatusPanel**: Managed directly by Canvas for status updates.  \n- **ColopediaPanel**: Displayed as part of in-game information flow.  \n- **EventPanel**: Shown via Canvas for event notifications.  \n- **ReportMilitaryPanel, ReportNavalPanel, ReportLabourPanel, ReportColonyPanel, ReportRequirementsPanel, ReportTurnPanel, ReportProductionPanel, ReportReligiousPanel, ReportHighScoresPanel, ReportIndianPanel, ReportForeignAffairPanel, ReportCargoPanel, ReportExplorationPanel, ReportHistoryPanel, ReportContinentalCongressPanel, ReportTradePanel, ReportMilitaryAction, ReportProductionAction, ReportEducationAction**: All report panels/dialogs accessed through Canvas-driven logic, requiring synchronized visual or functional updates.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}