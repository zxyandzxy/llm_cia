{
    "time": 1749366350.7072651,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `OmegaT`, a well-known Java open source project. The starting entity you need to deal with is RepositoriesMappingController.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_5e629d3af3564b35affd65",
                    "function": {
                        "arguments": "{\"entity\": \"RepositoriesMappingController.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"RepositoriesMappingDialog\", \"1\", \"0.3333333333333333\"], [\"ProjectPropertiesDialog\", \"2\", \"0.6666666666666666\"], [\"TeamSettings\", \"1\", \"0.3333333333333333\"], [\"RepositoriesCredentialsController\", \"1\", \"0.3333333333333333\"], [\"ProjectUICommands\", \"1\", \"0.3333333333333333\"], [\"DialogsTest\", \"1\", \"0.3333333333333333\"]]"
        },
        {
            "content": "The `get_co_change_relationship` function returned the following co-changed entities with `RepositoriesMappingController.java`:\n\n1. **RepositoriesMappingDialog** (support: 1, confidence: 33.33%)\n2. **ProjectPropertiesDialog** (support: 2, confidence: 66.67%)\n3. **TeamSettings** (support: 1, confidence: 33.33%)\n4. **RepositoriesCredentialsController** (support: 1, confidence: 33.33%)\n5. **ProjectUICommands** (support: 1, confidence: 33.33%)\n6. **DialogsTest** (support: 1, confidence: 33.33%)\n\nSince `ProjectPropertiesDialog` has the highest confidence (66.67%) and support (2), it is most likely to be impacted by changes in `RepositoriesMappingController.java`.\n\nNext, I will analyze the coupling dependencies between `RepositoriesMappingController.java` and `ProjectPropertiesDialog` to understand their relationship better. \n\nI will call the `get_coupling_dependencies` function for these two entities.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_26739d19abc94955989d64",
                    "function": {
                        "arguments": "{\"entity1\": \"RepositoriesMappingController.java\", \"entity2\": \"ProjectPropertiesDialog\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "There are no direct coupling dependencies between `RepositoriesMappingController.java` and `ProjectPropertiesDialog`. This suggests that the co-change relationship might be due to indirect interactions or shared functionality rather than direct code dependencies.\n\nTo further investigate, I will examine the conceptual coupling (semantic similarity) between these two entities using the `get_conceptual_coupling` function. This will help determine if they share similar functionality or logic from a semantic perspective.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_72f1d5c7ca8742eca026d5",
                    "function": {
                        "arguments": "{\"entity1\": \"RepositoriesMappingController.java\", \"entity2\": \"ProjectPropertiesDialog\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.83983535\""
        },
        {
            "content": "The conceptual coupling (semantic similarity) between `RepositoriesMappingController.java` and `ProjectPropertiesDialog` is **0.8398**, which indicates a high degree of semantic similarity. This suggests that, while there are no direct coupling dependencies, the two entities likely share similar functionality or logic.\n\nThis strong semantic relationship supports the co-change findings, indicating that changes in `RepositoriesMappingController.java` could impact `ProjectPropertiesDialog`.\n\nTo better understand how these entities interact, I will now examine the call graph of `RepositoriesMappingController.java` to identify any indirect dependencies or usages within the system.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_495d0e8d13be482583e8e9",
                    "function": {
                        "arguments": "{\"entity\": \"RepositoriesMappingController.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"RepositoryDefinition\", \"DockingUI\", \"OStrings\", \"RepositoryMapping\"]"
        },
        {
            "content": "The call graph of `RepositoriesMappingController.java` reveals that it interacts with the following entities:\n\n1. **RepositoryDefinition**\n2. **DockingUI**\n3. **OStrings**\n4. **RepositoryMapping**\n\nThese entities may be indirectly involved in the ripple effect of changes to `RepositoriesMappingController.java`.\n\nGiven the high conceptual coupling and co-change relationship with `ProjectPropertiesDialog`, as well as the indirect dependencies identified in the call graph, it is important to examine whether any of the entities in the call graph (e.g., `RepositoryDefinition`, `RepositoryMapping`) also have strong co-change or coupling relationships with `ProjectPropertiesDialog`.\n\nI will now analyze the coupling dependencies between `ProjectPropertiesDialog` and `RepositoryDefinition`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_2999af09e8a248dd823067",
                    "function": {
                        "arguments": "{\"entity1\": \"ProjectPropertiesDialog\", \"entity2\": \"RepositoryDefinition\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "There are no direct coupling dependencies between `ProjectPropertiesDialog` and `RepositoryDefinition`.\n\nGiven that both the direct coupling analysis and the conceptual coupling analysis have not revealed a direct dependency, it's possible that the co-change relationship is due to higher-order interactions or shared context within the application logic.\n\nTo better understand the context of `RepositoriesMappingController.java`, I will retrieve and examine its source code using the `get_origin_code` function. This will help identify the nature of its interactions with other components and potentially reveal why it has a strong co-change relationship with entities like `ProjectPropertiesDialog`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_077cf3c155e44ca6a3b594",
                    "function": {
                        "arguments": "{\"entity\": \"RepositoriesMappingController.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.omegat.gui.dialogs;\\nimport gen.core.project.RepositoryDefinition;\\nimport gen.core.project.RepositoryMapping;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.text.MessageFormat;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Set;\\nimport java.util.TreeSet;\\nimport javax.swing.DefaultCellEditor;\\nimport javax.swing.JComboBox;\\nimport javax.swing.JFrame;\\nimport javax.swing.JOptionPane;\\nimport javax.swing.table.AbstractTableModel;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.omegat.util.OStrings;\\nimport org.omegat.util.gui.DockingUI;\\npublic class RepositoriesMappingController {\\n    private List<RepositoryDefinition> result;\\n    private RepositoriesMappingDialog dialog;\\n    private AbstractTableModel modelRepo;\\n    private List<RowRepo> listRepo;\\n    private AbstractTableModel modelMapping;\\n    private List<RowMapping> listMapping;\\n    public List<RepositoryDefinition> show(JFrame parent, List<RepositoryDefinition> input) {\\n        dialog = new RepositoriesMappingDialog(parent, true);\\n        DockingUI.displayCentered(dialog);\\n        listRepo = new ArrayList<RowRepo>();\\n        listMapping = new ArrayList<RowMapping>();\\n        putData(input);\\n        initTableModels();\\n        initButtons();\\n        reinitRepoUrlDropdown();\\n        dialog.setVisible(true);\\n        return result;\\n    }\\n    void initTableModels() {\\n        modelRepo = new AbstractTableModel() {\\n            @Override\\n            public Object getValueAt(int rowIndex, int columnIndex) {\\n                RowRepo r = listRepo.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    return r.type;\\n                case 1:\\n                    return r.url;\\n                }\\n                return null;\\n            }\\n            @Override\\n            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {\\n                RowRepo r = listRepo.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    r.type = (String) aValue;\\n                    break;\\n                case 1:\\n                    String old = r.url;\\n                    r.url = (String) aValue;\\n                    changeRepoUrl(old, r.url);\\n                    reinitRepoUrlDropdown();\\n                    break;\\n                }\\n            }\\n            @Override\\n            public int getRowCount() {\\n                return listRepo.size();\\n            }\\n            @Override\\n            public int getColumnCount() {\\n                return 2;\\n            }\\n            @Override\\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\\n                return true;\\n            }\\n            @Override\\n            public String getColumnName(int column) {\\n                switch (column) {\\n                case 0:\\n                    return OStrings.getString(\\\"RMD_TABLE_REPOSITORIES_TYPE\\\");\\n                case 1:\\n                    return OStrings.getString(\\\"RMD_TABLE_REPOSITORIES_URL\\\");\\n                }\\n                return null;\\n            }\\n        };\\n        dialog.tableRepositories.setModel(modelRepo);\\n        JComboBox<String> comboBox = new JComboBox<>();\\n        comboBox.addItem(\\\"svn\\\");\\n        comboBox.addItem(\\\"git\\\");\\n        dialog.tableRepositories.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboBox));\\n        modelMapping = new AbstractTableModel() {\\n            @Override\\n            public Object getValueAt(int rowIndex, int columnIndex) {\\n                RowMapping r = listMapping.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    return r.repoUrl;\\n                case 1:\\n                    return r.local;\\n                case 2:\\n                    return r.remote;\\n                case 3:\\n                    return r.excludes;\\n                case 4:\\n                    return r.includes;\\n                }\\n                return null;\\n            }\\n            @Override\\n            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {\\n                RowMapping r = listMapping.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    r.repoUrl = (String) aValue;\\n                    break;\\n                case 1:\\n                    r.local = (String) aValue;\\n                    break;\\n                case 2:\\n                    r.remote = (String) aValue;\\n                    break;\\n                case 3:\\n                    r.excludes = (String) aValue;\\n                    break;\\n                case 4:\\n                    r.includes = (String) aValue;\\n                    break;\\n                }\\n            }\\n            @Override\\n            public int getRowCount() {\\n                return listMapping.size();\\n            }\\n            @Override\\n            public int getColumnCount() {\\n                return 5;\\n            }\\n            @Override\\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\\n                return true;\\n            }\\n            @Override\\n            public String getColumnName(int column) {\\n                switch (column) {\\n                case 0:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_REPO\\\");\\n                case 1:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_LOCAL\\\");\\n                case 2:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_REMOTE\\\");\\n                case 3:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_EXCLUDES\\\");\\n                case 4:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_INCLUDES\\\");\\n                }\\n                return null;\\n            }\\n        };\\n        dialog.tableMapping.setModel(modelMapping);\\n    }\\n    void initButtons() {\\n        dialog.cancelButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                dialog.dispose();\\n            }\\n        });\\n        dialog.okButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                String r = isValid();\\n                if (r != null) {\\n                    JOptionPane.showMessageDialog(dialog, r, OStrings.getString(\\\"TF_ERROR\\\"),\\n                            JOptionPane.ERROR_MESSAGE);\\n                    return;\\n                }\\n                result = getData();\\n                dialog.dispose();\\n            }\\n        });\\n        dialog.btnRepoAdd.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                listRepo.add(new RowRepo());\\n                modelRepo.fireTableRowsInserted(listRepo.size() - 1, listRepo.size() - 1);\\n            }\\n        });\\n        dialog.btnRepoRemove.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                int r = dialog.tableRepositories.getSelectedRow();\\n                if (r >= 0) {\\n                    listRepo.remove(r);\\n                    modelRepo.fireTableRowsDeleted(r, r);\\n                }\\n            }\\n        });\\n        dialog.btnMappingAdd.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                listMapping.add(new RowMapping());\\n                modelMapping.fireTableRowsInserted(listMapping.size() - 1, listMapping.size() - 1);\\n            }\\n        });\\n        dialog.btnMappingRemove.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                int r = dialog.tableMapping.getSelectedRow();\\n                if (r >= 0) {\\n                    listMapping.remove(r);\\n                    modelMapping.fireTableRowsDeleted(r, r);\\n                }\\n            }\\n        });\\n    }\\n    void changeRepoUrl(String oldUrl, String newUrl) {\\n        if (oldUrl == null) {\\n            return;\\n        }\\n        for (int i = 0; i < listMapping.size(); i++) {\\n            if (oldUrl.equals(listMapping.get(i).repoUrl)) {\\n                listMapping.get(i).repoUrl = newUrl;\\n                modelMapping.fireTableCellUpdated(i, 0);\\n            }\\n        }\\n    }\\n    void reinitRepoUrlDropdown() {\\n        JComboBox<String> comboBox = new JComboBox<>();\\n        for (RowRepo r : listRepo) {\\n            comboBox.addItem(r.url);\\n        }\\n        dialog.tableMapping.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboBox));\\n    }\\n    String isValid() {\\n        Set<String> urls = new TreeSet<String>();\\n        for (RowRepo r : listRepo) {\\n            if (StringUtils.isBlank(r.url)) {\\n                return OStrings.getString(\\\"RMD_INVALID_BLANK_REPO\\\");\\n            }\\n            if (!\\\"svn\\\".equals(r.type) && !\\\"git\\\".equals(r.type)) {\\n                return MessageFormat.format(OStrings.getString(\\\"RMD_INVALID_REPO_TYPE\\\"), r.type);\\n            }\\n            if (!urls.add(r.url)) {\\n                return MessageFormat.format(OStrings.getString(\\\"RMD_INVALID_DUPLICATE_REPO\\\"), r.url);\\n            }\\n        }\\n        for (RowMapping r : listMapping) {\\n            if (StringUtils.isBlank(r.repoUrl)) {\\n                return OStrings.getString(\\\"RMD_INVALID_BLANK_REPO\\\");\\n            }\\n            if (!urls.contains(r.repoUrl)) {\\n                return MessageFormat.format(OStrings.getString(\\\"RMD_INVALID_UNKNOWN_REPO\\\"), r.repoUrl);\\n            }\\n        }\\n        return null;\\n    }\\n    void putData(List<RepositoryDefinition> data) {\\n        if (data == null) {\\n            return;\\n        }\\n        for (RepositoryDefinition rd : data) {\\n            RowRepo r = new RowRepo();\\n            r.type = rd.getType();\\n            r.url = rd.getUrl();\\n            listRepo.add(r);\\n            for (RepositoryMapping rm : rd.getMapping()) {\\n                RowMapping m = new RowMapping();\\n                m.repoUrl = rd.getUrl();\\n                m.local = rm.getLocal();\\n                m.remote = rm.getRepository();\\n                m.excludes = merge(rm.getExcludes());\\n                m.includes = merge(rm.getIncludes());\\n                listMapping.add(m);\\n            }\\n        }\\n    }\\n    String merge(List<String> data) {\\n        if (data.isEmpty()) {\\n            return \\\"\\\";\\n        }\\n        String r = \\\"\\\";\\n        for (String d : data) {\\n            r += \\\";\\\" + d;\\n        }\\n        return r.substring(1);\\n    }\\n    List<RepositoryDefinition> getData() {\\n        List<RepositoryDefinition> result = new ArrayList<RepositoryDefinition>();\\n        for (RowRepo r : listRepo) {\\n            RepositoryDefinition rd = new RepositoryDefinition();\\n            rd.setType(r.type);\\n            rd.setUrl(r.url);\\n            result.add(rd);\\n            for (RowMapping m : listMapping) {\\n                if (r.url.equals(m.repoUrl)) {\\n                    RepositoryMapping rm = new RepositoryMapping();\\n                    rm.setLocal(m.local != null ? m.local : \\\"\\\");\\n                    rm.setRepository(m.remote != null ? m.remote : \\\"\\\");\\n                    if (StringUtils.isNotBlank(m.excludes)) {\\n                        rm.getExcludes().addAll(Arrays.asList(m.excludes.trim().split(\\\";\\\")));\\n                    }\\n                    if (StringUtils.isNotBlank(m.includes)) {\\n                        rm.getIncludes().addAll(Arrays.asList(m.includes.trim().split(\\\";\\\")));\\n                    }\\n                    rd.getMapping().add(rm);\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n    static class RowRepo {\\n        public String type;\\n        public String url;\\n    }\\n    static class RowMapping {\\n        public String repoUrl;\\n        public String local;\\n        public String remote;\\n        public String excludes;\\n        public String includes;\\n    }\\n}\""
        },
        {
            "content": "The source code of `RepositoriesMappingController.java` reveals the following key insights:\n\n1. **Functionality**:  \n   - This class is responsible for managing repository mappings in a dialog-based UI.\n   - It interacts with two main data structures:\n     - `RepositoryDefinition`: Represents repository definitions (type and URL).\n     - `RepositoryMapping`: Represents how repositories are mapped (local, remote, includes, excludes).\n\n2. **UI Interaction**:\n   - The controller uses `RepositoriesMappingDialog` to display and edit repository data.\n   - It initializes table models for repositories and mappings.\n   - Implements actions for buttons like \"Add\", \"Remove\", \"OK\", and \"Cancel\".\n\n3. **Key Dependencies**:\n   - Directly imports and uses:\n     - `RepositoryDefinition` and `RepositoryMapping` (from `gen.core.project`)\n     - `OStrings` (for string localization)\n     - `DockingUI` (for UI layout/display)\n\n4. **Data Flow**:\n   - `putData()` and `getData()` methods handle conversion between UI rows (`RowRepo`, `RowMapping`) and core data models (`RepositoryDefinition`, `RepositoryMapping`).\n   - Changes in repository URLs propagate through mappings.\n\n### Impact Analysis\n\nGiven this structure, changes to `RepositoriesMappingController.java` may impact:\n- **RepositoriesMappingDialog**: As it's tightly bound to the UI logic.\n- **RepositoryDefinition** and **RepositoryMapping**: Core data models used throughout the system.\n- **ProjectPropertiesDialog**: Has high conceptual coupling and co-change history, suggesting shared context or usage elsewhere in the application.\n\n### Next Steps\n\nTo ensure synchronization across impacted entities, I will now retrieve the source code for `ProjectPropertiesDialog` using `get_origin_code`. This will help identify potential overlaps or shared functionality that explains the strong conceptual coupling and co-change relationship.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_931531d85cbd45bb84e5c6",
                    "function": {
                        "arguments": "{\"entity\": \"ProjectPropertiesDialog\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.omegat.gui.dialogs;\\nimport java.awt.BorderLayout;\\nimport java.awt.Color;\\nimport java.awt.Dimension;\\nimport java.awt.GridBagConstraints;\\nimport java.awt.GridBagLayout;\\nimport java.awt.Insets;\\nimport java.awt.Label;\\nimport java.awt.Rectangle;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.io.File;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport javax.swing.AbstractAction;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.Box;\\nimport javax.swing.BoxLayout;\\nimport javax.swing.DefaultComboBoxModel;\\nimport javax.swing.JButton;\\nimport javax.swing.JCheckBox;\\nimport javax.swing.JComboBox;\\nimport javax.swing.JDialog;\\nimport javax.swing.JFrame;\\nimport javax.swing.JLabel;\\nimport javax.swing.JOptionPane;\\nimport javax.swing.JPanel;\\nimport javax.swing.JScrollPane;\\nimport javax.swing.JTextArea;\\nimport javax.swing.JTextField;\\nimport javax.swing.Scrollable;\\nimport javax.swing.border.Border;\\nimport javax.swing.border.EmptyBorder;\\nimport javax.swing.border.EtchedBorder;\\nimport org.apache.lucene.util.Version;\\nimport org.omegat.CLIParameters;\\nimport org.omegat.core.Core;\\nimport org.omegat.core.data.CommandVarExpansion;\\nimport org.omegat.core.data.ProjectProperties;\\nimport org.omegat.core.segmentation.SRX;\\nimport org.omegat.filters2.master.FilterMaster;\\nimport org.omegat.filters2.master.PluginUtils;\\nimport org.omegat.gui.filters2.FiltersCustomizer;\\nimport org.omegat.gui.segmentation.SegmentationCustomizer;\\nimport org.omegat.tokenizer.DefaultTokenizer;\\nimport org.omegat.tokenizer.ITokenizer;\\nimport org.omegat.util.Language;\\nimport org.omegat.util.Log;\\nimport org.omegat.util.OConsts;\\nimport org.omegat.util.OStrings;\\nimport org.omegat.util.Preferences;\\nimport org.omegat.util.StaticUtils;\\nimport org.omegat.util.StringUtil;\\nimport org.omegat.util.gui.DockingUI;\\nimport org.omegat.util.gui.LanguageComboBoxRenderer;\\nimport org.omegat.util.gui.OmegaTFileChooser;\\nimport org.omegat.util.gui.StaticUIUtils;\\nimport org.omegat.util.gui.TokenizerBehaviorComboBoxRenderer;\\nimport org.omegat.util.gui.TokenizerComboBoxRenderer;\\nimport org.openide.awt.Mnemonics;\\nimport gen.core.filters.Filters;\\nimport gen.core.project.RepositoryDefinition;\\n@SuppressWarnings(\\\"serial\\\")\\npublic class ProjectPropertiesDialog extends JDialog {\\n    private ProjectProperties projectProperties;\\n    public enum Mode {\\n        NEW_PROJECT,\\n        RESOLVE_DIRS,\\n        EDIT_PROJECT\\n    }\\n    private Mode dialogType;\\n    private SRX srx;\\n    private Filters filters;\\n    private List<String> srcExcludes = new ArrayList<>();\\n    public ProjectPropertiesDialog(final ProjectProperties projectProperties, String projFileName,\\n            Mode dialogTypeValue) {\\n        super(Core.getMainWindow().getApplicationFrame(), true);\\n        this.projectProperties = projectProperties;\\n        this.srx = projectProperties.getProjectSRX();\\n        this.dialogType = dialogTypeValue;\\n        filters = FilterMaster.loadConfig(projectProperties.getProjectInternal());\\n        srcExcludes.addAll(projectProperties.getSourceRootExcludes());\\n        Border emptyBorder = new EmptyBorder(2, 0, 2, 0);\\n        Box centerBox = new ScrollableBox(BoxLayout.Y_AXIS);\\n                centerBox.setBackground(getBackground());\\n        centerBox.setOpaque(true);\\n        centerBox.setBorder(new EmptyBorder(5, 5, 5, 5));\\n                JTextArea m_messageArea = new JTextArea();\\n        m_messageArea.setEditable(false);\\n        m_messageArea.setOpaque(false);\\n        m_messageArea.setFont(new Label().getFont());\\n        Box bMes = Box.createHorizontalBox();\\n        bMes.setBorder(emptyBorder);\\n        bMes.add(m_messageArea);\\n        bMes.add(Box.createHorizontalGlue());\\n        centerBox.add(bMes);\\n                Box localesBox = Box.createHorizontalBox();\\n        localesBox.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), OStrings.getString(\\\"PP_LANGUAGES\\\") ));\\n                Box bL = Box.createVerticalBox();\\n        localesBox.add(bL);\\n                JLabel m_sourceLocaleLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_sourceLocaleLabel, OStrings.getString(\\\"PP_SRC_LANG\\\"));\\n        Box bSL = Box.createHorizontalBox();\\n        bSL.setBorder(emptyBorder);\\n        bSL.add(m_sourceLocaleLabel);\\n        bSL.add(Box.createHorizontalGlue());\\n        bL.add(bSL);\\n                final JComboBox<Language> m_sourceLocaleField = new JComboBox<>(Language.LANGUAGES);\\n        if (m_sourceLocaleField.getMaximumRowCount() < 20) \\n            m_sourceLocaleField.setMaximumRowCount(20);\\n        m_sourceLocaleField.setEditable(true);\\n        m_sourceLocaleField.setRenderer(new LanguageComboBoxRenderer());\\n        m_sourceLocaleField.setSelectedItem(projectProperties.getSourceLanguage());\\n        bL.add(m_sourceLocaleField);\\n                JLabel m_targetLocaleLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_targetLocaleLabel, OStrings.getString(\\\"PP_LOC_LANG\\\"));\\n        Box bLL = Box.createHorizontalBox();\\n        bLL.setBorder(emptyBorder);\\n        bLL.add(m_targetLocaleLabel);\\n        bLL.add(Box.createHorizontalGlue());\\n        bL.add(bLL);\\n                final JComboBox<Language> m_targetLocaleField = new JComboBox<>(Language.LANGUAGES);\\n        if (m_targetLocaleField.getMaximumRowCount() < 20)\\n            m_targetLocaleField.setMaximumRowCount(20);\\n        m_targetLocaleField.setEditable(true);\\n        m_targetLocaleField.setRenderer(new LanguageComboBoxRenderer());\\n        m_targetLocaleField.setSelectedItem(projectProperties.getTargetLanguage());\\n        bL.add(m_targetLocaleField);\\n                Box bT = Box.createVerticalBox();\\n        localesBox.add(bT);\\n        Class<?>[] tokenizers = PluginUtils.getTokenizerClasses().toArray(new Class<?>[0]);\\n                JLabel m_sourceTokenizerLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_sourceTokenizerLabel, OStrings.getString(\\\"PP_SRC_TOK\\\"));\\n        Box bST = Box.createHorizontalBox();\\n        bST.setBorder(emptyBorder);\\n        bST.add(m_sourceTokenizerLabel);\\n        bST.add(Box.createHorizontalGlue());\\n        bT.add(bST);\\n                final JComboBox<Class<?>> m_sourceTokenizerField = new JComboBox<>(tokenizers);\\n        if (m_sourceTokenizerField.getMaximumRowCount() < 20)\\n            m_sourceTokenizerField.setMaximumRowCount(20);\\n        m_sourceTokenizerField.setEditable(false);\\n        m_sourceTokenizerField.setRenderer(new TokenizerComboBoxRenderer());\\n        m_sourceTokenizerField.setSelectedItem(projectProperties.getSourceTokenizer());\\n        bT.add(m_sourceTokenizerField);\\n        String cliTokSrc = Core.getParams().get(CLIParameters.TOKENIZER_SOURCE);\\n        if (cliTokSrc != null) {\\n            try {\\n                Class<?> srcTokClass = Class.forName(cliTokSrc);\\n                m_sourceTokenizerField.setEnabled(false);\\n                m_sourceTokenizerField.addItem(srcTokClass);\\n                m_sourceTokenizerField.setSelectedItem(cliTokSrc);\\n            } catch (ClassNotFoundException | LinkageError ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_sourceLocaleField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_sourceLocaleField.isEnabled()) return;\\n                Object newLang = m_sourceLocaleField.getSelectedItem();\\n                if (newLang instanceof String) {\\n                    newLang = new Language((String)newLang);\\n                }\\n                Class<?> newTok = PluginUtils.getTokenizerClassForLanguage((Language)newLang);\\n                m_sourceTokenizerField.setSelectedItem(newTok);\\n            }});\\n                JLabel m_targetTokenizerLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_targetTokenizerLabel, OStrings.getString(\\\"PP_LOC_TOK\\\"));\\n        Box bTT = Box.createHorizontalBox();\\n        bTT.setBorder(emptyBorder);\\n        bTT.add(m_targetTokenizerLabel);\\n        bTT.add(Box.createHorizontalGlue());\\n        bT.add(bTT);\\n                final JComboBox<Class<?>> m_targetTokenizerField = new JComboBox<>(tokenizers);\\n        if (m_targetTokenizerField.getMaximumRowCount() < 20)\\n            m_targetTokenizerField.setMaximumRowCount(20);\\n        m_targetTokenizerField.setEditable(false);\\n        m_targetTokenizerField.setRenderer(new TokenizerComboBoxRenderer());\\n        m_targetTokenizerField.setSelectedItem(projectProperties.getTargetTokenizer());\\n        bT.add(m_targetTokenizerField);\\n        String cliTokTrg = Core.getParams().get(CLIParameters.TOKENIZER_TARGET);\\n        if (cliTokTrg != null) {\\n            try {\\n                Class<?> trgTokClass = Class.forName(cliTokTrg);\\n                m_targetTokenizerField.setEnabled(false);\\n                m_targetTokenizerField.addItem(trgTokClass);\\n                m_targetTokenizerField.setSelectedItem(cliTokTrg);\\n            } catch (ClassNotFoundException | LinkageError ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_targetLocaleField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_targetLocaleField.isEnabled()) return;\\n                Object newLang = m_targetLocaleField.getSelectedItem();\\n                if (newLang instanceof String) {\\n                    newLang = new Language((String)newLang);\\n                }\\n                Class<?> newTok = PluginUtils.getTokenizerClassForLanguage((Language)newLang);\\n                m_targetTokenizerField.setSelectedItem(newTok);\\n            }});\\n                Box bB = Box.createVerticalBox();\\n        localesBox.add(bB);\\n                JLabel m_sourceTokenizerBehaviorLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_sourceTokenizerBehaviorLabel, OStrings.getString(\\\"PP_SRC_TOK_BEHAVIOR\\\"));\\n        Box bSTB = Box.createHorizontalBox();\\n        bSTB.setBorder(emptyBorder);\\n        bSTB.add(m_sourceTokenizerBehaviorLabel);\\n        bSTB.add(Box.createHorizontalGlue());\\n        bB.add(bSTB);\\n                Class<?> srcTokClass = projectProperties.getSourceTokenizer();\\n        ITokenizer srcTok;\\n        try {\\n            srcTok = (ITokenizer) srcTokClass.newInstance();\\n        } catch (Exception e) {\\n            srcTok = new DefaultTokenizer();\\n        }\\n        final JComboBox<Version> m_sourceTokenizerBehaviorField = new JComboBox<>(\\n                srcTok.getSupportedBehaviors().keySet().toArray(new Version[0]));\\n        m_sourceTokenizerBehaviorField.setEnabled(!srcTok.getSupportedBehaviors().isEmpty());\\n        if (m_sourceTokenizerBehaviorField.getMaximumRowCount() < 20)\\n            m_sourceTokenizerBehaviorField.setMaximumRowCount(20);\\n        m_sourceTokenizerBehaviorField.setEditable(false);\\n        m_sourceTokenizerBehaviorField.setRenderer(\\n                new TokenizerBehaviorComboBoxRenderer(srcTok.getSupportedBehaviors(),\\n                        srcTok.getDefaultBehavior()));\\n        m_sourceTokenizerBehaviorField.setSelectedItem(srcTok.getBehavior());\\n        bB.add(m_sourceTokenizerBehaviorField);\\n        if (!m_sourceTokenizerField.isEnabled()) {\\n            m_sourceTokenizerBehaviorField.setEnabled(false);\\n        }\\n        final String cliTokSrcBehavior = Core.getParams().get(CLIParameters.TOKENIZER_BEHAVIOR_SOURCE);\\n        if (cliTokSrcBehavior != null) {\\n            try {\\n                Version cliTokSrcVersion = Version.valueOf(cliTokSrcBehavior);\\n                m_sourceTokenizerBehaviorField.setEnabled(false);\\n                m_sourceTokenizerBehaviorField.addItem(cliTokSrcVersion);\\n                m_sourceTokenizerBehaviorField.setSelectedItem(cliTokSrcBehavior);\\n            } catch (IllegalArgumentException ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_sourceTokenizerField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_sourceTokenizerField.isEnabled()) {\\n                    return;\\n                }\\n                if (cliTokSrcBehavior != null) {\\n                    return;\\n                }\\n                Object cls = m_sourceTokenizerField.getSelectedItem();\\n                if (!(cls instanceof Class<?>)) {\\n                    return;\\n                }\\n                ITokenizer newTok;\\n                try {\\n                    newTok = (ITokenizer)((Class<?>) cls).newInstance();\\n                    m_sourceTokenizerBehaviorField.setRenderer(\\n                            new TokenizerBehaviorComboBoxRenderer(newTok.getSupportedBehaviors(),\\n                                    newTok.getDefaultBehavior()));\\n                    m_sourceTokenizerBehaviorField.setModel(new DefaultComboBoxModel<>(\\n                            newTok.getSupportedBehaviors().keySet().toArray(new Version[0])));\\n                    if (m_sourceTokenizerBehaviorField.getModel().getSize() > 0) {\\n                        m_sourceTokenizerBehaviorField.setEnabled(true);\\n                        m_sourceTokenizerBehaviorField.setSelectedItem(newTok.getBehavior());\\n                    } else {\\n                        m_sourceTokenizerBehaviorField.setEnabled(false);\\n                    }\\n                } catch (InstantiationException | IllegalAccessException ex) {\\n                }\\n            }});\\n                JLabel m_targetTokenizerBehaviorLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_targetTokenizerBehaviorLabel, OStrings.getString(\\\"PP_LOC_TOK_BEHAVIOR\\\"));\\n        Box bTTB = Box.createHorizontalBox();\\n        bTTB.setBorder(emptyBorder);\\n        bTTB.add(m_targetTokenizerBehaviorLabel);\\n        bTTB.add(Box.createHorizontalGlue());\\n        bB.add(bTTB);\\n                Class<?> trgTokClass = projectProperties.getTargetTokenizer();\\n        ITokenizer trgTok;\\n        try {\\n            trgTok = (ITokenizer) trgTokClass.newInstance();\\n        } catch (InstantiationException | IllegalAccessException e) {\\n            trgTok = new DefaultTokenizer();\\n        }\\n        final JComboBox<Version> m_targetTokenizerBehaviorField = new JComboBox<>(\\n                trgTok.getSupportedBehaviors().keySet().toArray(new Version[0]));\\n        m_targetTokenizerBehaviorField.setEnabled(!trgTok.getSupportedBehaviors().isEmpty());\\n        if (m_targetTokenizerBehaviorField.getMaximumRowCount() < 20)\\n            m_targetTokenizerBehaviorField.setMaximumRowCount(20);\\n        m_targetTokenizerBehaviorField.setEditable(false);\\n        m_targetTokenizerBehaviorField.setRenderer(\\n                new TokenizerBehaviorComboBoxRenderer(trgTok.getSupportedBehaviors(),\\n                        trgTok.getDefaultBehavior()));\\n        m_targetTokenizerBehaviorField.setSelectedItem(trgTok.getBehavior());\\n        bB.add(m_targetTokenizerBehaviorField);\\n        if (!m_targetTokenizerField.isEnabled()) {\\n            m_targetTokenizerBehaviorField.setEnabled(false);\\n        }\\n        final String cliTokTrgBehavior = Core.getParams().get(CLIParameters.TOKENIZER_BEHAVIOR_TARGET);\\n        if (cliTokTrgBehavior != null) {\\n            try {\\n                Version cliTokTrgVersion = Version.valueOf(cliTokTrgBehavior);\\n                m_targetTokenizerBehaviorField.setEnabled(false);\\n                m_targetTokenizerBehaviorField.addItem(cliTokTrgVersion);\\n                m_targetTokenizerBehaviorField.setSelectedItem(cliTokTrgBehavior);\\n            } catch (IllegalArgumentException ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_targetTokenizerField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_targetTokenizerField.isEnabled()) {\\n                    return;\\n                }\\n                if (cliTokTrgBehavior != null) {\\n                    return;\\n                }\\n                Object cls = m_targetTokenizerField.getSelectedItem();\\n                if (!(cls instanceof Class<?>)) {\\n                    return;\\n                }\\n                ITokenizer newTok;\\n                try {\\n                    newTok = (ITokenizer)((Class<?>) cls).newInstance();\\n                    m_targetTokenizerBehaviorField.setRenderer(\\n                            new TokenizerBehaviorComboBoxRenderer(newTok.getSupportedBehaviors(),\\n                                    newTok.getDefaultBehavior()));\\n                    m_targetTokenizerBehaviorField.setModel(new DefaultComboBoxModel<Version>(\\n                            newTok.getSupportedBehaviors().keySet().toArray(new Version[0])));\\n                    if (m_targetTokenizerBehaviorField.getModel().getSize() > 0) {\\n                        m_targetTokenizerBehaviorField.setEnabled(true);\\n                        m_targetTokenizerBehaviorField.setSelectedItem(newTok.getBehavior());\\n                    } else {\\n                        m_targetTokenizerBehaviorField.setEnabled(false);\\n                    }\\n                } catch (InstantiationException | IllegalAccessException ex) {\\n                }\\n            }});\\n        centerBox.add(localesBox);\\n                centerBox.add(Box.createVerticalStrut(5));\\n        JPanel optionsBox = new JPanel(new GridBagLayout());\\n        optionsBox.setBorder(new EtchedBorder());\\n        optionsBox.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),\\n                OStrings.getString(\\\"PP_OPTIONS\\\")));\\n        GridBagConstraints gbc = new GridBagConstraints();\\n        gbc.insets = new Insets(3, 3, 3, 3);\\n                final JCheckBox m_sentenceSegmentingCheckBox = new JCheckBox();\\n        Mnemonics\\n                .setLocalizedText(m_sentenceSegmentingCheckBox, OStrings.getString(\\\"PP_SENTENCE_SEGMENTING\\\"));\\n        gbc.gridx = 0;\\n        gbc.gridy = 0;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_sentenceSegmentingCheckBox, gbc);\\n        JButton m_sentenceSegmentingButton = new JButton();\\n        Mnemonics.setLocalizedText(m_sentenceSegmentingButton, OStrings.getString(\\\"MW_OPTIONSMENU_SENTSEG\\\"));\\n        gbc.gridx = 1;\\n        gbc.gridy = 0;\\n        gbc.anchor = GridBagConstraints.EAST;\\n        optionsBox.add(m_sentenceSegmentingButton, gbc);\\n                JButton m_fileFiltersButton = new JButton();\\n        Mnemonics.setLocalizedText(m_fileFiltersButton, OStrings.getString(\\\"WM_PROJECTMENU_FILEFILTERS\\\"));\\n        gbc.gridx = 1;\\n        gbc.gridy = 1;\\n        gbc.anchor = GridBagConstraints.EAST;\\n        optionsBox.add(m_fileFiltersButton, gbc);\\n                JButton m_RepositoriesButton = new JButton();\\n        Mnemonics.setLocalizedText(m_RepositoriesButton, OStrings.getString(\\\"PP_REPOSITORIES\\\"));\\n        gbc.gridx = 1;\\n        gbc.gridy = 2;\\n        gbc.anchor = GridBagConstraints.EAST;\\n        optionsBox.add(m_RepositoriesButton, gbc);\\n                final JCheckBox m_allowDefaultsCheckBox = new JCheckBox();\\n        Mnemonics.setLocalizedText(m_allowDefaultsCheckBox, OStrings.getString(\\\"PP_ALLOW_DEFAULTS\\\"));\\n        gbc.gridx = 0;\\n        gbc.gridy = 1;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_allowDefaultsCheckBox, gbc);\\n                final JCheckBox m_removeTagsCheckBox = new JCheckBox();\\n        Mnemonics.setLocalizedText(m_removeTagsCheckBox, OStrings.getString(\\\"PP_REMOVE_TAGS\\\"));\\n        gbc.gridx = 0;\\n        gbc.gridy = 2;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_removeTagsCheckBox, gbc);\\n                JLabel m_externalCommandLabel = new JLabel();\\n        gbc.gridx = 0;\\n        gbc.gridy = 3;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_externalCommandLabel, gbc);\\n        final JTextArea m_externalCommandTextArea = new JTextArea();\\n        m_externalCommandTextArea.setRows(2);\\n        m_externalCommandTextArea.setLineWrap(true);\\n        m_externalCommandTextArea.setText(projectProperties.getExternalCommand());\\n        if (Preferences.isPreference(Preferences.ALLOW_PROJECT_EXTERN_CMD)) {\\n            Mnemonics.setLocalizedText(m_externalCommandLabel, OStrings.getString(\\\"PP_EXTERNAL_COMMAND\\\"));\\n        } else {\\n            Mnemonics.setLocalizedText(m_externalCommandLabel, OStrings.getString(\\\"PP_EXTERN_CMD_DISABLED\\\"));\\n            m_externalCommandTextArea.setEditable(false);\\n            m_externalCommandTextArea.setToolTipText(OStrings.getString(\\\"PP_EXTERN_CMD_DISABLED_TOOLTIP\\\"));\\n            m_externalCommandLabel.setToolTipText(OStrings.getString(\\\"PP_EXTERN_CMD_DISABLED_TOOLTIP\\\"));\\n            m_externalCommandTextArea.setBackground(getBackground());\\n        }\\n        final JScrollPane m_externalCommandScrollPane = new JScrollPane();\\n        m_externalCommandScrollPane.setViewportView(m_externalCommandTextArea);\\n        gbc.gridx = 0;\\n        gbc.gridy = 4;\\n        gbc.weightx = 1;\\n        gbc.gridwidth = 2;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        gbc.fill = GridBagConstraints.HORIZONTAL;\\n        optionsBox.add(m_externalCommandScrollPane, gbc);\\n        final JLabel m_variablesLabel = new javax.swing.JLabel();\\n        final JComboBox<String> m_variablesList = new JComboBox<>(CommandVarExpansion.COMMAND_VARIABLES);\\n        final JButton m_insertButton = new javax.swing.JButton();\\n                if (Preferences.isPreference(Preferences.ALLOW_PROJECT_EXTERN_CMD)) {\\n            Mnemonics.setLocalizedText(m_variablesLabel,\\n                    OStrings.getString(\\\"EXT_TMX_MATCHES_TEMPLATE_VARIABLES\\\"));\\n            gbc.gridx = 0;\\n            gbc.gridy = 5;\\n            gbc.anchor = GridBagConstraints.WEST;\\n            optionsBox.add(m_variablesLabel, gbc);\\n            Mnemonics.setLocalizedText(m_insertButton, OStrings.getString(\\\"BUTTON_INSERT\\\"));\\n            m_insertButton.addActionListener(new java.awt.event.ActionListener() {\\n                @Override\\n                public void actionPerformed(ActionEvent e) {\\n                    m_externalCommandTextArea.replaceSelection(m_variablesList.getSelectedItem().toString());\\n                }\\n            });\\n            gbc.gridx = 0;\\n            gbc.gridy = 6;\\n            gbc.weightx = 1;\\n            gbc.gridwidth = 2;\\n            gbc.anchor = GridBagConstraints.WEST;\\n            gbc.fill = GridBagConstraints.HORIZONTAL;\\n            optionsBox.add(m_insertButton, gbc);\\n        }\\n        centerBox.add(optionsBox, BorderLayout.WEST);\\n                centerBox.add(Box.createVerticalStrut(5));\\n        Box dirsBox = Box.createVerticalBox();\\n        dirsBox.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), OStrings.getString(\\\"PP_DIRECTORIES\\\") ));\\n        JLabel m_srcRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_srcRootLabel, OStrings.getString(\\\"PP_SRC_ROOT\\\"));\\n        Box bSrc = Box.createHorizontalBox();\\n        bSrc.setBorder(emptyBorder);\\n        bSrc.add(m_srcRootLabel);\\n        bSrc.add(Box.createHorizontalGlue());\\n        JButton m_srcExcludes = new JButton();\\n        Mnemonics.setLocalizedText(m_srcExcludes, OStrings.getString(\\\"PP_BUTTON_BROWSE_SRC_EXCLUDES\\\"));\\n        bSrc.add(m_srcExcludes);\\n        JButton m_srcBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_srcBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_SRC\\\"));\\n        bSrc.add(m_srcBrowse);\\n        final JTextField m_srcRootField = new JTextField();\\n        dirsBox.add(bSrc);\\n        dirsBox.add(m_srcRootField);\\n        JLabel m_tmRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_tmRootLabel, OStrings.getString(\\\"PP_TM_ROOT\\\"));\\n        Box bTM = Box.createHorizontalBox();\\n        bTM.setBorder(emptyBorder);\\n        bTM.add(m_tmRootLabel);\\n        bTM.add(Box.createHorizontalGlue());\\n        JButton m_tmBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_tmBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_TM\\\"));\\n        bTM.add(m_tmBrowse);\\n        final JTextField m_tmRootField = new JTextField();\\n        dirsBox.add(bTM);\\n        dirsBox.add(m_tmRootField);\\n        JLabel m_glosRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_glosRootLabel, OStrings.getString(\\\"PP_GLOS_ROOT\\\"));\\n        Box bGlos = Box.createHorizontalBox();\\n        bGlos.setBorder(emptyBorder);\\n        bGlos.add(m_glosRootLabel);\\n        bGlos.add(Box.createHorizontalGlue());\\n        JButton m_glosBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_glosBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_GL\\\"));\\n        bGlos.add(m_glosBrowse);\\n        final JTextField m_glosRootField = new JTextField();\\n        dirsBox.add(bGlos);\\n        dirsBox.add(m_glosRootField);\\n        JLabel m_writeableGlosLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_writeableGlosLabel, OStrings.getString(\\\"PP_WRITEABLE_GLOS\\\"));\\n        Box bwGlos = Box.createHorizontalBox();\\n        bwGlos.setBorder(emptyBorder);\\n        bwGlos.add(m_writeableGlosLabel);\\n        bwGlos.add(Box.createHorizontalGlue());\\n        JButton m_wGlosBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_wGlosBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_WG\\\"));\\n        bwGlos.add(m_wGlosBrowse);\\n        final JTextField m_writeableGlosField = new JTextField();\\n        dirsBox.add(bwGlos);\\n        dirsBox.add(m_writeableGlosField);\\n        JLabel m_locDictLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_locDictLabel, OStrings.getString(\\\"PP_DICT_ROOT\\\"));\\n        Box bDict = Box.createHorizontalBox();\\n        bDict.setBorder(emptyBorder);\\n        bDict.add(m_locDictLabel);\\n        bDict.add(Box.createHorizontalGlue());\\n        JButton m_dictBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_dictBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_DICT\\\"));\\n        bDict.add(m_dictBrowse);\\n        final JTextField m_dictRootField = new JTextField();\\n        dirsBox.add(bDict);\\n        dirsBox.add(m_dictRootField);\\n        JLabel m_locRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_locRootLabel, OStrings.getString(\\\"PP_LOC_ROOT\\\"));\\n        Box bLoc = Box.createHorizontalBox();\\n        bLoc.setBorder(emptyBorder);\\n        bLoc.add(m_locRootLabel);\\n        bLoc.add(Box.createHorizontalGlue());\\n        JButton m_locBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_locBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_TAR\\\"));\\n        bLoc.add(m_locBrowse);\\n        final JTextField m_locRootField = new JTextField();\\n        dirsBox.add(bLoc);\\n        dirsBox.add(m_locRootField);\\n        centerBox.add(dirsBox);\\n        JScrollPane scrollPane = new JScrollPane(centerBox);\\n        scrollPane.getViewport().setBackground(getBackground());\\n        getContentPane().add(scrollPane, \\\"Center\\\");\\n        JButton m_okButton = new JButton();\\n        Mnemonics.setLocalizedText(m_okButton, OStrings.getString(\\\"BUTTON_OK\\\"));\\n        getRootPane().setDefaultButton(m_okButton);\\n        JButton m_cancelButton = new JButton();\\n        Mnemonics.setLocalizedText(m_cancelButton, OStrings.getString(\\\"BUTTON_CANCEL\\\"));\\n        Box southBox = Box.createHorizontalBox();\\n        southBox.setBorder(new EmptyBorder(5, 5, 5, 5));\\n        southBox.add(Box.createHorizontalGlue());\\n        southBox.add(m_okButton);\\n        southBox.add(Box.createHorizontalStrut(5));\\n        southBox.add(m_cancelButton);\\n        getContentPane().add(southBox, \\\"South\\\");\\n        setResizable(false);\\n        m_okButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doOK(m_sourceLocaleField, m_targetLocaleField, m_sourceTokenizerField, m_targetTokenizerField,\\n                        m_sourceTokenizerBehaviorField, m_targetTokenizerBehaviorField,\\n                        m_sentenceSegmentingCheckBox, m_srcRootField, m_locRootField, m_glosRootField,\\n                        m_writeableGlosField, m_tmRootField, m_dictRootField, m_allowDefaultsCheckBox,\\n                        m_removeTagsCheckBox, m_externalCommandTextArea);\\n            }\\n        });\\n        m_cancelButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doCancel();\\n            }\\n        });\\n        m_srcBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(1, m_srcRootField);\\n            }\\n        });\\n        m_srcExcludes.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                List<String> result = FilenamePatternsEditorController.show(srcExcludes);\\n                if (result != null) {\\n                    srcExcludes.clear();\\n                    srcExcludes.addAll(result);\\n                }\\n            }\\n        });\\n        m_locBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(2, m_locRootField);\\n            }\\n        });\\n        m_glosBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                                boolean isDefaultGlossaryFile = projectProperties.isDefaultWriteableGlossaryFile();\\n                doBrowseDirectoy(3, m_glosRootField);\\n                                if (isDefaultGlossaryFile) {\\n                    String newDefault = projectProperties.computeDefaultWriteableGlossaryFile();\\n                    projectProperties.setWriteableGlossary(newDefault);\\n                    m_writeableGlosField.setText(newDefault);\\n                }\\n            }\\n        });\\n        m_wGlosBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(6, m_writeableGlosField);\\n            }\\n        });\\n        m_tmBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(4, m_tmRootField);\\n            }\\n        });\\n        m_dictBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(5, m_dictRootField);\\n            }\\n        });\\n        final JDialog self = this;\\n        m_sentenceSegmentingButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                SegmentationCustomizer segmentationCustomizer = new SegmentationCustomizer(self, true,\\n                        SRX.getDefault(), Preferences.getSRX(), srx);\\n                segmentationCustomizer.setVisible(true);\\n                if (segmentationCustomizer.getReturnStatus() == SegmentationCustomizer.RET_OK) {\\n                    if (segmentationCustomizer.isProjectSpecific()) {\\n                        srx = segmentationCustomizer.getSRX();\\n                    } else {\\n                        srx = null;\\n                    }\\n                }\\n            }\\n        });\\n        m_fileFiltersButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                JFrame mainWindow = Core.getMainWindow().getApplicationFrame();\\n                FiltersCustomizer dlg = new FiltersCustomizer(mainWindow, true, FilterMaster\\n                        .createDefaultFiltersConfig(), FilterMaster.loadConfig(StaticUtils.getConfigDir()),\\n                        filters);\\n                dlg.setVisible(true);\\n                if (dlg.getReturnStatus() == FiltersCustomizer.RET_OK) {\\n                                        filters = dlg.result;\\n                }\\n            }\\n        });\\n        m_RepositoriesButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                JFrame mainWindow = Core.getMainWindow().getApplicationFrame();\\n                List<RepositoryDefinition> r = new RepositoriesMappingController().show(mainWindow,\\n                        projectProperties.getRepositories());\\n                if (r != null) {\\n                    projectProperties.setRepositories(r);\\n                }\\n            }\\n        });\\n        StaticUIUtils.setEscapeAction(this, new AbstractAction() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doCancel();\\n            }\\n        });\\n        m_srcRootField.setText(projectProperties.getSourceRoot());\\n        m_locRootField.setText(projectProperties.getTargetRoot());\\n        m_glosRootField.setText(projectProperties.getGlossaryRoot());\\n        m_writeableGlosField.setText(projectProperties.getWriteableGlossary());\\n        m_tmRootField.setText(projectProperties.getTMRoot());\\n        m_dictRootField.setText(projectProperties.getDictRoot());\\n        m_sentenceSegmentingCheckBox.setSelected(projectProperties.isSentenceSegmentingEnabled());\\n        m_allowDefaultsCheckBox.setSelected(projectProperties.isSupportDefaultTranslations());\\n        m_removeTagsCheckBox.setSelected(projectProperties.isRemoveTags());\\n        switch (dialogType) {\\n        case RESOLVE_DIRS:\\n                        m_sourceLocaleField.setEnabled(false);\\n            m_targetLocaleField.setEnabled(false);\\n            m_sourceTokenizerField.setEnabled(false);\\n            m_targetTokenizerField.setEnabled(false);\\n            m_sourceTokenizerBehaviorField.setEnabled(false);\\n            m_targetTokenizerBehaviorField.setEnabled(false);\\n            m_sentenceSegmentingCheckBox.setEnabled(false);\\n            m_allowDefaultsCheckBox.setEnabled(false);\\n            m_removeTagsCheckBox.setEnabled(false);\\n            m_externalCommandTextArea.setEnabled(false);\\n            m_insertButton.setEnabled(false);\\n            m_variablesList.setEnabled(false);\\n                        File f = new File(m_srcRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_srcRootField.setForeground(Color.RED);\\n            f = new File(m_locRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_locRootField.setForeground(Color.RED);\\n            f = new File(m_glosRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_glosRootField.setForeground(Color.RED);\\n            f = new File(m_writeableGlosField.getText());\\n            String wGlos = f.getParent();             if (!wGlos.endsWith(File.separator)) {\\n                wGlos += File.separator;\\n            }\\n            f = new File(wGlos);\\n                        if (!f.exists() || !f.isDirectory() || !wGlos.contains(m_glosRootField.getText()))\\n                m_writeableGlosField.setForeground(Color.RED);  \\n            f = new File(m_tmRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_tmRootField.setForeground(Color.RED);\\n            break;\\n        }\\n        updateUIText(m_messageArea);\\n        pack();\\n        setSize(9 * getWidth() / 8, getHeight() + 10);\\n        setResizable(true);\\n        StaticUIUtils.fitInScreen(this);\\n        DockingUI.displayCentered(this);\\n    }\\n    private void doBrowseDirectoy(int browseTarget, JTextField field) {\\n        if (field == null) {\\n            return;\\n        }\\n        String title;\\n        boolean fileMode = false;\\n        boolean glossaryFile = false;\\n        if (browseTarget == 6) {\\n            fileMode = true;\\n            glossaryFile = true;\\n        }\\n        switch (browseTarget) {\\n        case 1:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_SOURCE\\\");\\n            break;\\n        case 2:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_TARGET\\\");\\n            break;\\n        case 3:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_GLOS\\\");\\n            break;\\n        case 4:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_TM\\\");\\n            break;\\n        case 5:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_DICT\\\");\\n            break;\\n        case 6:\\n            title = OStrings.getString(\\\"PP_BROWSE_W_GLOS\\\");\\n            break;\\n        default:\\n            return;\\n        }\\n        OmegaTFileChooser browser = new OmegaTFileChooser();\\n                        browser.setDialogTitle(title);\\n        if (fileMode) {\\n            browser.setFileSelectionMode(OmegaTFileChooser.FILES_ONLY);\\n        } else {\\n            browser.setFileSelectionMode(OmegaTFileChooser.DIRECTORIES_ONLY);\\n        }\\n                String curDir = field.getText();\\n        File curDirCheck = new File(curDir);\\n        if (fileMode && !StringUtil.isEmpty(curDirCheck.getName())) {\\n            String dirOnly = curDirCheck.getParent();\\n            dirOnly = (dirOnly != null) ? dirOnly : \\\"\\\";\\n            curDirCheck = new File(dirOnly);\\n        }\\n                if (!curDirCheck.exists() || !curDirCheck.isDirectory()) {\\n            curDir = projectProperties.getProjectRoot();\\n            curDirCheck = new File(curDir);\\n        }\\n                if (!curDirCheck.exists() || !curDirCheck.isDirectory()) {\\n            switch (browseTarget) {\\n            case 1:\\n                curDir = Preferences.getPreference(Preferences.SOURCE_FOLDER);\\n                break;\\n            case 2:\\n                curDir = Preferences.getPreference(Preferences.TARGET_FOLDER);\\n                break;\\n            case 3:\\n                curDir = Preferences.getPreference(Preferences.GLOSSARY_FOLDER);\\n                break;\\n            case 4:\\n                curDir = Preferences.getPreference(Preferences.TM_FOLDER);\\n                break;\\n            case 5:\\n                curDir = Preferences.getPreference(Preferences.DICT_FOLDER);\\n                break;\\n            case 6:\\n                curDir = Preferences.getPreference(Preferences.GLOSSARY_FILE);\\n                break;\\n            }\\n        }\\n        if (fileMode) {\\n            File dirFile = new File(curDir);\\n            curDir = dirFile.getParent();\\n        }\\n        if (curDir.equals(\\\"\\\"))\\n            curDir = Preferences.getPreference(Preferences.CURRENT_FOLDER);\\n        if (!curDir.equals(\\\"\\\")) {\\n            File dir = new File(curDir);\\n            if (dir.exists() && dir.isDirectory()) {\\n                browser.setCurrentDirectory(dir);\\n            }\\n        }\\n                int action = browser.showOpenDialog(this);\\n                if (action != javax.swing.JFileChooser.APPROVE_OPTION)\\n            return;\\n                File dir = browser.getSelectedFile();\\n        if (dir == null)\\n            return;\\n        String str = dir.getAbsolutePath();\\n        if (!fileMode) {\\n            str+= File.separator;         }\\n                if (glossaryFile && !str.endsWith(OConsts.EXT_TSV_TXT) &&!str.endsWith(OConsts.EXT_TSV_UTF8)) {\\n           str += OConsts.EXT_TSV_TXT;         }\\n                switch (browseTarget) {\\n        case 1:\\n            Preferences.setPreference(Preferences.SOURCE_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setSourceRoot(str);\\n            field.setText(projectProperties.getSourceRoot());\\n            if (new File(projectProperties.getSourceRoot()).exists()\\n                    && new File(projectProperties.getSourceRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 2:\\n            Preferences.setPreference(Preferences.TARGET_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setTargetRoot(str);\\n            field.setText(projectProperties.getTargetRoot());\\n            if (new File(projectProperties.getTargetRoot()).exists()\\n                    && new File(projectProperties.getTargetRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 3:\\n            Preferences.setPreference(Preferences.GLOSSARY_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setGlossaryRoot(str);\\n            field.setText(projectProperties.getGlossaryRoot());\\n            if (new File(projectProperties.getGlossaryRoot()).exists()\\n                    && new File(projectProperties.getGlossaryRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 4:\\n            Preferences.setPreference(Preferences.TM_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setTMRoot(str);\\n            field.setText(projectProperties.getTMRoot());\\n            if (new File(projectProperties.getTMRoot()).exists()\\n                    && new File(projectProperties.getTMRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 5:\\n            Preferences.setPreference(Preferences.DICT_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setDictRoot(str);\\n            field.setText(projectProperties.getDictRoot());\\n            if (new File(projectProperties.getDictRoot()).exists()\\n                    && new File(projectProperties.getDictRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 6:\\n            Preferences.setPreference(Preferences.GLOSSARY_FILE, browser.getSelectedFile().getPath());\\n            projectProperties.setWriteableGlossary(str);\\n            field.setText(projectProperties.getWriteableGlossary());\\n                        if (new File(projectProperties.getWriteableGlossaryDir()).exists()\\n                    && new File(projectProperties.getWriteableGlossaryDir()).isDirectory()\\n                    && projectProperties.getWriteableGlossaryDir().contains(projectProperties.getGlossaryRoot()))\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        }\\n    }\\n    private void doOK(JComboBox<Language> m_sourceLocaleField, JComboBox<Language> m_targetLocaleField,\\n            JComboBox<Class<?>> m_sourceTokenizerField, JComboBox<Class<?>> m_targetTokenizerField,\\n            JComboBox<Version> m_sourceTokenizerBehaviorField, JComboBox<Version> m_targetTokenizerBehaviorField,\\n            JCheckBox m_sentenceSegmentingCheckBox, JTextField m_srcRootField, JTextField m_locRootField,\\n            JTextField m_glosRootField, JTextField m_writeableGlosField, JTextField m_tmRootField, JTextField m_dictRootField,\\n            JCheckBox m_allowDefaultsCheckBox, JCheckBox m_removeTagsCheckBox, JTextArea m_customCommandTextArea) {\\n        if (!ProjectProperties.verifySingleLangCode(m_sourceLocaleField.getSelectedItem().toString())) {\\n            JOptionPane.showMessageDialog(\\n                    this,\\n                    OStrings.getString(\\\"NP_INVALID_SOURCE_LOCALE\\\")\\n                            + OStrings.getString(\\\"NP_LOCALE_SUGGESTION\\\"), OStrings.getString(\\\"TF_ERROR\\\"),\\n                    JOptionPane.ERROR_MESSAGE);\\n            m_sourceLocaleField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setSourceLanguage(m_sourceLocaleField.getSelectedItem().toString());\\n        if (!ProjectProperties.verifySingleLangCode(m_targetLocaleField.getSelectedItem().toString())) {\\n            JOptionPane.showMessageDialog(\\n                    this,\\n                    OStrings.getString(\\\"NP_INVALID_TARGET_LOCALE\\\")\\n                            + OStrings.getString(\\\"NP_LOCALE_SUGGESTION\\\"), OStrings.getString(\\\"TF_ERROR\\\"),\\n                    JOptionPane.ERROR_MESSAGE);\\n            m_targetLocaleField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setTargetLanguage(m_targetLocaleField.getSelectedItem().toString());\\n        if (m_sourceTokenizerField.isEnabled()) {\\n            projectProperties.setSourceTokenizer((Class<?>)m_sourceTokenizerField.getSelectedItem());\\n        }\\n        if (m_targetTokenizerField.isEnabled()) {\\n            projectProperties.setTargetTokenizer((Class<?>)m_targetTokenizerField.getSelectedItem());\\n        }\\n        if (m_sourceTokenizerBehaviorField.isEnabled()) {\\n            Class<?> srcTok = (Class<?>)m_sourceTokenizerField.getSelectedItem();\\n            Preferences.setPreference(Preferences.TOK_BEHAVIOR_PREFIX + srcTok.getName(),\\n                    ((Version)m_sourceTokenizerBehaviorField.getSelectedItem()).toString());\\n        }\\n        if (m_targetTokenizerBehaviorField.isEnabled()) {\\n            Class<?> trgTok = (Class<?>)m_targetTokenizerField.getSelectedItem();\\n            Preferences.setPreference(Preferences.TOK_BEHAVIOR_PREFIX + trgTok.getName(),\\n                    ((Version)m_targetTokenizerBehaviorField.getSelectedItem()).toString());\\n        }\\n        projectProperties.setSentenceSegmentingEnabled(m_sentenceSegmentingCheckBox.isSelected());\\n        projectProperties.setSupportDefaultTranslations(m_allowDefaultsCheckBox.isSelected());\\n        projectProperties.setRemoveTags(m_removeTagsCheckBox.isSelected());\\n        projectProperties.setExternalCommand(m_customCommandTextArea.getText());\\n        projectProperties.setSourceRoot(m_srcRootField.getText());\\n        if (!projectProperties.getSourceRoot().endsWith(File.separator))\\n            projectProperties.setSourceRoot(projectProperties.getSourceRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getSourceRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_SOURCEDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_srcRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setTargetRoot(m_locRootField.getText());\\n        if (!projectProperties.getTargetRoot().endsWith(File.separator))\\n            projectProperties.setTargetRoot(projectProperties.getTargetRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getTargetRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_TRANSDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_locRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setGlossaryRoot(m_glosRootField.getText());\\n        if (!projectProperties.getGlossaryRoot().endsWith(File.separator))\\n            projectProperties.setGlossaryRoot(projectProperties.getGlossaryRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getGlossaryRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_GLOSSDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_glosRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setWriteableGlossary(m_writeableGlosField.getText());\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getWriteableGlossaryDir()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_W_GLOSSDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_writeableGlosField.requestFocusInWindow();\\n            return;\\n        }\\n        String glossaryDir = projectProperties.getWriteableGlossaryDir();\\n        if (!glossaryDir.endsWith(File.separator)) {\\n            glossaryDir += File.separator;\\n        }\\n        if (!glossaryDir.contains(projectProperties.getGlossaryRoot())) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_W_GLOSDIR_NOT_INSIDE_GLOS\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_writeableGlosField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setTMRoot(m_tmRootField.getText());\\n        if (!projectProperties.getTMRoot().endsWith(File.separator))\\n            projectProperties.setTMRoot(projectProperties.getTMRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getTMRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_TMDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_tmRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setDictRoot(m_dictRootField.getText());\\n        if (!projectProperties.getDictRoot().endsWith(File.separator))\\n            projectProperties.setDictRoot(projectProperties.getDictRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getDictRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_DICTDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_dictRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setProjectSRX(srx);\\n        projectProperties.setProjectFilters(filters);\\n        projectProperties.getSourceRootExcludes().clear();\\n        projectProperties.getSourceRootExcludes().addAll(srcExcludes);\\n        m_dialogCancelled = false;\\n        setVisible(false);\\n    }\\n    private void doCancel() {\\n                                        if (dialogType == Mode.NEW_PROJECT)\\n            new File(projectProperties.getProjectRoot()).delete();\\n        m_dialogCancelled = true;\\n        setVisible(false);\\n    }\\n    private void updateUIText(JTextArea m_messageArea) {\\n        switch (dialogType) {\\n        case NEW_PROJECT:\\n            setTitle(OStrings.getString(\\\"PP_CREATE_PROJ\\\"));\\n            m_messageArea.setText(OStrings.getString(\\\"PP_MESSAGE_CONFIGPROJ\\\"));\\n            break;\\n        case RESOLVE_DIRS:\\n            setTitle(OStrings.getString(\\\"PP_OPEN_PROJ\\\"));\\n            m_messageArea.setText(OStrings.getString(\\\"PP_MESSAGE_BADPROJ\\\"));\\n            break;\\n        case EDIT_PROJECT:\\n            setTitle(OStrings.getString(\\\"PP_EDIT_PROJECT\\\"));\\n            m_messageArea.setText(OStrings.getString(\\\"PP_MESSAGE_EDITPROJ\\\"));\\n            break;\\n        }\\n    }\\n    private static class ScrollableBox extends Box implements Scrollable {\\n        public ScrollableBox(int axis) {\\n            super(axis);\\n        }\\n        @Override\\n        public Dimension getPreferredScrollableViewportSize() {\\n            return getPreferredSize();\\n        }\\n        @Override\\n        public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {\\n            return getFont().getSize();\\n        }\\n        @Override\\n        public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {\\n            return getFont().getSize();\\n        }\\n        @Override\\n        public boolean getScrollableTracksViewportWidth() {\\n            return true;\\n        }\\n        @Override\\n        public boolean getScrollableTracksViewportHeight() {\\n            return false;\\n        }\\n    }\\n    private boolean m_dialogCancelled;\\n    public ProjectProperties getResult() {\\n        return m_dialogCancelled ? null : projectProperties;\\n    }\\n}\""
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `RepositoriesMappingController.java`\n\nChange set: [ProjectPropertiesDialog, RepositoriesMappingDialog, TeamSettings, RepositoriesCredentialsController, ProjectUICommands, DialogsTest, RepositoryDefinition, RepositoryMapping, DockingUI, OStrings, SRX, Filters, CommandVarExpansion, CLIParameters, ProjectProperties, PluginUtils, FiltersCustomizer, SegmentationCustomizer, DefaultTokenizer, ITokenizer, Language, Log, Preferences, StaticUtils, StringUtil, OmegaTFileChooser, StaticUIUtils, TokenizerComboBoxRenderer, LanguageComboBoxRenderer, TokenizerBehaviorComboBoxRenderer, gen.core.filters.Filters, gen.core.project.RepositoryDefinition, gen.core.project.RepositoryMapping, File, Color, Dimension, Rectangle, Label, AbstractAction, Box, Scrollable, BorderLayout, GridBagLayout, GridBagConstraints, Insets, JComboBox, JButton, JTextField, JTextArea, JScrollPane, JCheckBox, JLabel, JPanel, JDialog, JFrame, ActionListener, Version]\n\nDetails:\n1. **ProjectPropertiesDialog**: Directly instantiates `RepositoriesMappingController` to manage repository settings; high conceptual coupling and co-change confidence (66.67%).\n2. **RepositoriesMappingDialog**: Tightly coupled with `RepositoriesMappingController` as the UI component it controls.\n3. **TeamSettings**: Co-changed with moderate support; likely involved in team/repository configuration workflows.\n4. **RepositoriesCredentialsController**: Related to repository management; may share logic or data models.\n5. **ProjectUICommands**: Likely interacts with repository mapping features via UI commands.\n6. **DialogsTest**: Test suite for dialogs, including those involving `RepositoriesMappingController`.\n7. **RepositoryDefinition**: Core model class used by the controller for managing repositories.\n8. **RepositoryMapping**: Core model class used by the controller for mapping repositories.\n9. **DockingUI**: Used for layout/display of the dialog; imported and used directly.\n10. **OStrings**: Used for localization strings within the controller.\n\n11. **SRX**: Potentially related if segmentation is tied to repository operations.\n12. **Filters**: May be involved in filtering repository content.\n13. **CommandVarExpansion**: Could be used in command-line interactions tied to repositories.\n14. **CLIParameters**: Used for handling command-line arguments that affect repository behavior.\n15. **ProjectProperties**: Stores project-level configurations, including repository definitions.\n16. **PluginUtils**: May be involved in tokenizer or filter plugins related to repositories.\n17. **FiltersCustomizer**: Customizes filters potentially applied to repository content.\n18. **SegmentationCustomizer**: If segmentation affects repository files, this could be relevant.\n19. **DefaultTokenizer**: Tokenization may be involved in processing repository files.\n20. **ITokenizer**: Interface for tokenizers used in repository file processing.\n\n21. **Language**: Used in UI/dialog for language selection tied to repositories.\n22. **Log**: Logging framework used across components including this one.\n23. **Preferences**: Manages user preferences that may affect repository behavior.\n24. **StaticUtils**: Utility methods used across components.\n25. **StringUtil**: String manipulation utilities used in repository URL/path handling.\n26. **OmegaTFileChooser**: Used in dialogs for selecting repository paths/files.\n27. **StaticUIUtils**: UI utility functions shared across dialogs.\n28. **TokenizerComboBoxRenderer**: Renders tokenizers in combo boxes in UI.\n29. **LanguageComboBoxRenderer**: Renders languages in combo boxes in UI.\n30. **TokenizerBehaviorComboBoxRenderer**: Renders tokenizer behaviors in combo boxes.\n\n31. **gen.core.filters.Filters**: XML model class for filters that might apply to repositories.\n32. **gen.core.project.RepositoryDefinition**: Model class defining a repository.\n33. **gen.core.project.RepositoryMapping**: Model class defining how repositories are mapped.\n34. **File**: Core Java class used extensively for file path manipulations.\n35. **Color**: Used in UI components for styling/red error highlighting.\n36. **Dimension**: Layout-related class used in UI construction.\n37. **Rectangle**: Used in layout or display logic.\n38. **Label**: AWT/Swing label used in UI construction.\n39. **AbstractAction**: Used for defining actions in UI components.\n40. **Box**: Swing layout container used in dialog UI structure.\n\n41. **Scrollable**: Interface implemented for scrollable containers in the dialog.\n42. **BorderLayout**: Layout manager used in UI panel organization.\n43. **GridBagLayout**: Complex layout management in dialog UI.\n44. **GridBagConstraints**: Constraints used with GridBagLayout.\n45. **Insets**: Defines padding/margin spacing in layouts.\n46. **JComboBox**: Used in the dialog for dropdown selections.\n47. **JButton**: Buttons like OK/Cancel/Add/Remove are used.\n48. **JTextField**: Input fields for repository URLs and other properties.\n49. **JTextArea**: For multi-line text input/output in related dialogs.\n50. **JScrollPane**: Scrolling functionality for large UI sections.\n51. **JCheckBox**: Boolean options in the dialog UI.\n52. **JLabel**: Text labels describing UI elements.\n53. **JPanel**: Container for grouping UI components.\n54. **JDialog**: Base class for the dialog itself.\n55. **JFrame**: Parent frame when displaying the dialog.\n56. **ActionListener**: Used for handling button click events.\n57. **Version**: Lucene version class used for tokenizer behavior selection.\n\nThis extensive list covers all entities that are either directly referenced, indirectly involved through common workflows, or have historical co-change relationships with `RepositoriesMappingController.java`.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m6"
                ],
                "response_message": "m12"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m6",
                    "m12",
                    "m13"
                ],
                "response_message": "m14"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m6",
                    "m12",
                    "m13",
                    "m14",
                    "m15",
                    "m16"
                ],
                "response_message": "m17"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `OmegaT`, a well-known Java open source project. The starting entity you need to deal with is RepositoriesMappingController.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_5e629d3af3564b35affd65",
                        "function": {
                            "arguments": "{\"entity\": \"RepositoriesMappingController.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"RepositoriesMappingDialog\", \"1\", \"0.3333333333333333\"], [\"ProjectPropertiesDialog\", \"2\", \"0.6666666666666666\"], [\"TeamSettings\", \"1\", \"0.3333333333333333\"], [\"RepositoriesCredentialsController\", \"1\", \"0.3333333333333333\"], [\"ProjectUICommands\", \"1\", \"0.3333333333333333\"], [\"DialogsTest\", \"1\", \"0.3333333333333333\"]]"
            },
            "m5": {
                "content": "The `get_co_change_relationship` function returned the following co-changed entities with `RepositoriesMappingController.java`:\n\n1. **RepositoriesMappingDialog** (support: 1, confidence: 33.33%)\n2. **ProjectPropertiesDialog** (support: 2, confidence: 66.67%)\n3. **TeamSettings** (support: 1, confidence: 33.33%)\n4. **RepositoriesCredentialsController** (support: 1, confidence: 33.33%)\n5. **ProjectUICommands** (support: 1, confidence: 33.33%)\n6. **DialogsTest** (support: 1, confidence: 33.33%)\n\nSince `ProjectPropertiesDialog` has the highest confidence (66.67%) and support (2), it is most likely to be impacted by changes in `RepositoriesMappingController.java`.\n\nNext, I will analyze the coupling dependencies between `RepositoriesMappingController.java` and `ProjectPropertiesDialog` to understand their relationship better. \n\nI will call the `get_coupling_dependencies` function for these two entities.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_26739d19abc94955989d64",
                        "function": {
                            "arguments": "{\"entity1\": \"RepositoriesMappingController.java\", \"entity2\": \"ProjectPropertiesDialog\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m7": {
                "content": "There are no direct coupling dependencies between `RepositoriesMappingController.java` and `ProjectPropertiesDialog`. This suggests that the co-change relationship might be due to indirect interactions or shared functionality rather than direct code dependencies.\n\nTo further investigate, I will examine the conceptual coupling (semantic similarity) between these two entities using the `get_conceptual_coupling` function. This will help determine if they share similar functionality or logic from a semantic perspective.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_72f1d5c7ca8742eca026d5",
                        "function": {
                            "arguments": "{\"entity1\": \"RepositoriesMappingController.java\", \"entity2\": \"ProjectPropertiesDialog\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.83983535\""
            },
            "m9": {
                "content": "The conceptual coupling (semantic similarity) between `RepositoriesMappingController.java` and `ProjectPropertiesDialog` is **0.8398**, which indicates a high degree of semantic similarity. This suggests that, while there are no direct coupling dependencies, the two entities likely share similar functionality or logic.\n\nThis strong semantic relationship supports the co-change findings, indicating that changes in `RepositoriesMappingController.java` could impact `ProjectPropertiesDialog`.\n\nTo better understand how these entities interact, I will now examine the call graph of `RepositoriesMappingController.java` to identify any indirect dependencies or usages within the system.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_495d0e8d13be482583e8e9",
                        "function": {
                            "arguments": "{\"entity\": \"RepositoriesMappingController.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"RepositoryDefinition\", \"DockingUI\", \"OStrings\", \"RepositoryMapping\"]"
            },
            "m11": {
                "content": "The call graph of `RepositoriesMappingController.java` reveals that it interacts with the following entities:\n\n1. **RepositoryDefinition**\n2. **DockingUI**\n3. **OStrings**\n4. **RepositoryMapping**\n\nThese entities may be indirectly involved in the ripple effect of changes to `RepositoriesMappingController.java`.\n\nGiven the high conceptual coupling and co-change relationship with `ProjectPropertiesDialog`, as well as the indirect dependencies identified in the call graph, it is important to examine whether any of the entities in the call graph (e.g., `RepositoryDefinition`, `RepositoryMapping`) also have strong co-change or coupling relationships with `ProjectPropertiesDialog`.\n\nI will now analyze the coupling dependencies between `ProjectPropertiesDialog` and `RepositoryDefinition`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_2999af09e8a248dd823067",
                        "function": {
                            "arguments": "{\"entity1\": \"ProjectPropertiesDialog\", \"entity2\": \"RepositoryDefinition\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "content": "There are no direct coupling dependencies between `ProjectPropertiesDialog` and `RepositoryDefinition`.\n\nGiven that both the direct coupling analysis and the conceptual coupling analysis have not revealed a direct dependency, it's possible that the co-change relationship is due to higher-order interactions or shared context within the application logic.\n\nTo better understand the context of `RepositoriesMappingController.java`, I will retrieve and examine its source code using the `get_origin_code` function. This will help identify the nature of its interactions with other components and potentially reveal why it has a strong co-change relationship with entities like `ProjectPropertiesDialog`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_077cf3c155e44ca6a3b594",
                        "function": {
                            "arguments": "{\"entity\": \"RepositoriesMappingController.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m13": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.omegat.gui.dialogs;\\nimport gen.core.project.RepositoryDefinition;\\nimport gen.core.project.RepositoryMapping;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.text.MessageFormat;\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.Set;\\nimport java.util.TreeSet;\\nimport javax.swing.DefaultCellEditor;\\nimport javax.swing.JComboBox;\\nimport javax.swing.JFrame;\\nimport javax.swing.JOptionPane;\\nimport javax.swing.table.AbstractTableModel;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.omegat.util.OStrings;\\nimport org.omegat.util.gui.DockingUI;\\npublic class RepositoriesMappingController {\\n    private List<RepositoryDefinition> result;\\n    private RepositoriesMappingDialog dialog;\\n    private AbstractTableModel modelRepo;\\n    private List<RowRepo> listRepo;\\n    private AbstractTableModel modelMapping;\\n    private List<RowMapping> listMapping;\\n    public List<RepositoryDefinition> show(JFrame parent, List<RepositoryDefinition> input) {\\n        dialog = new RepositoriesMappingDialog(parent, true);\\n        DockingUI.displayCentered(dialog);\\n        listRepo = new ArrayList<RowRepo>();\\n        listMapping = new ArrayList<RowMapping>();\\n        putData(input);\\n        initTableModels();\\n        initButtons();\\n        reinitRepoUrlDropdown();\\n        dialog.setVisible(true);\\n        return result;\\n    }\\n    void initTableModels() {\\n        modelRepo = new AbstractTableModel() {\\n            @Override\\n            public Object getValueAt(int rowIndex, int columnIndex) {\\n                RowRepo r = listRepo.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    return r.type;\\n                case 1:\\n                    return r.url;\\n                }\\n                return null;\\n            }\\n            @Override\\n            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {\\n                RowRepo r = listRepo.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    r.type = (String) aValue;\\n                    break;\\n                case 1:\\n                    String old = r.url;\\n                    r.url = (String) aValue;\\n                    changeRepoUrl(old, r.url);\\n                    reinitRepoUrlDropdown();\\n                    break;\\n                }\\n            }\\n            @Override\\n            public int getRowCount() {\\n                return listRepo.size();\\n            }\\n            @Override\\n            public int getColumnCount() {\\n                return 2;\\n            }\\n            @Override\\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\\n                return true;\\n            }\\n            @Override\\n            public String getColumnName(int column) {\\n                switch (column) {\\n                case 0:\\n                    return OStrings.getString(\\\"RMD_TABLE_REPOSITORIES_TYPE\\\");\\n                case 1:\\n                    return OStrings.getString(\\\"RMD_TABLE_REPOSITORIES_URL\\\");\\n                }\\n                return null;\\n            }\\n        };\\n        dialog.tableRepositories.setModel(modelRepo);\\n        JComboBox<String> comboBox = new JComboBox<>();\\n        comboBox.addItem(\\\"svn\\\");\\n        comboBox.addItem(\\\"git\\\");\\n        dialog.tableRepositories.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboBox));\\n        modelMapping = new AbstractTableModel() {\\n            @Override\\n            public Object getValueAt(int rowIndex, int columnIndex) {\\n                RowMapping r = listMapping.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    return r.repoUrl;\\n                case 1:\\n                    return r.local;\\n                case 2:\\n                    return r.remote;\\n                case 3:\\n                    return r.excludes;\\n                case 4:\\n                    return r.includes;\\n                }\\n                return null;\\n            }\\n            @Override\\n            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {\\n                RowMapping r = listMapping.get(rowIndex);\\n                switch (columnIndex) {\\n                case 0:\\n                    r.repoUrl = (String) aValue;\\n                    break;\\n                case 1:\\n                    r.local = (String) aValue;\\n                    break;\\n                case 2:\\n                    r.remote = (String) aValue;\\n                    break;\\n                case 3:\\n                    r.excludes = (String) aValue;\\n                    break;\\n                case 4:\\n                    r.includes = (String) aValue;\\n                    break;\\n                }\\n            }\\n            @Override\\n            public int getRowCount() {\\n                return listMapping.size();\\n            }\\n            @Override\\n            public int getColumnCount() {\\n                return 5;\\n            }\\n            @Override\\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\\n                return true;\\n            }\\n            @Override\\n            public String getColumnName(int column) {\\n                switch (column) {\\n                case 0:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_REPO\\\");\\n                case 1:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_LOCAL\\\");\\n                case 2:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_REMOTE\\\");\\n                case 3:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_EXCLUDES\\\");\\n                case 4:\\n                    return OStrings.getString(\\\"RMD_TABLE_MAPPING_INCLUDES\\\");\\n                }\\n                return null;\\n            }\\n        };\\n        dialog.tableMapping.setModel(modelMapping);\\n    }\\n    void initButtons() {\\n        dialog.cancelButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                dialog.dispose();\\n            }\\n        });\\n        dialog.okButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                String r = isValid();\\n                if (r != null) {\\n                    JOptionPane.showMessageDialog(dialog, r, OStrings.getString(\\\"TF_ERROR\\\"),\\n                            JOptionPane.ERROR_MESSAGE);\\n                    return;\\n                }\\n                result = getData();\\n                dialog.dispose();\\n            }\\n        });\\n        dialog.btnRepoAdd.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                listRepo.add(new RowRepo());\\n                modelRepo.fireTableRowsInserted(listRepo.size() - 1, listRepo.size() - 1);\\n            }\\n        });\\n        dialog.btnRepoRemove.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                int r = dialog.tableRepositories.getSelectedRow();\\n                if (r >= 0) {\\n                    listRepo.remove(r);\\n                    modelRepo.fireTableRowsDeleted(r, r);\\n                }\\n            }\\n        });\\n        dialog.btnMappingAdd.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                listMapping.add(new RowMapping());\\n                modelMapping.fireTableRowsInserted(listMapping.size() - 1, listMapping.size() - 1);\\n            }\\n        });\\n        dialog.btnMappingRemove.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                int r = dialog.tableMapping.getSelectedRow();\\n                if (r >= 0) {\\n                    listMapping.remove(r);\\n                    modelMapping.fireTableRowsDeleted(r, r);\\n                }\\n            }\\n        });\\n    }\\n    void changeRepoUrl(String oldUrl, String newUrl) {\\n        if (oldUrl == null) {\\n            return;\\n        }\\n        for (int i = 0; i < listMapping.size(); i++) {\\n            if (oldUrl.equals(listMapping.get(i).repoUrl)) {\\n                listMapping.get(i).repoUrl = newUrl;\\n                modelMapping.fireTableCellUpdated(i, 0);\\n            }\\n        }\\n    }\\n    void reinitRepoUrlDropdown() {\\n        JComboBox<String> comboBox = new JComboBox<>();\\n        for (RowRepo r : listRepo) {\\n            comboBox.addItem(r.url);\\n        }\\n        dialog.tableMapping.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboBox));\\n    }\\n    String isValid() {\\n        Set<String> urls = new TreeSet<String>();\\n        for (RowRepo r : listRepo) {\\n            if (StringUtils.isBlank(r.url)) {\\n                return OStrings.getString(\\\"RMD_INVALID_BLANK_REPO\\\");\\n            }\\n            if (!\\\"svn\\\".equals(r.type) && !\\\"git\\\".equals(r.type)) {\\n                return MessageFormat.format(OStrings.getString(\\\"RMD_INVALID_REPO_TYPE\\\"), r.type);\\n            }\\n            if (!urls.add(r.url)) {\\n                return MessageFormat.format(OStrings.getString(\\\"RMD_INVALID_DUPLICATE_REPO\\\"), r.url);\\n            }\\n        }\\n        for (RowMapping r : listMapping) {\\n            if (StringUtils.isBlank(r.repoUrl)) {\\n                return OStrings.getString(\\\"RMD_INVALID_BLANK_REPO\\\");\\n            }\\n            if (!urls.contains(r.repoUrl)) {\\n                return MessageFormat.format(OStrings.getString(\\\"RMD_INVALID_UNKNOWN_REPO\\\"), r.repoUrl);\\n            }\\n        }\\n        return null;\\n    }\\n    void putData(List<RepositoryDefinition> data) {\\n        if (data == null) {\\n            return;\\n        }\\n        for (RepositoryDefinition rd : data) {\\n            RowRepo r = new RowRepo();\\n            r.type = rd.getType();\\n            r.url = rd.getUrl();\\n            listRepo.add(r);\\n            for (RepositoryMapping rm : rd.getMapping()) {\\n                RowMapping m = new RowMapping();\\n                m.repoUrl = rd.getUrl();\\n                m.local = rm.getLocal();\\n                m.remote = rm.getRepository();\\n                m.excludes = merge(rm.getExcludes());\\n                m.includes = merge(rm.getIncludes());\\n                listMapping.add(m);\\n            }\\n        }\\n    }\\n    String merge(List<String> data) {\\n        if (data.isEmpty()) {\\n            return \\\"\\\";\\n        }\\n        String r = \\\"\\\";\\n        for (String d : data) {\\n            r += \\\";\\\" + d;\\n        }\\n        return r.substring(1);\\n    }\\n    List<RepositoryDefinition> getData() {\\n        List<RepositoryDefinition> result = new ArrayList<RepositoryDefinition>();\\n        for (RowRepo r : listRepo) {\\n            RepositoryDefinition rd = new RepositoryDefinition();\\n            rd.setType(r.type);\\n            rd.setUrl(r.url);\\n            result.add(rd);\\n            for (RowMapping m : listMapping) {\\n                if (r.url.equals(m.repoUrl)) {\\n                    RepositoryMapping rm = new RepositoryMapping();\\n                    rm.setLocal(m.local != null ? m.local : \\\"\\\");\\n                    rm.setRepository(m.remote != null ? m.remote : \\\"\\\");\\n                    if (StringUtils.isNotBlank(m.excludes)) {\\n                        rm.getExcludes().addAll(Arrays.asList(m.excludes.trim().split(\\\";\\\")));\\n                    }\\n                    if (StringUtils.isNotBlank(m.includes)) {\\n                        rm.getIncludes().addAll(Arrays.asList(m.includes.trim().split(\\\";\\\")));\\n                    }\\n                    rd.getMapping().add(rm);\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n    static class RowRepo {\\n        public String type;\\n        public String url;\\n    }\\n    static class RowMapping {\\n        public String repoUrl;\\n        public String local;\\n        public String remote;\\n        public String excludes;\\n        public String includes;\\n    }\\n}\""
            },
            "m14": {
                "content": "The source code of `RepositoriesMappingController.java` reveals the following key insights:\n\n1. **Functionality**:  \n   - This class is responsible for managing repository mappings in a dialog-based UI.\n   - It interacts with two main data structures:\n     - `RepositoryDefinition`: Represents repository definitions (type and URL).\n     - `RepositoryMapping`: Represents how repositories are mapped (local, remote, includes, excludes).\n\n2. **UI Interaction**:\n   - The controller uses `RepositoriesMappingDialog` to display and edit repository data.\n   - It initializes table models for repositories and mappings.\n   - Implements actions for buttons like \"Add\", \"Remove\", \"OK\", and \"Cancel\".\n\n3. **Key Dependencies**:\n   - Directly imports and uses:\n     - `RepositoryDefinition` and `RepositoryMapping` (from `gen.core.project`)\n     - `OStrings` (for string localization)\n     - `DockingUI` (for UI layout/display)\n\n4. **Data Flow**:\n   - `putData()` and `getData()` methods handle conversion between UI rows (`RowRepo`, `RowMapping`) and core data models (`RepositoryDefinition`, `RepositoryMapping`).\n   - Changes in repository URLs propagate through mappings.\n\n### Impact Analysis\n\nGiven this structure, changes to `RepositoriesMappingController.java` may impact:\n- **RepositoriesMappingDialog**: As it's tightly bound to the UI logic.\n- **RepositoryDefinition** and **RepositoryMapping**: Core data models used throughout the system.\n- **ProjectPropertiesDialog**: Has high conceptual coupling and co-change history, suggesting shared context or usage elsewhere in the application.\n\n### Next Steps\n\nTo ensure synchronization across impacted entities, I will now retrieve the source code for `ProjectPropertiesDialog` using `get_origin_code`. This will help identify potential overlaps or shared functionality that explains the strong conceptual coupling and co-change relationship.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_931531d85cbd45bb84e5c6",
                        "function": {
                            "arguments": "{\"entity\": \"ProjectPropertiesDialog\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m15": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.omegat.gui.dialogs;\\nimport java.awt.BorderLayout;\\nimport java.awt.Color;\\nimport java.awt.Dimension;\\nimport java.awt.GridBagConstraints;\\nimport java.awt.GridBagLayout;\\nimport java.awt.Insets;\\nimport java.awt.Label;\\nimport java.awt.Rectangle;\\nimport java.awt.event.ActionEvent;\\nimport java.awt.event.ActionListener;\\nimport java.io.File;\\nimport java.util.ArrayList;\\nimport java.util.List;\\nimport javax.swing.AbstractAction;\\nimport javax.swing.BorderFactory;\\nimport javax.swing.Box;\\nimport javax.swing.BoxLayout;\\nimport javax.swing.DefaultComboBoxModel;\\nimport javax.swing.JButton;\\nimport javax.swing.JCheckBox;\\nimport javax.swing.JComboBox;\\nimport javax.swing.JDialog;\\nimport javax.swing.JFrame;\\nimport javax.swing.JLabel;\\nimport javax.swing.JOptionPane;\\nimport javax.swing.JPanel;\\nimport javax.swing.JScrollPane;\\nimport javax.swing.JTextArea;\\nimport javax.swing.JTextField;\\nimport javax.swing.Scrollable;\\nimport javax.swing.border.Border;\\nimport javax.swing.border.EmptyBorder;\\nimport javax.swing.border.EtchedBorder;\\nimport org.apache.lucene.util.Version;\\nimport org.omegat.CLIParameters;\\nimport org.omegat.core.Core;\\nimport org.omegat.core.data.CommandVarExpansion;\\nimport org.omegat.core.data.ProjectProperties;\\nimport org.omegat.core.segmentation.SRX;\\nimport org.omegat.filters2.master.FilterMaster;\\nimport org.omegat.filters2.master.PluginUtils;\\nimport org.omegat.gui.filters2.FiltersCustomizer;\\nimport org.omegat.gui.segmentation.SegmentationCustomizer;\\nimport org.omegat.tokenizer.DefaultTokenizer;\\nimport org.omegat.tokenizer.ITokenizer;\\nimport org.omegat.util.Language;\\nimport org.omegat.util.Log;\\nimport org.omegat.util.OConsts;\\nimport org.omegat.util.OStrings;\\nimport org.omegat.util.Preferences;\\nimport org.omegat.util.StaticUtils;\\nimport org.omegat.util.StringUtil;\\nimport org.omegat.util.gui.DockingUI;\\nimport org.omegat.util.gui.LanguageComboBoxRenderer;\\nimport org.omegat.util.gui.OmegaTFileChooser;\\nimport org.omegat.util.gui.StaticUIUtils;\\nimport org.omegat.util.gui.TokenizerBehaviorComboBoxRenderer;\\nimport org.omegat.util.gui.TokenizerComboBoxRenderer;\\nimport org.openide.awt.Mnemonics;\\nimport gen.core.filters.Filters;\\nimport gen.core.project.RepositoryDefinition;\\n@SuppressWarnings(\\\"serial\\\")\\npublic class ProjectPropertiesDialog extends JDialog {\\n    private ProjectProperties projectProperties;\\n    public enum Mode {\\n        NEW_PROJECT,\\n        RESOLVE_DIRS,\\n        EDIT_PROJECT\\n    }\\n    private Mode dialogType;\\n    private SRX srx;\\n    private Filters filters;\\n    private List<String> srcExcludes = new ArrayList<>();\\n    public ProjectPropertiesDialog(final ProjectProperties projectProperties, String projFileName,\\n            Mode dialogTypeValue) {\\n        super(Core.getMainWindow().getApplicationFrame(), true);\\n        this.projectProperties = projectProperties;\\n        this.srx = projectProperties.getProjectSRX();\\n        this.dialogType = dialogTypeValue;\\n        filters = FilterMaster.loadConfig(projectProperties.getProjectInternal());\\n        srcExcludes.addAll(projectProperties.getSourceRootExcludes());\\n        Border emptyBorder = new EmptyBorder(2, 0, 2, 0);\\n        Box centerBox = new ScrollableBox(BoxLayout.Y_AXIS);\\n                centerBox.setBackground(getBackground());\\n        centerBox.setOpaque(true);\\n        centerBox.setBorder(new EmptyBorder(5, 5, 5, 5));\\n                JTextArea m_messageArea = new JTextArea();\\n        m_messageArea.setEditable(false);\\n        m_messageArea.setOpaque(false);\\n        m_messageArea.setFont(new Label().getFont());\\n        Box bMes = Box.createHorizontalBox();\\n        bMes.setBorder(emptyBorder);\\n        bMes.add(m_messageArea);\\n        bMes.add(Box.createHorizontalGlue());\\n        centerBox.add(bMes);\\n                Box localesBox = Box.createHorizontalBox();\\n        localesBox.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), OStrings.getString(\\\"PP_LANGUAGES\\\") ));\\n                Box bL = Box.createVerticalBox();\\n        localesBox.add(bL);\\n                JLabel m_sourceLocaleLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_sourceLocaleLabel, OStrings.getString(\\\"PP_SRC_LANG\\\"));\\n        Box bSL = Box.createHorizontalBox();\\n        bSL.setBorder(emptyBorder);\\n        bSL.add(m_sourceLocaleLabel);\\n        bSL.add(Box.createHorizontalGlue());\\n        bL.add(bSL);\\n                final JComboBox<Language> m_sourceLocaleField = new JComboBox<>(Language.LANGUAGES);\\n        if (m_sourceLocaleField.getMaximumRowCount() < 20) \\n            m_sourceLocaleField.setMaximumRowCount(20);\\n        m_sourceLocaleField.setEditable(true);\\n        m_sourceLocaleField.setRenderer(new LanguageComboBoxRenderer());\\n        m_sourceLocaleField.setSelectedItem(projectProperties.getSourceLanguage());\\n        bL.add(m_sourceLocaleField);\\n                JLabel m_targetLocaleLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_targetLocaleLabel, OStrings.getString(\\\"PP_LOC_LANG\\\"));\\n        Box bLL = Box.createHorizontalBox();\\n        bLL.setBorder(emptyBorder);\\n        bLL.add(m_targetLocaleLabel);\\n        bLL.add(Box.createHorizontalGlue());\\n        bL.add(bLL);\\n                final JComboBox<Language> m_targetLocaleField = new JComboBox<>(Language.LANGUAGES);\\n        if (m_targetLocaleField.getMaximumRowCount() < 20)\\n            m_targetLocaleField.setMaximumRowCount(20);\\n        m_targetLocaleField.setEditable(true);\\n        m_targetLocaleField.setRenderer(new LanguageComboBoxRenderer());\\n        m_targetLocaleField.setSelectedItem(projectProperties.getTargetLanguage());\\n        bL.add(m_targetLocaleField);\\n                Box bT = Box.createVerticalBox();\\n        localesBox.add(bT);\\n        Class<?>[] tokenizers = PluginUtils.getTokenizerClasses().toArray(new Class<?>[0]);\\n                JLabel m_sourceTokenizerLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_sourceTokenizerLabel, OStrings.getString(\\\"PP_SRC_TOK\\\"));\\n        Box bST = Box.createHorizontalBox();\\n        bST.setBorder(emptyBorder);\\n        bST.add(m_sourceTokenizerLabel);\\n        bST.add(Box.createHorizontalGlue());\\n        bT.add(bST);\\n                final JComboBox<Class<?>> m_sourceTokenizerField = new JComboBox<>(tokenizers);\\n        if (m_sourceTokenizerField.getMaximumRowCount() < 20)\\n            m_sourceTokenizerField.setMaximumRowCount(20);\\n        m_sourceTokenizerField.setEditable(false);\\n        m_sourceTokenizerField.setRenderer(new TokenizerComboBoxRenderer());\\n        m_sourceTokenizerField.setSelectedItem(projectProperties.getSourceTokenizer());\\n        bT.add(m_sourceTokenizerField);\\n        String cliTokSrc = Core.getParams().get(CLIParameters.TOKENIZER_SOURCE);\\n        if (cliTokSrc != null) {\\n            try {\\n                Class<?> srcTokClass = Class.forName(cliTokSrc);\\n                m_sourceTokenizerField.setEnabled(false);\\n                m_sourceTokenizerField.addItem(srcTokClass);\\n                m_sourceTokenizerField.setSelectedItem(cliTokSrc);\\n            } catch (ClassNotFoundException | LinkageError ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_sourceLocaleField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_sourceLocaleField.isEnabled()) return;\\n                Object newLang = m_sourceLocaleField.getSelectedItem();\\n                if (newLang instanceof String) {\\n                    newLang = new Language((String)newLang);\\n                }\\n                Class<?> newTok = PluginUtils.getTokenizerClassForLanguage((Language)newLang);\\n                m_sourceTokenizerField.setSelectedItem(newTok);\\n            }});\\n                JLabel m_targetTokenizerLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_targetTokenizerLabel, OStrings.getString(\\\"PP_LOC_TOK\\\"));\\n        Box bTT = Box.createHorizontalBox();\\n        bTT.setBorder(emptyBorder);\\n        bTT.add(m_targetTokenizerLabel);\\n        bTT.add(Box.createHorizontalGlue());\\n        bT.add(bTT);\\n                final JComboBox<Class<?>> m_targetTokenizerField = new JComboBox<>(tokenizers);\\n        if (m_targetTokenizerField.getMaximumRowCount() < 20)\\n            m_targetTokenizerField.setMaximumRowCount(20);\\n        m_targetTokenizerField.setEditable(false);\\n        m_targetTokenizerField.setRenderer(new TokenizerComboBoxRenderer());\\n        m_targetTokenizerField.setSelectedItem(projectProperties.getTargetTokenizer());\\n        bT.add(m_targetTokenizerField);\\n        String cliTokTrg = Core.getParams().get(CLIParameters.TOKENIZER_TARGET);\\n        if (cliTokTrg != null) {\\n            try {\\n                Class<?> trgTokClass = Class.forName(cliTokTrg);\\n                m_targetTokenizerField.setEnabled(false);\\n                m_targetTokenizerField.addItem(trgTokClass);\\n                m_targetTokenizerField.setSelectedItem(cliTokTrg);\\n            } catch (ClassNotFoundException | LinkageError ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_targetLocaleField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_targetLocaleField.isEnabled()) return;\\n                Object newLang = m_targetLocaleField.getSelectedItem();\\n                if (newLang instanceof String) {\\n                    newLang = new Language((String)newLang);\\n                }\\n                Class<?> newTok = PluginUtils.getTokenizerClassForLanguage((Language)newLang);\\n                m_targetTokenizerField.setSelectedItem(newTok);\\n            }});\\n                Box bB = Box.createVerticalBox();\\n        localesBox.add(bB);\\n                JLabel m_sourceTokenizerBehaviorLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_sourceTokenizerBehaviorLabel, OStrings.getString(\\\"PP_SRC_TOK_BEHAVIOR\\\"));\\n        Box bSTB = Box.createHorizontalBox();\\n        bSTB.setBorder(emptyBorder);\\n        bSTB.add(m_sourceTokenizerBehaviorLabel);\\n        bSTB.add(Box.createHorizontalGlue());\\n        bB.add(bSTB);\\n                Class<?> srcTokClass = projectProperties.getSourceTokenizer();\\n        ITokenizer srcTok;\\n        try {\\n            srcTok = (ITokenizer) srcTokClass.newInstance();\\n        } catch (Exception e) {\\n            srcTok = new DefaultTokenizer();\\n        }\\n        final JComboBox<Version> m_sourceTokenizerBehaviorField = new JComboBox<>(\\n                srcTok.getSupportedBehaviors().keySet().toArray(new Version[0]));\\n        m_sourceTokenizerBehaviorField.setEnabled(!srcTok.getSupportedBehaviors().isEmpty());\\n        if (m_sourceTokenizerBehaviorField.getMaximumRowCount() < 20)\\n            m_sourceTokenizerBehaviorField.setMaximumRowCount(20);\\n        m_sourceTokenizerBehaviorField.setEditable(false);\\n        m_sourceTokenizerBehaviorField.setRenderer(\\n                new TokenizerBehaviorComboBoxRenderer(srcTok.getSupportedBehaviors(),\\n                        srcTok.getDefaultBehavior()));\\n        m_sourceTokenizerBehaviorField.setSelectedItem(srcTok.getBehavior());\\n        bB.add(m_sourceTokenizerBehaviorField);\\n        if (!m_sourceTokenizerField.isEnabled()) {\\n            m_sourceTokenizerBehaviorField.setEnabled(false);\\n        }\\n        final String cliTokSrcBehavior = Core.getParams().get(CLIParameters.TOKENIZER_BEHAVIOR_SOURCE);\\n        if (cliTokSrcBehavior != null) {\\n            try {\\n                Version cliTokSrcVersion = Version.valueOf(cliTokSrcBehavior);\\n                m_sourceTokenizerBehaviorField.setEnabled(false);\\n                m_sourceTokenizerBehaviorField.addItem(cliTokSrcVersion);\\n                m_sourceTokenizerBehaviorField.setSelectedItem(cliTokSrcBehavior);\\n            } catch (IllegalArgumentException ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_sourceTokenizerField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_sourceTokenizerField.isEnabled()) {\\n                    return;\\n                }\\n                if (cliTokSrcBehavior != null) {\\n                    return;\\n                }\\n                Object cls = m_sourceTokenizerField.getSelectedItem();\\n                if (!(cls instanceof Class<?>)) {\\n                    return;\\n                }\\n                ITokenizer newTok;\\n                try {\\n                    newTok = (ITokenizer)((Class<?>) cls).newInstance();\\n                    m_sourceTokenizerBehaviorField.setRenderer(\\n                            new TokenizerBehaviorComboBoxRenderer(newTok.getSupportedBehaviors(),\\n                                    newTok.getDefaultBehavior()));\\n                    m_sourceTokenizerBehaviorField.setModel(new DefaultComboBoxModel<>(\\n                            newTok.getSupportedBehaviors().keySet().toArray(new Version[0])));\\n                    if (m_sourceTokenizerBehaviorField.getModel().getSize() > 0) {\\n                        m_sourceTokenizerBehaviorField.setEnabled(true);\\n                        m_sourceTokenizerBehaviorField.setSelectedItem(newTok.getBehavior());\\n                    } else {\\n                        m_sourceTokenizerBehaviorField.setEnabled(false);\\n                    }\\n                } catch (InstantiationException | IllegalAccessException ex) {\\n                }\\n            }});\\n                JLabel m_targetTokenizerBehaviorLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_targetTokenizerBehaviorLabel, OStrings.getString(\\\"PP_LOC_TOK_BEHAVIOR\\\"));\\n        Box bTTB = Box.createHorizontalBox();\\n        bTTB.setBorder(emptyBorder);\\n        bTTB.add(m_targetTokenizerBehaviorLabel);\\n        bTTB.add(Box.createHorizontalGlue());\\n        bB.add(bTTB);\\n                Class<?> trgTokClass = projectProperties.getTargetTokenizer();\\n        ITokenizer trgTok;\\n        try {\\n            trgTok = (ITokenizer) trgTokClass.newInstance();\\n        } catch (InstantiationException | IllegalAccessException e) {\\n            trgTok = new DefaultTokenizer();\\n        }\\n        final JComboBox<Version> m_targetTokenizerBehaviorField = new JComboBox<>(\\n                trgTok.getSupportedBehaviors().keySet().toArray(new Version[0]));\\n        m_targetTokenizerBehaviorField.setEnabled(!trgTok.getSupportedBehaviors().isEmpty());\\n        if (m_targetTokenizerBehaviorField.getMaximumRowCount() < 20)\\n            m_targetTokenizerBehaviorField.setMaximumRowCount(20);\\n        m_targetTokenizerBehaviorField.setEditable(false);\\n        m_targetTokenizerBehaviorField.setRenderer(\\n                new TokenizerBehaviorComboBoxRenderer(trgTok.getSupportedBehaviors(),\\n                        trgTok.getDefaultBehavior()));\\n        m_targetTokenizerBehaviorField.setSelectedItem(trgTok.getBehavior());\\n        bB.add(m_targetTokenizerBehaviorField);\\n        if (!m_targetTokenizerField.isEnabled()) {\\n            m_targetTokenizerBehaviorField.setEnabled(false);\\n        }\\n        final String cliTokTrgBehavior = Core.getParams().get(CLIParameters.TOKENIZER_BEHAVIOR_TARGET);\\n        if (cliTokTrgBehavior != null) {\\n            try {\\n                Version cliTokTrgVersion = Version.valueOf(cliTokTrgBehavior);\\n                m_targetTokenizerBehaviorField.setEnabled(false);\\n                m_targetTokenizerBehaviorField.addItem(cliTokTrgVersion);\\n                m_targetTokenizerBehaviorField.setSelectedItem(cliTokTrgBehavior);\\n            } catch (IllegalArgumentException ex) {\\n                Log.log(ex);\\n            }\\n        }\\n        m_targetTokenizerField.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                if (!m_targetTokenizerField.isEnabled()) {\\n                    return;\\n                }\\n                if (cliTokTrgBehavior != null) {\\n                    return;\\n                }\\n                Object cls = m_targetTokenizerField.getSelectedItem();\\n                if (!(cls instanceof Class<?>)) {\\n                    return;\\n                }\\n                ITokenizer newTok;\\n                try {\\n                    newTok = (ITokenizer)((Class<?>) cls).newInstance();\\n                    m_targetTokenizerBehaviorField.setRenderer(\\n                            new TokenizerBehaviorComboBoxRenderer(newTok.getSupportedBehaviors(),\\n                                    newTok.getDefaultBehavior()));\\n                    m_targetTokenizerBehaviorField.setModel(new DefaultComboBoxModel<Version>(\\n                            newTok.getSupportedBehaviors().keySet().toArray(new Version[0])));\\n                    if (m_targetTokenizerBehaviorField.getModel().getSize() > 0) {\\n                        m_targetTokenizerBehaviorField.setEnabled(true);\\n                        m_targetTokenizerBehaviorField.setSelectedItem(newTok.getBehavior());\\n                    } else {\\n                        m_targetTokenizerBehaviorField.setEnabled(false);\\n                    }\\n                } catch (InstantiationException | IllegalAccessException ex) {\\n                }\\n            }});\\n        centerBox.add(localesBox);\\n                centerBox.add(Box.createVerticalStrut(5));\\n        JPanel optionsBox = new JPanel(new GridBagLayout());\\n        optionsBox.setBorder(new EtchedBorder());\\n        optionsBox.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),\\n                OStrings.getString(\\\"PP_OPTIONS\\\")));\\n        GridBagConstraints gbc = new GridBagConstraints();\\n        gbc.insets = new Insets(3, 3, 3, 3);\\n                final JCheckBox m_sentenceSegmentingCheckBox = new JCheckBox();\\n        Mnemonics\\n                .setLocalizedText(m_sentenceSegmentingCheckBox, OStrings.getString(\\\"PP_SENTENCE_SEGMENTING\\\"));\\n        gbc.gridx = 0;\\n        gbc.gridy = 0;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_sentenceSegmentingCheckBox, gbc);\\n        JButton m_sentenceSegmentingButton = new JButton();\\n        Mnemonics.setLocalizedText(m_sentenceSegmentingButton, OStrings.getString(\\\"MW_OPTIONSMENU_SENTSEG\\\"));\\n        gbc.gridx = 1;\\n        gbc.gridy = 0;\\n        gbc.anchor = GridBagConstraints.EAST;\\n        optionsBox.add(m_sentenceSegmentingButton, gbc);\\n                JButton m_fileFiltersButton = new JButton();\\n        Mnemonics.setLocalizedText(m_fileFiltersButton, OStrings.getString(\\\"WM_PROJECTMENU_FILEFILTERS\\\"));\\n        gbc.gridx = 1;\\n        gbc.gridy = 1;\\n        gbc.anchor = GridBagConstraints.EAST;\\n        optionsBox.add(m_fileFiltersButton, gbc);\\n                JButton m_RepositoriesButton = new JButton();\\n        Mnemonics.setLocalizedText(m_RepositoriesButton, OStrings.getString(\\\"PP_REPOSITORIES\\\"));\\n        gbc.gridx = 1;\\n        gbc.gridy = 2;\\n        gbc.anchor = GridBagConstraints.EAST;\\n        optionsBox.add(m_RepositoriesButton, gbc);\\n                final JCheckBox m_allowDefaultsCheckBox = new JCheckBox();\\n        Mnemonics.setLocalizedText(m_allowDefaultsCheckBox, OStrings.getString(\\\"PP_ALLOW_DEFAULTS\\\"));\\n        gbc.gridx = 0;\\n        gbc.gridy = 1;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_allowDefaultsCheckBox, gbc);\\n                final JCheckBox m_removeTagsCheckBox = new JCheckBox();\\n        Mnemonics.setLocalizedText(m_removeTagsCheckBox, OStrings.getString(\\\"PP_REMOVE_TAGS\\\"));\\n        gbc.gridx = 0;\\n        gbc.gridy = 2;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_removeTagsCheckBox, gbc);\\n                JLabel m_externalCommandLabel = new JLabel();\\n        gbc.gridx = 0;\\n        gbc.gridy = 3;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        optionsBox.add(m_externalCommandLabel, gbc);\\n        final JTextArea m_externalCommandTextArea = new JTextArea();\\n        m_externalCommandTextArea.setRows(2);\\n        m_externalCommandTextArea.setLineWrap(true);\\n        m_externalCommandTextArea.setText(projectProperties.getExternalCommand());\\n        if (Preferences.isPreference(Preferences.ALLOW_PROJECT_EXTERN_CMD)) {\\n            Mnemonics.setLocalizedText(m_externalCommandLabel, OStrings.getString(\\\"PP_EXTERNAL_COMMAND\\\"));\\n        } else {\\n            Mnemonics.setLocalizedText(m_externalCommandLabel, OStrings.getString(\\\"PP_EXTERN_CMD_DISABLED\\\"));\\n            m_externalCommandTextArea.setEditable(false);\\n            m_externalCommandTextArea.setToolTipText(OStrings.getString(\\\"PP_EXTERN_CMD_DISABLED_TOOLTIP\\\"));\\n            m_externalCommandLabel.setToolTipText(OStrings.getString(\\\"PP_EXTERN_CMD_DISABLED_TOOLTIP\\\"));\\n            m_externalCommandTextArea.setBackground(getBackground());\\n        }\\n        final JScrollPane m_externalCommandScrollPane = new JScrollPane();\\n        m_externalCommandScrollPane.setViewportView(m_externalCommandTextArea);\\n        gbc.gridx = 0;\\n        gbc.gridy = 4;\\n        gbc.weightx = 1;\\n        gbc.gridwidth = 2;\\n        gbc.anchor = GridBagConstraints.WEST;\\n        gbc.fill = GridBagConstraints.HORIZONTAL;\\n        optionsBox.add(m_externalCommandScrollPane, gbc);\\n        final JLabel m_variablesLabel = new javax.swing.JLabel();\\n        final JComboBox<String> m_variablesList = new JComboBox<>(CommandVarExpansion.COMMAND_VARIABLES);\\n        final JButton m_insertButton = new javax.swing.JButton();\\n                if (Preferences.isPreference(Preferences.ALLOW_PROJECT_EXTERN_CMD)) {\\n            Mnemonics.setLocalizedText(m_variablesLabel,\\n                    OStrings.getString(\\\"EXT_TMX_MATCHES_TEMPLATE_VARIABLES\\\"));\\n            gbc.gridx = 0;\\n            gbc.gridy = 5;\\n            gbc.anchor = GridBagConstraints.WEST;\\n            optionsBox.add(m_variablesLabel, gbc);\\n            Mnemonics.setLocalizedText(m_insertButton, OStrings.getString(\\\"BUTTON_INSERT\\\"));\\n            m_insertButton.addActionListener(new java.awt.event.ActionListener() {\\n                @Override\\n                public void actionPerformed(ActionEvent e) {\\n                    m_externalCommandTextArea.replaceSelection(m_variablesList.getSelectedItem().toString());\\n                }\\n            });\\n            gbc.gridx = 0;\\n            gbc.gridy = 6;\\n            gbc.weightx = 1;\\n            gbc.gridwidth = 2;\\n            gbc.anchor = GridBagConstraints.WEST;\\n            gbc.fill = GridBagConstraints.HORIZONTAL;\\n            optionsBox.add(m_insertButton, gbc);\\n        }\\n        centerBox.add(optionsBox, BorderLayout.WEST);\\n                centerBox.add(Box.createVerticalStrut(5));\\n        Box dirsBox = Box.createVerticalBox();\\n        dirsBox.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), OStrings.getString(\\\"PP_DIRECTORIES\\\") ));\\n        JLabel m_srcRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_srcRootLabel, OStrings.getString(\\\"PP_SRC_ROOT\\\"));\\n        Box bSrc = Box.createHorizontalBox();\\n        bSrc.setBorder(emptyBorder);\\n        bSrc.add(m_srcRootLabel);\\n        bSrc.add(Box.createHorizontalGlue());\\n        JButton m_srcExcludes = new JButton();\\n        Mnemonics.setLocalizedText(m_srcExcludes, OStrings.getString(\\\"PP_BUTTON_BROWSE_SRC_EXCLUDES\\\"));\\n        bSrc.add(m_srcExcludes);\\n        JButton m_srcBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_srcBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_SRC\\\"));\\n        bSrc.add(m_srcBrowse);\\n        final JTextField m_srcRootField = new JTextField();\\n        dirsBox.add(bSrc);\\n        dirsBox.add(m_srcRootField);\\n        JLabel m_tmRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_tmRootLabel, OStrings.getString(\\\"PP_TM_ROOT\\\"));\\n        Box bTM = Box.createHorizontalBox();\\n        bTM.setBorder(emptyBorder);\\n        bTM.add(m_tmRootLabel);\\n        bTM.add(Box.createHorizontalGlue());\\n        JButton m_tmBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_tmBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_TM\\\"));\\n        bTM.add(m_tmBrowse);\\n        final JTextField m_tmRootField = new JTextField();\\n        dirsBox.add(bTM);\\n        dirsBox.add(m_tmRootField);\\n        JLabel m_glosRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_glosRootLabel, OStrings.getString(\\\"PP_GLOS_ROOT\\\"));\\n        Box bGlos = Box.createHorizontalBox();\\n        bGlos.setBorder(emptyBorder);\\n        bGlos.add(m_glosRootLabel);\\n        bGlos.add(Box.createHorizontalGlue());\\n        JButton m_glosBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_glosBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_GL\\\"));\\n        bGlos.add(m_glosBrowse);\\n        final JTextField m_glosRootField = new JTextField();\\n        dirsBox.add(bGlos);\\n        dirsBox.add(m_glosRootField);\\n        JLabel m_writeableGlosLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_writeableGlosLabel, OStrings.getString(\\\"PP_WRITEABLE_GLOS\\\"));\\n        Box bwGlos = Box.createHorizontalBox();\\n        bwGlos.setBorder(emptyBorder);\\n        bwGlos.add(m_writeableGlosLabel);\\n        bwGlos.add(Box.createHorizontalGlue());\\n        JButton m_wGlosBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_wGlosBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_WG\\\"));\\n        bwGlos.add(m_wGlosBrowse);\\n        final JTextField m_writeableGlosField = new JTextField();\\n        dirsBox.add(bwGlos);\\n        dirsBox.add(m_writeableGlosField);\\n        JLabel m_locDictLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_locDictLabel, OStrings.getString(\\\"PP_DICT_ROOT\\\"));\\n        Box bDict = Box.createHorizontalBox();\\n        bDict.setBorder(emptyBorder);\\n        bDict.add(m_locDictLabel);\\n        bDict.add(Box.createHorizontalGlue());\\n        JButton m_dictBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_dictBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_DICT\\\"));\\n        bDict.add(m_dictBrowse);\\n        final JTextField m_dictRootField = new JTextField();\\n        dirsBox.add(bDict);\\n        dirsBox.add(m_dictRootField);\\n        JLabel m_locRootLabel = new JLabel();\\n        Mnemonics.setLocalizedText(m_locRootLabel, OStrings.getString(\\\"PP_LOC_ROOT\\\"));\\n        Box bLoc = Box.createHorizontalBox();\\n        bLoc.setBorder(emptyBorder);\\n        bLoc.add(m_locRootLabel);\\n        bLoc.add(Box.createHorizontalGlue());\\n        JButton m_locBrowse = new JButton();\\n        Mnemonics.setLocalizedText(m_locBrowse, OStrings.getString(\\\"PP_BUTTON_BROWSE_TAR\\\"));\\n        bLoc.add(m_locBrowse);\\n        final JTextField m_locRootField = new JTextField();\\n        dirsBox.add(bLoc);\\n        dirsBox.add(m_locRootField);\\n        centerBox.add(dirsBox);\\n        JScrollPane scrollPane = new JScrollPane(centerBox);\\n        scrollPane.getViewport().setBackground(getBackground());\\n        getContentPane().add(scrollPane, \\\"Center\\\");\\n        JButton m_okButton = new JButton();\\n        Mnemonics.setLocalizedText(m_okButton, OStrings.getString(\\\"BUTTON_OK\\\"));\\n        getRootPane().setDefaultButton(m_okButton);\\n        JButton m_cancelButton = new JButton();\\n        Mnemonics.setLocalizedText(m_cancelButton, OStrings.getString(\\\"BUTTON_CANCEL\\\"));\\n        Box southBox = Box.createHorizontalBox();\\n        southBox.setBorder(new EmptyBorder(5, 5, 5, 5));\\n        southBox.add(Box.createHorizontalGlue());\\n        southBox.add(m_okButton);\\n        southBox.add(Box.createHorizontalStrut(5));\\n        southBox.add(m_cancelButton);\\n        getContentPane().add(southBox, \\\"South\\\");\\n        setResizable(false);\\n        m_okButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doOK(m_sourceLocaleField, m_targetLocaleField, m_sourceTokenizerField, m_targetTokenizerField,\\n                        m_sourceTokenizerBehaviorField, m_targetTokenizerBehaviorField,\\n                        m_sentenceSegmentingCheckBox, m_srcRootField, m_locRootField, m_glosRootField,\\n                        m_writeableGlosField, m_tmRootField, m_dictRootField, m_allowDefaultsCheckBox,\\n                        m_removeTagsCheckBox, m_externalCommandTextArea);\\n            }\\n        });\\n        m_cancelButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doCancel();\\n            }\\n        });\\n        m_srcBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(1, m_srcRootField);\\n            }\\n        });\\n        m_srcExcludes.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                List<String> result = FilenamePatternsEditorController.show(srcExcludes);\\n                if (result != null) {\\n                    srcExcludes.clear();\\n                    srcExcludes.addAll(result);\\n                }\\n            }\\n        });\\n        m_locBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(2, m_locRootField);\\n            }\\n        });\\n        m_glosBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                                boolean isDefaultGlossaryFile = projectProperties.isDefaultWriteableGlossaryFile();\\n                doBrowseDirectoy(3, m_glosRootField);\\n                                if (isDefaultGlossaryFile) {\\n                    String newDefault = projectProperties.computeDefaultWriteableGlossaryFile();\\n                    projectProperties.setWriteableGlossary(newDefault);\\n                    m_writeableGlosField.setText(newDefault);\\n                }\\n            }\\n        });\\n        m_wGlosBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(6, m_writeableGlosField);\\n            }\\n        });\\n        m_tmBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(4, m_tmRootField);\\n            }\\n        });\\n        m_dictBrowse.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doBrowseDirectoy(5, m_dictRootField);\\n            }\\n        });\\n        final JDialog self = this;\\n        m_sentenceSegmentingButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                SegmentationCustomizer segmentationCustomizer = new SegmentationCustomizer(self, true,\\n                        SRX.getDefault(), Preferences.getSRX(), srx);\\n                segmentationCustomizer.setVisible(true);\\n                if (segmentationCustomizer.getReturnStatus() == SegmentationCustomizer.RET_OK) {\\n                    if (segmentationCustomizer.isProjectSpecific()) {\\n                        srx = segmentationCustomizer.getSRX();\\n                    } else {\\n                        srx = null;\\n                    }\\n                }\\n            }\\n        });\\n        m_fileFiltersButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                JFrame mainWindow = Core.getMainWindow().getApplicationFrame();\\n                FiltersCustomizer dlg = new FiltersCustomizer(mainWindow, true, FilterMaster\\n                        .createDefaultFiltersConfig(), FilterMaster.loadConfig(StaticUtils.getConfigDir()),\\n                        filters);\\n                dlg.setVisible(true);\\n                if (dlg.getReturnStatus() == FiltersCustomizer.RET_OK) {\\n                                        filters = dlg.result;\\n                }\\n            }\\n        });\\n        m_RepositoriesButton.addActionListener(new ActionListener() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                JFrame mainWindow = Core.getMainWindow().getApplicationFrame();\\n                List<RepositoryDefinition> r = new RepositoriesMappingController().show(mainWindow,\\n                        projectProperties.getRepositories());\\n                if (r != null) {\\n                    projectProperties.setRepositories(r);\\n                }\\n            }\\n        });\\n        StaticUIUtils.setEscapeAction(this, new AbstractAction() {\\n            @Override\\n            public void actionPerformed(ActionEvent e) {\\n                doCancel();\\n            }\\n        });\\n        m_srcRootField.setText(projectProperties.getSourceRoot());\\n        m_locRootField.setText(projectProperties.getTargetRoot());\\n        m_glosRootField.setText(projectProperties.getGlossaryRoot());\\n        m_writeableGlosField.setText(projectProperties.getWriteableGlossary());\\n        m_tmRootField.setText(projectProperties.getTMRoot());\\n        m_dictRootField.setText(projectProperties.getDictRoot());\\n        m_sentenceSegmentingCheckBox.setSelected(projectProperties.isSentenceSegmentingEnabled());\\n        m_allowDefaultsCheckBox.setSelected(projectProperties.isSupportDefaultTranslations());\\n        m_removeTagsCheckBox.setSelected(projectProperties.isRemoveTags());\\n        switch (dialogType) {\\n        case RESOLVE_DIRS:\\n                        m_sourceLocaleField.setEnabled(false);\\n            m_targetLocaleField.setEnabled(false);\\n            m_sourceTokenizerField.setEnabled(false);\\n            m_targetTokenizerField.setEnabled(false);\\n            m_sourceTokenizerBehaviorField.setEnabled(false);\\n            m_targetTokenizerBehaviorField.setEnabled(false);\\n            m_sentenceSegmentingCheckBox.setEnabled(false);\\n            m_allowDefaultsCheckBox.setEnabled(false);\\n            m_removeTagsCheckBox.setEnabled(false);\\n            m_externalCommandTextArea.setEnabled(false);\\n            m_insertButton.setEnabled(false);\\n            m_variablesList.setEnabled(false);\\n                        File f = new File(m_srcRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_srcRootField.setForeground(Color.RED);\\n            f = new File(m_locRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_locRootField.setForeground(Color.RED);\\n            f = new File(m_glosRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_glosRootField.setForeground(Color.RED);\\n            f = new File(m_writeableGlosField.getText());\\n            String wGlos = f.getParent();             if (!wGlos.endsWith(File.separator)) {\\n                wGlos += File.separator;\\n            }\\n            f = new File(wGlos);\\n                        if (!f.exists() || !f.isDirectory() || !wGlos.contains(m_glosRootField.getText()))\\n                m_writeableGlosField.setForeground(Color.RED);  \\n            f = new File(m_tmRootField.getText());\\n            if (!f.exists() || !f.isDirectory())\\n                m_tmRootField.setForeground(Color.RED);\\n            break;\\n        }\\n        updateUIText(m_messageArea);\\n        pack();\\n        setSize(9 * getWidth() / 8, getHeight() + 10);\\n        setResizable(true);\\n        StaticUIUtils.fitInScreen(this);\\n        DockingUI.displayCentered(this);\\n    }\\n    private void doBrowseDirectoy(int browseTarget, JTextField field) {\\n        if (field == null) {\\n            return;\\n        }\\n        String title;\\n        boolean fileMode = false;\\n        boolean glossaryFile = false;\\n        if (browseTarget == 6) {\\n            fileMode = true;\\n            glossaryFile = true;\\n        }\\n        switch (browseTarget) {\\n        case 1:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_SOURCE\\\");\\n            break;\\n        case 2:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_TARGET\\\");\\n            break;\\n        case 3:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_GLOS\\\");\\n            break;\\n        case 4:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_TM\\\");\\n            break;\\n        case 5:\\n            title = OStrings.getString(\\\"PP_BROWSE_TITLE_DICT\\\");\\n            break;\\n        case 6:\\n            title = OStrings.getString(\\\"PP_BROWSE_W_GLOS\\\");\\n            break;\\n        default:\\n            return;\\n        }\\n        OmegaTFileChooser browser = new OmegaTFileChooser();\\n                        browser.setDialogTitle(title);\\n        if (fileMode) {\\n            browser.setFileSelectionMode(OmegaTFileChooser.FILES_ONLY);\\n        } else {\\n            browser.setFileSelectionMode(OmegaTFileChooser.DIRECTORIES_ONLY);\\n        }\\n                String curDir = field.getText();\\n        File curDirCheck = new File(curDir);\\n        if (fileMode && !StringUtil.isEmpty(curDirCheck.getName())) {\\n            String dirOnly = curDirCheck.getParent();\\n            dirOnly = (dirOnly != null) ? dirOnly : \\\"\\\";\\n            curDirCheck = new File(dirOnly);\\n        }\\n                if (!curDirCheck.exists() || !curDirCheck.isDirectory()) {\\n            curDir = projectProperties.getProjectRoot();\\n            curDirCheck = new File(curDir);\\n        }\\n                if (!curDirCheck.exists() || !curDirCheck.isDirectory()) {\\n            switch (browseTarget) {\\n            case 1:\\n                curDir = Preferences.getPreference(Preferences.SOURCE_FOLDER);\\n                break;\\n            case 2:\\n                curDir = Preferences.getPreference(Preferences.TARGET_FOLDER);\\n                break;\\n            case 3:\\n                curDir = Preferences.getPreference(Preferences.GLOSSARY_FOLDER);\\n                break;\\n            case 4:\\n                curDir = Preferences.getPreference(Preferences.TM_FOLDER);\\n                break;\\n            case 5:\\n                curDir = Preferences.getPreference(Preferences.DICT_FOLDER);\\n                break;\\n            case 6:\\n                curDir = Preferences.getPreference(Preferences.GLOSSARY_FILE);\\n                break;\\n            }\\n        }\\n        if (fileMode) {\\n            File dirFile = new File(curDir);\\n            curDir = dirFile.getParent();\\n        }\\n        if (curDir.equals(\\\"\\\"))\\n            curDir = Preferences.getPreference(Preferences.CURRENT_FOLDER);\\n        if (!curDir.equals(\\\"\\\")) {\\n            File dir = new File(curDir);\\n            if (dir.exists() && dir.isDirectory()) {\\n                browser.setCurrentDirectory(dir);\\n            }\\n        }\\n                int action = browser.showOpenDialog(this);\\n                if (action != javax.swing.JFileChooser.APPROVE_OPTION)\\n            return;\\n                File dir = browser.getSelectedFile();\\n        if (dir == null)\\n            return;\\n        String str = dir.getAbsolutePath();\\n        if (!fileMode) {\\n            str+= File.separator;         }\\n                if (glossaryFile && !str.endsWith(OConsts.EXT_TSV_TXT) &&!str.endsWith(OConsts.EXT_TSV_UTF8)) {\\n           str += OConsts.EXT_TSV_TXT;         }\\n                switch (browseTarget) {\\n        case 1:\\n            Preferences.setPreference(Preferences.SOURCE_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setSourceRoot(str);\\n            field.setText(projectProperties.getSourceRoot());\\n            if (new File(projectProperties.getSourceRoot()).exists()\\n                    && new File(projectProperties.getSourceRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 2:\\n            Preferences.setPreference(Preferences.TARGET_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setTargetRoot(str);\\n            field.setText(projectProperties.getTargetRoot());\\n            if (new File(projectProperties.getTargetRoot()).exists()\\n                    && new File(projectProperties.getTargetRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 3:\\n            Preferences.setPreference(Preferences.GLOSSARY_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setGlossaryRoot(str);\\n            field.setText(projectProperties.getGlossaryRoot());\\n            if (new File(projectProperties.getGlossaryRoot()).exists()\\n                    && new File(projectProperties.getGlossaryRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 4:\\n            Preferences.setPreference(Preferences.TM_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setTMRoot(str);\\n            field.setText(projectProperties.getTMRoot());\\n            if (new File(projectProperties.getTMRoot()).exists()\\n                    && new File(projectProperties.getTMRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 5:\\n            Preferences.setPreference(Preferences.DICT_FOLDER, browser.getSelectedFile().getParent());\\n            projectProperties.setDictRoot(str);\\n            field.setText(projectProperties.getDictRoot());\\n            if (new File(projectProperties.getDictRoot()).exists()\\n                    && new File(projectProperties.getDictRoot()).isDirectory())\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        case 6:\\n            Preferences.setPreference(Preferences.GLOSSARY_FILE, browser.getSelectedFile().getPath());\\n            projectProperties.setWriteableGlossary(str);\\n            field.setText(projectProperties.getWriteableGlossary());\\n                        if (new File(projectProperties.getWriteableGlossaryDir()).exists()\\n                    && new File(projectProperties.getWriteableGlossaryDir()).isDirectory()\\n                    && projectProperties.getWriteableGlossaryDir().contains(projectProperties.getGlossaryRoot()))\\n                field.setForeground(java.awt.SystemColor.textText);\\n            break;\\n        }\\n    }\\n    private void doOK(JComboBox<Language> m_sourceLocaleField, JComboBox<Language> m_targetLocaleField,\\n            JComboBox<Class<?>> m_sourceTokenizerField, JComboBox<Class<?>> m_targetTokenizerField,\\n            JComboBox<Version> m_sourceTokenizerBehaviorField, JComboBox<Version> m_targetTokenizerBehaviorField,\\n            JCheckBox m_sentenceSegmentingCheckBox, JTextField m_srcRootField, JTextField m_locRootField,\\n            JTextField m_glosRootField, JTextField m_writeableGlosField, JTextField m_tmRootField, JTextField m_dictRootField,\\n            JCheckBox m_allowDefaultsCheckBox, JCheckBox m_removeTagsCheckBox, JTextArea m_customCommandTextArea) {\\n        if (!ProjectProperties.verifySingleLangCode(m_sourceLocaleField.getSelectedItem().toString())) {\\n            JOptionPane.showMessageDialog(\\n                    this,\\n                    OStrings.getString(\\\"NP_INVALID_SOURCE_LOCALE\\\")\\n                            + OStrings.getString(\\\"NP_LOCALE_SUGGESTION\\\"), OStrings.getString(\\\"TF_ERROR\\\"),\\n                    JOptionPane.ERROR_MESSAGE);\\n            m_sourceLocaleField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setSourceLanguage(m_sourceLocaleField.getSelectedItem().toString());\\n        if (!ProjectProperties.verifySingleLangCode(m_targetLocaleField.getSelectedItem().toString())) {\\n            JOptionPane.showMessageDialog(\\n                    this,\\n                    OStrings.getString(\\\"NP_INVALID_TARGET_LOCALE\\\")\\n                            + OStrings.getString(\\\"NP_LOCALE_SUGGESTION\\\"), OStrings.getString(\\\"TF_ERROR\\\"),\\n                    JOptionPane.ERROR_MESSAGE);\\n            m_targetLocaleField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setTargetLanguage(m_targetLocaleField.getSelectedItem().toString());\\n        if (m_sourceTokenizerField.isEnabled()) {\\n            projectProperties.setSourceTokenizer((Class<?>)m_sourceTokenizerField.getSelectedItem());\\n        }\\n        if (m_targetTokenizerField.isEnabled()) {\\n            projectProperties.setTargetTokenizer((Class<?>)m_targetTokenizerField.getSelectedItem());\\n        }\\n        if (m_sourceTokenizerBehaviorField.isEnabled()) {\\n            Class<?> srcTok = (Class<?>)m_sourceTokenizerField.getSelectedItem();\\n            Preferences.setPreference(Preferences.TOK_BEHAVIOR_PREFIX + srcTok.getName(),\\n                    ((Version)m_sourceTokenizerBehaviorField.getSelectedItem()).toString());\\n        }\\n        if (m_targetTokenizerBehaviorField.isEnabled()) {\\n            Class<?> trgTok = (Class<?>)m_targetTokenizerField.getSelectedItem();\\n            Preferences.setPreference(Preferences.TOK_BEHAVIOR_PREFIX + trgTok.getName(),\\n                    ((Version)m_targetTokenizerBehaviorField.getSelectedItem()).toString());\\n        }\\n        projectProperties.setSentenceSegmentingEnabled(m_sentenceSegmentingCheckBox.isSelected());\\n        projectProperties.setSupportDefaultTranslations(m_allowDefaultsCheckBox.isSelected());\\n        projectProperties.setRemoveTags(m_removeTagsCheckBox.isSelected());\\n        projectProperties.setExternalCommand(m_customCommandTextArea.getText());\\n        projectProperties.setSourceRoot(m_srcRootField.getText());\\n        if (!projectProperties.getSourceRoot().endsWith(File.separator))\\n            projectProperties.setSourceRoot(projectProperties.getSourceRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getSourceRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_SOURCEDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_srcRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setTargetRoot(m_locRootField.getText());\\n        if (!projectProperties.getTargetRoot().endsWith(File.separator))\\n            projectProperties.setTargetRoot(projectProperties.getTargetRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getTargetRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_TRANSDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_locRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setGlossaryRoot(m_glosRootField.getText());\\n        if (!projectProperties.getGlossaryRoot().endsWith(File.separator))\\n            projectProperties.setGlossaryRoot(projectProperties.getGlossaryRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getGlossaryRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_GLOSSDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_glosRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setWriteableGlossary(m_writeableGlosField.getText());\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getWriteableGlossaryDir()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_W_GLOSSDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_writeableGlosField.requestFocusInWindow();\\n            return;\\n        }\\n        String glossaryDir = projectProperties.getWriteableGlossaryDir();\\n        if (!glossaryDir.endsWith(File.separator)) {\\n            glossaryDir += File.separator;\\n        }\\n        if (!glossaryDir.contains(projectProperties.getGlossaryRoot())) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_W_GLOSDIR_NOT_INSIDE_GLOS\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_writeableGlosField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setTMRoot(m_tmRootField.getText());\\n        if (!projectProperties.getTMRoot().endsWith(File.separator))\\n            projectProperties.setTMRoot(projectProperties.getTMRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getTMRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_TMDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_tmRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setDictRoot(m_dictRootField.getText());\\n        if (!projectProperties.getDictRoot().endsWith(File.separator))\\n            projectProperties.setDictRoot(projectProperties.getDictRoot() + File.separator);\\n        if (dialogType != Mode.NEW_PROJECT && !new File(projectProperties.getDictRoot()).exists()) {\\n            JOptionPane.showMessageDialog(this, OStrings.getString(\\\"NP_DICTDIR_DOESNT_EXIST\\\"),\\n                    OStrings.getString(\\\"TF_ERROR\\\"), JOptionPane.ERROR_MESSAGE);\\n            m_dictRootField.requestFocusInWindow();\\n            return;\\n        }\\n        projectProperties.setProjectSRX(srx);\\n        projectProperties.setProjectFilters(filters);\\n        projectProperties.getSourceRootExcludes().clear();\\n        projectProperties.getSourceRootExcludes().addAll(srcExcludes);\\n        m_dialogCancelled = false;\\n        setVisible(false);\\n    }\\n    private void doCancel() {\\n                                        if (dialogType == Mode.NEW_PROJECT)\\n            new File(projectProperties.getProjectRoot()).delete();\\n        m_dialogCancelled = true;\\n        setVisible(false);\\n    }\\n    private void updateUIText(JTextArea m_messageArea) {\\n        switch (dialogType) {\\n        case NEW_PROJECT:\\n            setTitle(OStrings.getString(\\\"PP_CREATE_PROJ\\\"));\\n            m_messageArea.setText(OStrings.getString(\\\"PP_MESSAGE_CONFIGPROJ\\\"));\\n            break;\\n        case RESOLVE_DIRS:\\n            setTitle(OStrings.getString(\\\"PP_OPEN_PROJ\\\"));\\n            m_messageArea.setText(OStrings.getString(\\\"PP_MESSAGE_BADPROJ\\\"));\\n            break;\\n        case EDIT_PROJECT:\\n            setTitle(OStrings.getString(\\\"PP_EDIT_PROJECT\\\"));\\n            m_messageArea.setText(OStrings.getString(\\\"PP_MESSAGE_EDITPROJ\\\"));\\n            break;\\n        }\\n    }\\n    private static class ScrollableBox extends Box implements Scrollable {\\n        public ScrollableBox(int axis) {\\n            super(axis);\\n        }\\n        @Override\\n        public Dimension getPreferredScrollableViewportSize() {\\n            return getPreferredSize();\\n        }\\n        @Override\\n        public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {\\n            return getFont().getSize();\\n        }\\n        @Override\\n        public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {\\n            return getFont().getSize();\\n        }\\n        @Override\\n        public boolean getScrollableTracksViewportWidth() {\\n            return true;\\n        }\\n        @Override\\n        public boolean getScrollableTracksViewportHeight() {\\n            return false;\\n        }\\n    }\\n    private boolean m_dialogCancelled;\\n    public ProjectProperties getResult() {\\n        return m_dialogCancelled ? null : projectProperties;\\n    }\\n}\""
            },
            "m16": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m17": {
                "content": "Title: Diagnosis of starting entity `RepositoriesMappingController.java`\n\nChange set: [ProjectPropertiesDialog, RepositoriesMappingDialog, TeamSettings, RepositoriesCredentialsController, ProjectUICommands, DialogsTest, RepositoryDefinition, RepositoryMapping, DockingUI, OStrings, SRX, Filters, CommandVarExpansion, CLIParameters, ProjectProperties, PluginUtils, FiltersCustomizer, SegmentationCustomizer, DefaultTokenizer, ITokenizer, Language, Log, Preferences, StaticUtils, StringUtil, OmegaTFileChooser, StaticUIUtils, TokenizerComboBoxRenderer, LanguageComboBoxRenderer, TokenizerBehaviorComboBoxRenderer, gen.core.filters.Filters, gen.core.project.RepositoryDefinition, gen.core.project.RepositoryMapping, File, Color, Dimension, Rectangle, Label, AbstractAction, Box, Scrollable, BorderLayout, GridBagLayout, GridBagConstraints, Insets, JComboBox, JButton, JTextField, JTextArea, JScrollPane, JCheckBox, JLabel, JPanel, JDialog, JFrame, ActionListener, Version]\n\nDetails:\n1. **ProjectPropertiesDialog**: Directly instantiates `RepositoriesMappingController` to manage repository settings; high conceptual coupling and co-change confidence (66.67%).\n2. **RepositoriesMappingDialog**: Tightly coupled with `RepositoriesMappingController` as the UI component it controls.\n3. **TeamSettings**: Co-changed with moderate support; likely involved in team/repository configuration workflows.\n4. **RepositoriesCredentialsController**: Related to repository management; may share logic or data models.\n5. **ProjectUICommands**: Likely interacts with repository mapping features via UI commands.\n6. **DialogsTest**: Test suite for dialogs, including those involving `RepositoriesMappingController`.\n7. **RepositoryDefinition**: Core model class used by the controller for managing repositories.\n8. **RepositoryMapping**: Core model class used by the controller for mapping repositories.\n9. **DockingUI**: Used for layout/display of the dialog; imported and used directly.\n10. **OStrings**: Used for localization strings within the controller.\n\n11. **SRX**: Potentially related if segmentation is tied to repository operations.\n12. **Filters**: May be involved in filtering repository content.\n13. **CommandVarExpansion**: Could be used in command-line interactions tied to repositories.\n14. **CLIParameters**: Used for handling command-line arguments that affect repository behavior.\n15. **ProjectProperties**: Stores project-level configurations, including repository definitions.\n16. **PluginUtils**: May be involved in tokenizer or filter plugins related to repositories.\n17. **FiltersCustomizer**: Customizes filters potentially applied to repository content.\n18. **SegmentationCustomizer**: If segmentation affects repository files, this could be relevant.\n19. **DefaultTokenizer**: Tokenization may be involved in processing repository files.\n20. **ITokenizer**: Interface for tokenizers used in repository file processing.\n\n21. **Language**: Used in UI/dialog for language selection tied to repositories.\n22. **Log**: Logging framework used across components including this one.\n23. **Preferences**: Manages user preferences that may affect repository behavior.\n24. **StaticUtils**: Utility methods used across components.\n25. **StringUtil**: String manipulation utilities used in repository URL/path handling.\n26. **OmegaTFileChooser**: Used in dialogs for selecting repository paths/files.\n27. **StaticUIUtils**: UI utility functions shared across dialogs.\n28. **TokenizerComboBoxRenderer**: Renders tokenizers in combo boxes in UI.\n29. **LanguageComboBoxRenderer**: Renders languages in combo boxes in UI.\n30. **TokenizerBehaviorComboBoxRenderer**: Renders tokenizer behaviors in combo boxes.\n\n31. **gen.core.filters.Filters**: XML model class for filters that might apply to repositories.\n32. **gen.core.project.RepositoryDefinition**: Model class defining a repository.\n33. **gen.core.project.RepositoryMapping**: Model class defining how repositories are mapped.\n34. **File**: Core Java class used extensively for file path manipulations.\n35. **Color**: Used in UI components for styling/red error highlighting.\n36. **Dimension**: Layout-related class used in UI construction.\n37. **Rectangle**: Used in layout or display logic.\n38. **Label**: AWT/Swing label used in UI construction.\n39. **AbstractAction**: Used for defining actions in UI components.\n40. **Box**: Swing layout container used in dialog UI structure.\n\n41. **Scrollable**: Interface implemented for scrollable containers in the dialog.\n42. **BorderLayout**: Layout manager used in UI panel organization.\n43. **GridBagLayout**: Complex layout management in dialog UI.\n44. **GridBagConstraints**: Constraints used with GridBagLayout.\n45. **Insets**: Defines padding/margin spacing in layouts.\n46. **JComboBox**: Used in the dialog for dropdown selections.\n47. **JButton**: Buttons like OK/Cancel/Add/Remove are used.\n48. **JTextField**: Input fields for repository URLs and other properties.\n49. **JTextArea**: For multi-line text input/output in related dialogs.\n50. **JScrollPane**: Scrolling functionality for large UI sections.\n51. **JCheckBox**: Boolean options in the dialog UI.\n52. **JLabel**: Text labels describing UI elements.\n53. **JPanel**: Container for grouping UI components.\n54. **JDialog**: Base class for the dialog itself.\n55. **JFrame**: Parent frame when displaying the dialog.\n56. **ActionListener**: Used for handling button click events.\n57. **Version**: Lucene version class used for tokenizer behavior selection.\n\nThis extensive list covers all entities that are either directly referenced, indirectly involved through common workflows, or have historical co-change relationships with `RepositoriesMappingController.java`.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}