{
    "time": 1749619304.8252177,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is Tabs.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_6c0999cf9c4b4529b3e1b7",
                    "function": {
                        "arguments": "{\"entity\": \"Tabs.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"TabIcon\", \"1\", \"0.04\"], [\"MSmallButton\", \"1\", \"0.04\"], [\"MProgressBar\", \"1\", \"0.04\"], [\"MAction\", \"1\", \"0.04\"], [\"TabsMenuAction\", \"1\", \"0.04\"], [\"TodoEditor\", \"4\", \"0.16\"], [\"PropertiesBar\", \"1\", \"0.04\"], [\"MToolBar\", \"1\", \"0.04\"], [\"Vars\", \"2\", \"0.08\"], [\"AnnotationBar\", \"2\", \"0.08\"], [\"EditorQuickFind\", \"1\", \"0.04\"], [\"ZoomComponent\", \"1\", \"0.04\"], [\"MainWindow\", \"6\", \"0.24\"], [\"TaskManager\", \"1\", \"0.04\"], [\"AdvancedProperties\", \"1\", \"0.04\"], [\"FeedsFS\", \"2\", \"0.08\"], [\"Browser\", \"1\", \"0.04\"], [\"Desktop\", \"2\", \"0.08\"], [\"Tree\", \"3\", \"0.12\"], [\"Bookmarks\", \"1\", \"0.04\"], [\"MColorChooser\", \"1\", \"0.04\"], [\"TaskModel\", \"1\", \"0.04\"], [\"Links\", \"1\", \"0.04\"], [\"AbstractFileCache\", \"1\", \"0.04\"], [\"FeedComponent\", \"1\", \"0.04\"], [\"MSplitPane\", \"1\", \"0.04\"], [\"EditorZoom\", \"1\", \"0.04\"], [\"TextUtils\", \"1\", \"0.04\"], [\"NotepadEditor\", \"1\", \"0.04\"], [\"ZoomAction\", \"1\", \"0.04\"], [\"FeedViewer\", \"1\", \"0.04\"], [\"XMLHelper\", \"1\", \"0.04\"], [\"Gettext\", \"1\", \"0.04\"], [\"Archive\", \"1\", \"0.04\"], [\"Action\", \"1\", \"0.04\"], [\"TreePanel\", \"1\", \"0.04\"], [\"Editor\", \"3\", \"0.12\"], [\"AppletTab\", \"2\", \"0.08\"], [\"Help\", \"1\", \"0.04\"], [\"EditorCrypto\", \"1\", \"0.04\"], [\"DeletePrivateDataPlugin\", \"1\", \"0.04\"], [\"Sidebar\", \"2\", \"0.08\"], [\"LookAndFeelSettings\", \"1\", \"0.04\"], [\"ConsoleTab\", \"1\", \"0.04\"], [\"WidgetInternalFrame\", \"1\", \"0.04\"], [\"StatsPanel\", \"1\", \"0.04\"], [\"ArticleMetaInfo\", \"1\", \"0.04\"], [\"WebBrowserTab\", \"1\", \"0.04\"], [\"PrintPreviewPanel\", \"1\", \"0.04\"], [\"PrintDialog\", \"1\", \"0.04\"], [\"TodoEditorCore\", \"2\", \"0.08\"], [\"FileCache\", \"1\", \"0.04\"], [\"ImportExport\", \"1\", \"0.04\"], [\"MTimer\", \"1\", \"0.04\"], [\"ItemComparator\", \"1\", \"0.04\"], [\"TextHighligther\", \"1\", \"0.04\"], [\"MTabbedPane\", \"3\", \"0.12\"], [\"TabComponent\", \"1\", \"0.04\"], [\"Presentation\", \"1\", \"0.04\"], [\"HiddenTabsUI\", \"1\", \"0.04\"], [\"MMessage\", \"1\", \"0.04\"], [\"MNotification\", \"1\", \"0.04\"], [\"Widget\", \"1\", \"0.04\"], [\"MText\", \"1\", \"0.04\"], [\"MTree\", \"1\", \"0.04\"], [\"MMenu\", \"1\", \"0.04\"], [\"ImageEditor\", \"2\", \"0.08\"], [\"DesktopPanel\", \"1\", \"0.04\"], [\"PluginSettingsPage\", \"1\", \"0.04\"], [\"MTab\", \"1\", \"0.04\"], [\"DesktopTab\", \"1\", \"0.04\"], [\"HelpAction\", \"1\", \"0.04\"], [\"Button\", \"1\", \"0.04\"], [\"Todo\", \"1\", \"0.04\"], [\"ScriptYourself\", \"1\", \"0.04\"], [\"StaticCoreHandler\", \"1\", \"0.04\"]]"
        },
        {
            "content": "The `get_co_change_relationship` function has returned a list of entities that have been co-changed with **Tabs.java** in the past, along with their support count and confidence level. Based on the results, we can identify which entities are most likely impacted by changes to **Tabs.java**, particularly those with higher confidence values.\n\n### Observations:\n1. **MainWindow.java** has the highest confidence value at 0.24 (6 out of 25 modifications occurred together with Tabs.java).\n2. **TodoEditor.java** follows with a confidence of 0.16 (4 out of 25 modifications occurred together).\n3. Several other files such as **Tree.java**, **Editor.java**, and **MTabbedPane.java** share a confidence of 0.12 each.\n4. The majority of the remaining files show low confidence values (e.g., 0.04), indicating weaker historical coupling.\n\n### Next Steps:\nTo further narrow down which entities need synchronization or attention, we should analyze the relationships between **Tabs.java** and these high-confidence entities (e.g., **MainWindow.java**, **TodoEditor.java**, etc.) using additional tools. This will help us understand the nature of their dependencies.\n\nLet's begin by analyzing the conceptual coupling (semantic similarity) between **Tabs.java** and **MainWindow.java**, since it shows the strongest co-change relationship.\n\nI'll proceed to call the `get_conceptual_coupling` function for **Tabs.java** and **MainWindow.java**. \n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_6c71dba2c96346389b76d0",
                    "function": {
                        "arguments": "{\"entity1\": \"Tabs.java\", \"entity2\": \"MainWindow.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "[\"Tabs has been removed from the project due to project version iteration\"]"
        },
        {
            "content": "It seems that **Tabs.java** has been removed from the project due to version iteration in the current state of the Makagiga project. This explains the absence of conceptual coupling or other direct analysis results for this file.\n\nGiven this new information, we should adjust our approach:\n\n### Revised Plan:\n1. Since **Tabs.java** was removed, it's important to understand how its removal might impact entities that were historically coupled with it (e.g., those identified via `get_co_change_relationship`).\n2. We can examine the source code of **MainWindow.java** (the entity most frequently co-changed with Tabs.java) to determine if there are any references or dependencies on **Tabs.java**, which would confirm a direct relationship.\n3. If such dependencies exist, then **MainWindow.java** (and potentially others) may require synchronization or refactoring due to the removal of **Tabs.java**.\n\n### Next Step:\nI will retrieve the original source code of **MainWindow.java** to inspect for any references to **Tabs.java**.\n\nLet me proceed by calling the `get_origin_code` function for **MainWindow.java**.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_4683f9707d9f4ac3a70b6a",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.IOException;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.GeneralSettings;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.Property;\\nimport org.makagiga.commons.StringList;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.Help;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.help.HelpGenerator;\\nimport org.makagiga.commons.help.HelpMenu;\\nimport org.makagiga.commons.mods.Mod;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.Input;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MLinkAction;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MMessage;\\nimport org.makagiga.commons.swing.MNotification;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSmallButton;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMenuAdapter;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorQuickFind;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.FSException;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.Plugin;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentListButton;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tools.summary.TasksMenu;\\nimport org.makagiga.tools.summary.TasksSettings;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tpublic static final String ALTERNATE_LAYOUT_PROPERTY = \\\"org.makagiga.MainWindow.ALTERNATE_LAYOUT_PROPERTY\\\";\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate static boolean presentationActive;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentListButton documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate final MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\tprivate ZoomResetAction zoomResetAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate DocumentHelpAction documentHelpAction;\\n\\t\\tprivate MAction quickOpenAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"editor-tool-bar\\\", editorToolBar,\\n\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"quick-open-action\\\", quickOpenAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic static Plugin<?> getPresentationPlugin() {\\n\\t\\tPluginInfo info = PluginManager.getInstance().getByID(\\\"{e5508e4c-e070-4d4a-a2de-e9ef754a4656}\\\");\\n\\t\\treturn (info == null) ? null : info.getPlugin();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\tpublic static boolean isPresentationActive() { return presentationActive; }\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tTasksMenu.update(menu);\\n\\t\\tmenu.addSeparator();\\n\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession(config);\\n\\t\\tconfig.sync();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean locked) {\\n\\t\\tsuper.setLocked(locked);\\n\\t\\tupdateTitle();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tif (restoreWindow)\\n\\t\\t\\trestore();\\n\\t\\tsetDesktopVisible(true);\\n\\t\\tDesktop desktop = getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\t@SuppressWarnings(\\\"deprecation\\\")\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentListButton();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\teditorToolBar = new MToolBar();\\n\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tif (MApplication.consoleOpenInTab.get()) {\\n\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tupdateState();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tUI.systemTray.addPropertyChangeListener(new Property.ValueChangeListener<Boolean>() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final Boolean visible) {\\n\\t\\t\\t\\tif (visible)\\n\\t\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tif (UI.systemTray.get()) {\\n\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t}\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPlugin<?> presentation = getPresentationPlugin();\\n\\t\\tif (presentation != null) {\\n\\t\\t\\tpresentation.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\\"active\\\".equals(e.getPropertyName()) &&\\n\\t\\t\\t\\t\\t\\t(e.getNewValue() instanceof Boolean)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tpresentationActive = Boolean.TRUE.equals(e.getNewValue());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI));\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\tdocumentHelpAction = new DocumentHelpAction();\\n\\t\\t\\t\\tquickOpenAction = new QuickOpenDialog.Action();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tnew QuickSaveAction(),\\n\\t\\t\\tquickOpenAction,\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\temailAction.setEnabled((editor != null) && editor.getMetaInfo().isFile());\\n\\t\\t\\texportMenu.addSeparator(false);\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tviewMenu.add(MNotification.createMenu());\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\thelpMenu = new HelpMenu() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInit() {\\n\\t\\t\\t\\tthis.add(new MainWindow.HelpAction());\\n\\t\\t\\t\\tPluginManager.updateMenu(plugins, this, PluginMenu.HELP_MENU, true);\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInitTopics(final MMenu topics) {\\n\\t\\t\\t\\ttopics.addTitle(_(\\\"How-To\\\"));\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(_(\\\"Change the default web browser\\\"), \\\"ui/internet\\\", new StringList(_(\\\"Main Menu\\\"), _(\\\"Tools\\\"), _(\\\"Settings\\\"), _(\\\"General\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tnew GeneralSettings().exec(this.getSourceWindow());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} )\\n\\t\\t\\t\\t\\t.setEnabled(!OS.isWindows());\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(_(\\\"Disable unused plugins\\\"), \\\"ui/plugin\\\", new StringList(_(\\\"Main Menu\\\"), _(\\\"Tools\\\"), _(\\\"Plugins\\\"), _(\\\"Tool Bar\\\"), _(\\\"Disable\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\ttopics.addSeparator();\\n\\t\\t\\t\\ttopics.add(new MAction(\\\"What means \\\\\\\"Makagiga\\\\\\\"?\\\") {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tMMessage.info(this.getSourceWindow(), \\\"\\\\\\\"Makagiga\\\\\\\" is a kind of cake made with caramel, honey, poppy, nuts... ;-)\\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tif (OS.isOpenJDK())\\n\\t\\t\\t\\t\\ttopics.add(new MLinkAction(URI.create(\\\"http:\\t\\t\\t\\t\\n\\t\\t\\t\\ttopics.addSeparator();\\n\\t\\t\\t\\ttopics.add(documentHelpAction);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\tmenuBar.add(documentList);\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(config, Desktop.RESTORE_SESSION_LAZY);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addSeparator(false);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teditMenu.addNoItemsInfo(editMenu.isEmpty());\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tdocumentHelpAction.updateProperties(editor);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t\\tif (zoomResetAction == null)\\n\\t\\t\\t\\t\\t\\tzoomResetAction = new ZoomResetAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomResetAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\tboolean stretchAdded = false;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!isPresentationActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic void updateTitle() { \\t\\tif (isLocked()) {\\n\\t\\t\\t\\t\\t\\tupdateTitle(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetToolTipText(UI.makeHTML(_(\\\"Tip: You can use drag and drop to import/export files.\\\")));\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tImportMenu.class.cast(menu).doInit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\tprivate void doInit() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tadd(new ImportFolderAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tMainWindow.getInstance(),\\n\\t\\t\\t\\tMSettingsDialog.STANDARD_DIALOG | MSettingsDialog.APPLY_BUTTON,\\n\\t\\t\\t\\t\\\"configure\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void apply() {\\n\\t\\t\\t\\t\\tsuper.apply();\\n\\t\\t\\t\\t\\tMainWindow.getInstance().repaint();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tdialog.addPage(new TasksSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.exec();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !MainWindow.isPresentationActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DocumentHelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif (context != null)\\n\\t\\t\\t\\t\\tHelp.show(tab, context);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DocumentHelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP.getText()); \\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tsetEnabled(tab instanceof DocumentHelp);\\n\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\tsetName(_(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t\\tsetAuthorizationProperty(Vars.actionSendFile);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow window = MainWindow.getInstance();\\n\\t\\t\\tHelpGenerator help = new HelpGenerator();\\n\\t\\t\\thelp.setMenuBar(window.getMMenuBar());\\n\\t\\t\\thelp.setOutputDirectory(FS.makeConfigFile(\\\"help\\\", FS.CREATE_DIR).toPath());\\n\\t\\t\\t\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"bookmarks-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"export-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"import-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"tags-menu\\\"));\\n\\t\\t\\thelp.addCommonShortcuts();\\n\\t\\t\\thelp.addShortcut(_(\\\"Image Viewer\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next\\\"), VK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous\\\"), VK_BACK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Fit to Window\\\"), VK_F);\\n\\t\\t\\thelp.addShortcut(_(\\\"Full Screen\\\"), _(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Feeds\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next New\\\"), VK_J);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous New\\\"), VK_K);\\n\\t\\t\\thelp.addShortcut(_(\\\"Open in a new tab (article/notification window)\\\"), _(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Todo List/Table\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Edit cell\\\"), VK_F2);\\n\\t\\t\\thelp.addShortcut(_(\\\"Focus header\\\"), VK_F8);\\n\\t\\t\\thelp.addShortcut(_(\\\"Move to the previous panel\\\"), VK_TAB, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Widgets\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Close active widget\\\"), VK_F4, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Close active widget\\\"), _(\\\"Right Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Activate next widget\\\"), VK_F6, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Minimize active widget\\\"), VK_F9, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Minimize/show all widgets\\\"), _(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Tabs\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Close\\\"), _(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Rename\\\"), _(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"System Tray\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Quick Paste\\\"), _(\\\"Middle Button Click\\\"));\\n\\t\\t\\ttry {\\n\\t\\t\\t\\thelp.generate();\\n\\t\\t\\t\\t\\t\\t\\t\\tWebBrowserTab tab = WebBrowserTab.getInstance();\\n\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(help.getIndexFile().toUri());\\n\\t\\t\\t}\\n\\t\\t\\tcatch (IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ImportFolderAction extends MAction {\\n\\t\\tpublic ImportFolderAction() {\\n\\t\\t\\tsuper(_(\\\"Folder...\\\"), \\\"ui/folder\\\");\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tFile from = Input.getDirectory(getSourceWindow(), _(\\\"Import Folder\\\"), \\\"import-folder\\\", MActionInfo.IMPORT);\\n\\t\\t\\tif (from == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo toFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tImportExport.importFolder(getSourceWindow(), new MArrayList<>(from.toPath()), toFolder);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FSException | IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(_(\\\"Save all the modified files now\\\"), VK_S, getMenuMask());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(_(\\\"Location Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.isInstance() ? PropertiesBar.getInstance() : null;\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tif (PropertiesBar.isInstance())\\n\\t\\t\\t\\t\\tPropertiesBar.getInstance().setVisible(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t\\tif (Sidebar.getInstance().isTreeSelected())\\n\\t\\t\\t\\tTree.getInstance().requestFocus();\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomResetAction extends MApplication.ZoomResetAction {\\n\\t\\tpublic ZoomResetAction() { }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\teditorZoom.resetZoom();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (AbstractMethodError error) {\\n\\t\\t\\t\\t\\tTK.beep();\\n\\t\\t\\t\\t\\tif (MLogger.isDeveloper())\\n\\t\\t\\t\\t\\t\\tMLogger.exception(error);\\n\\t\\t\\t\\t\\tMLogger.error(\\\"core\\\", \\\"Zoom reset not supported\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "content": "Looking at the source code of **MainWindow.java**, it is clear that this class is central to the application's UI structure and manages various components, menus, toolbars, and interactions with other parts of the system.\n\n### Key Observations:\n1. **Tabs Reference**:\n   - The code contains multiple references to a `Tabs` class, such as:\n     ```java\n     private final Tabs tabs = Tabs.getInstance();\n     ```\n     This indicates that **MainWindow** heavily relies on the `Tabs` class for managing editor tabs and user interface state.\n   - Methods like `tabs.selectEditor(...)`, `tabs.getSelectedTab()`, and `tabs.getInstance()` are used throughout the codebase, showing tight coupling between **MainWindow** and **Tabs**.\n\n2. **Impact of Tabs Removal**:\n   - Since **Tabs.java** has been removed from the project, any usage of the `Tabs` class in **MainWindow.java** will cause compilation errors or runtime failures unless replaced or refactored.\n   - Specifically, calls like `Tabs.getInstance()` and method invocations on the `tabs` instance (e.g., `tabs.selectEditor(...)`) will break the functionality of **MainWindow**.\n\n3. **UI Components Affected**:\n   - Tab management logic involving actions like switching between editors, restoring sessions, updating the toolbar, and handling tab changes are all dependent on the now-removed `Tabs` class.\n\n### Next Steps:\nTo determine whether **MainWindow.java** needs synchronization or refactoring due to the removal of **Tabs.java**, we should:\n- Check if there's an alternative class replacing the functionality of `Tabs` in the current version.\n- Identify if any migration or replacement logic has already been implemented in **MainWindow.java** to handle the absence of `Tabs`.\n\nLet me proceed by analyzing the conceptual coupling between **MainWindow.java** and another high-confidence co-changed entity: **TodoEditor.java**, to see if similar dependencies exist there as well.\n\nI'll call the `get_conceptual_coupling` function for **MainWindow.java** and **TodoEditor.java**.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_65cfea3437034ef3b0b515",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TodoEditor.java\"}",
                        "name": "get_conceptual_coupling"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_conceptual_coupling",
            "content": "\"0.71202594\""
        },
        {
            "content": "The conceptual coupling (semantic similarity) between **MainWindow.java** and **TodoEditor.java** is approximately **0.71**, which indicates a relatively high semantic relationship between the two files.\n\n### Interpretation:\n- A value of **0.71** suggests that these two entities likely share similar functional concerns or are involved in related aspects of the application logic.\n- Given that **MainWindow.java** manages UI components, menus, and interactions with various editors (including tabs), and **TodoEditor.java** appears to be one of those editors, it's reasonable to conclude that changes to **MainWindow.java** can have a significant impact on **TodoEditor.java** and vice versa.\n\n### Implications of Tabs.java Removal:\n- Since **Tabs.java** was central to managing editor tabs and UI state, and **MainWindow.java** depends heavily on it, the removal of `Tabs` could affect not only **MainWindow.java** but also dependent editors like **TodoEditor.java**.\n- This high conceptual coupling reinforces the idea that **TodoEditor.java** may require synchronization or refactoring if it previously interacted with `Tabs` or relies on functionality now missing due to its removal.\n\n### Next Steps:\nTo confirm whether **TodoEditor.java** is directly impacted by the removal of `Tabs.java`, I will:\n- Retrieve the source code for **TodoEditor.java** to inspect for any direct usage of the `Tabs` class or related methods.\n\nI'll proceed by calling the `get_origin_code` function for **TodoEditor.java**.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_3d38ea57faac44658a7ef4",
                    "function": {
                        "arguments": "{\"entity\": \"TodoEditor.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga.editors.todo;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.event.MouseEvent;\\nimport java.awt.print.Printable;\\nimport java.awt.print.PrinterException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.text.MessageFormat;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.DocumentEvent;\\nimport javax.swing.event.ListSelectionEvent;\\nimport javax.swing.event.ListSelectionListener;\\nimport org.makagiga.Vars;\\nimport org.makagiga.chart.ChartModel;\\nimport org.makagiga.chart.ChartPainter;\\nimport org.makagiga.commons.ActionGroup;\\nimport org.makagiga.commons.ColumnManager;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.Focusable;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MButton;\\nimport org.makagiga.commons.MDate;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MMessage;\\nimport org.makagiga.commons.MMouseAdapter;\\nimport org.makagiga.commons.MPanel;\\nimport org.makagiga.commons.MProperties;\\nimport org.makagiga.commons.MScrollPane;\\nimport org.makagiga.commons.MSearchPanel;\\nimport org.makagiga.commons.MSmallButton;\\nimport org.makagiga.commons.MStatusBar;\\nimport org.makagiga.commons.MTable;\\nimport org.makagiga.commons.MTextField;\\nimport org.makagiga.commons.MTip;\\nimport org.makagiga.commons.MToolBar;\\nimport org.makagiga.commons.MUndoManager;\\nimport org.makagiga.commons.MV;\\nimport org.makagiga.commons.Preloader;\\nimport org.makagiga.commons.StringList;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.painters.GlassPainter;\\nimport org.makagiga.commons.print.PrintInfo.PrintResult;\\nimport org.makagiga.editors.Actions;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorConfig;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorIO;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorSearch.SearchResult;\\nimport org.makagiga.editors.EditorStats;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.TextUtils;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.todo.Column;\\nimport org.makagiga.todo.Priority;\\nimport org.makagiga.todo.Task;\\nimport org.makagiga.tools.presentation.Presentation;\\npublic final class TodoEditor extends Editor<TodoEditorCore>\\nimplements\\n\\tEditorConfig,\\n\\tEditorDesigner<TodoEditorDesigner>,\\n\\tEditorExport,\\n\\tEditorIO,\\n\\tEditorPrint,\\n\\tEditorSearch,\\n\\tEditorStats<ChartModel>,\\n\\tEditorZoom,\\n\\tFocusable,\\n\\tPluginMenu,\\n\\tPreloader.Events,\\n\\tPresentation.ToggleListener\\n{\\n\\tprivate MButton addItemButton;\\n\\tprivate MPanel topPanel;\\n\\tprivate MSearchPanel filterField;\\n\\tprivate MTextField newTask;\\n\\tprivate MUndoManager undoManager;\\n\\tprivate TodoEditorDesigner designer;\\n\\tpublic TodoEditor() {\\n\\t\\tif (Vars.todoUsePriorityPrimaryColor.get())\\n\\t\\t\\tPriority.setPrimaryColor(Vars.todoPriorityPrimaryColor.get());\\n\\t\\telse\\n\\t\\t\\tPriority.setPrimaryColor(null);\\n\\t\\t\\t\\tsetCore(new TodoEditorCore(this));\\n\\t\\tMScrollPane scrollPane = new MScrollPane(core, MScrollPane.NO_BORDER);\\n\\t\\tscrollPane.setColumnHeaderView(core.getTableHeader());\\n\\t\\taddCenter(scrollPane);\\n\\t\\tdesigner = new TodoEditorDesigner();\\n\\t\\tundoManager = new MUndoManager(core, MUndoManager.NO_LIMIT) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUserActions() {\\n\\t\\t\\t\\tTodoEditor.this.updateActions();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tcore.getModel().addUndoableEditListener(undoManager.createUndoableEditListener());\\n\\t\\ttopPanel = MPanel.createBorderPanel();\\n\\t\\ttopPanel.setVisible(!Presentation.isActive());\\n\\t\\tPresentation.addToggleListener(this);\\n\\t\\tMPanel taskPanel = MPanel.createHBoxPanel();\\n\\t\\ttaskPanel.setMargin(2);\\n\\t\\t\\t\\tnewTask = new MTextField() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final DocumentEvent e) {\\n\\t\\t\\t\\taddItemButton.setEnabled(!isEmpty());\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tnewTask.setAutoCompletion(\\\"newtask\\\");\\n\\t\\tnewTask.setEnterPressAction(new MAction() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\taddItemButton.doClick();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\ttaskPanel.addGap();\\n\\t\\ttaskPanel.add(MPanel.createHLabelPanel(newTask, _(\\\"Add a New Task:\\\")));\\n\\t\\taddItemButton = new MSmallButton(MIcon.small(\\\"ui/ok\\\"), _(\\\"Add task to the list\\\")) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onClick() {\\n\\t\\t\\t\\tnewTask.saveAutoCompletion();\\n\\t\\t\\t\\tcore.addTask(newTask.getText(), true);\\n\\t\\t\\t\\tnewTask.clear();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\taddItemButton.setEnabled(false);\\n\\t\\ttaskPanel.add(addItemButton);\\n\\t\\ttaskPanel.addGap();\\n\\t\\tfilterField = new MSearchPanel(true, MSearchPanel.Type.FILTER) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final DocumentEvent e) {\\n\\t\\t\\t\\tcore.filterTasks(getText());\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tfilterField.getTextField().setToolTipText(_(\\\"Filter Tasks by Summary or Date/Time\\\"));\\n\\t\\ttaskPanel.add(filterField);\\n\\t\\ttopPanel.addNorth(taskPanel);\\n\\t\\tMTip tip = new MTip(TodoEditor.class.getName());\\n\\t\\ttip.setRoundType(GlassPainter.RoundType.NONE);\\n\\t\\ttip.showNextTip(MTip.Visible.SELDOM);\\n\\t\\tif (Vars.todoNewTaskPanelPosition.equalsValue(UI.VerticalPosition.BOTTOM)) {\\n\\t\\t\\ttip.setDirection(MTip.Direction.BOTTOM);\\n\\t\\t\\taddNorth(tip);\\n\\t\\t\\taddSouth(topPanel);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\taddNorth(topPanel);\\n\\t\\t\\taddSouth(tip);\\n\\t\\t}\\n\\t\\t\\t\\tcore.addMouseListener(new MMouseAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void mouseClicked(final MouseEvent e) {\\n\\t\\t\\t\\tif (MMouseAdapter.isLeft(e))\\n\\t\\t\\t\\t\\tTodoEditor.this.showLockInfo();\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void popupTrigger(final MouseEvent e) {\\n\\t\\t\\t\\tTodoEditor.this.showPopupMenu(PluginMenu.EDIT_MENU, e);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tcore.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\\n\\t\\t\\tpublic void valueChanged(final ListSelectionEvent e) {\\n\\t\\t\\t\\tupdateActions();\\n\\t\\t\\t\\tupdateStatusText();\\n\\t\\t\\t\\tdesigner.updateComponentsLater(core);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\tactionGroup.connect(\\\"cut\\\", core, \\\"cut\\\");\\n\\t\\tactionGroup.connect(\\\"copy\\\", core, \\\"copy\\\");\\n\\t\\tactionGroup.connect(\\\"paste\\\", core, \\\"paste\\\");\\n\\t}\\n\\tpublic void focus() {\\n\\t\\tnewTask.requestFocusInWindow();\\n\\t}\\n\\t@Override\\n\\tpublic boolean isLocked() {\\n\\t\\treturn !newTask.isEditable();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean value) {\\n\\t\\tsuper.setLocked(value);\\n\\t\\taddItemButton.setEnabled(!value && !newTask.isEmpty());\\n\\t\\tnewTask.setEditable(!value);\\n\\t\\tnewTask.setToolTipText(\\n\\t\\t\\tvalue\\n\\t\\t\\t? _(\\\"This file is locked. Click the \\\\\\\"Unlock\\\\\\\" button if you want to edit this file.\\\")\\n\\t\\t\\t: null\\n\\t\\t);\\n\\t\\tcore.getModel().setLocked(value);\\n\\t}\\n\\t@Override\\n\\tpublic void onClose() {\\n\\t\\tPresentation.removeToggleListener(this);\\n\\t\\tdesigner.stopUpdate();\\n\\t}\\n\\t@Override\\n\\tpublic void onLastClose() { }\\n\\t@Override\\n\\tpublic void setExportMode(final boolean value) {\\n\\t\\tsuper.setExportMode(value);\\n\\t\\tif (value)\\n\\t\\t\\tcore.clearSelection();\\n\\t}\\n\\t@Override\\n\\tpublic void updateActions() {\\n\\t\\tif (!isCurrent())\\n\\t\\t\\treturn;\\n\\t\\tboolean isSelection = core.isSelection();\\n\\t\\tundoManager.updateUndoRedoActions(!isLocked());\\n\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\tactionGroup.setEnabled(\\\"copy\\\", isSelection);\\n\\t\\tactionGroup.setEnabled(\\\"cut\\\", isSelection && !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"delete\\\", isSelection && !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"delete-completed\\\", !core.isEmpty(MV.MODEL) && !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"paste\\\", !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"select-all\\\", !core.isEmpty(MV.VIEW));\\n\\t\\tactionGroup.setEnabled(\\\"unselect-all\\\", isSelection);\\n\\t}\\n\\t@Override\\n\\tpublic void updateStatusText() {\\n\\t\\tsetStatusText(core.getSelectionText());\\n\\t}\\n\\tpublic void loadConfig(final Config local) {\\n\\t\\tConfig global = Config.getDefault();\\n\\t\\tcore.read(global, local, this);\\n\\t}\\n\\tpublic void saveConfig(final Config local) {\\n\\t\\tConfig global = Config.getDefault();\\n\\t\\tcore.write(global, local, this);\\n\\t}\\n\\tpublic synchronized TodoEditorDesigner getEditorDesigner() { return designer; }\\n\\tpublic void updateEditorDesigner() { }\\n\\tpublic void exportFile(final EditorPlugin.FileType type, final OutputStream output) throws Exception {\\n\\t\\tif (type.is(\\\"csv\\\"))\\n\\t\\t\\tcore.saveToFileAsCSV(output);\\n\\t\\telse if (type.is(\\\"html\\\"))\\n\\t\\t\\tcore.saveToFileAsHTML(output, false, false);\\n\\t\\telse if (type.is(\\\"mgtodo\\\") || type.is(\\\"xml\\\"))\\n\\t\\t\\tcore.getModel().saveToXML(output);\\n\\t\\telse if (type.is(\\\"ods\\\"))\\n\\t\\t\\tcore.saveToFileAsODS(output);\\n\\t\\telse if (type.is(\\\"opml\\\"))\\n\\t\\t\\tcore.saveToFileAsOPML(output);\\n\\t\\telse if (type.is(\\\"txt\\\"))\\n\\t\\t\\tcore.saveToFileAsText(output);\\n\\t\\telse if (type.is(\\\"xhtml\\\"))\\n\\t\\t\\tcore.saveToFileAsHTML(output, true, false);\\n\\t\\telse if (type.is(\\\"vcs\\\"))\\n\\t\\t\\tcore.saveToFileAsVcs(output);\\n\\t\\telse\\n\\t\\t\\texportNotSupported(type); \\t}\\n\\tpublic void loadFile(final InputStream input, final boolean newFile) throws Exception {\\n\\t\\tcore.getModel().loadFromXML(input, newFile);\\n\\t}\\n\\tpublic void saveFile(final OutputStream output) throws Exception {\\n\\t\\tcore.getModel().saveToXML(output);\\n\\t\\tupdateIndex(core.getKeywords());\\n\\t}\\n\\tpublic Printable getPrintable(final Flags flags, final MessageFormat header, final MessageFormat footer) throws PrinterException {\\n\\t\\treturn core.getPrintable(\\n\\t\\t\\tflags.isSet(TABLE_FIT_WIDTH)\\n\\t\\t\\t\\t? MTable.PrintMode.FIT_WIDTH\\n\\t\\t\\t\\t: MTable.PrintMode.NORMAL,\\n\\t\\t\\theader,\\n\\t\\t\\tfooter\\n\\t\\t);\\n\\t}\\n\\tpublic PrintResult printDocument(final Flags flags, final MessageFormat header, final MessageFormat footer) throws PrinterException {\\n\\t\\treturn\\n\\t\\t\\tcore.print(\\n\\t\\t\\t\\tflags.isSet(TABLE_FIT_WIDTH)\\n\\t\\t\\t\\t? MTable.PrintMode.FIT_WIDTH\\n\\t\\t\\t\\t: MTable.PrintMode.NORMAL,\\n\\t\\t\\t\\theader,\\n\\t\\t\\t\\tfooter\\n\\t\\t\\t)\\n\\t\\t\\t? PrintResult.COMPLETE\\n\\t\\t\\t: PrintResult.CANCELLED;\\n\\t}\\n\\tpublic SearchResult findText(final String text, final Flags flags) {\\n\\t\\treturn core.searchFor(text, 0, flags); \\t}\\n\\tpublic SearchResult findNextText(final String text, final Flags flags) {\\n\\t\\tSearchResult result = core.searchFor(text, core.getSelectedRow() + 1, flags); \\t\\tif (result == SearchResult.WRAP_AROUND) {\\n\\t\\t\\t\\t\\t\\treturn\\n\\t\\t\\t\\t(findText(text, flags) == SearchResult.NOT_FOUND)\\n\\t\\t\\t\\t\\t? SearchResult.NOT_FOUND\\n\\t\\t\\t\\t\\t: SearchResult.WRAP_AROUND;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t}\\n\\tpublic String getDefaultSearchText() {\\n\\t\\treturn core.getSelectedSummary();\\n\\t}\\n\\tpublic int getSupportedSearchOptions() {\\n\\t\\treturn CASE_SENSITIVE;\\n\\t}\\n\\tpublic ChartPainter<ChartModel> getStatsChart() {\\n\\t\\treturn new ChartPainter<ChartModel>(core.createChartModel());\\n\\t}\\n\\tpublic MProperties getStatsProperties() { return null; }\\n\\tpublic String getStatsTitle() {\\n\\t\\treturn getMetaInfo().toString();\\n\\t}\\n\\tpublic JComponent getZoomComponent() { return null; }\\n\\tpublic boolean isZoomEnabled(final ZoomType type) {\\n\\t\\treturn TextUtils.canZoom(core, type);\\n\\t}\\n\\tpublic void zoom(final ZoomType type) {\\n\\t\\tcore.updateFontSize(TextUtils.zoom(core, type).getSize());\\n\\t\\t\\t\\tConfig config = Config.getDefault();\\n\\t\\tcore.writeFontSize(config, this);\\n\\t\\tconfig.sync();\\n\\t}\\n\\tpublic void updateMenu(final String type, final MMenu menu) {\\n\\t\\tif (type.equals(EDIT_MENU)) {\\n\\t\\t\\tundoManager.updateMenu(menu);\\n\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\t\\tactionGroup.updateMenu(menu);\\n\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\tMMenu selectionMenu = new MMenu(_(\\\"Modify Selected Tasks: {0}\\\", core.getSelectedRowCount()));\\n\\t\\t\\tif (core.isSelection() && !isLocked()) {\\n\\t\\t\\t\\tselectionMenu.add(new CompleteAction(0));\\n\\t\\t\\t\\tselectionMenu.add(new CompleteAction(100));\\n\\t\\t\\t\\t\\t\\t\\t\\tselectionMenu.addTitle(_(\\\"Set Date/Time\\\"), \\\"ui/calendar\\\");\\n\\t\\t\\t\\tselectionMenu.add(new DateAction(_(\\\"No Date/Time\\\"), \\\"ui/clearright\\\", MDate.invalid()));\\n\\t\\t\\t\\tselectionMenu.addSeparator();\\n\\t\\t\\t\\tselectionMenu.add(new DateAction(_(\\\"Current Date and Time\\\"), \\\"ui/star\\\", MDate.now()));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tselectionMenu.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t\\tmenu.add(selectionMenu);\\n\\t\\t}\\n\\t\\telse if (type.equals(VIEW_MENU_EDITOR) && Kiosk.actionSettings.get()) {\\n\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\tColumnManager cm = core.getColumnManager();\\n\\t\\t\\tmenu.add(cm.createSortMenu());\\n\\t\\t\\tmenu.add(cm.createVisibleMenu());\\n\\t\\t}\\n\\t}\\n\\tpublic void updateToolBar(final String type, final MToolBar toolBar) {\\n\\t\\tif (type.equals(EDITOR_TOOL_BAR)) {\\n\\t\\t\\tundoManager.updateToolBar(toolBar);\\n\\t\\t\\ttoolBar.addSeparator();\\n\\t\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\t\\tactionGroup.updateToolBar(toolBar);\\n\\t\\t}\\n\\t}\\n\\tpublic void preloadFinished() {\\n\\t\\t\\t\\tdestroy();\\n\\t}\\n\\tpublic void toggle(final Presentation.ToggleEvent e) {\\n\\t\\ttopPanel.setVisible(!e.isActive());\\n\\t}\\n\\t@Override\\n\\tprotected ActionGroup createSharedActionGroup() {\\n\\t\\tActionGroup actionGroup = new ActionGroup();\\n\\t\\tactionGroup.add(\\\"cut\\\", new CutAction());\\n\\t\\tactionGroup.add(\\\"copy\\\", new CopyAction())\\n\\t\\t\\t.setShowTextInToolBar(true);\\n\\t\\tactionGroup.add(\\\"paste\\\", new PasteAction())\\n\\t\\t\\t.setShowTextInToolBar(true);\\n\\t\\tactionGroup.addSeparator();\\n\\t\\tactionGroup.add(\\\"delete-completed\\\", new DeleteCompletedAction())\\n\\t\\t\\t.setShowTextInToolBar(true);\\n\\t\\tactionGroup.add(\\\"delete\\\", new DeleteAction())\\n\\t\\t\\t.setVisibleInToolBar(false);\\n\\t\\tactionGroup.addSeparator();\\n\\t\\tactionGroup.add(\\\"select-all\\\", new SelectAllAction())\\n\\t\\t\\t.setVisibleInToolBar(false);\\n\\t\\tactionGroup.add(\\\"unselect-all\\\", new UnselectAllAction())\\n\\t\\t\\t.setVisibleInToolBar(false);\\n\\t\\treturn actionGroup;\\n\\t}\\n\\tprivate static final class CompleteAction extends SelectionAction<Integer> {\\n\\t\\tprivate CompleteAction(final int value) {\\n\\t\\t\\tsuper(_(\\\"Set Complete: {0}\\\", (value + \\\"%\\\")), null, Column.COMPLETE, value);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class CopyAction extends Actions.Copy<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tif (!editor.getCore().copy(false))\\n\\t\\t\\t\\tshowCopyError();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class CutAction extends Actions.Cut<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tif (!editor.getCore().copy(true))\\n\\t\\t\\t\\tshowCutError();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DateAction extends SelectionAction<MDate> {\\n\\t\\tprivate DateAction(final String name, final String iconName, final MDate value) {\\n\\t\\t\\tsuper(name, iconName, Column.DATE_TIME, value);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DeleteAction extends Actions.Base<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tTodoEditorCore core = editor.getCore();\\n\\t\\t\\tif (core.deleteSelected(\\n\\t\\t\\t\\tgetSourceWindow(),\\n\\t\\t\\t\\tUI.makeHTML(\\n\\t\\t\\t\\t\\t_(\\\"Are you sure you want to delete <b>all selected</b> tasks?\\\") +\\n\\t\\t\\t\\t\\t\\\"<br><br>\\\" +\\n\\t\\t\\t\\t\\tTK.escapeXML(core.getSelectionText())\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tColumn.SUMMARY.ordinal()\\n\\t\\t\\t)) {\\n\\t\\t\\t\\teditor.updateStatusText();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DeleteAction() {\\n\\t\\t\\tsuper(_(\\\"Delete Selected\\\"), \\\"ui/delete\\\", VK_DELETE);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Deletes all the selected tasks.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DeleteCompletedAction extends Actions.Base<TodoEditor> {\\n\\t\\tDeleteCompletedAction() {\\n\\t\\t\\tsuper(_(\\\"Delete Completed\\\"), \\\"ui/ok\\\", VK_D, CTRL_MASK | SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Deletes all the completed tasks.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tTodoEditorCore core = editor.getCore();\\n\\t\\t\\tint completedItems = core.getCompletedItemCount();\\n\\t\\t\\tif (completedItems == 0) {\\n\\t\\t\\t\\tMStatusBar.warning(_(\\\"No completed tasks\\\"));\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tStringList selectedText = new StringList(completedItems);\\n\\t\\t\\tfor (Task i : core.getTaskList()) {\\n\\t\\t\\t\\tif (i.isDone())\\n\\t\\t\\t\\t\\tselectedText.add(i.getSummary());\\n\\t\\t\\t}\\n\\t\\t\\tif (MMessage.customConfirm(\\n\\t\\t\\t\\tgetSourceWindow(),\\n\\t\\t\\t\\tMIcon.stock(\\\"ui/ok\\\"),\\n\\t\\t\\t\\tMIcon.stock(\\\"ui/delete\\\"), _(\\\"Delete Completed Tasks\\\"),\\n\\t\\t\\t\\tnull, null,\\n\\t\\t\\t\\tUI.makeHTML(_(\\\"Are you sure you want to delete <b>all completed</b> tasks?<br><br>Completed Tasks: {0}\\\", completedItems)),\\n\\t\\t\\t\\tselectedText.toArray()\\n\\t\\t\\t)) {\\n\\t\\t\\t\\tcore.deleteCompletedItems();\\n\\t\\t\\t\\teditor.updateStatusText();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PasteAction extends Actions.Paste<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tif (!editor.getCore().paste())\\n\\t\\t\\t\\tshowPasteError();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class SelectAllAction extends Actions.SelectAll<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\teditor.getCore().selectAll();\\n\\t\\t}\\n\\t}\\n\\tprivate static abstract class SelectionAction<T> extends Actions.Base<TodoEditor> {\\n\\t\\tprivate Column column;\\n\\t\\tprivate T value;\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tTodoEditorCore core = editor.getCore();\\n\\t\\t\\tint[] selection = core.getSelectedRows();\\n\\t\\t\\tfor (int i : selection)\\n\\t\\t\\t\\tcore.getModel().setValueAt(value, core.convertRowIndexToModel(i), column.ordinal());\\n\\t\\t}\\n\\t\\tprotected SelectionAction(final String name, final String iconName, final Column column, final T value) {\\n\\t\\t\\tsuper(name, iconName);\\n\\t\\t\\tsetEnabled(true);\\n\\t\\t\\tthis.column = column;\\n\\t\\t\\tthis.value = value;\\n\\t\\t}\\n\\t}\\n\\tprivate static final class UnselectAllAction extends Actions.UnselectAll<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\teditor.getCore().clearSelection();\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "content": "The source code for **TodoEditor.java** confirms that it is a specialized editor component within the Makagiga application, designed to manage and manipulate \"todo\" tasks. It implements several interfaces related to editing, exporting, searching, printing, and zooming content.\n\n### Key Observations:\n1. **No Direct Reference to `Tabs` Class**:\n   - There is **no explicit usage of the `Tabs` class** in **TodoEditor.java**, which suggests that this file may not be directly impacted by the removal of **Tabs.java**.\n   - The editor relies on its own core (`TodoEditorCore`) and interacts with UI components like `MTable`, `MTextField`, and `MScrollPane`.\n\n2. **Interaction with MainWindow**:\n   - Although **TodoEditor** does not directly use `Tabs`, it likely interacts indirectly with `Tabs` through the shared UI infrastructure managed by **MainWindow** (e.g., tab switching, editor selection).\n   - Since **MainWindow** depends heavily on `Tabs`, any functionality involving `TodoEditor` being displayed or managed as a tab could now be broken due to the removal of `Tabs`.\n\n3. **Potential Impact of Tabs Removal**:\n   - If `TodoEditor` was previously added or managed via `Tabs.getInstance().addEditor(...)`, then its integration into the UI would be affected.\n   - However, based on the current source code, no such direct dependency exists in **TodoEditor.java** itself.\n\n### Summary of CIA Findings:\n- **MainWindow.java** is strongly affected by the removal of **Tabs.java** due to heavy coupling and reliance on the `Tabs` class for managing editors and UI state.\n- **TodoEditor.java** does not show direct dependencies on `Tabs`, but may be indirectly affected if it was historically managed as a tab within the `Tabs` system.\n\n### Final Step:\nTo ensure completeness, I will check if there are direct coupling dependencies between **MainWindow.java** and **TodoEditor.java** using the `get_coupling_dependencies` function.\n\nI'll proceed with this final check before concluding the analysis.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_a522de2bf098406382d471",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TodoEditor.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "### Final Analysis and Conclusion\n\nAfter conducting a comprehensive **Change Impact Analysis (CIA)** for the starting entity **Tabs.java**, here is a summary of findings and recommendations:\n\n---\n\n### \ud83d\udd0d Key Findings\n\n1. **Tabs.java Has Been Removed**:\n   - The file `Tabs.java` has been removed from the current version of the Makagiga project, which explains the absence of direct coupling or conceptual analysis results.\n\n2. **Co-Change Relationships**:\n   - Using `get_co_change_relationship`, we identified several files historically modified alongside `Tabs.java`.\n   - **MainWindow.java** showed the strongest co-change relationship with a confidence level of **0.24**.\n   - Other notable files include **TodoEditor.java** (**0.16**) and **Tree.java**, **Editor.java**, **MTabbedPane.java** (**0.12 each**).\n\n3. **Conceptual Coupling**:\n   - A high semantic similarity score (**0.71**) was found between **MainWindow.java** and **TodoEditor.java**, indicating they are functionally related.\n   - However, no direct coupling dependencies were found between these two entities using structural analysis.\n\n4. **Impact on MainWindow.java**:\n   - **MainWindow.java** heavily relied on `Tabs.getInstance()` and associated methods like `tabs.selectEditor(...)`, `tabs.getSelectedTab()`, etc.\n   - With the removal of `Tabs.java`, **MainWindow.java** will likely suffer from compilation errors or runtime failures unless refactored.\n\n5. **TodoEditor.java**:\n   - No direct usage of `Tabs` was found in **TodoEditor.java**.\n   - It may still be indirectly affected if it was previously managed as a tab via `Tabs`, but this logic appears to have been either moved or redesigned.\n\n6. **No Direct Structural Dependencies Between MainWindow and TodoEditor**:\n   - Despite strong co-change history and conceptual coupling, there are no direct structural couplings (e.g., inheritance, interface implementation, method calls) between **MainWindow.java** and **TodoEditor.java**.\n\n---\n\n### \u2705 Recommendation: Which Entities Need Synchronization?\n\nBased on the CIA findings:\n\n#### \ud83d\udea8 **MainWindow.java** \u2014 Requires Immediate Attention\n- **Why**: It directly uses the now-removed `Tabs` class in multiple places.\n- **Action Required**:\n  - Investigate whether `Tabs` functionality has been replaced by another class.\n  - Refactor or update all references to `Tabs.getInstance()` and related methods.\n\n#### \u26a0\ufe0f **TodoEditor.java** \u2014 Monitor for Indirect Impacts\n- **Why**: While no direct dependency exists, its integration into the UI might have relied on `Tabs`.\n- **Action Required**:\n  - Verify if `TodoEditor` is being used within a tabbed interface that has been affected by the removal of `Tabs`.\n  - Ensure UI integration points remain functional.\n\n#### \ud83d\udfe1 **Other Co-Changed Files** (e.g., Tree.java, Editor.java, MTabbedPane.java)\n- These should be reviewed for indirect usages of `Tabs` or for any UI-related regressions following its removal.\n\n---\n\n### \ud83d\udccc Final Summary\n\n| Entity            | Needs Sync? | Reason                                                                 |\n|------------------|-------------|------------------------------------------------------------------------|\n| **Tabs.java**     | \u274c          | Removed from the codebase                                            |\n| **MainWindow.java** | \u2705        | Strongly coupled; contains many references to `Tabs`                 |\n| **TodoEditor.java** | \u26a0\ufe0f        | High conceptual coupling; no direct dependency                        |\n\n---\n\nWould you like help generating a patch or migration strategy for refactoring **MainWindow.java** to remove reliance on `Tabs.java`?",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `Tabs.java`\n\nChange set: [MainWindow, TodoEditor, Tree, Editor, MTabbedPane, TodoEditorCore, PropertiesBar, HelpAction, ConfigureAction, ToggleDesktopAction, ShowHidePropertiesBarAction, ZoomInAction, ZoomOutAction, ZoomResetAction, FindAction, FindNextAction, ToggleSummaryAction, ToggleDesignerAction, ShowHideSidebarAction, searchAction, consoleAction, configureAction, documentHelpAction, quickOpenAction, ImportMenu, ExportMenu, FileMenu, EditMenu, ViewMenu, ToolsMenu, HelpMenu, Sidebar, DesktopTab, ConsoleTab, WebBrowserTab, PluginSettingsTab, TaskManager, AnnotationBar, EditorQuickFind, MToolBar, MSplitPane, MNotification, MMessage, MMenu, MAction, MPanel, MComponent, MMainWindow, MApplication, MSystemTray]\n\nDetails:\n1. **MainWindow**: Directly uses `Tabs.getInstance()` and relies on Tabs for managing editor tabs, UI state, and session restoration.\n2. **TodoEditor**: High conceptual coupling with MainWindow; may have been integrated via Tabs in the past.\n3. **Tree**: Frequently co-changed (support 3); likely interacts with tabbed editors managed by Tabs.\n4. **Editor**: Base class for many tabbed components; may be affected if instantiated or managed through Tabs.\n5. **MTabbedPane**: Tab management component; likely replacement or related to Tabs.java.\n6. **TodoEditorCore**: Core implementation behind TodoEditor; potential indirect integration via Tabs.\n7. **PropertiesBar**: Co-changed with Tabs; likely updated based on selected tab.\n8. **HelpAction**: Part of MainWindow's menu system which was tied to Tabs-based UI.\n9. **ConfigureAction**: Manages UI settings potentially linked to Tabs.\n10. **ToggleDesktopAction**: Toggles visibility of desktop widgets, previously managed by Tabs.\n11. **ShowHidePropertiesBarAction**: Updates properties bar based on current tab.\n12. **ZoomInAction**: Zoom actions tied to active tab content.\n13. **ZoomOutAction**: See above.\n14. **ZoomResetAction**: See above.\n15. **FindAction**: Search functionality often context-dependent on current tab.\n16. **FindNextAction**: See above.\n17. **ToggleSummaryAction**: Related to sidebar visibility, often triggered from tabs.\n18. **ToggleDesignerAction**: Switches between views within a tabbed interface.\n19. **ShowHideSidebarAction**: Manages sidebar that may be context-sensitive to tabs.\n20. **searchAction**: Embedded search depends on current tab\u2019s content.\n21. **consoleAction**: Console interaction may be embedded in tabbed UI.\n22. **configureAction**: Settings may relate to tab behavior.\n23. **documentHelpAction**: Contextual help often linked to active tab.\n24. **quickOpenAction**: May open new tabs or switch between them.\n25. **ImportMenu**: Dynamically populated based on current folder/tab.\n26. **ExportMenu**: Exports content from currently selected tab.\n27. **FileMenu**: Contains actions affecting all tabs.\n28. **EditMenu**: Actions like undo/redo are often per-tab.\n29. **ViewMenu**: Manages UI elements associated with tabs.\n30. **ToolsMenu**: Some tools may be tab-specific.\n31. **HelpMenu**: UI help context could be linked to current tab.\n32. **Sidebar**: Displays contextual data based on selected tab.\n33. **DesktopTab**: A specific tab type previously managed by Tabs.\n34. **ConsoleTab**: Another tab type dependent on Tabs infrastructure.\n35. **WebBrowserTab**: Tab-based browser view.\n36. **PluginSettingsTab**: Settings UI shown as a tab.\n37. **TaskManager**: May display tasks across open tabs.\n38. **AnnotationBar**: UI bar reflecting annotations in active tab.\n39. **EditorQuickFind**: Search bar tied to current editor tab.\n40. **MToolBar**: Toolbars often change per-tab context.\n41. **MSplitPane**: Layout manager used in conjunction with tab panels.\n42. **MNotification**: Notifications may be tab-specific.\n43. **MMessage**: Dialogs may be launched from tab-related actions.\n44. **MMenu**: Menu items often depend on current tab selection.\n45. **MAction**: Many actions are tied to the active tab.\n46. **MPanel**: Container for tabbed UI components.\n47. **MComponent**: Base class for UI elements that may be inside tabs.\n48. **MMainWindow**: Main window structure built around tabbed layout.\n49. **MApplication**: Global app state may be impacted by missing Tabs.\n50. **MSystemTray**: Tray interactions might affect tabbed windows.\n\nDue to the central role of `Tabs.java` in managing UI navigation and editor lifecycle, all entities listed above should be reviewed for possible refactoring or synchronization, especially those with high confidence values in co-change history and structural or semantic coupling.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14",
                    "m15",
                    "m16"
                ],
                "response_message": "m17"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is Tabs.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_6c0999cf9c4b4529b3e1b7",
                        "function": {
                            "arguments": "{\"entity\": \"Tabs.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"TabIcon\", \"1\", \"0.04\"], [\"MSmallButton\", \"1\", \"0.04\"], [\"MProgressBar\", \"1\", \"0.04\"], [\"MAction\", \"1\", \"0.04\"], [\"TabsMenuAction\", \"1\", \"0.04\"], [\"TodoEditor\", \"4\", \"0.16\"], [\"PropertiesBar\", \"1\", \"0.04\"], [\"MToolBar\", \"1\", \"0.04\"], [\"Vars\", \"2\", \"0.08\"], [\"AnnotationBar\", \"2\", \"0.08\"], [\"EditorQuickFind\", \"1\", \"0.04\"], [\"ZoomComponent\", \"1\", \"0.04\"], [\"MainWindow\", \"6\", \"0.24\"], [\"TaskManager\", \"1\", \"0.04\"], [\"AdvancedProperties\", \"1\", \"0.04\"], [\"FeedsFS\", \"2\", \"0.08\"], [\"Browser\", \"1\", \"0.04\"], [\"Desktop\", \"2\", \"0.08\"], [\"Tree\", \"3\", \"0.12\"], [\"Bookmarks\", \"1\", \"0.04\"], [\"MColorChooser\", \"1\", \"0.04\"], [\"TaskModel\", \"1\", \"0.04\"], [\"Links\", \"1\", \"0.04\"], [\"AbstractFileCache\", \"1\", \"0.04\"], [\"FeedComponent\", \"1\", \"0.04\"], [\"MSplitPane\", \"1\", \"0.04\"], [\"EditorZoom\", \"1\", \"0.04\"], [\"TextUtils\", \"1\", \"0.04\"], [\"NotepadEditor\", \"1\", \"0.04\"], [\"ZoomAction\", \"1\", \"0.04\"], [\"FeedViewer\", \"1\", \"0.04\"], [\"XMLHelper\", \"1\", \"0.04\"], [\"Gettext\", \"1\", \"0.04\"], [\"Archive\", \"1\", \"0.04\"], [\"Action\", \"1\", \"0.04\"], [\"TreePanel\", \"1\", \"0.04\"], [\"Editor\", \"3\", \"0.12\"], [\"AppletTab\", \"2\", \"0.08\"], [\"Help\", \"1\", \"0.04\"], [\"EditorCrypto\", \"1\", \"0.04\"], [\"DeletePrivateDataPlugin\", \"1\", \"0.04\"], [\"Sidebar\", \"2\", \"0.08\"], [\"LookAndFeelSettings\", \"1\", \"0.04\"], [\"ConsoleTab\", \"1\", \"0.04\"], [\"WidgetInternalFrame\", \"1\", \"0.04\"], [\"StatsPanel\", \"1\", \"0.04\"], [\"ArticleMetaInfo\", \"1\", \"0.04\"], [\"WebBrowserTab\", \"1\", \"0.04\"], [\"PrintPreviewPanel\", \"1\", \"0.04\"], [\"PrintDialog\", \"1\", \"0.04\"], [\"TodoEditorCore\", \"2\", \"0.08\"], [\"FileCache\", \"1\", \"0.04\"], [\"ImportExport\", \"1\", \"0.04\"], [\"MTimer\", \"1\", \"0.04\"], [\"ItemComparator\", \"1\", \"0.04\"], [\"TextHighligther\", \"1\", \"0.04\"], [\"MTabbedPane\", \"3\", \"0.12\"], [\"TabComponent\", \"1\", \"0.04\"], [\"Presentation\", \"1\", \"0.04\"], [\"HiddenTabsUI\", \"1\", \"0.04\"], [\"MMessage\", \"1\", \"0.04\"], [\"MNotification\", \"1\", \"0.04\"], [\"Widget\", \"1\", \"0.04\"], [\"MText\", \"1\", \"0.04\"], [\"MTree\", \"1\", \"0.04\"], [\"MMenu\", \"1\", \"0.04\"], [\"ImageEditor\", \"2\", \"0.08\"], [\"DesktopPanel\", \"1\", \"0.04\"], [\"PluginSettingsPage\", \"1\", \"0.04\"], [\"MTab\", \"1\", \"0.04\"], [\"DesktopTab\", \"1\", \"0.04\"], [\"HelpAction\", \"1\", \"0.04\"], [\"Button\", \"1\", \"0.04\"], [\"Todo\", \"1\", \"0.04\"], [\"ScriptYourself\", \"1\", \"0.04\"], [\"StaticCoreHandler\", \"1\", \"0.04\"]]"
            },
            "m5": {
                "content": "The `get_co_change_relationship` function has returned a list of entities that have been co-changed with **Tabs.java** in the past, along with their support count and confidence level. Based on the results, we can identify which entities are most likely impacted by changes to **Tabs.java**, particularly those with higher confidence values.\n\n### Observations:\n1. **MainWindow.java** has the highest confidence value at 0.24 (6 out of 25 modifications occurred together with Tabs.java).\n2. **TodoEditor.java** follows with a confidence of 0.16 (4 out of 25 modifications occurred together).\n3. Several other files such as **Tree.java**, **Editor.java**, and **MTabbedPane.java** share a confidence of 0.12 each.\n4. The majority of the remaining files show low confidence values (e.g., 0.04), indicating weaker historical coupling.\n\n### Next Steps:\nTo further narrow down which entities need synchronization or attention, we should analyze the relationships between **Tabs.java** and these high-confidence entities (e.g., **MainWindow.java**, **TodoEditor.java**, etc.) using additional tools. This will help us understand the nature of their dependencies.\n\nLet's begin by analyzing the conceptual coupling (semantic similarity) between **Tabs.java** and **MainWindow.java**, since it shows the strongest co-change relationship.\n\nI'll proceed to call the `get_conceptual_coupling` function for **Tabs.java** and **MainWindow.java**. \n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_6c71dba2c96346389b76d0",
                        "function": {
                            "arguments": "{\"entity1\": \"Tabs.java\", \"entity2\": \"MainWindow.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "[\"Tabs has been removed from the project due to project version iteration\"]"
            },
            "m7": {
                "content": "It seems that **Tabs.java** has been removed from the project due to version iteration in the current state of the Makagiga project. This explains the absence of conceptual coupling or other direct analysis results for this file.\n\nGiven this new information, we should adjust our approach:\n\n### Revised Plan:\n1. Since **Tabs.java** was removed, it's important to understand how its removal might impact entities that were historically coupled with it (e.g., those identified via `get_co_change_relationship`).\n2. We can examine the source code of **MainWindow.java** (the entity most frequently co-changed with Tabs.java) to determine if there are any references or dependencies on **Tabs.java**, which would confirm a direct relationship.\n3. If such dependencies exist, then **MainWindow.java** (and potentially others) may require synchronization or refactoring due to the removal of **Tabs.java**.\n\n### Next Step:\nI will retrieve the original source code of **MainWindow.java** to inspect for any references to **Tabs.java**.\n\nLet me proceed by calling the `get_origin_code` function for **MainWindow.java**.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_4683f9707d9f4ac3a70b6a",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.IOException;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.GeneralSettings;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.Property;\\nimport org.makagiga.commons.StringList;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.Help;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.help.HelpGenerator;\\nimport org.makagiga.commons.help.HelpMenu;\\nimport org.makagiga.commons.mods.Mod;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.Input;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MLinkAction;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MMessage;\\nimport org.makagiga.commons.swing.MNotification;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSmallButton;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMenuAdapter;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorQuickFind;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.FSException;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.Plugin;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentListButton;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tools.summary.TasksMenu;\\nimport org.makagiga.tools.summary.TasksSettings;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tpublic static final String ALTERNATE_LAYOUT_PROPERTY = \\\"org.makagiga.MainWindow.ALTERNATE_LAYOUT_PROPERTY\\\";\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate static boolean presentationActive;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentListButton documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate final MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\tprivate ZoomResetAction zoomResetAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate DocumentHelpAction documentHelpAction;\\n\\t\\tprivate MAction quickOpenAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"editor-tool-bar\\\", editorToolBar,\\n\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"quick-open-action\\\", quickOpenAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic static Plugin<?> getPresentationPlugin() {\\n\\t\\tPluginInfo info = PluginManager.getInstance().getByID(\\\"{e5508e4c-e070-4d4a-a2de-e9ef754a4656}\\\");\\n\\t\\treturn (info == null) ? null : info.getPlugin();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\tpublic static boolean isPresentationActive() { return presentationActive; }\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tTasksMenu.update(menu);\\n\\t\\tmenu.addSeparator();\\n\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession(config);\\n\\t\\tconfig.sync();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean locked) {\\n\\t\\tsuper.setLocked(locked);\\n\\t\\tupdateTitle();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tif (restoreWindow)\\n\\t\\t\\trestore();\\n\\t\\tsetDesktopVisible(true);\\n\\t\\tDesktop desktop = getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\t@SuppressWarnings(\\\"deprecation\\\")\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentListButton();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\teditorToolBar = new MToolBar();\\n\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tif (MApplication.consoleOpenInTab.get()) {\\n\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tupdateState();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tUI.systemTray.addPropertyChangeListener(new Property.ValueChangeListener<Boolean>() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final Boolean visible) {\\n\\t\\t\\t\\tif (visible)\\n\\t\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tif (UI.systemTray.get()) {\\n\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t}\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPlugin<?> presentation = getPresentationPlugin();\\n\\t\\tif (presentation != null) {\\n\\t\\t\\tpresentation.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\\"active\\\".equals(e.getPropertyName()) &&\\n\\t\\t\\t\\t\\t\\t(e.getNewValue() instanceof Boolean)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tpresentationActive = Boolean.TRUE.equals(e.getNewValue());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI));\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\tdocumentHelpAction = new DocumentHelpAction();\\n\\t\\t\\t\\tquickOpenAction = new QuickOpenDialog.Action();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tnew QuickSaveAction(),\\n\\t\\t\\tquickOpenAction,\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\temailAction.setEnabled((editor != null) && editor.getMetaInfo().isFile());\\n\\t\\t\\texportMenu.addSeparator(false);\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tviewMenu.add(MNotification.createMenu());\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\thelpMenu = new HelpMenu() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInit() {\\n\\t\\t\\t\\tthis.add(new MainWindow.HelpAction());\\n\\t\\t\\t\\tPluginManager.updateMenu(plugins, this, PluginMenu.HELP_MENU, true);\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInitTopics(final MMenu topics) {\\n\\t\\t\\t\\ttopics.addTitle(_(\\\"How-To\\\"));\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(_(\\\"Change the default web browser\\\"), \\\"ui/internet\\\", new StringList(_(\\\"Main Menu\\\"), _(\\\"Tools\\\"), _(\\\"Settings\\\"), _(\\\"General\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tnew GeneralSettings().exec(this.getSourceWindow());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} )\\n\\t\\t\\t\\t\\t.setEnabled(!OS.isWindows());\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(_(\\\"Disable unused plugins\\\"), \\\"ui/plugin\\\", new StringList(_(\\\"Main Menu\\\"), _(\\\"Tools\\\"), _(\\\"Plugins\\\"), _(\\\"Tool Bar\\\"), _(\\\"Disable\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\ttopics.addSeparator();\\n\\t\\t\\t\\ttopics.add(new MAction(\\\"What means \\\\\\\"Makagiga\\\\\\\"?\\\") {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tMMessage.info(this.getSourceWindow(), \\\"\\\\\\\"Makagiga\\\\\\\" is a kind of cake made with caramel, honey, poppy, nuts... ;-)\\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tif (OS.isOpenJDK())\\n\\t\\t\\t\\t\\ttopics.add(new MLinkAction(URI.create(\\\"http:\\t\\t\\t\\t\\n\\t\\t\\t\\ttopics.addSeparator();\\n\\t\\t\\t\\ttopics.add(documentHelpAction);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\tmenuBar.add(documentList);\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(config, Desktop.RESTORE_SESSION_LAZY);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addSeparator(false);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teditMenu.addNoItemsInfo(editMenu.isEmpty());\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tdocumentHelpAction.updateProperties(editor);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t\\tif (zoomResetAction == null)\\n\\t\\t\\t\\t\\t\\tzoomResetAction = new ZoomResetAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomResetAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\tboolean stretchAdded = false;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!isPresentationActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic void updateTitle() { \\t\\tif (isLocked()) {\\n\\t\\t\\t\\t\\t\\tupdateTitle(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetToolTipText(UI.makeHTML(_(\\\"Tip: You can use drag and drop to import/export files.\\\")));\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tImportMenu.class.cast(menu).doInit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\tprivate void doInit() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tadd(new ImportFolderAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tMainWindow.getInstance(),\\n\\t\\t\\t\\tMSettingsDialog.STANDARD_DIALOG | MSettingsDialog.APPLY_BUTTON,\\n\\t\\t\\t\\t\\\"configure\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void apply() {\\n\\t\\t\\t\\t\\tsuper.apply();\\n\\t\\t\\t\\t\\tMainWindow.getInstance().repaint();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tdialog.addPage(new TasksSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.exec();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !MainWindow.isPresentationActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DocumentHelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif (context != null)\\n\\t\\t\\t\\t\\tHelp.show(tab, context);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DocumentHelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP.getText()); \\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tsetEnabled(tab instanceof DocumentHelp);\\n\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\tsetName(_(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t\\tsetAuthorizationProperty(Vars.actionSendFile);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow window = MainWindow.getInstance();\\n\\t\\t\\tHelpGenerator help = new HelpGenerator();\\n\\t\\t\\thelp.setMenuBar(window.getMMenuBar());\\n\\t\\t\\thelp.setOutputDirectory(FS.makeConfigFile(\\\"help\\\", FS.CREATE_DIR).toPath());\\n\\t\\t\\t\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"bookmarks-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"export-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"import-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"tags-menu\\\"));\\n\\t\\t\\thelp.addCommonShortcuts();\\n\\t\\t\\thelp.addShortcut(_(\\\"Image Viewer\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next\\\"), VK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous\\\"), VK_BACK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Fit to Window\\\"), VK_F);\\n\\t\\t\\thelp.addShortcut(_(\\\"Full Screen\\\"), _(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Feeds\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next New\\\"), VK_J);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous New\\\"), VK_K);\\n\\t\\t\\thelp.addShortcut(_(\\\"Open in a new tab (article/notification window)\\\"), _(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Todo List/Table\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Edit cell\\\"), VK_F2);\\n\\t\\t\\thelp.addShortcut(_(\\\"Focus header\\\"), VK_F8);\\n\\t\\t\\thelp.addShortcut(_(\\\"Move to the previous panel\\\"), VK_TAB, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Widgets\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Close active widget\\\"), VK_F4, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Close active widget\\\"), _(\\\"Right Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Activate next widget\\\"), VK_F6, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Minimize active widget\\\"), VK_F9, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Minimize/show all widgets\\\"), _(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Tabs\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Close\\\"), _(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Rename\\\"), _(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"System Tray\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Quick Paste\\\"), _(\\\"Middle Button Click\\\"));\\n\\t\\t\\ttry {\\n\\t\\t\\t\\thelp.generate();\\n\\t\\t\\t\\t\\t\\t\\t\\tWebBrowserTab tab = WebBrowserTab.getInstance();\\n\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(help.getIndexFile().toUri());\\n\\t\\t\\t}\\n\\t\\t\\tcatch (IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ImportFolderAction extends MAction {\\n\\t\\tpublic ImportFolderAction() {\\n\\t\\t\\tsuper(_(\\\"Folder...\\\"), \\\"ui/folder\\\");\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tFile from = Input.getDirectory(getSourceWindow(), _(\\\"Import Folder\\\"), \\\"import-folder\\\", MActionInfo.IMPORT);\\n\\t\\t\\tif (from == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo toFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tImportExport.importFolder(getSourceWindow(), new MArrayList<>(from.toPath()), toFolder);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FSException | IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(_(\\\"Save all the modified files now\\\"), VK_S, getMenuMask());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(_(\\\"Location Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.isInstance() ? PropertiesBar.getInstance() : null;\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tif (PropertiesBar.isInstance())\\n\\t\\t\\t\\t\\tPropertiesBar.getInstance().setVisible(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t\\tif (Sidebar.getInstance().isTreeSelected())\\n\\t\\t\\t\\tTree.getInstance().requestFocus();\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomResetAction extends MApplication.ZoomResetAction {\\n\\t\\tpublic ZoomResetAction() { }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\teditorZoom.resetZoom();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (AbstractMethodError error) {\\n\\t\\t\\t\\t\\tTK.beep();\\n\\t\\t\\t\\t\\tif (MLogger.isDeveloper())\\n\\t\\t\\t\\t\\t\\tMLogger.exception(error);\\n\\t\\t\\t\\t\\tMLogger.error(\\\"core\\\", \\\"Zoom reset not supported\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m9": {
                "content": "Looking at the source code of **MainWindow.java**, it is clear that this class is central to the application's UI structure and manages various components, menus, toolbars, and interactions with other parts of the system.\n\n### Key Observations:\n1. **Tabs Reference**:\n   - The code contains multiple references to a `Tabs` class, such as:\n     ```java\n     private final Tabs tabs = Tabs.getInstance();\n     ```\n     This indicates that **MainWindow** heavily relies on the `Tabs` class for managing editor tabs and user interface state.\n   - Methods like `tabs.selectEditor(...)`, `tabs.getSelectedTab()`, and `tabs.getInstance()` are used throughout the codebase, showing tight coupling between **MainWindow** and **Tabs**.\n\n2. **Impact of Tabs Removal**:\n   - Since **Tabs.java** has been removed from the project, any usage of the `Tabs` class in **MainWindow.java** will cause compilation errors or runtime failures unless replaced or refactored.\n   - Specifically, calls like `Tabs.getInstance()` and method invocations on the `tabs` instance (e.g., `tabs.selectEditor(...)`) will break the functionality of **MainWindow**.\n\n3. **UI Components Affected**:\n   - Tab management logic involving actions like switching between editors, restoring sessions, updating the toolbar, and handling tab changes are all dependent on the now-removed `Tabs` class.\n\n### Next Steps:\nTo determine whether **MainWindow.java** needs synchronization or refactoring due to the removal of **Tabs.java**, we should:\n- Check if there's an alternative class replacing the functionality of `Tabs` in the current version.\n- Identify if any migration or replacement logic has already been implemented in **MainWindow.java** to handle the absence of `Tabs`.\n\nLet me proceed by analyzing the conceptual coupling between **MainWindow.java** and another high-confidence co-changed entity: **TodoEditor.java**, to see if similar dependencies exist there as well.\n\nI'll call the `get_conceptual_coupling` function for **MainWindow.java** and **TodoEditor.java**.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_65cfea3437034ef3b0b515",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TodoEditor.java\"}",
                            "name": "get_conceptual_coupling"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_conceptual_coupling",
                "content": "\"0.71202594\""
            },
            "m11": {
                "content": "The conceptual coupling (semantic similarity) between **MainWindow.java** and **TodoEditor.java** is approximately **0.71**, which indicates a relatively high semantic relationship between the two files.\n\n### Interpretation:\n- A value of **0.71** suggests that these two entities likely share similar functional concerns or are involved in related aspects of the application logic.\n- Given that **MainWindow.java** manages UI components, menus, and interactions with various editors (including tabs), and **TodoEditor.java** appears to be one of those editors, it's reasonable to conclude that changes to **MainWindow.java** can have a significant impact on **TodoEditor.java** and vice versa.\n\n### Implications of Tabs.java Removal:\n- Since **Tabs.java** was central to managing editor tabs and UI state, and **MainWindow.java** depends heavily on it, the removal of `Tabs` could affect not only **MainWindow.java** but also dependent editors like **TodoEditor.java**.\n- This high conceptual coupling reinforces the idea that **TodoEditor.java** may require synchronization or refactoring if it previously interacted with `Tabs` or relies on functionality now missing due to its removal.\n\n### Next Steps:\nTo confirm whether **TodoEditor.java** is directly impacted by the removal of `Tabs.java`, I will:\n- Retrieve the source code for **TodoEditor.java** to inspect for any direct usage of the `Tabs` class or related methods.\n\nI'll proceed by calling the `get_origin_code` function for **TodoEditor.java**.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_3d38ea57faac44658a7ef4",
                        "function": {
                            "arguments": "{\"entity\": \"TodoEditor.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga.editors.todo;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.event.MouseEvent;\\nimport java.awt.print.Printable;\\nimport java.awt.print.PrinterException;\\nimport java.io.InputStream;\\nimport java.io.OutputStream;\\nimport java.text.MessageFormat;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.DocumentEvent;\\nimport javax.swing.event.ListSelectionEvent;\\nimport javax.swing.event.ListSelectionListener;\\nimport org.makagiga.Vars;\\nimport org.makagiga.chart.ChartModel;\\nimport org.makagiga.chart.ChartPainter;\\nimport org.makagiga.commons.ActionGroup;\\nimport org.makagiga.commons.ColumnManager;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.Focusable;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MButton;\\nimport org.makagiga.commons.MDate;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MMessage;\\nimport org.makagiga.commons.MMouseAdapter;\\nimport org.makagiga.commons.MPanel;\\nimport org.makagiga.commons.MProperties;\\nimport org.makagiga.commons.MScrollPane;\\nimport org.makagiga.commons.MSearchPanel;\\nimport org.makagiga.commons.MSmallButton;\\nimport org.makagiga.commons.MStatusBar;\\nimport org.makagiga.commons.MTable;\\nimport org.makagiga.commons.MTextField;\\nimport org.makagiga.commons.MTip;\\nimport org.makagiga.commons.MToolBar;\\nimport org.makagiga.commons.MUndoManager;\\nimport org.makagiga.commons.MV;\\nimport org.makagiga.commons.Preloader;\\nimport org.makagiga.commons.StringList;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.painters.GlassPainter;\\nimport org.makagiga.commons.print.PrintInfo.PrintResult;\\nimport org.makagiga.editors.Actions;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorConfig;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorIO;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorSearch.SearchResult;\\nimport org.makagiga.editors.EditorStats;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.TextUtils;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.todo.Column;\\nimport org.makagiga.todo.Priority;\\nimport org.makagiga.todo.Task;\\nimport org.makagiga.tools.presentation.Presentation;\\npublic final class TodoEditor extends Editor<TodoEditorCore>\\nimplements\\n\\tEditorConfig,\\n\\tEditorDesigner<TodoEditorDesigner>,\\n\\tEditorExport,\\n\\tEditorIO,\\n\\tEditorPrint,\\n\\tEditorSearch,\\n\\tEditorStats<ChartModel>,\\n\\tEditorZoom,\\n\\tFocusable,\\n\\tPluginMenu,\\n\\tPreloader.Events,\\n\\tPresentation.ToggleListener\\n{\\n\\tprivate MButton addItemButton;\\n\\tprivate MPanel topPanel;\\n\\tprivate MSearchPanel filterField;\\n\\tprivate MTextField newTask;\\n\\tprivate MUndoManager undoManager;\\n\\tprivate TodoEditorDesigner designer;\\n\\tpublic TodoEditor() {\\n\\t\\tif (Vars.todoUsePriorityPrimaryColor.get())\\n\\t\\t\\tPriority.setPrimaryColor(Vars.todoPriorityPrimaryColor.get());\\n\\t\\telse\\n\\t\\t\\tPriority.setPrimaryColor(null);\\n\\t\\t\\t\\tsetCore(new TodoEditorCore(this));\\n\\t\\tMScrollPane scrollPane = new MScrollPane(core, MScrollPane.NO_BORDER);\\n\\t\\tscrollPane.setColumnHeaderView(core.getTableHeader());\\n\\t\\taddCenter(scrollPane);\\n\\t\\tdesigner = new TodoEditorDesigner();\\n\\t\\tundoManager = new MUndoManager(core, MUndoManager.NO_LIMIT) {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUserActions() {\\n\\t\\t\\t\\tTodoEditor.this.updateActions();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tcore.getModel().addUndoableEditListener(undoManager.createUndoableEditListener());\\n\\t\\ttopPanel = MPanel.createBorderPanel();\\n\\t\\ttopPanel.setVisible(!Presentation.isActive());\\n\\t\\tPresentation.addToggleListener(this);\\n\\t\\tMPanel taskPanel = MPanel.createHBoxPanel();\\n\\t\\ttaskPanel.setMargin(2);\\n\\t\\t\\t\\tnewTask = new MTextField() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final DocumentEvent e) {\\n\\t\\t\\t\\taddItemButton.setEnabled(!isEmpty());\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tnewTask.setAutoCompletion(\\\"newtask\\\");\\n\\t\\tnewTask.setEnterPressAction(new MAction() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\taddItemButton.doClick();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\ttaskPanel.addGap();\\n\\t\\ttaskPanel.add(MPanel.createHLabelPanel(newTask, _(\\\"Add a New Task:\\\")));\\n\\t\\taddItemButton = new MSmallButton(MIcon.small(\\\"ui/ok\\\"), _(\\\"Add task to the list\\\")) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onClick() {\\n\\t\\t\\t\\tnewTask.saveAutoCompletion();\\n\\t\\t\\t\\tcore.addTask(newTask.getText(), true);\\n\\t\\t\\t\\tnewTask.clear();\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\taddItemButton.setEnabled(false);\\n\\t\\ttaskPanel.add(addItemButton);\\n\\t\\ttaskPanel.addGap();\\n\\t\\tfilterField = new MSearchPanel(true, MSearchPanel.Type.FILTER) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final DocumentEvent e) {\\n\\t\\t\\t\\tcore.filterTasks(getText());\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tfilterField.getTextField().setToolTipText(_(\\\"Filter Tasks by Summary or Date/Time\\\"));\\n\\t\\ttaskPanel.add(filterField);\\n\\t\\ttopPanel.addNorth(taskPanel);\\n\\t\\tMTip tip = new MTip(TodoEditor.class.getName());\\n\\t\\ttip.setRoundType(GlassPainter.RoundType.NONE);\\n\\t\\ttip.showNextTip(MTip.Visible.SELDOM);\\n\\t\\tif (Vars.todoNewTaskPanelPosition.equalsValue(UI.VerticalPosition.BOTTOM)) {\\n\\t\\t\\ttip.setDirection(MTip.Direction.BOTTOM);\\n\\t\\t\\taddNorth(tip);\\n\\t\\t\\taddSouth(topPanel);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\taddNorth(topPanel);\\n\\t\\t\\taddSouth(tip);\\n\\t\\t}\\n\\t\\t\\t\\tcore.addMouseListener(new MMouseAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void mouseClicked(final MouseEvent e) {\\n\\t\\t\\t\\tif (MMouseAdapter.isLeft(e))\\n\\t\\t\\t\\t\\tTodoEditor.this.showLockInfo();\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void popupTrigger(final MouseEvent e) {\\n\\t\\t\\t\\tTodoEditor.this.showPopupMenu(PluginMenu.EDIT_MENU, e);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tcore.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\\n\\t\\t\\tpublic void valueChanged(final ListSelectionEvent e) {\\n\\t\\t\\t\\tupdateActions();\\n\\t\\t\\t\\tupdateStatusText();\\n\\t\\t\\t\\tdesigner.updateComponentsLater(core);\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\tactionGroup.connect(\\\"cut\\\", core, \\\"cut\\\");\\n\\t\\tactionGroup.connect(\\\"copy\\\", core, \\\"copy\\\");\\n\\t\\tactionGroup.connect(\\\"paste\\\", core, \\\"paste\\\");\\n\\t}\\n\\tpublic void focus() {\\n\\t\\tnewTask.requestFocusInWindow();\\n\\t}\\n\\t@Override\\n\\tpublic boolean isLocked() {\\n\\t\\treturn !newTask.isEditable();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean value) {\\n\\t\\tsuper.setLocked(value);\\n\\t\\taddItemButton.setEnabled(!value && !newTask.isEmpty());\\n\\t\\tnewTask.setEditable(!value);\\n\\t\\tnewTask.setToolTipText(\\n\\t\\t\\tvalue\\n\\t\\t\\t? _(\\\"This file is locked. Click the \\\\\\\"Unlock\\\\\\\" button if you want to edit this file.\\\")\\n\\t\\t\\t: null\\n\\t\\t);\\n\\t\\tcore.getModel().setLocked(value);\\n\\t}\\n\\t@Override\\n\\tpublic void onClose() {\\n\\t\\tPresentation.removeToggleListener(this);\\n\\t\\tdesigner.stopUpdate();\\n\\t}\\n\\t@Override\\n\\tpublic void onLastClose() { }\\n\\t@Override\\n\\tpublic void setExportMode(final boolean value) {\\n\\t\\tsuper.setExportMode(value);\\n\\t\\tif (value)\\n\\t\\t\\tcore.clearSelection();\\n\\t}\\n\\t@Override\\n\\tpublic void updateActions() {\\n\\t\\tif (!isCurrent())\\n\\t\\t\\treturn;\\n\\t\\tboolean isSelection = core.isSelection();\\n\\t\\tundoManager.updateUndoRedoActions(!isLocked());\\n\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\tactionGroup.setEnabled(\\\"copy\\\", isSelection);\\n\\t\\tactionGroup.setEnabled(\\\"cut\\\", isSelection && !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"delete\\\", isSelection && !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"delete-completed\\\", !core.isEmpty(MV.MODEL) && !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"paste\\\", !isLocked());\\n\\t\\tactionGroup.setEnabled(\\\"select-all\\\", !core.isEmpty(MV.VIEW));\\n\\t\\tactionGroup.setEnabled(\\\"unselect-all\\\", isSelection);\\n\\t}\\n\\t@Override\\n\\tpublic void updateStatusText() {\\n\\t\\tsetStatusText(core.getSelectionText());\\n\\t}\\n\\tpublic void loadConfig(final Config local) {\\n\\t\\tConfig global = Config.getDefault();\\n\\t\\tcore.read(global, local, this);\\n\\t}\\n\\tpublic void saveConfig(final Config local) {\\n\\t\\tConfig global = Config.getDefault();\\n\\t\\tcore.write(global, local, this);\\n\\t}\\n\\tpublic synchronized TodoEditorDesigner getEditorDesigner() { return designer; }\\n\\tpublic void updateEditorDesigner() { }\\n\\tpublic void exportFile(final EditorPlugin.FileType type, final OutputStream output) throws Exception {\\n\\t\\tif (type.is(\\\"csv\\\"))\\n\\t\\t\\tcore.saveToFileAsCSV(output);\\n\\t\\telse if (type.is(\\\"html\\\"))\\n\\t\\t\\tcore.saveToFileAsHTML(output, false, false);\\n\\t\\telse if (type.is(\\\"mgtodo\\\") || type.is(\\\"xml\\\"))\\n\\t\\t\\tcore.getModel().saveToXML(output);\\n\\t\\telse if (type.is(\\\"ods\\\"))\\n\\t\\t\\tcore.saveToFileAsODS(output);\\n\\t\\telse if (type.is(\\\"opml\\\"))\\n\\t\\t\\tcore.saveToFileAsOPML(output);\\n\\t\\telse if (type.is(\\\"txt\\\"))\\n\\t\\t\\tcore.saveToFileAsText(output);\\n\\t\\telse if (type.is(\\\"xhtml\\\"))\\n\\t\\t\\tcore.saveToFileAsHTML(output, true, false);\\n\\t\\telse if (type.is(\\\"vcs\\\"))\\n\\t\\t\\tcore.saveToFileAsVcs(output);\\n\\t\\telse\\n\\t\\t\\texportNotSupported(type); \\t}\\n\\tpublic void loadFile(final InputStream input, final boolean newFile) throws Exception {\\n\\t\\tcore.getModel().loadFromXML(input, newFile);\\n\\t}\\n\\tpublic void saveFile(final OutputStream output) throws Exception {\\n\\t\\tcore.getModel().saveToXML(output);\\n\\t\\tupdateIndex(core.getKeywords());\\n\\t}\\n\\tpublic Printable getPrintable(final Flags flags, final MessageFormat header, final MessageFormat footer) throws PrinterException {\\n\\t\\treturn core.getPrintable(\\n\\t\\t\\tflags.isSet(TABLE_FIT_WIDTH)\\n\\t\\t\\t\\t? MTable.PrintMode.FIT_WIDTH\\n\\t\\t\\t\\t: MTable.PrintMode.NORMAL,\\n\\t\\t\\theader,\\n\\t\\t\\tfooter\\n\\t\\t);\\n\\t}\\n\\tpublic PrintResult printDocument(final Flags flags, final MessageFormat header, final MessageFormat footer) throws PrinterException {\\n\\t\\treturn\\n\\t\\t\\tcore.print(\\n\\t\\t\\t\\tflags.isSet(TABLE_FIT_WIDTH)\\n\\t\\t\\t\\t? MTable.PrintMode.FIT_WIDTH\\n\\t\\t\\t\\t: MTable.PrintMode.NORMAL,\\n\\t\\t\\t\\theader,\\n\\t\\t\\t\\tfooter\\n\\t\\t\\t)\\n\\t\\t\\t? PrintResult.COMPLETE\\n\\t\\t\\t: PrintResult.CANCELLED;\\n\\t}\\n\\tpublic SearchResult findText(final String text, final Flags flags) {\\n\\t\\treturn core.searchFor(text, 0, flags); \\t}\\n\\tpublic SearchResult findNextText(final String text, final Flags flags) {\\n\\t\\tSearchResult result = core.searchFor(text, core.getSelectedRow() + 1, flags); \\t\\tif (result == SearchResult.WRAP_AROUND) {\\n\\t\\t\\t\\t\\t\\treturn\\n\\t\\t\\t\\t(findText(text, flags) == SearchResult.NOT_FOUND)\\n\\t\\t\\t\\t\\t? SearchResult.NOT_FOUND\\n\\t\\t\\t\\t\\t: SearchResult.WRAP_AROUND;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t}\\n\\tpublic String getDefaultSearchText() {\\n\\t\\treturn core.getSelectedSummary();\\n\\t}\\n\\tpublic int getSupportedSearchOptions() {\\n\\t\\treturn CASE_SENSITIVE;\\n\\t}\\n\\tpublic ChartPainter<ChartModel> getStatsChart() {\\n\\t\\treturn new ChartPainter<ChartModel>(core.createChartModel());\\n\\t}\\n\\tpublic MProperties getStatsProperties() { return null; }\\n\\tpublic String getStatsTitle() {\\n\\t\\treturn getMetaInfo().toString();\\n\\t}\\n\\tpublic JComponent getZoomComponent() { return null; }\\n\\tpublic boolean isZoomEnabled(final ZoomType type) {\\n\\t\\treturn TextUtils.canZoom(core, type);\\n\\t}\\n\\tpublic void zoom(final ZoomType type) {\\n\\t\\tcore.updateFontSize(TextUtils.zoom(core, type).getSize());\\n\\t\\t\\t\\tConfig config = Config.getDefault();\\n\\t\\tcore.writeFontSize(config, this);\\n\\t\\tconfig.sync();\\n\\t}\\n\\tpublic void updateMenu(final String type, final MMenu menu) {\\n\\t\\tif (type.equals(EDIT_MENU)) {\\n\\t\\t\\tundoManager.updateMenu(menu);\\n\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\t\\tactionGroup.updateMenu(menu);\\n\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\tMMenu selectionMenu = new MMenu(_(\\\"Modify Selected Tasks: {0}\\\", core.getSelectedRowCount()));\\n\\t\\t\\tif (core.isSelection() && !isLocked()) {\\n\\t\\t\\t\\tselectionMenu.add(new CompleteAction(0));\\n\\t\\t\\t\\tselectionMenu.add(new CompleteAction(100));\\n\\t\\t\\t\\t\\t\\t\\t\\tselectionMenu.addTitle(_(\\\"Set Date/Time\\\"), \\\"ui/calendar\\\");\\n\\t\\t\\t\\tselectionMenu.add(new DateAction(_(\\\"No Date/Time\\\"), \\\"ui/clearright\\\", MDate.invalid()));\\n\\t\\t\\t\\tselectionMenu.addSeparator();\\n\\t\\t\\t\\tselectionMenu.add(new DateAction(_(\\\"Current Date and Time\\\"), \\\"ui/star\\\", MDate.now()));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tselectionMenu.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t\\tmenu.add(selectionMenu);\\n\\t\\t}\\n\\t\\telse if (type.equals(VIEW_MENU_EDITOR) && Kiosk.actionSettings.get()) {\\n\\t\\t\\tmenu.addSeparator();\\n\\t\\t\\tColumnManager cm = core.getColumnManager();\\n\\t\\t\\tmenu.add(cm.createSortMenu());\\n\\t\\t\\tmenu.add(cm.createVisibleMenu());\\n\\t\\t}\\n\\t}\\n\\tpublic void updateToolBar(final String type, final MToolBar toolBar) {\\n\\t\\tif (type.equals(EDITOR_TOOL_BAR)) {\\n\\t\\t\\tundoManager.updateToolBar(toolBar);\\n\\t\\t\\ttoolBar.addSeparator();\\n\\t\\t\\tActionGroup actionGroup = getSharedActionGroup();\\n\\t\\t\\tactionGroup.updateToolBar(toolBar);\\n\\t\\t}\\n\\t}\\n\\tpublic void preloadFinished() {\\n\\t\\t\\t\\tdestroy();\\n\\t}\\n\\tpublic void toggle(final Presentation.ToggleEvent e) {\\n\\t\\ttopPanel.setVisible(!e.isActive());\\n\\t}\\n\\t@Override\\n\\tprotected ActionGroup createSharedActionGroup() {\\n\\t\\tActionGroup actionGroup = new ActionGroup();\\n\\t\\tactionGroup.add(\\\"cut\\\", new CutAction());\\n\\t\\tactionGroup.add(\\\"copy\\\", new CopyAction())\\n\\t\\t\\t.setShowTextInToolBar(true);\\n\\t\\tactionGroup.add(\\\"paste\\\", new PasteAction())\\n\\t\\t\\t.setShowTextInToolBar(true);\\n\\t\\tactionGroup.addSeparator();\\n\\t\\tactionGroup.add(\\\"delete-completed\\\", new DeleteCompletedAction())\\n\\t\\t\\t.setShowTextInToolBar(true);\\n\\t\\tactionGroup.add(\\\"delete\\\", new DeleteAction())\\n\\t\\t\\t.setVisibleInToolBar(false);\\n\\t\\tactionGroup.addSeparator();\\n\\t\\tactionGroup.add(\\\"select-all\\\", new SelectAllAction())\\n\\t\\t\\t.setVisibleInToolBar(false);\\n\\t\\tactionGroup.add(\\\"unselect-all\\\", new UnselectAllAction())\\n\\t\\t\\t.setVisibleInToolBar(false);\\n\\t\\treturn actionGroup;\\n\\t}\\n\\tprivate static final class CompleteAction extends SelectionAction<Integer> {\\n\\t\\tprivate CompleteAction(final int value) {\\n\\t\\t\\tsuper(_(\\\"Set Complete: {0}\\\", (value + \\\"%\\\")), null, Column.COMPLETE, value);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class CopyAction extends Actions.Copy<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tif (!editor.getCore().copy(false))\\n\\t\\t\\t\\tshowCopyError();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class CutAction extends Actions.Cut<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tif (!editor.getCore().copy(true))\\n\\t\\t\\t\\tshowCutError();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DateAction extends SelectionAction<MDate> {\\n\\t\\tprivate DateAction(final String name, final String iconName, final MDate value) {\\n\\t\\t\\tsuper(name, iconName, Column.DATE_TIME, value);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DeleteAction extends Actions.Base<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tTodoEditorCore core = editor.getCore();\\n\\t\\t\\tif (core.deleteSelected(\\n\\t\\t\\t\\tgetSourceWindow(),\\n\\t\\t\\t\\tUI.makeHTML(\\n\\t\\t\\t\\t\\t_(\\\"Are you sure you want to delete <b>all selected</b> tasks?\\\") +\\n\\t\\t\\t\\t\\t\\\"<br><br>\\\" +\\n\\t\\t\\t\\t\\tTK.escapeXML(core.getSelectionText())\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tColumn.SUMMARY.ordinal()\\n\\t\\t\\t)) {\\n\\t\\t\\t\\teditor.updateStatusText();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DeleteAction() {\\n\\t\\t\\tsuper(_(\\\"Delete Selected\\\"), \\\"ui/delete\\\", VK_DELETE);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Deletes all the selected tasks.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DeleteCompletedAction extends Actions.Base<TodoEditor> {\\n\\t\\tDeleteCompletedAction() {\\n\\t\\t\\tsuper(_(\\\"Delete Completed\\\"), \\\"ui/ok\\\", VK_D, CTRL_MASK | SHIFT_MASK);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Deletes all the completed tasks.\\\"));\\n\\t\\t}\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tTodoEditorCore core = editor.getCore();\\n\\t\\t\\tint completedItems = core.getCompletedItemCount();\\n\\t\\t\\tif (completedItems == 0) {\\n\\t\\t\\t\\tMStatusBar.warning(_(\\\"No completed tasks\\\"));\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tStringList selectedText = new StringList(completedItems);\\n\\t\\t\\tfor (Task i : core.getTaskList()) {\\n\\t\\t\\t\\tif (i.isDone())\\n\\t\\t\\t\\t\\tselectedText.add(i.getSummary());\\n\\t\\t\\t}\\n\\t\\t\\tif (MMessage.customConfirm(\\n\\t\\t\\t\\tgetSourceWindow(),\\n\\t\\t\\t\\tMIcon.stock(\\\"ui/ok\\\"),\\n\\t\\t\\t\\tMIcon.stock(\\\"ui/delete\\\"), _(\\\"Delete Completed Tasks\\\"),\\n\\t\\t\\t\\tnull, null,\\n\\t\\t\\t\\tUI.makeHTML(_(\\\"Are you sure you want to delete <b>all completed</b> tasks?<br><br>Completed Tasks: {0}\\\", completedItems)),\\n\\t\\t\\t\\tselectedText.toArray()\\n\\t\\t\\t)) {\\n\\t\\t\\t\\tcore.deleteCompletedItems();\\n\\t\\t\\t\\teditor.updateStatusText();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PasteAction extends Actions.Paste<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tif (!editor.getCore().paste())\\n\\t\\t\\t\\tshowPasteError();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class SelectAllAction extends Actions.SelectAll<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\teditor.getCore().selectAll();\\n\\t\\t}\\n\\t}\\n\\tprivate static abstract class SelectionAction<T> extends Actions.Base<TodoEditor> {\\n\\t\\tprivate Column column;\\n\\t\\tprivate T value;\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\tTodoEditorCore core = editor.getCore();\\n\\t\\t\\tint[] selection = core.getSelectedRows();\\n\\t\\t\\tfor (int i : selection)\\n\\t\\t\\t\\tcore.getModel().setValueAt(value, core.convertRowIndexToModel(i), column.ordinal());\\n\\t\\t}\\n\\t\\tprotected SelectionAction(final String name, final String iconName, final Column column, final T value) {\\n\\t\\t\\tsuper(name, iconName);\\n\\t\\t\\tsetEnabled(true);\\n\\t\\t\\tthis.column = column;\\n\\t\\t\\tthis.value = value;\\n\\t\\t}\\n\\t}\\n\\tprivate static final class UnselectAllAction extends Actions.UnselectAll<TodoEditor> {\\n\\t\\tpublic void onAction(final TodoEditor editor) {\\n\\t\\t\\teditor.getCore().clearSelection();\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m13": {
                "content": "The source code for **TodoEditor.java** confirms that it is a specialized editor component within the Makagiga application, designed to manage and manipulate \"todo\" tasks. It implements several interfaces related to editing, exporting, searching, printing, and zooming content.\n\n### Key Observations:\n1. **No Direct Reference to `Tabs` Class**:\n   - There is **no explicit usage of the `Tabs` class** in **TodoEditor.java**, which suggests that this file may not be directly impacted by the removal of **Tabs.java**.\n   - The editor relies on its own core (`TodoEditorCore`) and interacts with UI components like `MTable`, `MTextField`, and `MScrollPane`.\n\n2. **Interaction with MainWindow**:\n   - Although **TodoEditor** does not directly use `Tabs`, it likely interacts indirectly with `Tabs` through the shared UI infrastructure managed by **MainWindow** (e.g., tab switching, editor selection).\n   - Since **MainWindow** depends heavily on `Tabs`, any functionality involving `TodoEditor` being displayed or managed as a tab could now be broken due to the removal of `Tabs`.\n\n3. **Potential Impact of Tabs Removal**:\n   - If `TodoEditor` was previously added or managed via `Tabs.getInstance().addEditor(...)`, then its integration into the UI would be affected.\n   - However, based on the current source code, no such direct dependency exists in **TodoEditor.java** itself.\n\n### Summary of CIA Findings:\n- **MainWindow.java** is strongly affected by the removal of **Tabs.java** due to heavy coupling and reliance on the `Tabs` class for managing editors and UI state.\n- **TodoEditor.java** does not show direct dependencies on `Tabs`, but may be indirectly affected if it was historically managed as a tab within the `Tabs` system.\n\n### Final Step:\nTo ensure completeness, I will check if there are direct coupling dependencies between **MainWindow.java** and **TodoEditor.java** using the `get_coupling_dependencies` function.\n\nI'll proceed with this final check before concluding the analysis.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_a522de2bf098406382d471",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"TodoEditor.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m14": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m15": {
                "content": "### Final Analysis and Conclusion\n\nAfter conducting a comprehensive **Change Impact Analysis (CIA)** for the starting entity **Tabs.java**, here is a summary of findings and recommendations:\n\n---\n\n### \ud83d\udd0d Key Findings\n\n1. **Tabs.java Has Been Removed**:\n   - The file `Tabs.java` has been removed from the current version of the Makagiga project, which explains the absence of direct coupling or conceptual analysis results.\n\n2. **Co-Change Relationships**:\n   - Using `get_co_change_relationship`, we identified several files historically modified alongside `Tabs.java`.\n   - **MainWindow.java** showed the strongest co-change relationship with a confidence level of **0.24**.\n   - Other notable files include **TodoEditor.java** (**0.16**) and **Tree.java**, **Editor.java**, **MTabbedPane.java** (**0.12 each**).\n\n3. **Conceptual Coupling**:\n   - A high semantic similarity score (**0.71**) was found between **MainWindow.java** and **TodoEditor.java**, indicating they are functionally related.\n   - However, no direct coupling dependencies were found between these two entities using structural analysis.\n\n4. **Impact on MainWindow.java**:\n   - **MainWindow.java** heavily relied on `Tabs.getInstance()` and associated methods like `tabs.selectEditor(...)`, `tabs.getSelectedTab()`, etc.\n   - With the removal of `Tabs.java`, **MainWindow.java** will likely suffer from compilation errors or runtime failures unless refactored.\n\n5. **TodoEditor.java**:\n   - No direct usage of `Tabs` was found in **TodoEditor.java**.\n   - It may still be indirectly affected if it was previously managed as a tab via `Tabs`, but this logic appears to have been either moved or redesigned.\n\n6. **No Direct Structural Dependencies Between MainWindow and TodoEditor**:\n   - Despite strong co-change history and conceptual coupling, there are no direct structural couplings (e.g., inheritance, interface implementation, method calls) between **MainWindow.java** and **TodoEditor.java**.\n\n---\n\n### \u2705 Recommendation: Which Entities Need Synchronization?\n\nBased on the CIA findings:\n\n#### \ud83d\udea8 **MainWindow.java** \u2014 Requires Immediate Attention\n- **Why**: It directly uses the now-removed `Tabs` class in multiple places.\n- **Action Required**:\n  - Investigate whether `Tabs` functionality has been replaced by another class.\n  - Refactor or update all references to `Tabs.getInstance()` and related methods.\n\n#### \u26a0\ufe0f **TodoEditor.java** \u2014 Monitor for Indirect Impacts\n- **Why**: While no direct dependency exists, its integration into the UI might have relied on `Tabs`.\n- **Action Required**:\n  - Verify if `TodoEditor` is being used within a tabbed interface that has been affected by the removal of `Tabs`.\n  - Ensure UI integration points remain functional.\n\n#### \ud83d\udfe1 **Other Co-Changed Files** (e.g., Tree.java, Editor.java, MTabbedPane.java)\n- These should be reviewed for indirect usages of `Tabs` or for any UI-related regressions following its removal.\n\n---\n\n### \ud83d\udccc Final Summary\n\n| Entity            | Needs Sync? | Reason                                                                 |\n|------------------|-------------|------------------------------------------------------------------------|\n| **Tabs.java**     | \u274c          | Removed from the codebase                                            |\n| **MainWindow.java** | \u2705        | Strongly coupled; contains many references to `Tabs`                 |\n| **TodoEditor.java** | \u26a0\ufe0f        | High conceptual coupling; no direct dependency                        |\n\n---\n\nWould you like help generating a patch or migration strategy for refactoring **MainWindow.java** to remove reliance on `Tabs.java`?",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m16": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m17": {
                "content": "Title: Diagnosis of starting entity `Tabs.java`\n\nChange set: [MainWindow, TodoEditor, Tree, Editor, MTabbedPane, TodoEditorCore, PropertiesBar, HelpAction, ConfigureAction, ToggleDesktopAction, ShowHidePropertiesBarAction, ZoomInAction, ZoomOutAction, ZoomResetAction, FindAction, FindNextAction, ToggleSummaryAction, ToggleDesignerAction, ShowHideSidebarAction, searchAction, consoleAction, configureAction, documentHelpAction, quickOpenAction, ImportMenu, ExportMenu, FileMenu, EditMenu, ViewMenu, ToolsMenu, HelpMenu, Sidebar, DesktopTab, ConsoleTab, WebBrowserTab, PluginSettingsTab, TaskManager, AnnotationBar, EditorQuickFind, MToolBar, MSplitPane, MNotification, MMessage, MMenu, MAction, MPanel, MComponent, MMainWindow, MApplication, MSystemTray]\n\nDetails:\n1. **MainWindow**: Directly uses `Tabs.getInstance()` and relies on Tabs for managing editor tabs, UI state, and session restoration.\n2. **TodoEditor**: High conceptual coupling with MainWindow; may have been integrated via Tabs in the past.\n3. **Tree**: Frequently co-changed (support 3); likely interacts with tabbed editors managed by Tabs.\n4. **Editor**: Base class for many tabbed components; may be affected if instantiated or managed through Tabs.\n5. **MTabbedPane**: Tab management component; likely replacement or related to Tabs.java.\n6. **TodoEditorCore**: Core implementation behind TodoEditor; potential indirect integration via Tabs.\n7. **PropertiesBar**: Co-changed with Tabs; likely updated based on selected tab.\n8. **HelpAction**: Part of MainWindow's menu system which was tied to Tabs-based UI.\n9. **ConfigureAction**: Manages UI settings potentially linked to Tabs.\n10. **ToggleDesktopAction**: Toggles visibility of desktop widgets, previously managed by Tabs.\n11. **ShowHidePropertiesBarAction**: Updates properties bar based on current tab.\n12. **ZoomInAction**: Zoom actions tied to active tab content.\n13. **ZoomOutAction**: See above.\n14. **ZoomResetAction**: See above.\n15. **FindAction**: Search functionality often context-dependent on current tab.\n16. **FindNextAction**: See above.\n17. **ToggleSummaryAction**: Related to sidebar visibility, often triggered from tabs.\n18. **ToggleDesignerAction**: Switches between views within a tabbed interface.\n19. **ShowHideSidebarAction**: Manages sidebar that may be context-sensitive to tabs.\n20. **searchAction**: Embedded search depends on current tab\u2019s content.\n21. **consoleAction**: Console interaction may be embedded in tabbed UI.\n22. **configureAction**: Settings may relate to tab behavior.\n23. **documentHelpAction**: Contextual help often linked to active tab.\n24. **quickOpenAction**: May open new tabs or switch between them.\n25. **ImportMenu**: Dynamically populated based on current folder/tab.\n26. **ExportMenu**: Exports content from currently selected tab.\n27. **FileMenu**: Contains actions affecting all tabs.\n28. **EditMenu**: Actions like undo/redo are often per-tab.\n29. **ViewMenu**: Manages UI elements associated with tabs.\n30. **ToolsMenu**: Some tools may be tab-specific.\n31. **HelpMenu**: UI help context could be linked to current tab.\n32. **Sidebar**: Displays contextual data based on selected tab.\n33. **DesktopTab**: A specific tab type previously managed by Tabs.\n34. **ConsoleTab**: Another tab type dependent on Tabs infrastructure.\n35. **WebBrowserTab**: Tab-based browser view.\n36. **PluginSettingsTab**: Settings UI shown as a tab.\n37. **TaskManager**: May display tasks across open tabs.\n38. **AnnotationBar**: UI bar reflecting annotations in active tab.\n39. **EditorQuickFind**: Search bar tied to current editor tab.\n40. **MToolBar**: Toolbars often change per-tab context.\n41. **MSplitPane**: Layout manager used in conjunction with tab panels.\n42. **MNotification**: Notifications may be tab-specific.\n43. **MMessage**: Dialogs may be launched from tab-related actions.\n44. **MMenu**: Menu items often depend on current tab selection.\n45. **MAction**: Many actions are tied to the active tab.\n46. **MPanel**: Container for tabbed UI components.\n47. **MComponent**: Base class for UI elements that may be inside tabs.\n48. **MMainWindow**: Main window structure built around tabbed layout.\n49. **MApplication**: Global app state may be impacted by missing Tabs.\n50. **MSystemTray**: Tray interactions might affect tabbed windows.\n\nDue to the central role of `Tabs.java` in managing UI navigation and editor lifecycle, all entities listed above should be reviewed for possible refactoring or synchronization, especially those with high confidence values in co-change history and structural or semantic coupling.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}