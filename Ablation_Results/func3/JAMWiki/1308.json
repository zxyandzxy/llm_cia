{
    "time": 1749611361.089883,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `JAMWiki`, a well-known Java open source project. The starting entity you need to deal with is AnsiDataHandler.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_64b71d62ad824ce592a079",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"Utilities\", \"1\", \"0.03125\"], [\"WikiBase\", \"3\", \"0.09375\"], [\"Environment\", \"2\", \"0.0625\"], [\"WikiDatabase\", \"6\", \"0.1875\"], [\"UpgradeServlet\", \"5\", \"0.15625\"], [\"PersistencyServlet\", \"1\", \"0.03125\"], [\"HSqlQueryHandler\", \"1\", \"0.03125\"], [\"DB2DataHandler\", \"2\", \"0.0625\"], [\"MSSqlDataHandler\", \"2\", \"0.0625\"], [\"HSqlDataHandler\", \"2\", \"0.0625\"], [\"DB2400DataHandler\", \"2\", \"0.0625\"], [\"MySqlDataHandler\", \"2\", \"0.0625\"], [\"OracleDataHandler\", \"2\", \"0.0625\"], [\"PostgresDataHandler\", \"2\", \"0.0625\"], [\"QueryHandler\", \"8\", \"0.25\"], [\"AnsiQueryHandler\", \"14\", \"0.4375\"], [\"MoveServlet\", \"2\", \"0.0625\"], [\"Role\", \"1\", \"0.03125\"], [\"RolesServlet\", \"1\", \"0.03125\"], [\"DatabaseUserHandler\", \"2\", \"0.0625\"], [\"DatabaseUpgrades\", \"6\", \"0.1875\"], [\"DatabaseConnection\", \"3\", \"0.09375\"], [\"LocalDataSource\", \"1\", \"0.03125\"], [\"WikiPreparedStatement\", \"1\", \"0.03125\"], [\"WikiUser\", \"1\", \"0.03125\"], [\"JFlexParser\", \"2\", \"0.0625\"], [\"MigrationUtil\", \"1\", \"0.03125\"], [\"ParserException\", \"1\", \"0.03125\"], [\"JAMWikiModel\", \"1\", \"0.03125\"], [\"JFlexLexer\", \"1\", \"0.03125\"], [\"WikiHeadingTag\", \"1\", \"0.03125\"], [\"TemplateTag\", \"1\", \"0.03125\"], [\"WikiLinkTag\", \"1\", \"0.03125\"], [\"HtmlLinkTag\", \"1\", \"0.03125\"], [\"WikiReferenceTag\", \"1\", \"0.03125\"], [\"JFlexParserTag\", \"1\", \"0.03125\"], [\"WikiSignatureTag\", \"1\", \"0.03125\"], [\"JavascriptTag\", \"1\", \"0.03125\"], [\"WikiReferencesTag\", \"1\", \"0.03125\"], [\"WikiBoldItalicTag\", \"1\", \"0.03125\"], [\"IncludeOnlyTag\", \"1\", \"0.03125\"], [\"NoIncludeTag\", \"1\", \"0.03125\"], [\"BlikiProxyParser\", \"1\", \"0.03125\"], [\"BlikiProxyParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiCrawlHandler\", \"1\", \"0.03125\"], [\"JAMWikiLoadHandler\", \"1\", \"0.03125\"], [\"Main\", \"1\", \"0.03125\"], [\"WikiDistributedCache\", \"1\", \"0.03125\"], [\"JAMWikiAuthenticationConfiguration\", \"1\", \"0.03125\"], [\"AdminServlet\", \"3\", \"0.09375\"], [\"SetupServlet\", \"1\", \"0.03125\"], [\"ImageUtil\", \"3\", \"0.09375\"], [\"ParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiServlet\", \"3\", \"0.09375\"], [\"ImageLinkTag\", \"3\", \"0.09375\"], [\"ServletUtil\", \"2\", \"0.0625\"], [\"LinkTag\", \"1\", \"0.03125\"], [\"JAMWikiUnitTest\", \"1\", \"0.03125\"], [\"AdminVirtualWikiServlet\", \"1\", \"0.03125\"], [\"Topic\", \"1\", \"0.03125\"], [\"LinkUtil\", \"1\", \"0.03125\"], [\"WikiPageInfo\", \"1\", \"0.03125\"], [\"RankingAlgorithmSearchEngine\", \"1\", \"0.03125\"], [\"LuceneSearchEngine\", \"1\", \"0.03125\"], [\"H2DataHandler\", \"1\", \"0.03125\"], [\"SybaseASADataHandler\", \"1\", \"0.03125\"], [\"CacheDataHandler\", \"1\", \"0.03125\"], [\"AnsiDataHandlerTest\", \"1\", \"0.03125\"], [\"StylesheetServlet\", \"1\", \"0.03125\"], [\"WikiCache\", \"1\", \"0.03125\"], [\"WikiCacheTest\", \"1\", \"0.03125\"]]"
        },
        {
            "content": "The co-change relationships for `AnsiDataHandler.java` have been retrieved, showing several files that have historically been modified together with varying levels of support and confidence. Notably:\n\n- `AnsiQueryHandler.java` has the highest confidence (0.4375), indicating a strong historical correlation in modifications.\n- `QueryHandler.java` also shows significant coupling with a confidence of 0.25.\n- Several other entities like `WikiDatabase`, `UpgradeServlet`, and `DatabaseUpgrades` show moderate confidence values, suggesting some level of dependency or related changes.\n\nTo better understand the nature of these dependencies, we should now investigate how `AnsiDataHandler.java` interacts with these entities using `get_call_graph`. This will help us identify direct usage relationships such as method calls or variable references.\n\nLet's start by analyzing the call graph for `AnsiDataHandler.java`.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_f75120fd36774e2ebbaab2",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"DataAccessException\", \"WikiException\", \"ParserOutput\", \"WikiFileVersion\", \"WikiFile\", \"ParserException\", \"Category\", \"LogItem\", \"Topic\", \"VirtualWiki\", \"Watchlist\", \"ParserUtil\", \"WikiUserDetails\", \"DataHandler\", \"TopicVersion\", \"WikiUser\", \"TopicType\", \"Namespace\", \"RecentChange\", \"Pagination\", \"WikiMessage\", \"Role\", \"WikiLogger\", \"WikiUtil\", \"WikiCache\", \"Encryption\", \"WikiBase\", \"RoleMap\", \"WikiGroup\"]"
        },
        {
            "content": "The call graph for `AnsiDataHandler.java` reveals that it directly interacts with several entities, including:\n\n- **Exceptions**: `DataAccessException`, `WikiException`, `ParserException`\n- **Data Models**: `WikiFileVersion`, `WikiFile`, `Category`, `LogItem`, `Topic`, `VirtualWiki`, `Watchlist`, `TopicVersion`, `TopicType`, `Namespace`, `RecentChange`, `Pagination`, `WikiMessage`, `Role`, `RoleMap`, `WikiGroup`\n- **Utilities**: `ParserUtil`, `WikiLogger`, `WikiUtil`, `WikiCache`, `Encryption`, `WikiBase`\n- **Core Classes**: `DataHandler`, `WikiUser`, `WikiUserDetails`\n\nThis indicates that `AnsiDataHandler.java` is tightly integrated with core data models and utility classes in the system. Given the earlier co-change results\u2014especially the high correlation with `AnsiQueryHandler.java` and `QueryHandler.java`\u2014we should investigate if these query handlers are used by or interact with `AnsiDataHandler.java`.\n\nLet's examine the coupling dependencies between `AnsiDataHandler.java` and `AnsiQueryHandler.java` to determine their relationship.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_19bc2a10b5024dae862eeb",
                    "function": {
                        "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"ConstructorInvoking(CMI): Construction Method Invoking found: new AnsiQueryHandler(),\"]"
        },
        {
            "content": "The coupling dependency analysis between `AnsiDataHandler.java` and `AnsiQueryHandler.java` reveals a **Constructor Invoking (CMI)** relationship. This means that `AnsiDataHandler.java` directly instantiates `AnsiQueryHandler.java` using its constructor (`new AnsiQueryHandler()`).\n\nThis direct instantiation confirms a strong dependency: any changes to `AnsiQueryHandler.java` could potentially impact `AnsiDataHandler.java`, and vice versa, which explains the high co-change confidence value observed earlier.\n\nGiven this tight coupling, it's important to ensure that if either of these files is modified, the other is reviewed for necessary synchronization. Additionally, considering the broader call graph and co-change relationships, we should also check coupling with `QueryHandler.java`, as it showed a significant historical co-change relationship.\n\nLet\u2019s analyze the coupling dependencies between `AnsiDataHandler.java` and `QueryHandler.java`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_522f0625fc974be498aebc",
                    "function": {
                        "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"QueryHandler.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"ReturnType(RT): Return Type found: queryHandler returns QueryHandler,\"]"
        },
        {
            "content": "The coupling dependency between `AnsiDataHandler.java` and `QueryHandler.java` is of the **ReturnType (RT)** type. This indicates that a method in `AnsiDataHandler.java` returns an instance of `QueryHandler`, establishing a direct usage relationship where `AnsiDataHandler` relies on `QueryHandler` as a return type in one of its methods.\n\nThis kind of dependency implies that changes to `QueryHandler.java`\u2014such as method signatures, inheritance hierarchy, or interface implementation\u2014could affect how `AnsiDataHandler.java` utilizes it, reinforcing the need for synchronized updates when modifications occur.\n\nSo far, we have identified:\n- A **co-change** relationship with high confidence for `AnsiQueryHandler.java` and moderate confidence for `QueryHandler.java`.\n- A **direct constructor invocation** of `AnsiQueryHandler` in `AnsiDataHandler.java`.\n- A **return-type dependency** on `QueryHandler.java`.\n\nTo ensure completeness, let's retrieve the source code of `AnsiDataHandler.java` to better understand the context of these dependencies and confirm any additional relationships or usages.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_ddc65c895ad24e99836976",
                    "function": {
                        "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.jamwiki.db;\\nimport java.io.IOException;\\nimport java.sql.Connection;\\nimport java.sql.SQLException;\\nimport java.sql.Statement;\\nimport java.sql.Timestamp;\\nimport java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.LinkedHashMap;\\nimport java.util.List;\\nimport java.util.Locale;\\nimport java.util.Map;\\nimport net.sf.ehcache.Element;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.DataAccessException;\\nimport org.jamwiki.DataHandler;\\nimport org.jamwiki.WikiBase;\\nimport org.jamwiki.WikiException;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.LogItem;\\nimport org.jamwiki.model.Namespace;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.RoleMap;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicType;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.Watchlist;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.model.WikiUserDetails;\\nimport org.jamwiki.parser.ParserException;\\nimport org.jamwiki.parser.ParserOutput;\\nimport org.jamwiki.parser.ParserUtil;\\nimport org.jamwiki.utils.Encryption;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.WikiCache;\\nimport org.jamwiki.utils.WikiLogger;\\nimport org.jamwiki.utils.WikiUtil;\\nimport org.springframework.transaction.TransactionStatus;\\npublic class AnsiDataHandler implements DataHandler {\\n\\tprivate static final int TIME_LIMIT_TOPIC_LOOKUP = 10;\\n\\tprivate static final String CACHE_NAMESPACE_LIST = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_NAMESPACE_LIST\\\";\\n\\tprivate static final String CACHE_ROLE_MAP_GROUP = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_ROLE_MAP_GROUP\\\";\\n\\tprivate static final String CACHE_TOPIC_IDS_BY_NAME = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPIC_IDS_BY_NAME\\\";\\n\\tprivate static final String CACHE_TOPICS_BY_ID = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS_BY_ID\\\";\\n\\tprivate static final String CACHE_TOPICS_BY_NAME = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS_BY_NAME\\\";\\n\\tprivate static final String CACHE_TOPIC_VERSIONS = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPIC_VERSIONS\\\";\\n\\tprivate static final String CACHE_USER_BY_USER_ID = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_USER_BY_USER_ID\\\";\\n\\tprivate static final String CACHE_USER_BY_USER_NAME = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_USER_BY_USER_NAME\\\";\\n\\tprivate static final String CACHE_VIRTUAL_WIKI_LIST = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_VIRTUAL_WIKI_LIST\\\";\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiDataHandler.class.getName());\\n\\tprivate final QueryHandler queryHandler = new AnsiQueryHandler();\\n\\tprivate void addCategories(List<Category> categoryList, int topicId, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = -1;\\n\\t\\tfor (Category category : categoryList) {\\n\\t\\t\\tvirtualWikiId = this.lookupVirtualWikiId(category.getVirtualWiki());\\n\\t\\t\\tthis.validateCategory(category);\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertCategories(categoryList, virtualWikiId, topicId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addGroupMember(String username, int groupId, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertGroupMember(username, groupId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addLogItem(LogItem logItem, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(logItem.getVirtualWiki());\\n\\t\\tthis.validateLogItem(logItem);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertLogItem(logItem, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addRecentChange(RecentChange change, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(change.getVirtualWiki());\\n\\t\\tthis.validateRecentChange(change);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertRecentChange(change, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addTopic(Topic topic, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\ttry {\\n\\t\\t\\tthis.validateTopic(topic);\\n\\t\\t\\tthis.queryHandler().insertTopic(topic, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprotected void addTopicLinks(List<String> links, int topicId, Connection conn) throws DataAccessException {\\n\\t\\t\\t\\tMap<String, String> linksMap = new HashMap<String, String>();\\n\\t\\tfor (String link : links) {\\n\\t\\t\\tif (link.length() <= 200) {\\n\\t\\t\\t\\tlinksMap.put(link, link);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlinks = new ArrayList<String>(linksMap.keySet());\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertTopicLinks(links, topicId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addTopicVersion(Topic topic, TopicVersion topicVersion, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tif (topicVersion.getPreviousTopicVersionId() == null && topic.getCurrentVersionId() != null) {\\n\\t\\t\\ttopicVersion.setPreviousTopicVersionId(topic.getCurrentVersionId());\\n\\t\\t}\\n\\t\\ttopicVersion.setTopicId(topic.getTopicId());\\n\\t\\ttopicVersion.initializeVersionParams(topic);\\n\\t\\ttry {\\n\\t\\t\\tthis.validateTopicVersion(topicVersion);\\n\\t\\t\\tthis.queryHandler().insertTopicVersion(topicVersion, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\ttopic.setCurrentVersionId(topicVersion.getTopicVersionId());\\n\\t}\\n\\tprivate void addUserDetails(WikiUserDetails userDetails, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertUserDetails(userDetails, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\t\\tthis.queryHandler().insertVirtualWiki(virtualWiki, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateWatchlistEntry(topicName);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiFile(WikiFile wikiFile, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\t\\tthis.queryHandler().insertWikiFile(wikiFile, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateWikiFileVersion(wikiFileVersion);\\n\\t\\t\\tthis.queryHandler().insertWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiGroup(WikiGroup group, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateWikiGroup(group);\\n\\t\\t\\tthis.queryHandler().insertWikiGroup(group, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiUser(WikiUser user, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateWikiUser(user);\\n\\t\\t\\tthis.queryHandler().insertWikiUser(user, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic boolean authenticate(String username, String password) throws DataAccessException {\\n\\t\\tif (StringUtils.isBlank(password)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\t\\t\\t\\tString encryptedPassword = Encryption.encrypt(password);\\n\\t\\t\\treturn this.queryHandler().authenticateUser(username, encryptedPassword, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t}\\n\\tprivate String authorName(Integer authorId, String authorName) throws DataAccessException {\\n\\t\\tif (authorId != null) {\\n\\t\\t\\tWikiUser user = this.lookupWikiUser(authorId);\\n\\t\\t\\tauthorName = user.getUsername();\\n\\t\\t}\\n\\t\\treturn authorName;\\n\\t}\\n\\tpublic boolean canMoveTopic(Topic fromTopic, String destination) throws DataAccessException {\\n\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, null);\\n\\t\\tif (toTopic == null || toTopic.getDeleteDate() != null) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (toTopic.getRedirectTo() != null && toTopic.getRedirectTo().equals(fromTopic.getName())) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tprivate static void checkLength(String value, int maxLength) throws WikiException {\\n\\t\\tif (value != null && value.length() > maxLength) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", value, Integer.valueOf(maxLength).toString()));\\n\\t\\t}\\n\\t}\\n\\tprivate void clearTopicCache(Topic topic) {\\n\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\tWikiCache.removeFromCache(WikiBase.CACHE_PARSED_TOPIC_CONTENT, key);\\n\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_NAME, key, topic);\\n\\t\\tWikiCache.addToCache(CACHE_TOPIC_IDS_BY_NAME, key, topic.getTopicId());\\n\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_ID, topic.getTopicId(), topic);\\n\\t}\\n\\tprivate void deleteRecentChanges(Topic topic, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteRecentChanges(topic.getTopicId(), conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic void deleteTopic(Topic topic, TopicVersion topicVersion) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (topicVersion != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdeleteRecentChanges(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = new ParserOutput();\\n\\t\\t\\ttopic.setDeleteDate(new Timestamp(System.currentTimeMillis()));\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void deleteTopicCategories(Topic topic, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteTopicCategories(topic.getTopicId(), conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprotected void deleteTopicLinks(int topicId, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteTopicLinks(topicId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic void executeUpgradeQuery(String prop, Connection conn) throws SQLException {\\n\\t\\tthis.queryHandler().executeUpgradeQuery(prop, conn);\\n\\t}\\n\\tpublic void executeUpgradeUpdate(String prop, Connection conn) throws SQLException {\\n\\t\\tthis.queryHandler().executeUpgradeUpdate(prop, conn);\\n\\t}\\n\\tprivate int findMaxNamespaceId() throws DataAccessException {\\n\\t\\tList<Namespace> namespaces = this.lookupNamespaces();\\n\\t\\tint namespaceEnd = 0;\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tnamespaceEnd = (namespace.getId() > namespaceEnd) ? namespace.getId() : namespaceEnd;\\n\\t\\t}\\n\\t\\treturn namespaceEnd;\\n\\t}\\n\\tpublic List<Category> getAllCategories(String virtualWiki, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getCategories(virtualWikiId, virtualWiki, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<Role> getAllRoles() throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoles();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> getAllTopicNames(String virtualWiki, boolean includeDeleted) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\treturn new ArrayList<String>(this.queryHandler().lookupTopicNames(virtualWikiId, includeDeleted, conn).values());\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t}\\n\\tpublic List<WikiFileVersion> getAllWikiFileVersions(String virtualWiki, String topicName, boolean descending) throws DataAccessException {\\n\\t\\tWikiFile wikiFile = lookupWikiFile(virtualWiki, topicName);\\n\\t\\tif (wikiFile == null) {\\n\\t\\t\\tthrow new DataAccessException(\\\"No topic exists for \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getAllWikiFileVersions(wikiFile, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<LogItem> getLogItems(String virtualWiki, int logType, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\tList<LogItem> logItems = new ArrayList<LogItem>();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getLogItems(virtualWikiId, virtualWiki, logType, pagination, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRecentChanges(virtualWiki, pagination, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RoleMap> getRoleMapByLogin(String loginFragment) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapByLogin(loginFragment);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RoleMap> getRoleMapByRole(String authority) throws DataAccessException {\\n\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_ROLE_MAP_GROUP, authority);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (List<RoleMap>)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\t\\t\\tList<RoleMap> roleMapList = null;\\n\\t\\ttry {\\n\\t\\t\\troleMapList = this.queryHandler().getRoleMapByRole(authority);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_ROLE_MAP_GROUP, authority, roleMapList);\\n\\t\\treturn roleMapList;\\n\\t}\\n\\tpublic List<Role> getRoleMapGroup(String groupName) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapGroup(groupName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RoleMap> getRoleMapGroups() throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapGroups();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<Role> getRoleMapUser(String login) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapUser(login);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getTopicHistory(String virtualWiki, String topicName, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, true, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn new ArrayList<RecentChange>();\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getTopicHistory(topic.getTopicId(), pagination, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> getTopicsAdmin(String virtualWiki, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getTopicsAdmin(virtualWikiId, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tif (this.lookupWikiUser(userString) != null) {\\n\\t\\t\\t\\treturn this.queryHandler().getUserContributionsByLogin(virtualWiki, userString, pagination, descending);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this.queryHandler().getUserContributionsByUserDisplay(virtualWiki, userString, pagination, descending);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<VirtualWiki> getVirtualWikiList() throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI_LIST, CACHE_VIRTUAL_WIKI_LIST);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (List<VirtualWiki>)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tList<VirtualWiki> virtualWikis = new ArrayList<VirtualWiki>();\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tvirtualWikis = this.queryHandler().getVirtualWikis(conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI_LIST, CACHE_VIRTUAL_WIKI_LIST, virtualWikis);\\n\\t\\treturn virtualWikis;\\n\\t}\\n\\tpublic Watchlist getWatchlist(String virtualWiki, int userId) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\tList<String> watchedTopicNames = this.queryHandler().getWatchlist(virtualWikiId, userId);\\n\\t\\t\\treturn new Watchlist(virtualWiki, watchedTopicNames);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getWatchlist(String virtualWiki, int userId, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getWatchlist(virtualWikiId, userId, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<Category> lookupCategoryTopics(String virtualWiki, String categoryName) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupCategoryTopics(virtualWikiId, virtualWiki, categoryName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic Namespace lookupNamespace(String virtualWiki, String namespaceString) throws DataAccessException {\\n\\t\\tif (namespaceString == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tList<Namespace> namespaces = this.lookupNamespaces();\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tif (namespace.getLabel(virtualWiki).equalsIgnoreCase(namespaceString)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn namespace;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t}\\n\\tpublic Namespace lookupNamespaceById(int namespaceId) throws DataAccessException {\\n\\t\\tList<Namespace> namespaces = this.lookupNamespaces();\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tif (namespace.getId() != null && namespace.getId().intValue() == namespaceId) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn namespace;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t}\\n\\tpublic List<Namespace> lookupNamespaces() throws DataAccessException {\\n\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_NAMESPACE_LIST, CACHE_NAMESPACE_LIST);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (List<Namespace>)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\t\\t\\tList<Namespace> namespaces = null;\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\tnamespaces = this.queryHandler().lookupNamespaces(conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_NAMESPACE_LIST, CACHE_NAMESPACE_LIST, namespaces);\\n\\t\\treturn namespaces;\\n\\t}\\n\\tpublic Topic lookupTopic(String virtualWiki, String topicName, boolean deleteOK, Connection conn) throws DataAccessException {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tlong start = System.currentTimeMillis();\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tif (conn == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS_BY_NAME, key);\\n\\t\\t\\tif (cacheElement != null) {\\n\\t\\t\\t\\tTopic cacheTopic = (Topic)cacheElement.getObjectValue();\\n\\t\\t\\t\\treturn (cacheTopic == null || (!deleteOK && cacheTopic.getDeleteDate() != null)) ? null : new Topic(cacheTopic);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tTopic topic = null;\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\ttopic = this.queryHandler().lookupTopic(virtualWikiId, virtualWiki, topicName, conn);\\n\\t\\t\\tif (conn == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTopic cacheTopic = (topic == null) ? null : new Topic(topic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_NAME, key, cacheTopic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPIC_IDS_BY_NAME, key, (cacheTopic == null) ? null : cacheTopic.getTopicId());\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tif (logger.isFineEnabled()) {\\n\\t\\t\\tlong execution = (System.currentTimeMillis() - start);\\n\\t\\t\\tif (execution > TIME_LIMIT_TOPIC_LOOKUP) {\\n\\t\\t\\t\\tlogger.fine(\\\"Slow topic lookup for: \\\" + topicName + \\\" (\\\" + (execution / 1000.000) + \\\" s)\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (topic == null || (!deleteOK && topic.getDeleteDate() != null)) ? null : topic;\\n\\t}\\n\\tpublic Topic lookupTopicById(String virtualWiki, int topicId) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS_BY_ID, topicId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (Topic)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tTopic result = null;\\n\\t\\ttry {\\n\\t\\t\\tresult = this.queryHandler().lookupTopicById(virtualWikiId, virtualWiki, topicId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_ID, topicId, result);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupTopicCount(String virtualWiki, Integer namespaceId) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tint namespaceStart = (namespaceId != null) ? namespaceId : 0;\\n\\t\\tint namespaceEnd = (namespaceId != null) ? namespaceId : this.findMaxNamespaceId();\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicCount(virtualWikiId, namespaceStart, namespaceEnd);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic Map<Integer, String> lookupTopicByType(String virtualWiki, TopicType topicType1, TopicType topicType2, Integer namespaceId, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tint namespaceStart = (namespaceId != null) ? namespaceId : 0;\\n\\t\\tint namespaceEnd = (namespaceId != null) ? namespaceId : this.findMaxNamespaceId();\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicByType(virtualWikiId, topicType1, topicType2, namespaceStart, namespaceEnd, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic Integer lookupTopicId(String virtualWiki, String topicName) throws DataAccessException {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tlong start = System.currentTimeMillis();\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPIC_IDS_BY_NAME, key);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (Integer)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tInteger topicId = null;\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\ttopicId = this.queryHandler().lookupTopicId(virtualWikiId, virtualWiki, topicName);\\n\\t\\t\\tWikiCache.addToCache(CACHE_TOPIC_IDS_BY_NAME, key, topicId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tif (logger.isFineEnabled()) {\\n\\t\\t\\tlong execution = (System.currentTimeMillis() - start);\\n\\t\\t\\tif (execution > TIME_LIMIT_TOPIC_LOOKUP) {\\n\\t\\t\\t\\tlogger.fine(\\\"Slow topic existence lookup for: \\\" + topicName + \\\" (\\\" +  (execution / 1000.000) + \\\" s)\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn topicId;\\n\\t}\\n\\tpublic List<String> lookupTopicLinks(String virtualWiki, String topicName) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicLinks(virtualWikiId, topicName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> lookupTopicLinkOrphans(String virtualWiki) throws DataAccessException {\\n\\t\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicLinkOrphans(virtualWikiId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic TopicVersion lookupTopicVersion(int topicVersionId) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPIC_VERSIONS, topicVersionId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (TopicVersion)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tTopicVersion topicVersion = null;\\n\\t\\ttry {\\n\\t\\t\\ttopicVersion = this.queryHandler().lookupTopicVersion(topicVersionId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_TOPIC_VERSIONS, topicVersionId, topicVersion);\\n\\t\\treturn topicVersion;\\n\\t}\\n\\tpublic VirtualWiki lookupVirtualWiki(String virtualWikiName) throws DataAccessException {\\n\\t\\tList<VirtualWiki> virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (VirtualWiki virtualWiki : virtualWikis) {\\n\\t\\t\\tif (virtualWiki.getName().equals(virtualWikiName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn virtualWiki;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t}\\n\\tprivate int lookupVirtualWikiId(String virtualWikiName) throws DataAccessException {\\n\\t\\tVirtualWiki virtualWiki = this.lookupVirtualWiki(virtualWikiName);\\n\\t\\treturn (virtualWiki == null) ? -1 : virtualWiki.getVirtualWikiId();\\n\\t}\\n\\tpublic WikiFile lookupWikiFile(String virtualWiki, String topicName) throws DataAccessException {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\treturn this.queryHandler().lookupWikiFile(virtualWikiId, virtualWiki, topic.getTopicId());\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic int lookupWikiFileCount(String virtualWiki) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiFileCount(virtualWikiId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic WikiGroup lookupWikiGroup(String groupName) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiGroup(groupName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(int userId) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_USER_BY_USER_ID, userId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (WikiUser)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tWikiUser user = null;\\n\\t\\ttry {\\n\\t\\t\\tuser = this.queryHandler().lookupWikiUser(userId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_ID, userId, user);\\n\\t\\treturn user;\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(String username) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_USER_BY_USER_NAME, username);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (WikiUser)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint userId = this.queryHandler().lookupWikiUser(username, conn);\\n\\t\\t\\tif (userId != -1) {\\n\\t\\t\\t\\tresult = lookupWikiUser(userId);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_NAME, username, result);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupWikiUserCount() throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiUserCount();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic String lookupWikiUserEncryptedPassword(String username) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiUserEncryptedPassword(username);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> lookupWikiUsers(Pagination pagination) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiUsers(pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic void moveTopic(Topic fromTopic, TopicVersion fromVersion, String destination) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (!this.canMoveTopic(fromTopic, destination)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"move.exception.destinationexists\\\", destination));\\n\\t\\t\\t}\\n\\t\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, conn);\\n\\t\\t\\tboolean detinationExistsFlag = (toTopic != null && toTopic.getDeleteDate() == null);\\n\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopic(toTopic, null);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tString fromTopicName = fromTopic.getName();\\n\\t\\t\\tfromTopic.setName(destination);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfromVersion.setRecentChangeAllowed(false);\\n\\t\\t\\tParserOutput fromParserOutput = ParserUtil.parserOutput(fromTopic.getTopicContent(), fromTopic.getVirtualWiki(), fromTopic.getName());\\n\\t\\t\\twriteTopic(fromTopic, fromVersion, fromParserOutput.getCategories(), fromParserOutput.getLinks());\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t\\twriteTopic(toTopic, null, null, null);\\n\\t\\t\\t\\tthis.undeleteTopic(toTopic, null);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic = new Topic(fromTopic);\\n\\t\\t\\t\\ttoTopic.setTopicId(-1);\\n\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t}\\n\\t\\t\\tString content = ParserUtil.parserRedirectContent(destination);\\n\\t\\t\\ttoTopic.setRedirectTo(destination);\\n\\t\\t\\ttoTopic.setTopicType(TopicType.REDIRECT);\\n\\t\\t\\ttoTopic.setTopicContent(content);\\n\\t\\t\\tTopicVersion toVersion = fromVersion;\\n\\t\\t\\ttoVersion.setTopicVersionId(-1);\\n\\t\\t\\ttoVersion.setVersionContent(content);\\n\\t\\t\\ttoVersion.setRecentChangeAllowed(true);\\n\\t\\t\\tParserOutput toParserOutput = ParserUtil.parserOutput(toTopic.getTopicContent(), toTopic.getVirtualWiki(), toTopic.getName());\\n\\t\\t\\twriteTopic(toTopic, toVersion, toParserOutput.getCategories(), toParserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (ParserException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void orderTopicVersions(Topic topic, List<Integer> topicVersionIdList) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\t\\tthis.queryHandler().orderTopicVersions(topic, virtualWikiId, topicVersionIdList);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\tthis.clearTopicCache(topic);\\n\\t}\\n\\tprotected QueryHandler queryHandler() {\\n\\t\\treturn this.queryHandler;\\n\\t}\\n\\tpublic void reloadLogItems() throws DataAccessException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tList<VirtualWiki> virtualWikis = this.getVirtualWikiList();\\n\\t\\t\\tfor (VirtualWiki virtualWiki : virtualWikis) {\\n\\t\\t\\t\\tthis.queryHandler().reloadLogItems(virtualWiki.getVirtualWikiId(), conn);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void reloadRecentChanges() throws DataAccessException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().reloadRecentChanges(conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void setup(Locale locale, WikiUser user, String username, String encryptedPassword) throws DataAccessException, WikiException {\\n\\t\\tWikiDatabase.initialize();\\n\\t\\t\\t\\tConnection conn = null;\\n\\t\\tStatement stmt = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\tstmt = conn.createStatement();\\n\\t\\t\\tstmt.executeQuery(WikiDatabase.getExistenceValidationQuery());\\n\\t\\t\\treturn;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn, stmt);\\n\\t\\t}\\n\\t\\tWikiDatabase.setup(locale, user, username, encryptedPassword);\\n\\t}\\n\\tpublic void setupSpecialPages(Locale locale, WikiUser user, VirtualWiki virtualWiki) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\t\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STARTING_POINTS, user, false);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_LEFT_MENU, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_BOTTOM_AREA, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STYLESHEET, user, true);\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void undeleteTopic(Topic topic, TopicVersion topicVersion) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\ttopic.setDeleteDate(null);\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (ParserException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void updateSpecialPage(Locale locale, String virtualWiki, String topicName, String userDisplay) throws DataAccessException, WikiException {\\n\\t\\tlogger.info(\\\"Updating special page \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tString contents = WikiDatabase.readSpecialPage(locale, topicName);\\n\\t\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, conn);\\n\\t\\t\\tint charactersChanged = StringUtils.length(contents) - StringUtils.length(topic.getTopicContent());\\n\\t\\t\\ttopic.setTopicContent(contents);\\n\\t\\t\\t\\t\\t\\tTopicVersion topicVersion = new TopicVersion(null, userDisplay, \\\"Automatically updated by system upgrade\\\", contents, charactersChanged);\\n\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), virtualWiki, topicName);\\n\\t\\t\\twriteTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (ParserException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (IOException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void updateTopic(Topic topic, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tthis.validateTopic(topic);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateTopic(topic, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateUserDetails(userDetails, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateVirtualWiki(virtualWiki, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateWikiFile(WikiFile wikiFile, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateWikiFile(wikiFile, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateWikiGroup(WikiGroup group, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateWikiGroup(group, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateWikiUser(WikiUser user, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateWikiUser(user, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprotected void validateAuthority(String role) throws WikiException {\\n\\t\\tcheckLength(role, 30);\\n\\t}\\n\\tprotected void validateCategory(Category category) throws WikiException {\\n\\t\\tcheckLength(category.getName(), 200);\\n\\t\\tcheckLength(category.getSortKey(), 200);\\n\\t}\\n\\tprotected void validateLogItem(LogItem logItem) throws WikiException {\\n\\t\\tcheckLength(logItem.getUserDisplayName(), 200);\\n\\t\\tcheckLength(logItem.getLogParamString(), 500);\\n\\t\\tlogItem.setLogComment(StringUtils.substring(logItem.getLogComment(), 0, 200));\\n\\t}\\n\\tprotected void validateNamespace(Namespace mainNamespace, Namespace commentsNamespace) throws WikiException {\\n\\t\\tcheckLength(mainNamespace.getDefaultLabel(), 200);\\n\\t\\tif (commentsNamespace != null) {\\n\\t\\t\\tcheckLength(commentsNamespace.getDefaultLabel(), 200);\\n\\t\\t\\tif (commentsNamespace.getMainNamespace() == null || !commentsNamespace.getMainNamespace().equals(mainNamespace)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.commentsnamespace\\\", commentsNamespace.getDefaultLabel(), mainNamespace.getDefaultLabel()));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprotected void validateNamespaceTranslation(Namespace namespace, String virtualWiki) throws WikiException {\\n\\t\\tcheckLength(namespace.getLabel(virtualWiki), 200);\\n\\t}\\n\\tprotected void validateRecentChange(RecentChange change) throws WikiException {\\n\\t\\tcheckLength(change.getTopicName(), 200);\\n\\t\\tcheckLength(change.getAuthorName(), 200);\\n\\t\\tcheckLength(change.getVirtualWiki(), 100);\\n\\t\\tchange.setChangeComment(StringUtils.substring(change.getChangeComment(), 0, 200));\\n\\t\\tcheckLength(change.getParamString(), 500);\\n\\t}\\n\\tprotected void validateRole(Role role) throws WikiException {\\n\\t\\tcheckLength(role.getAuthority(), 30);\\n\\t\\trole.setDescription(StringUtils.substring(role.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateTopic(Topic topic) throws WikiException {\\n\\t\\tcheckLength(topic.getName(), 200);\\n\\t\\tcheckLength(topic.getRedirectTo(), 200);\\n\\t}\\n\\tprotected void validateTopicVersion(TopicVersion topicVersion) throws WikiException {\\n\\t\\tcheckLength(topicVersion.getAuthorDisplay(), 100);\\n\\t\\tcheckLength(topicVersion.getVersionParamString(), 500);\\n\\t\\ttopicVersion.setEditComment(StringUtils.substring(topicVersion.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateUserDetails(WikiUserDetails userDetails) throws WikiException {\\n\\t\\tcheckLength(userDetails.getUsername(), 100);\\n\\t\\t\\t\\tif (userDetails.getPassword() != null && userDetails.getPassword().length() > 100) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", \\\"-\\\", \\\"100\\\"));\\n\\t\\t}\\n\\t}\\n\\tprotected void validateVirtualWiki(VirtualWiki virtualWiki) throws WikiException {\\n\\t\\tcheckLength(virtualWiki.getName(), 100);\\n\\t\\tcheckLength(virtualWiki.getDefaultTopicName(), 200);\\n\\t}\\n\\tprotected void validateWatchlistEntry(String topicName) throws WikiException {\\n\\t\\tcheckLength(topicName, 200);\\n\\t}\\n\\tprotected void validateWikiFile(WikiFile wikiFile) throws WikiException {\\n\\t\\tcheckLength(wikiFile.getFileName(), 200);\\n\\t\\tcheckLength(wikiFile.getUrl(), 200);\\n\\t\\tcheckLength(wikiFile.getMimeType(), 100);\\n\\t}\\n\\tprotected void validateWikiFileVersion(WikiFileVersion wikiFileVersion) throws WikiException {\\n\\t\\tcheckLength(wikiFileVersion.getUrl(), 200);\\n\\t\\tcheckLength(wikiFileVersion.getMimeType(), 100);\\n\\t\\tcheckLength(wikiFileVersion.getAuthorDisplay(), 100);\\n\\t\\twikiFileVersion.setUploadComment(StringUtils.substring(wikiFileVersion.getUploadComment(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiGroup(WikiGroup group) throws WikiException {\\n\\t\\tcheckLength(group.getName(), 30);\\n\\t\\tgroup.setDescription(StringUtils.substring(group.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiUser(WikiUser user) throws WikiException {\\n\\t\\tcheckLength(user.getUsername(), 100);\\n\\t\\tcheckLength(user.getDisplayName(), 100);\\n\\t\\tcheckLength(user.getCreateIpAddress(), 39);\\n\\t\\tcheckLength(user.getLastLoginIpAddress(), 39);\\n\\t\\tcheckLength(user.getDefaultLocale(), 8);\\n\\t\\tcheckLength(user.getEmail(), 100);\\n\\t\\tcheckLength(user.getEditor(), 50);\\n\\t\\tcheckLength(user.getSignature(), 255);\\n\\t}\\n\\tpublic void writeFile(WikiFile wikiFile, WikiFileVersion wikiFileVersion) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(wikiFile.getVirtualWiki(), wikiFile.getFileName());\\n\\t\\t\\tif (wikiFile.getFileId() <= 0) {\\n\\t\\t\\t\\taddWikiFile(wikiFile, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateWikiFile(wikiFile, conn);\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setFileId(wikiFile.getFileId());\\n\\t\\t\\t\\t\\t\\taddWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeNamespace(Namespace mainNamespace, Namespace commentsNamespace) throws DataAccessException, WikiException {\\n\\t\\tthis.validateNamespace(mainNamespace, commentsNamespace);\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().updateNamespace(mainNamespace, commentsNamespace, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.removeAllFromCache(CACHE_NAMESPACE_LIST);\\n\\t}\\n\\tpublic void writeNamespaceTranslations(List<Namespace> namespaces, String virtualWiki) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tthis.validateNamespaceTranslation(namespace, virtualWiki);\\n\\t\\t}\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().updateNamespaceTranslations(namespaces, virtualWiki, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.removeAllFromCache(CACHE_NAMESPACE_LIST);\\n\\t}\\n\\tpublic void writeRole(Role role, boolean update) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.validateRole(role);\\n\\t\\t\\tif (update) {\\n\\t\\t\\t\\tthis.queryHandler().updateRole(role, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.queryHandler().insertRole(role, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapGroup(int groupId, List<String> roles) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteGroupAuthorities(groupId, conn);\\n\\t\\t\\tfor (String authority : roles) {\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertGroupAuthority(groupId, authority, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tWikiCache.removeAllFromCache(CACHE_ROLE_MAP_GROUP);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapUser(String username, List<String> roles) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteUserAuthorities(username, conn);\\n\\t\\t\\tfor (String authority : roles) {\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertUserAuthority(username, authority, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeTopic(Topic topic, TopicVersion topicVersion, LinkedHashMap<String, String> categories, List<String> links) throws DataAccessException, WikiException {\\n\\t\\tlong start = System.currentTimeMillis();\\n\\t\\tWikiUtil.validateTopicName(topic.getVirtualWiki(), topic.getName());\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (topic.getTopicId() <= 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopic(topic, conn);\\n\\t\\t\\t} else if (topicVersion == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.updateTopic(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (topicVersion != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopicVersion(topic, topicVersion, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.updateTopic(topic, conn);\\n\\t\\t\\t\\tString authorName = this.authorName(topicVersion.getAuthorId(), topicVersion.getAuthorDisplay());\\n\\t\\t\\t\\tLogItem logItem = LogItem.initLogItem(topic, topicVersion, authorName);\\n\\t\\t\\t\\tRecentChange change = null;\\n\\t\\t\\t\\tif (logItem != null) {\\n\\t\\t\\t\\t\\tthis.addLogItem(logItem, conn);\\n\\t\\t\\t\\t\\tchange = RecentChange.initRecentChange(logItem);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tchange = RecentChange.initRecentChange(topic, topicVersion, authorName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (topicVersion.isRecentChangeAllowed()) {\\n\\t\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (categories != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicCategories(topic, conn);\\n\\t\\t\\t\\tif (topic.getDeleteDate() == null && !categories.isEmpty()) {\\n\\t\\t\\t\\t\\tList<Category> categoryList = new ArrayList<Category>();\\n\\t\\t\\t\\t\\tfor (String categoryName : categories.keySet()) {\\n\\t\\t\\t\\t\\t\\tCategory category = new Category();\\n\\t\\t\\t\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\t\\t\\t\\tcategory.setSortKey(categories.get(categoryName));\\n\\t\\t\\t\\t\\t\\tcategory.setVirtualWiki(topic.getVirtualWiki());\\n\\t\\t\\t\\t\\t\\tcategory.setChildTopicName(topic.getName());\\n\\t\\t\\t\\t\\t\\tcategoryList.add(category);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tthis.addCategories(categoryList, topic.getTopicId(), conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (links != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicLinks(topic.getTopicId(), conn);\\n\\t\\t\\t\\tif (topic.getDeleteDate() == null && !links.isEmpty()) {\\n\\t\\t\\t\\t\\tthis.addTopicLinks(links, topic.getTopicId(), conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tWikiBase.getSearchEngine().updateInIndex(topic);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tthis.clearTopicCache(topic);\\n\\t\\tlogger.fine(\\\"Wrote topic \\\" + topic.getName() + \\\" with params [categories is null: \\\" + (categories == null) + \\\"] / [links is null: \\\" + (links == null) + \\\"] in \\\" + ((System.currentTimeMillis() - start) / 1000.000) + \\\" s.\\\");\\n\\t}\\n\\tpublic void writeTopicVersion(Topic topic, TopicVersion topicVersion) throws DataAccessException, WikiException {\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.addTopicVersion(topic, topicVersion, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t}\\n\\tpublic void writeVirtualWiki(VirtualWiki virtualWiki) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateVirtualWikiName(virtualWiki.getName());\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() <= 0) {\\n\\t\\t\\t\\tthis.addVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.removeAllFromCache(CACHE_VIRTUAL_WIKI_LIST);\\n\\t}\\n\\tpublic void writeWatchlistEntry(Watchlist watchlist, String virtualWiki, String topicName, int userId) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tString article = WikiUtil.extractTopicLink(virtualWiki, topicName);\\n\\t\\t\\tString comments = WikiUtil.extractCommentsLink(virtualWiki, topicName);\\n\\t\\t\\tif (watchlist.containsTopic(topicName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.remove(article);\\n\\t\\t\\t\\twatchlist.remove(comments);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.add(article);\\n\\t\\t\\t\\twatchlist.add(comments);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiGroup(WikiGroup group) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (group.getGroupId() <= 0) {\\n\\t\\t\\t\\tthis.addWikiGroup(group, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateWikiGroup(group, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiUser(WikiUser user, String username, String encryptedPassword) throws DataAccessException, WikiException {\\n\\t\\tWikiUtil.validateUserName(user.getUsername());\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (user.getUserId() <= 0) {\\n\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword);\\n\\t\\t\\t\\tthis.addUserDetails(userDetails, conn);\\n\\t\\t\\t\\tthis.addWikiUser(user, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addGroupMember(user.getUsername(), WikiBase.getGroupRegisteredUser().getGroupId(), conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tList<VirtualWiki> virtualWikis = this.getVirtualWikiList();\\n\\t\\t\\t\\tfor (VirtualWiki virtualWiki : virtualWikis) {\\n\\t\\t\\t\\t\\tLogItem logItem = LogItem.initLogItem(user, virtualWiki.getName());\\n\\t\\t\\t\\t\\tthis.addLogItem(logItem, conn);\\n\\t\\t\\t\\t\\tRecentChange change = RecentChange.initRecentChange(logItem);\\n\\t\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (!StringUtils.isBlank(encryptedPassword)) {\\n\\t\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword);\\n\\t\\t\\t\\t\\tthis.updateUserDetails(userDetails, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.updateWikiUser(user, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_ID, user.getUserId(), user);\\n\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_NAME, user.getUsername(), user);\\n\\t}\\n}\""
        },
        {
            "content": "The source code of `AnsiDataHandler.java` reveals the following key insights:\n\n### 1. **Dependency on `AnsiQueryHandler`**\n- A class-level field declares and instantiates a `QueryHandler` using `AnsiQueryHandler`:\n  ```java\n  private final QueryHandler queryHandler = new AnsiQueryHandler();\n  ```\n  This confirms that `AnsiDataHandler` directly depends on `AnsiQueryHandler` via instantiation.\n\n- The method `queryHandler()` provides access to this instance, and it's used throughout the class in database operations like inserting, updating, and querying topics, users, files, etc.\n\n### 2. **Usage of `QueryHandler` Methods**\n- The class extensively uses methods from the `queryHandler`, such as:\n  - `queryHandler().insertCategories(...)`\n  - `queryHandler().updateTopic(...)`\n  - `queryHandler().lookupTopic(...)`\n  \n  These usages confirm that changes to `QueryHandler` or `AnsiQueryHandler` can have a ripple effect on `AnsiDataHandler`.\n\n### 3. **Core Functionalities**\n- `AnsiDataHandler` serves as a data handler implementing the `DataHandler` interface.\n- It handles database interactions for various entities like:\n  - Topics and their versions\n  - Categories\n  - Users and user details\n  - Virtual wikis\n  - Log items and recent changes\n  - Wiki files and file versions\n\n### 4. **Caching & Transaction Management**\n- The class makes use of caching via `WikiCache` to store and retrieve frequently accessed data (e.g., topic info, user info).\n- Transactions are managed using Spring\u2019s `TransactionStatus`, indicating that transactional integrity is important during data modifications.\n\n---\n\n### \u2705 Entities That Need Synchronization with `AnsiDataHandler.java`\n\nBased on co-change history, call graph, coupling dependencies, and source code analysis, the following entities should be considered for synchronized updates:\n\n| Entity | Reason |\n|-------|--------|\n| **AnsiQueryHandler.java** | Directly instantiated and used (`new AnsiQueryHandler()`). High co-change confidence (0.4375). |\n| **QueryHandler.java** | Used as return type in `queryHandler()`. Moderate co-change confidence (0.25). |\n| **DataHandler.java** | Implemented by `AnsiDataHandler`. Any change in the interface might affect its implementation. |\n| **WikiBase.java** | Used for search engine integration and group management. Appears in multiple operations. |\n| **WikiDatabase.java** | Involved in setup and initialization tasks. Co-change support found. |\n| **UpgradeServlet.java** | Co-change support and usage pattern suggests dependency. |\n| **DatabaseUpgrades.java** | Moderate co-change confidence. Likely involved in schema/data upgrades. |\n\n---\n\n### \ud83d\udd0d Next Steps\n\nTo ensure thorough CIA coverage:\n1. Retrieve source code for `AnsiQueryHandler.java` and `QueryHandler.java` to analyze their interaction with `AnsiDataHandler`.\n2. Investigate coupling between `AnsiDataHandler.java` and `WikiBase.java` and `WikiDatabase.java`.\n\nWould you like to proceed by retrieving the source code for `AnsiQueryHandler.java`?",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `AnsiDataHandler`\n\nChange set: [AnsiQueryHandler, QueryHandler, DataHandler, WikiBase, WikiDatabase, UpgradeServlet, DatabaseUpgrades, WikiUser, Topic, VirtualWiki, WikiCache, DatabaseConnection, AnsiDataHandlerTest, WikiUtil, WikiLogger, Role, RoleMap, Namespace, RecentChange, Category, Watchlist, WikiFile, TopicVersion, ParserUtil, Encryption, LogItem, WikiMessage, WikiException, DataAccessException, HSqlQueryHandler, DB2DataHandler, MSSqlDataHandler, HSqlDataHandler, DB2400DataHandler, MySqlDataHandler, OracleDataHandler, PostgresDataHandler, Environment, Utilities, AdminServlet, ImageLinkTag, ServletUtil]\n\nDetails:\n- **AnsiQueryHandler**: Directly instantiated in `AnsiDataHandler`, high co-change confidence (0.4375), and used across all query operations.\n- **QueryHandler**: Return type for `queryHandler()` method; core dependency for all database operations.\n- **DataHandler**: Interface implemented by `AnsiDataHandler`; changes may affect method signatures or behavior.\n- **WikiBase**: Used for caching and search engine integration; tightly integrated into topic and change management.\n- **WikiDatabase**: Invoked during setup and initialization routines; appears in multiple transactional contexts.\n- **UpgradeServlet**: Co-change support (5, 0.15625); likely involved in schema/data upgrade workflows.\n- **DatabaseUpgrades**: Co-change support (6, 0.1875); logically related to database versioning and migration.\n- **WikiUser**: Heavily used throughout user management and authentication logic.\n- **Topic**: Central data model used in nearly every operation involving content retrieval and modification.\n- **VirtualWiki**: Core structural component used in almost all context-sensitive operations.\n- **WikiCache**: Used extensively for performance optimization; any change can impact cache logic or invalidate stored entries.\n- **DatabaseConnection**: Manages transactions and connections; essential to all persistence logic.\n- **AnsiDataHandlerTest**: Test class for the starting entity; should be updated with any major logic or interface changes.\n- **WikiUtil**: Common utility functions used across various methods; often contains shared business logic.\n- **WikiLogger**: Logging is embedded throughout the class; logging structure changes would require alignment.\n- **Role, RoleMap**: Used in access control and group/user permissions logic.\n- **Namespace**: Integrated into topic lookup, validation, and translation routines.\n- **RecentChange**: Used in tracking recent edits and activity logs.\n- **Category**: Managed via query handler; part of topic metadata management.\n- **Watchlist**: Tied to user preferences and notifications.\n- **WikiFile, TopicVersion**: Core entities managed through file and versioning APIs.\n- **ParserUtil**: Involved in parsing and extracting links, categories, and other structured data from topics.\n- **Encryption**: Used in password handling and secure storage.\n- **LogItem**: Part of audit trail and system logging.\n- **WikiMessage**: Handles internationalization and error messages.\n- **WikiException, DataAccessException**: Core exception hierarchy used throughout the class.\n- **HSqlQueryHandler, DB2DataHandler, MSSqlDataHandler, HSqlDataHandler, DB2400DataHandler, MySqlDataHandler, OracleDataHandler, PostgresDataHandler**: All are database-specific handlers; co-change relationships suggest potential shared logic or inheritance patterns.\n- **Environment, Utilities**: General utilities used across modules.\n- **AdminServlet**: Co-change support; potentially involved in administrative data operations.\n- **ImageLinkTag**: Co-change support; possibly linked to media/file handling logic.\n- **ServletUtil**: Shared servlet utilities; often involved in request/response handling tied to data operations.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `JAMWiki`, a well-known Java open source project. The starting entity you need to deal with is AnsiDataHandler.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_64b71d62ad824ce592a079",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"Utilities\", \"1\", \"0.03125\"], [\"WikiBase\", \"3\", \"0.09375\"], [\"Environment\", \"2\", \"0.0625\"], [\"WikiDatabase\", \"6\", \"0.1875\"], [\"UpgradeServlet\", \"5\", \"0.15625\"], [\"PersistencyServlet\", \"1\", \"0.03125\"], [\"HSqlQueryHandler\", \"1\", \"0.03125\"], [\"DB2DataHandler\", \"2\", \"0.0625\"], [\"MSSqlDataHandler\", \"2\", \"0.0625\"], [\"HSqlDataHandler\", \"2\", \"0.0625\"], [\"DB2400DataHandler\", \"2\", \"0.0625\"], [\"MySqlDataHandler\", \"2\", \"0.0625\"], [\"OracleDataHandler\", \"2\", \"0.0625\"], [\"PostgresDataHandler\", \"2\", \"0.0625\"], [\"QueryHandler\", \"8\", \"0.25\"], [\"AnsiQueryHandler\", \"14\", \"0.4375\"], [\"MoveServlet\", \"2\", \"0.0625\"], [\"Role\", \"1\", \"0.03125\"], [\"RolesServlet\", \"1\", \"0.03125\"], [\"DatabaseUserHandler\", \"2\", \"0.0625\"], [\"DatabaseUpgrades\", \"6\", \"0.1875\"], [\"DatabaseConnection\", \"3\", \"0.09375\"], [\"LocalDataSource\", \"1\", \"0.03125\"], [\"WikiPreparedStatement\", \"1\", \"0.03125\"], [\"WikiUser\", \"1\", \"0.03125\"], [\"JFlexParser\", \"2\", \"0.0625\"], [\"MigrationUtil\", \"1\", \"0.03125\"], [\"ParserException\", \"1\", \"0.03125\"], [\"JAMWikiModel\", \"1\", \"0.03125\"], [\"JFlexLexer\", \"1\", \"0.03125\"], [\"WikiHeadingTag\", \"1\", \"0.03125\"], [\"TemplateTag\", \"1\", \"0.03125\"], [\"WikiLinkTag\", \"1\", \"0.03125\"], [\"HtmlLinkTag\", \"1\", \"0.03125\"], [\"WikiReferenceTag\", \"1\", \"0.03125\"], [\"JFlexParserTag\", \"1\", \"0.03125\"], [\"WikiSignatureTag\", \"1\", \"0.03125\"], [\"JavascriptTag\", \"1\", \"0.03125\"], [\"WikiReferencesTag\", \"1\", \"0.03125\"], [\"WikiBoldItalicTag\", \"1\", \"0.03125\"], [\"IncludeOnlyTag\", \"1\", \"0.03125\"], [\"NoIncludeTag\", \"1\", \"0.03125\"], [\"BlikiProxyParser\", \"1\", \"0.03125\"], [\"BlikiProxyParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiCrawlHandler\", \"1\", \"0.03125\"], [\"JAMWikiLoadHandler\", \"1\", \"0.03125\"], [\"Main\", \"1\", \"0.03125\"], [\"WikiDistributedCache\", \"1\", \"0.03125\"], [\"JAMWikiAuthenticationConfiguration\", \"1\", \"0.03125\"], [\"AdminServlet\", \"3\", \"0.09375\"], [\"SetupServlet\", \"1\", \"0.03125\"], [\"ImageUtil\", \"3\", \"0.09375\"], [\"ParserUtil\", \"1\", \"0.03125\"], [\"JAMWikiServlet\", \"3\", \"0.09375\"], [\"ImageLinkTag\", \"3\", \"0.09375\"], [\"ServletUtil\", \"2\", \"0.0625\"], [\"LinkTag\", \"1\", \"0.03125\"], [\"JAMWikiUnitTest\", \"1\", \"0.03125\"], [\"AdminVirtualWikiServlet\", \"1\", \"0.03125\"], [\"Topic\", \"1\", \"0.03125\"], [\"LinkUtil\", \"1\", \"0.03125\"], [\"WikiPageInfo\", \"1\", \"0.03125\"], [\"RankingAlgorithmSearchEngine\", \"1\", \"0.03125\"], [\"LuceneSearchEngine\", \"1\", \"0.03125\"], [\"H2DataHandler\", \"1\", \"0.03125\"], [\"SybaseASADataHandler\", \"1\", \"0.03125\"], [\"CacheDataHandler\", \"1\", \"0.03125\"], [\"AnsiDataHandlerTest\", \"1\", \"0.03125\"], [\"StylesheetServlet\", \"1\", \"0.03125\"], [\"WikiCache\", \"1\", \"0.03125\"], [\"WikiCacheTest\", \"1\", \"0.03125\"]]"
            },
            "m5": {
                "content": "The co-change relationships for `AnsiDataHandler.java` have been retrieved, showing several files that have historically been modified together with varying levels of support and confidence. Notably:\n\n- `AnsiQueryHandler.java` has the highest confidence (0.4375), indicating a strong historical correlation in modifications.\n- `QueryHandler.java` also shows significant coupling with a confidence of 0.25.\n- Several other entities like `WikiDatabase`, `UpgradeServlet`, and `DatabaseUpgrades` show moderate confidence values, suggesting some level of dependency or related changes.\n\nTo better understand the nature of these dependencies, we should now investigate how `AnsiDataHandler.java` interacts with these entities using `get_call_graph`. This will help us identify direct usage relationships such as method calls or variable references.\n\nLet's start by analyzing the call graph for `AnsiDataHandler.java`.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_f75120fd36774e2ebbaab2",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"DataAccessException\", \"WikiException\", \"ParserOutput\", \"WikiFileVersion\", \"WikiFile\", \"ParserException\", \"Category\", \"LogItem\", \"Topic\", \"VirtualWiki\", \"Watchlist\", \"ParserUtil\", \"WikiUserDetails\", \"DataHandler\", \"TopicVersion\", \"WikiUser\", \"TopicType\", \"Namespace\", \"RecentChange\", \"Pagination\", \"WikiMessage\", \"Role\", \"WikiLogger\", \"WikiUtil\", \"WikiCache\", \"Encryption\", \"WikiBase\", \"RoleMap\", \"WikiGroup\"]"
            },
            "m7": {
                "content": "The call graph for `AnsiDataHandler.java` reveals that it directly interacts with several entities, including:\n\n- **Exceptions**: `DataAccessException`, `WikiException`, `ParserException`\n- **Data Models**: `WikiFileVersion`, `WikiFile`, `Category`, `LogItem`, `Topic`, `VirtualWiki`, `Watchlist`, `TopicVersion`, `TopicType`, `Namespace`, `RecentChange`, `Pagination`, `WikiMessage`, `Role`, `RoleMap`, `WikiGroup`\n- **Utilities**: `ParserUtil`, `WikiLogger`, `WikiUtil`, `WikiCache`, `Encryption`, `WikiBase`\n- **Core Classes**: `DataHandler`, `WikiUser`, `WikiUserDetails`\n\nThis indicates that `AnsiDataHandler.java` is tightly integrated with core data models and utility classes in the system. Given the earlier co-change results\u2014especially the high correlation with `AnsiQueryHandler.java` and `QueryHandler.java`\u2014we should investigate if these query handlers are used by or interact with `AnsiDataHandler.java`.\n\nLet's examine the coupling dependencies between `AnsiDataHandler.java` and `AnsiQueryHandler.java` to determine their relationship.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_19bc2a10b5024dae862eeb",
                        "function": {
                            "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"AnsiQueryHandler.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"ConstructorInvoking(CMI): Construction Method Invoking found: new AnsiQueryHandler(),\"]"
            },
            "m9": {
                "content": "The coupling dependency analysis between `AnsiDataHandler.java` and `AnsiQueryHandler.java` reveals a **Constructor Invoking (CMI)** relationship. This means that `AnsiDataHandler.java` directly instantiates `AnsiQueryHandler.java` using its constructor (`new AnsiQueryHandler()`).\n\nThis direct instantiation confirms a strong dependency: any changes to `AnsiQueryHandler.java` could potentially impact `AnsiDataHandler.java`, and vice versa, which explains the high co-change confidence value observed earlier.\n\nGiven this tight coupling, it's important to ensure that if either of these files is modified, the other is reviewed for necessary synchronization. Additionally, considering the broader call graph and co-change relationships, we should also check coupling with `QueryHandler.java`, as it showed a significant historical co-change relationship.\n\nLet\u2019s analyze the coupling dependencies between `AnsiDataHandler.java` and `QueryHandler.java`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_522f0625fc974be498aebc",
                        "function": {
                            "arguments": "{\"entity1\": \"AnsiDataHandler.java\", \"entity2\": \"QueryHandler.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"ReturnType(RT): Return Type found: queryHandler returns QueryHandler,\"]"
            },
            "m11": {
                "content": "The coupling dependency between `AnsiDataHandler.java` and `QueryHandler.java` is of the **ReturnType (RT)** type. This indicates that a method in `AnsiDataHandler.java` returns an instance of `QueryHandler`, establishing a direct usage relationship where `AnsiDataHandler` relies on `QueryHandler` as a return type in one of its methods.\n\nThis kind of dependency implies that changes to `QueryHandler.java`\u2014such as method signatures, inheritance hierarchy, or interface implementation\u2014could affect how `AnsiDataHandler.java` utilizes it, reinforcing the need for synchronized updates when modifications occur.\n\nSo far, we have identified:\n- A **co-change** relationship with high confidence for `AnsiQueryHandler.java` and moderate confidence for `QueryHandler.java`.\n- A **direct constructor invocation** of `AnsiQueryHandler` in `AnsiDataHandler.java`.\n- A **return-type dependency** on `QueryHandler.java`.\n\nTo ensure completeness, let's retrieve the source code of `AnsiDataHandler.java` to better understand the context of these dependencies and confirm any additional relationships or usages.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_ddc65c895ad24e99836976",
                        "function": {
                            "arguments": "{\"entity\": \"AnsiDataHandler.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.jamwiki.db;\\nimport java.io.IOException;\\nimport java.sql.Connection;\\nimport java.sql.SQLException;\\nimport java.sql.Statement;\\nimport java.sql.Timestamp;\\nimport java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.LinkedHashMap;\\nimport java.util.List;\\nimport java.util.Locale;\\nimport java.util.Map;\\nimport net.sf.ehcache.Element;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.jamwiki.DataAccessException;\\nimport org.jamwiki.DataHandler;\\nimport org.jamwiki.WikiBase;\\nimport org.jamwiki.WikiException;\\nimport org.jamwiki.WikiMessage;\\nimport org.jamwiki.model.Category;\\nimport org.jamwiki.model.LogItem;\\nimport org.jamwiki.model.Namespace;\\nimport org.jamwiki.model.RecentChange;\\nimport org.jamwiki.model.Role;\\nimport org.jamwiki.model.RoleMap;\\nimport org.jamwiki.model.Topic;\\nimport org.jamwiki.model.TopicType;\\nimport org.jamwiki.model.TopicVersion;\\nimport org.jamwiki.model.VirtualWiki;\\nimport org.jamwiki.model.Watchlist;\\nimport org.jamwiki.model.WikiFile;\\nimport org.jamwiki.model.WikiFileVersion;\\nimport org.jamwiki.model.WikiGroup;\\nimport org.jamwiki.model.WikiUser;\\nimport org.jamwiki.model.WikiUserDetails;\\nimport org.jamwiki.parser.ParserException;\\nimport org.jamwiki.parser.ParserOutput;\\nimport org.jamwiki.parser.ParserUtil;\\nimport org.jamwiki.utils.Encryption;\\nimport org.jamwiki.utils.Pagination;\\nimport org.jamwiki.utils.WikiCache;\\nimport org.jamwiki.utils.WikiLogger;\\nimport org.jamwiki.utils.WikiUtil;\\nimport org.springframework.transaction.TransactionStatus;\\npublic class AnsiDataHandler implements DataHandler {\\n\\tprivate static final int TIME_LIMIT_TOPIC_LOOKUP = 10;\\n\\tprivate static final String CACHE_NAMESPACE_LIST = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_NAMESPACE_LIST\\\";\\n\\tprivate static final String CACHE_ROLE_MAP_GROUP = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_ROLE_MAP_GROUP\\\";\\n\\tprivate static final String CACHE_TOPIC_IDS_BY_NAME = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPIC_IDS_BY_NAME\\\";\\n\\tprivate static final String CACHE_TOPICS_BY_ID = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS_BY_ID\\\";\\n\\tprivate static final String CACHE_TOPICS_BY_NAME = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPICS_BY_NAME\\\";\\n\\tprivate static final String CACHE_TOPIC_VERSIONS = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_TOPIC_VERSIONS\\\";\\n\\tprivate static final String CACHE_USER_BY_USER_ID = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_USER_BY_USER_ID\\\";\\n\\tprivate static final String CACHE_USER_BY_USER_NAME = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_USER_BY_USER_NAME\\\";\\n\\tprivate static final String CACHE_VIRTUAL_WIKI_LIST = \\\"org.jamwiki.db.AnsiDataHandler.CACHE_VIRTUAL_WIKI_LIST\\\";\\n\\tprivate static final WikiLogger logger = WikiLogger.getLogger(AnsiDataHandler.class.getName());\\n\\tprivate final QueryHandler queryHandler = new AnsiQueryHandler();\\n\\tprivate void addCategories(List<Category> categoryList, int topicId, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = -1;\\n\\t\\tfor (Category category : categoryList) {\\n\\t\\t\\tvirtualWikiId = this.lookupVirtualWikiId(category.getVirtualWiki());\\n\\t\\t\\tthis.validateCategory(category);\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertCategories(categoryList, virtualWikiId, topicId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addGroupMember(String username, int groupId, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertGroupMember(username, groupId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addLogItem(LogItem logItem, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(logItem.getVirtualWiki());\\n\\t\\tthis.validateLogItem(logItem);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertLogItem(logItem, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addRecentChange(RecentChange change, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(change.getVirtualWiki());\\n\\t\\tthis.validateRecentChange(change);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertRecentChange(change, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addTopic(Topic topic, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\ttry {\\n\\t\\t\\tthis.validateTopic(topic);\\n\\t\\t\\tthis.queryHandler().insertTopic(topic, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprotected void addTopicLinks(List<String> links, int topicId, Connection conn) throws DataAccessException {\\n\\t\\t\\t\\tMap<String, String> linksMap = new HashMap<String, String>();\\n\\t\\tfor (String link : links) {\\n\\t\\t\\tif (link.length() <= 200) {\\n\\t\\t\\t\\tlinksMap.put(link, link);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlinks = new ArrayList<String>(linksMap.keySet());\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertTopicLinks(links, topicId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addTopicVersion(Topic topic, TopicVersion topicVersion, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tif (topicVersion.getPreviousTopicVersionId() == null && topic.getCurrentVersionId() != null) {\\n\\t\\t\\ttopicVersion.setPreviousTopicVersionId(topic.getCurrentVersionId());\\n\\t\\t}\\n\\t\\ttopicVersion.setTopicId(topic.getTopicId());\\n\\t\\ttopicVersion.initializeVersionParams(topic);\\n\\t\\ttry {\\n\\t\\t\\tthis.validateTopicVersion(topicVersion);\\n\\t\\t\\tthis.queryHandler().insertTopicVersion(topicVersion, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\ttopic.setCurrentVersionId(topicVersion.getTopicVersionId());\\n\\t}\\n\\tprivate void addUserDetails(WikiUserDetails userDetails, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertUserDetails(userDetails, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\t\\tthis.queryHandler().insertVirtualWiki(virtualWiki, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateWatchlistEntry(topicName);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().insertWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiFile(WikiFile wikiFile, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\t\\tthis.queryHandler().insertWikiFile(wikiFile, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiFileVersion(WikiFileVersion wikiFileVersion, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateWikiFileVersion(wikiFileVersion);\\n\\t\\t\\tthis.queryHandler().insertWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiGroup(WikiGroup group, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateWikiGroup(group);\\n\\t\\t\\tthis.queryHandler().insertWikiGroup(group, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void addWikiUser(WikiUser user, Connection conn) throws DataAccessException, WikiException {\\n\\t\\ttry {\\n\\t\\t\\tthis.validateWikiUser(user);\\n\\t\\t\\tthis.queryHandler().insertWikiUser(user, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic boolean authenticate(String username, String password) throws DataAccessException {\\n\\t\\tif (StringUtils.isBlank(password)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\t\\t\\t\\tString encryptedPassword = Encryption.encrypt(password);\\n\\t\\t\\treturn this.queryHandler().authenticateUser(username, encryptedPassword, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t}\\n\\tprivate String authorName(Integer authorId, String authorName) throws DataAccessException {\\n\\t\\tif (authorId != null) {\\n\\t\\t\\tWikiUser user = this.lookupWikiUser(authorId);\\n\\t\\t\\tauthorName = user.getUsername();\\n\\t\\t}\\n\\t\\treturn authorName;\\n\\t}\\n\\tpublic boolean canMoveTopic(Topic fromTopic, String destination) throws DataAccessException {\\n\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, null);\\n\\t\\tif (toTopic == null || toTopic.getDeleteDate() != null) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\tif (toTopic.getRedirectTo() != null && toTopic.getRedirectTo().equals(fromTopic.getName())) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\tprivate static void checkLength(String value, int maxLength) throws WikiException {\\n\\t\\tif (value != null && value.length() > maxLength) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", value, Integer.valueOf(maxLength).toString()));\\n\\t\\t}\\n\\t}\\n\\tprivate void clearTopicCache(Topic topic) {\\n\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\tWikiCache.removeFromCache(WikiBase.CACHE_PARSED_TOPIC_CONTENT, key);\\n\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_NAME, key, topic);\\n\\t\\tWikiCache.addToCache(CACHE_TOPIC_IDS_BY_NAME, key, topic.getTopicId());\\n\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_ID, topic.getTopicId(), topic);\\n\\t}\\n\\tprivate void deleteRecentChanges(Topic topic, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteRecentChanges(topic.getTopicId(), conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic void deleteTopic(Topic topic, TopicVersion topicVersion) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (topicVersion != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdeleteRecentChanges(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = new ParserOutput();\\n\\t\\t\\ttopic.setDeleteDate(new Timestamp(System.currentTimeMillis()));\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void deleteTopicCategories(Topic topic, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteTopicCategories(topic.getTopicId(), conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprotected void deleteTopicLinks(int topicId, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteTopicLinks(topicId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void deleteWatchlistEntry(int virtualWikiId, String topicName, int userId, Connection conn) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().deleteWatchlistEntry(virtualWikiId, topicName, userId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic void executeUpgradeQuery(String prop, Connection conn) throws SQLException {\\n\\t\\tthis.queryHandler().executeUpgradeQuery(prop, conn);\\n\\t}\\n\\tpublic void executeUpgradeUpdate(String prop, Connection conn) throws SQLException {\\n\\t\\tthis.queryHandler().executeUpgradeUpdate(prop, conn);\\n\\t}\\n\\tprivate int findMaxNamespaceId() throws DataAccessException {\\n\\t\\tList<Namespace> namespaces = this.lookupNamespaces();\\n\\t\\tint namespaceEnd = 0;\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tnamespaceEnd = (namespace.getId() > namespaceEnd) ? namespace.getId() : namespaceEnd;\\n\\t\\t}\\n\\t\\treturn namespaceEnd;\\n\\t}\\n\\tpublic List<Category> getAllCategories(String virtualWiki, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getCategories(virtualWikiId, virtualWiki, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<Role> getAllRoles() throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoles();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> getAllTopicNames(String virtualWiki, boolean includeDeleted) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\treturn new ArrayList<String>(this.queryHandler().lookupTopicNames(virtualWikiId, includeDeleted, conn).values());\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t}\\n\\tpublic List<WikiFileVersion> getAllWikiFileVersions(String virtualWiki, String topicName, boolean descending) throws DataAccessException {\\n\\t\\tWikiFile wikiFile = lookupWikiFile(virtualWiki, topicName);\\n\\t\\tif (wikiFile == null) {\\n\\t\\t\\tthrow new DataAccessException(\\\"No topic exists for \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getAllWikiFileVersions(wikiFile, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<LogItem> getLogItems(String virtualWiki, int logType, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\tList<LogItem> logItems = new ArrayList<LogItem>();\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getLogItems(virtualWikiId, virtualWiki, logType, pagination, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getRecentChanges(String virtualWiki, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRecentChanges(virtualWiki, pagination, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RoleMap> getRoleMapByLogin(String loginFragment) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapByLogin(loginFragment);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RoleMap> getRoleMapByRole(String authority) throws DataAccessException {\\n\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_ROLE_MAP_GROUP, authority);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (List<RoleMap>)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\t\\t\\tList<RoleMap> roleMapList = null;\\n\\t\\ttry {\\n\\t\\t\\troleMapList = this.queryHandler().getRoleMapByRole(authority);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_ROLE_MAP_GROUP, authority, roleMapList);\\n\\t\\treturn roleMapList;\\n\\t}\\n\\tpublic List<Role> getRoleMapGroup(String groupName) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapGroup(groupName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RoleMap> getRoleMapGroups() throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapGroups();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<Role> getRoleMapUser(String login) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getRoleMapUser(login);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getTopicHistory(String virtualWiki, String topicName, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, true, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn new ArrayList<RecentChange>();\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getTopicHistory(topic.getTopicId(), pagination, descending);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> getTopicsAdmin(String virtualWiki, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getTopicsAdmin(virtualWikiId, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getUserContributions(String virtualWiki, String userString, Pagination pagination, boolean descending) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tif (this.lookupWikiUser(userString) != null) {\\n\\t\\t\\t\\treturn this.queryHandler().getUserContributionsByLogin(virtualWiki, userString, pagination, descending);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn this.queryHandler().getUserContributionsByUserDisplay(virtualWiki, userString, pagination, descending);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<VirtualWiki> getVirtualWikiList() throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_VIRTUAL_WIKI_LIST, CACHE_VIRTUAL_WIKI_LIST);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (List<VirtualWiki>)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tList<VirtualWiki> virtualWikis = new ArrayList<VirtualWiki>();\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tvirtualWikis = this.queryHandler().getVirtualWikis(conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.addToCache(CACHE_VIRTUAL_WIKI_LIST, CACHE_VIRTUAL_WIKI_LIST, virtualWikis);\\n\\t\\treturn virtualWikis;\\n\\t}\\n\\tpublic Watchlist getWatchlist(String virtualWiki, int userId) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\tList<String> watchedTopicNames = this.queryHandler().getWatchlist(virtualWikiId, userId);\\n\\t\\t\\treturn new Watchlist(virtualWiki, watchedTopicNames);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<RecentChange> getWatchlist(String virtualWiki, int userId, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().getWatchlist(virtualWikiId, userId, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<Category> lookupCategoryTopics(String virtualWiki, String categoryName) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupCategoryTopics(virtualWikiId, virtualWiki, categoryName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic Namespace lookupNamespace(String virtualWiki, String namespaceString) throws DataAccessException {\\n\\t\\tif (namespaceString == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tList<Namespace> namespaces = this.lookupNamespaces();\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tif (namespace.getLabel(virtualWiki).equalsIgnoreCase(namespaceString)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn namespace;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t}\\n\\tpublic Namespace lookupNamespaceById(int namespaceId) throws DataAccessException {\\n\\t\\tList<Namespace> namespaces = this.lookupNamespaces();\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tif (namespace.getId() != null && namespace.getId().intValue() == namespaceId) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn namespace;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t}\\n\\tpublic List<Namespace> lookupNamespaces() throws DataAccessException {\\n\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_NAMESPACE_LIST, CACHE_NAMESPACE_LIST);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (List<Namespace>)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\t\\t\\tList<Namespace> namespaces = null;\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\tnamespaces = this.queryHandler().lookupNamespaces(conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_NAMESPACE_LIST, CACHE_NAMESPACE_LIST, namespaces);\\n\\t\\treturn namespaces;\\n\\t}\\n\\tpublic Topic lookupTopic(String virtualWiki, String topicName, boolean deleteOK, Connection conn) throws DataAccessException {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tlong start = System.currentTimeMillis();\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tif (conn == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS_BY_NAME, key);\\n\\t\\t\\tif (cacheElement != null) {\\n\\t\\t\\t\\tTopic cacheTopic = (Topic)cacheElement.getObjectValue();\\n\\t\\t\\t\\treturn (cacheTopic == null || (!deleteOK && cacheTopic.getDeleteDate() != null)) ? null : new Topic(cacheTopic);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tTopic topic = null;\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\ttopic = this.queryHandler().lookupTopic(virtualWikiId, virtualWiki, topicName, conn);\\n\\t\\t\\tif (conn == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tTopic cacheTopic = (topic == null) ? null : new Topic(topic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_NAME, key, cacheTopic);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_TOPIC_IDS_BY_NAME, key, (cacheTopic == null) ? null : cacheTopic.getTopicId());\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tif (logger.isFineEnabled()) {\\n\\t\\t\\tlong execution = (System.currentTimeMillis() - start);\\n\\t\\t\\tif (execution > TIME_LIMIT_TOPIC_LOOKUP) {\\n\\t\\t\\t\\tlogger.fine(\\\"Slow topic lookup for: \\\" + topicName + \\\" (\\\" + (execution / 1000.000) + \\\" s)\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (topic == null || (!deleteOK && topic.getDeleteDate() != null)) ? null : topic;\\n\\t}\\n\\tpublic Topic lookupTopicById(String virtualWiki, int topicId) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPICS_BY_ID, topicId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (Topic)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tTopic result = null;\\n\\t\\ttry {\\n\\t\\t\\tresult = this.queryHandler().lookupTopicById(virtualWikiId, virtualWiki, topicId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_TOPICS_BY_ID, topicId, result);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupTopicCount(String virtualWiki, Integer namespaceId) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tint namespaceStart = (namespaceId != null) ? namespaceId : 0;\\n\\t\\tint namespaceEnd = (namespaceId != null) ? namespaceId : this.findMaxNamespaceId();\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicCount(virtualWikiId, namespaceStart, namespaceEnd);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic Map<Integer, String> lookupTopicByType(String virtualWiki, TopicType topicType1, TopicType topicType2, Integer namespaceId, Pagination pagination) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tint namespaceStart = (namespaceId != null) ? namespaceId : 0;\\n\\t\\tint namespaceEnd = (namespaceId != null) ? namespaceId : this.findMaxNamespaceId();\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicByType(virtualWikiId, topicType1, topicType2, namespaceStart, namespaceEnd, pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic Integer lookupTopicId(String virtualWiki, String topicName) throws DataAccessException {\\n\\t\\tif (StringUtils.isBlank(virtualWiki) || StringUtils.isBlank(topicName)) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tlong start = System.currentTimeMillis();\\n\\t\\tString key = WikiCache.key(virtualWiki, topicName);\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPIC_IDS_BY_NAME, key);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (Integer)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tInteger topicId = null;\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\ttopicId = this.queryHandler().lookupTopicId(virtualWikiId, virtualWiki, topicName);\\n\\t\\t\\tWikiCache.addToCache(CACHE_TOPIC_IDS_BY_NAME, key, topicId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tif (logger.isFineEnabled()) {\\n\\t\\t\\tlong execution = (System.currentTimeMillis() - start);\\n\\t\\t\\tif (execution > TIME_LIMIT_TOPIC_LOOKUP) {\\n\\t\\t\\t\\tlogger.fine(\\\"Slow topic existence lookup for: \\\" + topicName + \\\" (\\\" +  (execution / 1000.000) + \\\" s)\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn topicId;\\n\\t}\\n\\tpublic List<String> lookupTopicLinks(String virtualWiki, String topicName) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicLinks(virtualWikiId, topicName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> lookupTopicLinkOrphans(String virtualWiki) throws DataAccessException {\\n\\t\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupTopicLinkOrphans(virtualWikiId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic TopicVersion lookupTopicVersion(int topicVersionId) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_TOPIC_VERSIONS, topicVersionId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (TopicVersion)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tTopicVersion topicVersion = null;\\n\\t\\ttry {\\n\\t\\t\\ttopicVersion = this.queryHandler().lookupTopicVersion(topicVersionId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_TOPIC_VERSIONS, topicVersionId, topicVersion);\\n\\t\\treturn topicVersion;\\n\\t}\\n\\tpublic VirtualWiki lookupVirtualWiki(String virtualWikiName) throws DataAccessException {\\n\\t\\tList<VirtualWiki> virtualWikis = this.getVirtualWikiList();\\n\\t\\tfor (VirtualWiki virtualWiki : virtualWikis) {\\n\\t\\t\\tif (virtualWiki.getName().equals(virtualWikiName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\treturn virtualWiki;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t}\\n\\tprivate int lookupVirtualWikiId(String virtualWikiName) throws DataAccessException {\\n\\t\\tVirtualWiki virtualWiki = this.lookupVirtualWiki(virtualWikiName);\\n\\t\\treturn (virtualWiki == null) ? -1 : virtualWiki.getVirtualWikiId();\\n\\t}\\n\\tpublic WikiFile lookupWikiFile(String virtualWiki, String topicName) throws DataAccessException {\\n\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, null);\\n\\t\\tif (topic == null) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\treturn this.queryHandler().lookupWikiFile(virtualWikiId, virtualWiki, topic.getTopicId());\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic int lookupWikiFileCount(String virtualWiki) throws DataAccessException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiFileCount(virtualWikiId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic WikiGroup lookupWikiGroup(String groupName) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiGroup(groupName);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(int userId) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_USER_BY_USER_ID, userId);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (WikiUser)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tWikiUser user = null;\\n\\t\\ttry {\\n\\t\\t\\tuser = this.queryHandler().lookupWikiUser(userId);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_ID, userId, user);\\n\\t\\treturn user;\\n\\t}\\n\\tpublic WikiUser lookupWikiUser(String username) throws DataAccessException {\\n\\t\\tElement cacheElement = WikiCache.retrieveFromCache(CACHE_USER_BY_USER_NAME, username);\\n\\t\\tif (cacheElement != null) {\\n\\t\\t\\treturn (WikiUser)cacheElement.getObjectValue();\\n\\t\\t}\\n\\t\\tWikiUser result = null;\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint userId = this.queryHandler().lookupWikiUser(username, conn);\\n\\t\\t\\tif (userId != -1) {\\n\\t\\t\\t\\tresult = lookupWikiUser(userId);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_NAME, username, result);\\n\\t\\treturn result;\\n\\t}\\n\\tpublic int lookupWikiUserCount() throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiUserCount();\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic String lookupWikiUserEncryptedPassword(String username) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiUserEncryptedPassword(username);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic List<String> lookupWikiUsers(Pagination pagination) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\treturn this.queryHandler().lookupWikiUsers(pagination);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tpublic void moveTopic(Topic fromTopic, TopicVersion fromVersion, String destination) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (!this.canMoveTopic(fromTopic, destination)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"move.exception.destinationexists\\\", destination));\\n\\t\\t\\t}\\n\\t\\t\\tTopic toTopic = this.lookupTopic(fromTopic.getVirtualWiki(), destination, false, conn);\\n\\t\\t\\tboolean detinationExistsFlag = (toTopic != null && toTopic.getDeleteDate() == null);\\n\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopic(toTopic, null);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tString fromTopicName = fromTopic.getName();\\n\\t\\t\\tfromTopic.setName(destination);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfromVersion.setRecentChangeAllowed(false);\\n\\t\\t\\tParserOutput fromParserOutput = ParserUtil.parserOutput(fromTopic.getTopicContent(), fromTopic.getVirtualWiki(), fromTopic.getName());\\n\\t\\t\\twriteTopic(fromTopic, fromVersion, fromParserOutput.getCategories(), fromParserOutput.getLinks());\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (detinationExistsFlag) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t\\twriteTopic(toTopic, null, null, null);\\n\\t\\t\\t\\tthis.undeleteTopic(toTopic, null);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoTopic = new Topic(fromTopic);\\n\\t\\t\\t\\ttoTopic.setTopicId(-1);\\n\\t\\t\\t\\ttoTopic.setName(fromTopicName);\\n\\t\\t\\t}\\n\\t\\t\\tString content = ParserUtil.parserRedirectContent(destination);\\n\\t\\t\\ttoTopic.setRedirectTo(destination);\\n\\t\\t\\ttoTopic.setTopicType(TopicType.REDIRECT);\\n\\t\\t\\ttoTopic.setTopicContent(content);\\n\\t\\t\\tTopicVersion toVersion = fromVersion;\\n\\t\\t\\ttoVersion.setTopicVersionId(-1);\\n\\t\\t\\ttoVersion.setVersionContent(content);\\n\\t\\t\\ttoVersion.setRecentChangeAllowed(true);\\n\\t\\t\\tParserOutput toParserOutput = ParserUtil.parserOutput(toTopic.getTopicContent(), toTopic.getVirtualWiki(), toTopic.getName());\\n\\t\\t\\twriteTopic(toTopic, toVersion, toParserOutput.getCategories(), toParserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (ParserException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void orderTopicVersions(Topic topic, List<Integer> topicVersionIdList) throws DataAccessException {\\n\\t\\ttry {\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\t\\tthis.queryHandler().orderTopicVersions(topic, virtualWikiId, topicVersionIdList);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tString key = WikiCache.key(topic.getVirtualWiki(), topic.getName());\\n\\t\\tthis.clearTopicCache(topic);\\n\\t}\\n\\tprotected QueryHandler queryHandler() {\\n\\t\\treturn this.queryHandler;\\n\\t}\\n\\tpublic void reloadLogItems() throws DataAccessException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tList<VirtualWiki> virtualWikis = this.getVirtualWikiList();\\n\\t\\t\\tfor (VirtualWiki virtualWiki : virtualWikis) {\\n\\t\\t\\t\\tthis.queryHandler().reloadLogItems(virtualWiki.getVirtualWikiId(), conn);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void reloadRecentChanges() throws DataAccessException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().reloadRecentChanges(conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void setup(Locale locale, WikiUser user, String username, String encryptedPassword) throws DataAccessException, WikiException {\\n\\t\\tWikiDatabase.initialize();\\n\\t\\t\\t\\tConnection conn = null;\\n\\t\\tStatement stmt = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\tstmt = conn.createStatement();\\n\\t\\t\\tstmt.executeQuery(WikiDatabase.getExistenceValidationQuery());\\n\\t\\t\\treturn;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\t\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn, stmt);\\n\\t\\t}\\n\\t\\tWikiDatabase.setup(locale, user, username, encryptedPassword);\\n\\t}\\n\\tpublic void setupSpecialPages(Locale locale, WikiUser user, VirtualWiki virtualWiki) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\t\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STARTING_POINTS, user, false);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_LEFT_MENU, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_BOTTOM_AREA, user, true);\\n\\t\\t\\tWikiDatabase.setupSpecialPage(locale, virtualWiki.getName(), WikiBase.SPECIAL_PAGE_STYLESHEET, user, true);\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void undeleteTopic(Topic topic, TopicVersion topicVersion) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), topic.getVirtualWiki(), topic.getName());\\n\\t\\t\\ttopic.setDeleteDate(null);\\n\\t\\t\\tthis.writeTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (ParserException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void updateSpecialPage(Locale locale, String virtualWiki, String topicName, String userDisplay) throws DataAccessException, WikiException {\\n\\t\\tlogger.info(\\\"Updating special page \\\" + virtualWiki + \\\" / \\\" + topicName);\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tString contents = WikiDatabase.readSpecialPage(locale, topicName);\\n\\t\\t\\tTopic topic = this.lookupTopic(virtualWiki, topicName, false, conn);\\n\\t\\t\\tint charactersChanged = StringUtils.length(contents) - StringUtils.length(topic.getTopicContent());\\n\\t\\t\\ttopic.setTopicContent(contents);\\n\\t\\t\\t\\t\\t\\tTopicVersion topicVersion = new TopicVersion(null, userDisplay, \\\"Automatically updated by system upgrade\\\", contents, charactersChanged);\\n\\t\\t\\tParserOutput parserOutput = ParserUtil.parserOutput(topic.getTopicContent(), virtualWiki, topicName);\\n\\t\\t\\twriteTopic(topic, topicVersion, parserOutput.getCategories(), parserOutput.getLinks());\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (ParserException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (IOException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tprivate void updateTopic(Topic topic, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(topic.getVirtualWiki());\\n\\t\\tthis.validateTopic(topic);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateTopic(topic, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateUserDetails(WikiUserDetails userDetails, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateUserDetails(userDetails);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateUserDetails(userDetails, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateVirtualWiki(VirtualWiki virtualWiki, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateVirtualWiki(virtualWiki);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateVirtualWiki(virtualWiki, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateWikiFile(WikiFile wikiFile, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(wikiFile.getVirtualWiki());\\n\\t\\tthis.validateWikiFile(wikiFile);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateWikiFile(wikiFile, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateWikiGroup(WikiGroup group, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateWikiGroup(group);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateWikiGroup(group, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateWikiUser(WikiUser user, Connection conn) throws DataAccessException, WikiException {\\n\\t\\tthis.validateWikiUser(user);\\n\\t\\ttry {\\n\\t\\t\\tthis.queryHandler().updateWikiUser(user, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t}\\n\\tprotected void validateAuthority(String role) throws WikiException {\\n\\t\\tcheckLength(role, 30);\\n\\t}\\n\\tprotected void validateCategory(Category category) throws WikiException {\\n\\t\\tcheckLength(category.getName(), 200);\\n\\t\\tcheckLength(category.getSortKey(), 200);\\n\\t}\\n\\tprotected void validateLogItem(LogItem logItem) throws WikiException {\\n\\t\\tcheckLength(logItem.getUserDisplayName(), 200);\\n\\t\\tcheckLength(logItem.getLogParamString(), 500);\\n\\t\\tlogItem.setLogComment(StringUtils.substring(logItem.getLogComment(), 0, 200));\\n\\t}\\n\\tprotected void validateNamespace(Namespace mainNamespace, Namespace commentsNamespace) throws WikiException {\\n\\t\\tcheckLength(mainNamespace.getDefaultLabel(), 200);\\n\\t\\tif (commentsNamespace != null) {\\n\\t\\t\\tcheckLength(commentsNamespace.getDefaultLabel(), 200);\\n\\t\\t\\tif (commentsNamespace.getMainNamespace() == null || !commentsNamespace.getMainNamespace().equals(mainNamespace)) {\\n\\t\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.commentsnamespace\\\", commentsNamespace.getDefaultLabel(), mainNamespace.getDefaultLabel()));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprotected void validateNamespaceTranslation(Namespace namespace, String virtualWiki) throws WikiException {\\n\\t\\tcheckLength(namespace.getLabel(virtualWiki), 200);\\n\\t}\\n\\tprotected void validateRecentChange(RecentChange change) throws WikiException {\\n\\t\\tcheckLength(change.getTopicName(), 200);\\n\\t\\tcheckLength(change.getAuthorName(), 200);\\n\\t\\tcheckLength(change.getVirtualWiki(), 100);\\n\\t\\tchange.setChangeComment(StringUtils.substring(change.getChangeComment(), 0, 200));\\n\\t\\tcheckLength(change.getParamString(), 500);\\n\\t}\\n\\tprotected void validateRole(Role role) throws WikiException {\\n\\t\\tcheckLength(role.getAuthority(), 30);\\n\\t\\trole.setDescription(StringUtils.substring(role.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateTopic(Topic topic) throws WikiException {\\n\\t\\tcheckLength(topic.getName(), 200);\\n\\t\\tcheckLength(topic.getRedirectTo(), 200);\\n\\t}\\n\\tprotected void validateTopicVersion(TopicVersion topicVersion) throws WikiException {\\n\\t\\tcheckLength(topicVersion.getAuthorDisplay(), 100);\\n\\t\\tcheckLength(topicVersion.getVersionParamString(), 500);\\n\\t\\ttopicVersion.setEditComment(StringUtils.substring(topicVersion.getEditComment(), 0, 200));\\n\\t}\\n\\tprotected void validateUserDetails(WikiUserDetails userDetails) throws WikiException {\\n\\t\\tcheckLength(userDetails.getUsername(), 100);\\n\\t\\t\\t\\tif (userDetails.getPassword() != null && userDetails.getPassword().length() > 100) {\\n\\t\\t\\tthrow new WikiException(new WikiMessage(\\\"error.fieldlength\\\", \\\"-\\\", \\\"100\\\"));\\n\\t\\t}\\n\\t}\\n\\tprotected void validateVirtualWiki(VirtualWiki virtualWiki) throws WikiException {\\n\\t\\tcheckLength(virtualWiki.getName(), 100);\\n\\t\\tcheckLength(virtualWiki.getDefaultTopicName(), 200);\\n\\t}\\n\\tprotected void validateWatchlistEntry(String topicName) throws WikiException {\\n\\t\\tcheckLength(topicName, 200);\\n\\t}\\n\\tprotected void validateWikiFile(WikiFile wikiFile) throws WikiException {\\n\\t\\tcheckLength(wikiFile.getFileName(), 200);\\n\\t\\tcheckLength(wikiFile.getUrl(), 200);\\n\\t\\tcheckLength(wikiFile.getMimeType(), 100);\\n\\t}\\n\\tprotected void validateWikiFileVersion(WikiFileVersion wikiFileVersion) throws WikiException {\\n\\t\\tcheckLength(wikiFileVersion.getUrl(), 200);\\n\\t\\tcheckLength(wikiFileVersion.getMimeType(), 100);\\n\\t\\tcheckLength(wikiFileVersion.getAuthorDisplay(), 100);\\n\\t\\twikiFileVersion.setUploadComment(StringUtils.substring(wikiFileVersion.getUploadComment(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiGroup(WikiGroup group) throws WikiException {\\n\\t\\tcheckLength(group.getName(), 30);\\n\\t\\tgroup.setDescription(StringUtils.substring(group.getDescription(), 0, 200));\\n\\t}\\n\\tprotected void validateWikiUser(WikiUser user) throws WikiException {\\n\\t\\tcheckLength(user.getUsername(), 100);\\n\\t\\tcheckLength(user.getDisplayName(), 100);\\n\\t\\tcheckLength(user.getCreateIpAddress(), 39);\\n\\t\\tcheckLength(user.getLastLoginIpAddress(), 39);\\n\\t\\tcheckLength(user.getDefaultLocale(), 8);\\n\\t\\tcheckLength(user.getEmail(), 100);\\n\\t\\tcheckLength(user.getEditor(), 50);\\n\\t\\tcheckLength(user.getSignature(), 255);\\n\\t}\\n\\tpublic void writeFile(WikiFile wikiFile, WikiFileVersion wikiFileVersion) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateTopicName(wikiFile.getVirtualWiki(), wikiFile.getFileName());\\n\\t\\t\\tif (wikiFile.getFileId() <= 0) {\\n\\t\\t\\t\\taddWikiFile(wikiFile, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tupdateWikiFile(wikiFile, conn);\\n\\t\\t\\t}\\n\\t\\t\\twikiFileVersion.setFileId(wikiFile.getFileId());\\n\\t\\t\\t\\t\\t\\taddWikiFileVersion(wikiFileVersion, conn);\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeNamespace(Namespace mainNamespace, Namespace commentsNamespace) throws DataAccessException, WikiException {\\n\\t\\tthis.validateNamespace(mainNamespace, commentsNamespace);\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().updateNamespace(mainNamespace, commentsNamespace, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.removeAllFromCache(CACHE_NAMESPACE_LIST);\\n\\t}\\n\\tpublic void writeNamespaceTranslations(List<Namespace> namespaces, String virtualWiki) throws DataAccessException, WikiException {\\n\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\tfor (Namespace namespace : namespaces) {\\n\\t\\t\\tthis.validateNamespaceTranslation(namespace, virtualWiki);\\n\\t\\t}\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().updateNamespaceTranslations(namespaces, virtualWiki, virtualWikiId, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\tWikiCache.removeAllFromCache(CACHE_NAMESPACE_LIST);\\n\\t}\\n\\tpublic void writeRole(Role role, boolean update) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.validateRole(role);\\n\\t\\t\\tif (update) {\\n\\t\\t\\t\\tthis.queryHandler().updateRole(role, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.queryHandler().insertRole(role, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapGroup(int groupId, List<String> roles) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteGroupAuthorities(groupId, conn);\\n\\t\\t\\tfor (String authority : roles) {\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertGroupAuthority(groupId, authority, conn);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tWikiCache.removeAllFromCache(CACHE_ROLE_MAP_GROUP);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeRoleMapUser(String username, List<String> roles) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.queryHandler().deleteUserAuthorities(username, conn);\\n\\t\\t\\tfor (String authority : roles) {\\n\\t\\t\\t\\tthis.validateAuthority(authority);\\n\\t\\t\\t\\tthis.queryHandler().insertUserAuthority(username, authority, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeTopic(Topic topic, TopicVersion topicVersion, LinkedHashMap<String, String> categories, List<String> links) throws DataAccessException, WikiException {\\n\\t\\tlong start = System.currentTimeMillis();\\n\\t\\tWikiUtil.validateTopicName(topic.getVirtualWiki(), topic.getName());\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (topic.getTopicId() <= 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopic(topic, conn);\\n\\t\\t\\t} else if (topicVersion == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tthis.updateTopic(topic, conn);\\n\\t\\t\\t}\\n\\t\\t\\tif (topicVersion != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\taddTopicVersion(topic, topicVersion, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.updateTopic(topic, conn);\\n\\t\\t\\t\\tString authorName = this.authorName(topicVersion.getAuthorId(), topicVersion.getAuthorDisplay());\\n\\t\\t\\t\\tLogItem logItem = LogItem.initLogItem(topic, topicVersion, authorName);\\n\\t\\t\\t\\tRecentChange change = null;\\n\\t\\t\\t\\tif (logItem != null) {\\n\\t\\t\\t\\t\\tthis.addLogItem(logItem, conn);\\n\\t\\t\\t\\t\\tchange = RecentChange.initRecentChange(logItem);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tchange = RecentChange.initRecentChange(topic, topicVersion, authorName);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (topicVersion.isRecentChangeAllowed()) {\\n\\t\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (categories != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicCategories(topic, conn);\\n\\t\\t\\t\\tif (topic.getDeleteDate() == null && !categories.isEmpty()) {\\n\\t\\t\\t\\t\\tList<Category> categoryList = new ArrayList<Category>();\\n\\t\\t\\t\\t\\tfor (String categoryName : categories.keySet()) {\\n\\t\\t\\t\\t\\t\\tCategory category = new Category();\\n\\t\\t\\t\\t\\t\\tcategory.setName(categoryName);\\n\\t\\t\\t\\t\\t\\tcategory.setSortKey(categories.get(categoryName));\\n\\t\\t\\t\\t\\t\\tcategory.setVirtualWiki(topic.getVirtualWiki());\\n\\t\\t\\t\\t\\t\\tcategory.setChildTopicName(topic.getName());\\n\\t\\t\\t\\t\\t\\tcategoryList.add(category);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tthis.addCategories(categoryList, topic.getTopicId(), conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (links != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteTopicLinks(topic.getTopicId(), conn);\\n\\t\\t\\t\\tif (topic.getDeleteDate() == null && !links.isEmpty()) {\\n\\t\\t\\t\\t\\tthis.addTopicLinks(links, topic.getTopicId(), conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tWikiBase.getSearchEngine().updateInIndex(topic);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tthis.clearTopicCache(topic);\\n\\t\\tlogger.fine(\\\"Wrote topic \\\" + topic.getName() + \\\" with params [categories is null: \\\" + (categories == null) + \\\"] / [links is null: \\\" + (links == null) + \\\"] in \\\" + ((System.currentTimeMillis() - start) / 1000.000) + \\\" s.\\\");\\n\\t}\\n\\tpublic void writeTopicVersion(Topic topic, TopicVersion topicVersion) throws DataAccessException, WikiException {\\n\\t\\tConnection conn = null;\\n\\t\\ttry {\\n\\t\\t\\tconn = DatabaseConnection.getConnection();\\n\\t\\t\\tthis.addTopicVersion(topic, topicVersion, conn);\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} finally {\\n\\t\\t\\tDatabaseConnection.closeConnection(conn);\\n\\t\\t}\\n\\t}\\n\\tpublic void writeVirtualWiki(VirtualWiki virtualWiki) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tWikiUtil.validateVirtualWikiName(virtualWiki.getName());\\n\\t\\t\\tif (virtualWiki.getVirtualWikiId() <= 0) {\\n\\t\\t\\t\\tthis.addVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateVirtualWiki(virtualWiki, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.removeAllFromCache(CACHE_VIRTUAL_WIKI_LIST);\\n\\t}\\n\\tpublic void writeWatchlistEntry(Watchlist watchlist, String virtualWiki, String topicName, int userId) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tint virtualWikiId = this.lookupVirtualWikiId(virtualWiki);\\n\\t\\t\\tString article = WikiUtil.extractTopicLink(virtualWiki, topicName);\\n\\t\\t\\tString comments = WikiUtil.extractCommentsLink(virtualWiki, topicName);\\n\\t\\t\\tif (watchlist.containsTopic(topicName)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.deleteWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.remove(article);\\n\\t\\t\\t\\twatchlist.remove(comments);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, article, userId, conn);\\n\\t\\t\\t\\tthis.addWatchlistEntry(virtualWikiId, comments, userId, conn);\\n\\t\\t\\t\\twatchlist.add(article);\\n\\t\\t\\t\\twatchlist.add(comments);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiGroup(WikiGroup group) throws DataAccessException, WikiException {\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (group.getGroupId() <= 0) {\\n\\t\\t\\t\\tthis.addWikiGroup(group, conn);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tthis.updateWikiGroup(group, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t}\\n\\tpublic void writeWikiUser(WikiUser user, String username, String encryptedPassword) throws DataAccessException, WikiException {\\n\\t\\tWikiUtil.validateUserName(user.getUsername());\\n\\t\\tTransactionStatus status = null;\\n\\t\\ttry {\\n\\t\\t\\tstatus = DatabaseConnection.startTransaction();\\n\\t\\t\\tConnection conn = DatabaseConnection.getConnection();\\n\\t\\t\\tif (user.getUserId() <= 0) {\\n\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword);\\n\\t\\t\\t\\tthis.addUserDetails(userDetails, conn);\\n\\t\\t\\t\\tthis.addWikiUser(user, conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tthis.addGroupMember(user.getUsername(), WikiBase.getGroupRegisteredUser().getGroupId(), conn);\\n\\t\\t\\t\\t\\t\\t\\t\\tList<VirtualWiki> virtualWikis = this.getVirtualWikiList();\\n\\t\\t\\t\\tfor (VirtualWiki virtualWiki : virtualWikis) {\\n\\t\\t\\t\\t\\tLogItem logItem = LogItem.initLogItem(user, virtualWiki.getName());\\n\\t\\t\\t\\t\\tthis.addLogItem(logItem, conn);\\n\\t\\t\\t\\t\\tRecentChange change = RecentChange.initRecentChange(logItem);\\n\\t\\t\\t\\t\\tthis.addRecentChange(change, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif (!StringUtils.isBlank(encryptedPassword)) {\\n\\t\\t\\t\\t\\tWikiUserDetails userDetails = new WikiUserDetails(username, encryptedPassword);\\n\\t\\t\\t\\t\\tthis.updateUserDetails(userDetails, conn);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.updateWikiUser(user, conn);\\n\\t\\t\\t}\\n\\t\\t} catch (DataAccessException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t} catch (SQLException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow new DataAccessException(e);\\n\\t\\t} catch (WikiException e) {\\n\\t\\t\\tDatabaseConnection.rollbackOnException(status, e);\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t\\tDatabaseConnection.commit(status);\\n\\t\\t\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_ID, user.getUserId(), user);\\n\\t\\tWikiCache.addToCache(CACHE_USER_BY_USER_NAME, user.getUsername(), user);\\n\\t}\\n}\""
            },
            "m13": {
                "content": "The source code of `AnsiDataHandler.java` reveals the following key insights:\n\n### 1. **Dependency on `AnsiQueryHandler`**\n- A class-level field declares and instantiates a `QueryHandler` using `AnsiQueryHandler`:\n  ```java\n  private final QueryHandler queryHandler = new AnsiQueryHandler();\n  ```\n  This confirms that `AnsiDataHandler` directly depends on `AnsiQueryHandler` via instantiation.\n\n- The method `queryHandler()` provides access to this instance, and it's used throughout the class in database operations like inserting, updating, and querying topics, users, files, etc.\n\n### 2. **Usage of `QueryHandler` Methods**\n- The class extensively uses methods from the `queryHandler`, such as:\n  - `queryHandler().insertCategories(...)`\n  - `queryHandler().updateTopic(...)`\n  - `queryHandler().lookupTopic(...)`\n  \n  These usages confirm that changes to `QueryHandler` or `AnsiQueryHandler` can have a ripple effect on `AnsiDataHandler`.\n\n### 3. **Core Functionalities**\n- `AnsiDataHandler` serves as a data handler implementing the `DataHandler` interface.\n- It handles database interactions for various entities like:\n  - Topics and their versions\n  - Categories\n  - Users and user details\n  - Virtual wikis\n  - Log items and recent changes\n  - Wiki files and file versions\n\n### 4. **Caching & Transaction Management**\n- The class makes use of caching via `WikiCache` to store and retrieve frequently accessed data (e.g., topic info, user info).\n- Transactions are managed using Spring\u2019s `TransactionStatus`, indicating that transactional integrity is important during data modifications.\n\n---\n\n### \u2705 Entities That Need Synchronization with `AnsiDataHandler.java`\n\nBased on co-change history, call graph, coupling dependencies, and source code analysis, the following entities should be considered for synchronized updates:\n\n| Entity | Reason |\n|-------|--------|\n| **AnsiQueryHandler.java** | Directly instantiated and used (`new AnsiQueryHandler()`). High co-change confidence (0.4375). |\n| **QueryHandler.java** | Used as return type in `queryHandler()`. Moderate co-change confidence (0.25). |\n| **DataHandler.java** | Implemented by `AnsiDataHandler`. Any change in the interface might affect its implementation. |\n| **WikiBase.java** | Used for search engine integration and group management. Appears in multiple operations. |\n| **WikiDatabase.java** | Involved in setup and initialization tasks. Co-change support found. |\n| **UpgradeServlet.java** | Co-change support and usage pattern suggests dependency. |\n| **DatabaseUpgrades.java** | Moderate co-change confidence. Likely involved in schema/data upgrades. |\n\n---\n\n### \ud83d\udd0d Next Steps\n\nTo ensure thorough CIA coverage:\n1. Retrieve source code for `AnsiQueryHandler.java` and `QueryHandler.java` to analyze their interaction with `AnsiDataHandler`.\n2. Investigate coupling between `AnsiDataHandler.java` and `WikiBase.java` and `WikiDatabase.java`.\n\nWould you like to proceed by retrieving the source code for `AnsiQueryHandler.java`?",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            },
            "m14": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example, without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m15": {
                "content": "Title: Diagnosis of starting entity `AnsiDataHandler`\n\nChange set: [AnsiQueryHandler, QueryHandler, DataHandler, WikiBase, WikiDatabase, UpgradeServlet, DatabaseUpgrades, WikiUser, Topic, VirtualWiki, WikiCache, DatabaseConnection, AnsiDataHandlerTest, WikiUtil, WikiLogger, Role, RoleMap, Namespace, RecentChange, Category, Watchlist, WikiFile, TopicVersion, ParserUtil, Encryption, LogItem, WikiMessage, WikiException, DataAccessException, HSqlQueryHandler, DB2DataHandler, MSSqlDataHandler, HSqlDataHandler, DB2400DataHandler, MySqlDataHandler, OracleDataHandler, PostgresDataHandler, Environment, Utilities, AdminServlet, ImageLinkTag, ServletUtil]\n\nDetails:\n- **AnsiQueryHandler**: Directly instantiated in `AnsiDataHandler`, high co-change confidence (0.4375), and used across all query operations.\n- **QueryHandler**: Return type for `queryHandler()` method; core dependency for all database operations.\n- **DataHandler**: Interface implemented by `AnsiDataHandler`; changes may affect method signatures or behavior.\n- **WikiBase**: Used for caching and search engine integration; tightly integrated into topic and change management.\n- **WikiDatabase**: Invoked during setup and initialization routines; appears in multiple transactional contexts.\n- **UpgradeServlet**: Co-change support (5, 0.15625); likely involved in schema/data upgrade workflows.\n- **DatabaseUpgrades**: Co-change support (6, 0.1875); logically related to database versioning and migration.\n- **WikiUser**: Heavily used throughout user management and authentication logic.\n- **Topic**: Central data model used in nearly every operation involving content retrieval and modification.\n- **VirtualWiki**: Core structural component used in almost all context-sensitive operations.\n- **WikiCache**: Used extensively for performance optimization; any change can impact cache logic or invalidate stored entries.\n- **DatabaseConnection**: Manages transactions and connections; essential to all persistence logic.\n- **AnsiDataHandlerTest**: Test class for the starting entity; should be updated with any major logic or interface changes.\n- **WikiUtil**: Common utility functions used across various methods; often contains shared business logic.\n- **WikiLogger**: Logging is embedded throughout the class; logging structure changes would require alignment.\n- **Role, RoleMap**: Used in access control and group/user permissions logic.\n- **Namespace**: Integrated into topic lookup, validation, and translation routines.\n- **RecentChange**: Used in tracking recent edits and activity logs.\n- **Category**: Managed via query handler; part of topic metadata management.\n- **Watchlist**: Tied to user preferences and notifications.\n- **WikiFile, TopicVersion**: Core entities managed through file and versioning APIs.\n- **ParserUtil**: Involved in parsing and extracting links, categories, and other structured data from topics.\n- **Encryption**: Used in password handling and secure storage.\n- **LogItem**: Part of audit trail and system logging.\n- **WikiMessage**: Handles internationalization and error messages.\n- **WikiException, DataAccessException**: Core exception hierarchy used throughout the class.\n- **HSqlQueryHandler, DB2DataHandler, MSSqlDataHandler, HSqlDataHandler, DB2400DataHandler, MySqlDataHandler, OracleDataHandler, PostgresDataHandler**: All are database-specific handlers; co-change relationships suggest potential shared logic or inheritance patterns.\n- **Environment, Utilities**: General utilities used across modules.\n- **AdminServlet**: Co-change support; potentially involved in administrative data operations.\n- **ImageLinkTag**: Co-change support; possibly linked to media/file handling logic.\n- **ServletUtil**: Shared servlet utilities; often involved in request/response handling tied to data operations.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}