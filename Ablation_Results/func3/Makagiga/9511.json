{
    "time": 1749616764.1376395,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is HelpGenerator.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_7ff9a16420f44b318443f1",
                    "function": {
                        "arguments": "{\"entity\": \"HelpGenerator.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"AbstractMarkupBuilder\", \"1\", \"0.16666666666666666\"], [\"HelpAction\", \"2\", \"0.3333333333333333\"], [\"DocumentHelpAction\", \"1\", \"0.16666666666666666\"], [\"MSmallColorChooser\", \"1\", \"0.16666666666666666\"], [\"MToolBar\", \"1\", \"0.16666666666666666\"], [\"DayButton\", \"1\", \"0.16666666666666666\"], [\"MHTMLViewer\", \"1\", \"0.16666666666666666\"], [\"HelpContext\", \"1\", \"0.16666666666666666\"], [\"DefaultHelpSystem\", \"1\", \"0.16666666666666666\"], [\"PropertiesBar\", \"1\", \"0.16666666666666666\"], [\"MainWindow\", \"1\", \"0.16666666666666666\"], [\"ChartPanel\", \"1\", \"0.16666666666666666\"], [\"StatsPanel\", \"1\", \"0.16666666666666666\"], [\"MLinkButton\", \"1\", \"0.16666666666666666\"], [\"CategoryManager\", \"1\", \"0.16666666666666666\"], [\"UpdatePlugin\", \"1\", \"0.16666666666666666\"], [\"PrintPreviewPanel\", \"1\", \"0.16666666666666666\"], [\"MTip\", \"1\", \"0.16666666666666666\"], [\"TextEditor\", \"1\", \"0.16666666666666666\"], [\"StaticHandler\", \"1\", \"0.16666666666666666\"], [\"StaticKeyHandler\", \"1\", \"0.16666666666666666\"], [\"Projects\", \"1\", \"0.16666666666666666\"], [\"RunAction\", \"1\", \"0.16666666666666666\"], [\"SDK\", \"1\", \"0.16666666666666666\"], [\"Two\", \"1\", \"0.16666666666666666\"], [\"Three\", \"1\", \"0.16666666666666666\"], [\"TestTuple\", \"1\", \"0.16666666666666666\"]]"
        },
        {
            "content": "The `get_co_change_relationship` function returned a list of entities that are frequently changed together with `HelpGenerator.java`. The co-change relationships indicate potential ripple effects or synchronization needs when `HelpGenerator.java` is modified. Here\u2019s an interpretation of the results:\n\n- **Top Co-Changed Entities**:\n  - `HelpAction` has the highest confidence value (0.333), meaning it was modified alongside `HelpGenerator.java` in 2 out of 6 cases.\n  - Other entities like `AbstractMarkupBuilder`, `DocumentHelpAction`, and several UI components such as `MSmallColorChooser`, `MToolBar`, etc., also show co-change relationships but with lower confidence.\n\n### Next Steps for CIA:\n1. **Examine Direct Dependencies**: Use `get_call_graph` on `HelpGenerator.java` to identify which of these co-changed entities are directly referenced or used by `HelpGenerator.java`.\n2. **Check Coupling Types**: For high-confidence co-changed entities (e.g., `HelpAction`), use `get_coupling_dependencies` to determine the nature of dependencies between them and `HelpGenerator.java`.\n\nLet\u2019s start by analyzing the call graph of `HelpGenerator.java` to understand its direct usage of other entities.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_292b0fb2ebb64c3a88aef8",
                    "function": {
                        "arguments": "{\"entity\": \"HelpGenerator.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "\"HelpGenerator has been removed from the project due to project version iteration\""
        },
        {
            "content": "It appears that `HelpGenerator.java` has been removed or is no longer present in the current version of the project. This could explain why some analyses may not return expected results.\n\nTo proceed effectively with the Change Impact Analysis (CIA), we need to understand how this removal might have affected other entities. Since we already have a list of co-changed entities from earlier, let\u2019s focus on one of the high-confidence co-changed entities: `HelpAction`.\n\nWe should investigate the dependencies involving `HelpAction`, as it was frequently modified with `HelpGenerator.java`. We can explore its coupling relationships with other components.\n\n### Next Step:\nLet's use `get_coupling_dependencies` to examine the dependencies between `HelpAction` and other entities. We'll start by analyzing its relationship with `AbstractMarkupBuilder`, which appeared in the co-change list and may be relevant.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_377fe3d969c54040bc1dc9",
                    "function": {
                        "arguments": "{\"entity1\": \"HelpAction\", \"entity2\": \"AbstractMarkupBuilder\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"HelpAction has been removed from the project due to project version iteration\"]"
        },
        {
            "content": "It seems that `HelpAction` is also no longer present in the current version of the project, which complicates our attempt to analyze its dependencies directly.\n\nGiven that both `HelpGenerator.java` and `HelpAction` are removed, it\u2019s possible that:\n1. These entities were part of a deprecated or refactored module.\n2. Their functionality might have been replaced or merged into other components.\n\n### Revised Strategy:\nSince we're encountering removals, we should focus on entities that are still active in the project. From the co-change list, let's pick an entity that appears more recently maintained \u2014 such as `MHTMLViewer`, which could be a UI component still in use.\n\nWe'll start by retrieving the source code of `MHTMLViewer` using `get_origin_code`.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_7a7d18d54bcf4cea90fdc9",
                    "function": {
                        "arguments": "{\"entity\": \"MHTMLViewer\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"MHTMLViewer has been removed from the project due to project version iteration\""
        },
        {
            "content": "It seems that `MHTMLViewer` is also no longer in the project, which suggests a broader pattern \u2014 many entities associated with `HelpGenerator.java` may have been part of an older architecture or module that has since been removed or significantly refactored.\n\n### Strategic Shift:\nInstead of focusing on potentially obsolete files, we should identify **currently active entities** that still exist in the system and might have taken over or interacted with the functionality previously managed by `HelpGenerator.java`.\n\nLet\u2019s return to the co-change list. Among the entities listed, let's check if **`MainWindow`** is still present in the system, as it is likely a core UI component and may provide insight into how help-related functionality is now integrated.\n\n### Next Step:\nWe'll use `get_origin_code` to verify whether `MainWindow.java` is still present and active in the codebase.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_96adb9d3f82b41f38a47e8",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI.i18n;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.io.File;\\nimport java.io.IOException;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport java.util.concurrent.TimeUnit;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.GeneralSettings;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.StringList;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.Help;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.help.HelpGenerator;\\nimport org.makagiga.commons.help.HelpMenu;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.Input;\\nimport org.makagiga.commons.swing.MButton;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MDialog;\\nimport org.makagiga.commons.swing.MLabel;\\nimport org.makagiga.commons.swing.MLinkButton;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MMessage;\\nimport org.makagiga.commons.swing.MNotification;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MTimer;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorQuickFind;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.editors.todo.TodoEditorPlugin;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.FSException;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.ArmorSettings;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.Plugin;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.todo.Task;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentListButton;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tools.summary.TasksMenu;\\nimport org.makagiga.tools.summary.TasksSettings;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tpublic static final String ALTERNATE_LAYOUT_PROPERTY = \\\"org.makagiga.MainWindow.ALTERNATE_LAYOUT_PROPERTY\\\";\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate static boolean presentationActive;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentListButton documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate final MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\tprivate FindPreviousAction findPreviousAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\tprivate ZoomResetAction zoomResetAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"editor-tool-bar\\\", editorToolBar,\\n\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction()\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic static Plugin<?> getPresentationPlugin() {\\n\\t\\tPluginInfo info = PluginManager.getInstance().getByID(\\\"{e5508e4c-e070-4d4a-a2de-e9ef754a4656}\\\");\\n\\t\\treturn (info == null) ? null : info.getPlugin();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\tpublic static boolean isPresentationActive() { return presentationActive; }\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tTasksMenu.update(menu);\\n\\t\\tmenu.addSeparator(false);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().<MAction>getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(TodoEditorPlugin.createAddTaskMenu(Task.empty()));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(Config.getScreenKey(\\\"Splitter.Main.location\\\"), mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession(config);\\n\\t\\tconfig.sync();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean locked) {\\n\\t\\tsuper.setLocked(locked);\\n\\t\\tupdateTitle();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null) {\\n\\t\\t\\tTree tree = Tree.getInstance();\\n\\t\\t\\ttree.focusItem(selection);\\n\\t\\t}\\n\\t}\\n\\tpublic void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tif (restoreWindow)\\n\\t\\t\\trestore();\\n\\t\\tsetDesktopVisible(true);\\n\\t\\tDesktop desktop = getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\t@SuppressWarnings(\\\"deprecation\\\")\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void updateZoomControls(final EditorZoom editorZoom) {\\n\\t\\tif (zoomInAction != null)\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\tif (zoomOutAction != null)\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\tif ((zoomInAction != null) && (zoomOutAction != null) && (zoomResetAction != null))\\n\\t\\t\\tzoomResetAction.setEnabled(zoomInAction.isEnabled() || zoomOutAction.isEnabled());\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentListButton();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\teditorToolBar = new MToolBar();\\n\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\tMWhatsThis.set(editorToolBar, i18n(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, (source, command, args) -> {\\n\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t} );\\n\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, (source, command, args) -> {\\n\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t} );\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(e -> updateState());\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tUI.systemTray.addChangeListener((e, visible) -> {\\n\\t\\t\\tif (visible)\\n\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t} );\\n\\t\\tif (autostart && !UI.systemTray.booleanValue()) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptExecutor.showErrorNotification(userScriptError, \\\"scripts/user.js\\\");\\n\\t\\tPlugin<?> presentation = getPresentationPlugin();\\n\\t\\tif (presentation != null) {\\n\\t\\t\\tpresentation.addPropertyChangeListener(e -> {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\\"active\\\".equals(e.getPropertyName()) &&\\n\\t\\t\\t\\t\\t(e.getNewValue() instanceof Boolean)\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tpresentationActive = Boolean.TRUE.equals(e.getNewValue());\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - Main.startTime) >= 20)\\n\\t\\t\\tsetAutoRequestFocus(false);\\n\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tsetAutoRequestFocus(true); \\t\\t\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, (source, command, args) -> {\\n\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t}\\n\\t\\t\\treturn null;\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL,\\n\\t\\t\\t(source, command, args) -> {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI)) {\\n\\t\\t\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\t\\t\\tpublic void updateToolBar(final String type, final MToolBar toolBar) {\\n\\t\\t\\t\\t\\t\\t\\t\\tsuper.updateToolBar(type, toolBar);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (type.equals(EDITOR_TOOL_BAR)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tWikiPanel wikiPanel = (WikiPanel)this.getCore();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twikiPanel.addToolBarComponents(toolBar);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (UI.systemTray.booleanValue()) {\\n\\t\\t\\tMTimer.seconds(2, timer -> {\\n\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\t\\t\\tsetVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn MTimer.STOP;\\n\\t\\t\\t} ).start();\\n\\t\\t}\\n\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(i18n(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", i18n(\\\"Document screenshot\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(i18n(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(i18n(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, i18n(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(i18n(\\\"&File\\\"));\\n\\t\\tMAction saveAction = new MAction(\\n\\t\\t\\tMActionInfo.SAVE.withText(MActionInfo.SAVE + \\\" (\\\" + i18n(\\\"autosave enabled\\\") + ')'),\\n\\t\\t\\tself -> saveSession(Tabs.NORMAL_SAVE)\\n\\t\\t);\\n\\t\\tfileMenu.add(saveAction);\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(i18n(\\\"Export\\\"));\\n\\t\\texportMenu.setAutoRemoveAll(true);\\n\\t\\tUI.setHTMLHelp(exportMenu, i18n(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.onSelect(menu -> initExportMenu());\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tfileMenu.addCheckBox(new MApplication.ToggleOfflineAction());\\n\\t\\tMApplication.offline.addChangeListener((e, offline) -> updateTitle());\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(i18n(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get())\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(i18n(\\\"&Edit\\\"));\\n\\t\\teditMenu.onSelect(self -> updateEditMenu(Tabs.getInstance().getSelectedTab()));\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(i18n(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(i18n(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tviewMenu.add(MNotification.createMenu());\\n\\t\\tviewMenu.add(toggleDesktopAction);\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(i18n(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\tif (Main.isTodoPluginEnabled())\\n\\t\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\thelpMenu = new HelpMenu() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInit() {\\n\\t\\t\\t\\tthis.add(helpAction);\\n\\t\\t\\t\\tthis.addSeparator();\\n\\t\\t\\t\\tPluginManager.updateMenu(plugins, this, PluginMenu.HELP_MENU, true);\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInitTopics(final MMenu topics) {\\n\\t\\t\\t\\ttopics.addSeparator(i18n(\\\"How-To\\\"));\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(i18n(\\\"Change the default web browser\\\"), \\\"ui/internet\\\", new StringList(i18n(\\\"Main Menu\\\"), i18n(\\\"Tools\\\"), i18n(\\\"Settings\\\"), i18n(\\\"General\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tnew GeneralSettings().exec(this.getSourceWindow());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} )\\n\\t\\t\\t\\t\\t.setEnabled(!OS.isWindows() && Kiosk.actionSettings.get());\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(i18n(\\\"Disable unused plugins\\\"), \\\"ui/plugin\\\", new StringList(i18n(\\\"Main Menu\\\"), i18n(\\\"Tools\\\"), i18n(\\\"Plugins\\\"), i18n(\\\"Tool Bar\\\"), i18n(\\\"Disable\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\ttopics.addSeparator(\\\"FAQ\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\ttopics.add(new MAction(\\\"Where are my files and data?\\\", \\\"ui/folder\\\", action -> {\\n\\t\\t\\t\\t\\tMDialog dialog = new MDialog(action.getSourceWindow(), action.getName(), action.getIcon(), MDialog.SIMPLE_DIALOG | MDialog.HEADER_BAR);\\n\\t\\t\\t\\t\\tdialog.getMainPanel().setGroupLayout(true)\\n\\t\\t\\t\\t\\t\\t.beginRows();\\n\\t\\t\\t\\t\\tdialog.getMainPanel().getGroupLayout()\\n\\t\\t\\t\\t\\t\\t.addHeader(i18n(\\\"Folders:\\\"))\\n\\t\\t\\t\\t\\t\\t.addComponent(new MLinkButton(FS.getConfigPath().toUri(), i18n(\\\"{0}: Settings and Data\\\", MApplication.getFullName())));\\n\\t\\t\\t\\t\\tif (!OS.isWebStart()) {\\n\\t\\t\\t\\t\\t\\tdialog.getMainPanel().getGroupLayout()\\n\\t\\t\\t\\t\\t\\t\\t.addComponent(new MLinkButton(FS.getBasePath().toUri(), i18n(\\\"Install Directory\\\")));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdialog.getMainPanel().getGroupLayout()\\n\\t\\t\\t\\t\\t\\t.addHeader(i18n(\\\"Tree\\\"))\\n\\t\\t\\t\\t\\t\\t.addComponent(new MLabel(\\\"Context menu -> \\\" + MActionInfo.BROWSE))\\n\\t\\t\\t\\t\\t\\t.addHeader(i18n(\\\"Tabs\\\"))\\n\\t\\t\\t\\t\\t\\t.addComponent(new MLabel(\\\"Context menu -> \\\" + i18n(\\\"Copy File Path\\\")))\\n\\t\\t\\t\\t\\t.end();\\n\\t\\t\\t\\t\\tdialog.packFixed();\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t} ));\\n\\t\\t\\t\\ttopics.add(new MAction(\\\"What means \\\\\\\"Makagiga\\\\\\\"?\\\", MApplication.getSmallIcon(),\\n\\t\\t\\t\\t\\taction -> MMessage.info(action.getSourceWindow(), \\\"\\\\\\\"Makagiga\\\\\\\" is a kind of cake made with caramel, honey, poppy, nuts... ;-)\\\")\\n\\t\\t\\t\\t));\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tif (!UI.isQuaqua()) {\\n\\t\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\t\\tmenuBar.add(documentList);\\n\\t\\t}\\n\\t\\tif (Args.isSet(\\\"no-security-manager\\\")) {\\n\\t\\t\\tMLabel smWarning = new MLabel();\\n\\t\\t\\tsmWarning.setIcon(MIcon.small(\\\"ui/security-low\\\"));\\n\\t\\t\\tsmWarning.setToolTipText(i18n(\\\"No Security Manager\\\"));\\n\\t\\t\\tmenuBar.add(smWarning);\\n\\t\\t}\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void resetEditorZoom() {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\ttry {\\n\\t\\t\\t\\teditorZoom.resetZoom();\\n\\t\\t\\t\\tupdateZoomControls(editorZoom);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (AbstractMethodError error) {\\n\\t\\t\\t\\tTK.beep();\\n\\t\\t\\t\\tMLogger.developerException(error);\\n\\t\\t\\t\\tMLogger.error(\\\"core\\\", \\\"Zoom reset not supported\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(Config.getScreenKey(\\\"Splitter.Main.location\\\"), 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(config, 0);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(editMenu, PluginMenu.EDIT_MENU_TAB, false);\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findPreviousAction == null)\\n\\t\\t\\t\\t\\tfindPreviousAction = new FindPreviousAction();\\n\\t\\t\\t\\tboolean findPreviousSupported = (searchOptions & EditorSearch.FIND_PREVIOUS) != 0;\\n\\t\\t\\t\\tfindPreviousAction.setEnabled(isSearch && findPreviousSupported);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addSeparator(false);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t\\teditMenu.add(findPreviousAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tif (findPreviousAction != null)\\n\\t\\t\\t\\t\\tfindPreviousAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teditMenu.addNoItemsInfo(editMenu.isEmpty());\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\tPluginMenu editorPluginMenu = (editor instanceof PluginMenu) ? (PluginMenu)editor : null;\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tJComponent tabTitle = viewMenu.addSeparator(i18n(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\tPluginManager.updateMenu(viewMenu, PluginMenu.VIEW_MENU_TAB, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t\\tif (zoomResetAction == null)\\n\\t\\t\\t\\t\\t\\tzoomResetAction = new ZoomResetAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomResetAction);\\n\\t\\t\\t\\t\\tupdateZoomControls(editorZoom);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorPluginMenu != null)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu(editorPluginMenu, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editorPluginMenu != null)\\n\\t\\t\\t\\t\\teditorPluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorPluginMenu != null)\\n\\t\\t\\t\\t\\teditorPluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR_END, editorToolBar);\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR_END, false);\\n\\t\\t\\t\\thelpAction.updateProperties(editor);\\n\\t\\t\\t\\tif (editor instanceof DocumentHelp) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\teditorToolBar.add(helpAction, MToolBar.NO_TEXT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\teditorToolBar.addButton(new MButton(zoomInAction), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\teditorToolBar.addButton(new MButton(zoomOutAction), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!isPresentationActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t\\tEditorQuickFind.getInstance().updateComponents();\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tif (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t\\t\\tpb.setVisible(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic void updateTitle() { \\t\\tif (isLocked()) {\\n\\t\\t\\t\\t\\t\\tupdateTitle(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tupdateZoomControls(editorZoom);\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetAutoRemoveAll(true);\\n\\t\\t\\tsetToolTipText(UI.makeHTML(i18n(\\\"Tip: You can use drag and drop to import/export files.\\\")));\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onSelect() {\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(i18n(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\taddSeparator(false);\\n\\t\\t\\t\\t\\tadd(new ImportFolderAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(i18n(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tMainWindow.getInstance(),\\n\\t\\t\\t\\tMSettingsDialog.STANDARD_DIALOG | MSettingsDialog.APPLY_BUTTON,\\n\\t\\t\\t\\t\\\"configure\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void apply() {\\n\\t\\t\\t\\t\\tsuper.apply();\\n\\t\\t\\t\\t\\tMainWindow.getInstance().repaint();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tif (Main.isTodoPluginEnabled())\\n\\t\\t\\t\\tdialog.addPage(new TasksSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.addAdvancedPage(ArmorSettings.class);\\n\\t\\t\\tdialog.exec();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !MainWindow.isPresentationActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(i18n(\\\"Show/Hide Sidebar\\\"),\\n\\t\\t\\t\\taction -> mainSplitPane.toggleSidebar()\\n\\t\\t\\t));\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(i18n(\\\"Show Tree\\\"),\\n\\t\\t\\t\\taction -> Sidebar.getInstance().goTo(Sidebar.Tab.TREE)\\n\\t\\t\\t));\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getPopupAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindPreviousAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findPrevious();\\n\\t\\t}\\n\\t\\tprivate FindPreviousAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_PREVIOUS.noIcon());\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Search for the previous matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif ((context != null) && Help.show(tab, context))\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tMainWindow window = MainWindow.getInstance();\\n\\t\\t\\tHelpGenerator help = new HelpGenerator();\\n\\t\\t\\thelp.setMenuBar(window.getMMenuBar());\\n\\t\\t\\thelp.setOutputDirectory(FS.newConfigPath(\\\"help\\\", FS.CREATE_DIR));\\n\\t\\t\\thelp.setTitle(i18n(\\\"Help\\\"));\\n\\t\\t\\t\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"bookmarks-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"export-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"import-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"tags-menu\\\"));\\n\\t\\t\\thelp.addLink(i18n(\\\"Documentation\\\"), URI.create(\\\"http:\\t\\t\\thelp.addLink(\\\"Makagiga Project\\\", URI.create(\\\"http:\\t\\t\\t\\n\\t\\t\\thelp.addCommonShortcuts();\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Image Viewer\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Fit to Window\\\"), VK_F);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Full Screen\\\"), i18n(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"RSS Feeds\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Next New\\\"), VK_J);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Previous New\\\"), VK_K);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Open in a new tab (article/notification window)\\\"), i18n(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Todo List/Table\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Edit Cell\\\"), VK_ENTER);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Edit Cell\\\"), VK_F2);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Focus header\\\"), VK_F8);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move to the previous panel\\\"), VK_TAB, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Widgets\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Close active widget\\\"), VK_F4, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Close active widget\\\"), i18n(\\\"Right Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Activate next widget\\\"), VK_F6, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Tabs\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Close\\\"), i18n(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move between the Tree and Tabs\\\"), VK_F6);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move left\\\"), VK_LEFT, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move right\\\"), VK_RIGHT, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(MActionInfo.RENAME.getDialogTitle(), i18n(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Zoom In\\\") + '/' + i18n(\\\"Zoom Out\\\"), getKeyModifiersText(CTRL_MASK) + '+' + i18n(\\\"Mouse Wheel\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"System Tray\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Quick Paste\\\"), i18n(\\\"Middle Button Click\\\"));\\n\\t\\t\\ttry {\\n\\t\\t\\t\\thelp.generate();\\n\\t\\t\\t\\t\\t\\t\\t\\tWebBrowserTab browserTab = WebBrowserTab.getInstance();\\n\\t\\t\\t\\tbrowserTab.getWebBrowser()\\n\\t\\t\\t\\t\\t.setDocumentLocation(help.getIndexFile().toUri());\\n\\t\\t\\t}\\n\\t\\t\\tcatch (IOException exception) {\\n\\t\\t\\t\\tshowErrorMessage(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\t\\tsetName(i18n(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsetName(MActionInfo.HELP.getText());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ImportFolderAction extends MAction {\\n\\t\\tpublic ImportFolderAction() {\\n\\t\\t\\tsuper(i18n(\\\"Folder...\\\"), \\\"ui/folder\\\");\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tFile from = new Input.GetDirectoryBuilder()\\n\\t\\t\\t\\t.title(i18n(\\\"Import Folder\\\"))\\n\\t\\t\\t\\t.configKey(\\\"import-folder\\\")\\n\\t\\t\\t\\t.ok(MActionInfo.IMPORT)\\n\\t\\t\\t.exec(this);\\n\\t\\t\\tif (from == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo toFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tImportExport.importFolder(getSourceWindow(), new MArrayList<>(from.toPath()), toFolder);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FSException | IOException exception) {\\n\\t\\t\\t\\tshowErrorMessage(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(i18n(\\\"Location Bar\\\"));\\n\\t\\t\\tif (UI.isQuaqua())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.getInstance();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(i18n(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tpropertiesBar.setVisible(false);\\n\\t\\t\\t}\\n\\t\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", yes);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(i18n(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(i18n(\\\"Toggle: {0}\\\", i18n(\\\"Properties\\\")), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(i18n(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t\\tif (Sidebar.getInstance().isTreeSelected())\\n\\t\\t\\t\\tTree.getInstance().requestFocus();\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(i18n(\\\"Tasks\\\"), VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomResetAction extends MApplication.ZoomResetAction {\\n\\t\\tpublic ZoomResetAction() { }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().resetEditorZoom();\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "content": "The source code of `MainWindow.java` reveals several important insights into how the functionality related to help and user guidance is currently implemented in the system. Here are key observations relevant to our CIA task:\n\n### Key Observations:\n1. **Help-Related Components Still Active**:\n   - The class imports and uses `HelpMenu`, `HelpContext`, and `HelpGenerator`.\n   - A `HelpAction` class is defined, which extends `MAction`. This action generates help content dynamically using `HelpGenerator` when triggered.\n\n2. **Usage of HelpGenerator**:\n   - Despite being removed from the current project version, `HelpGenerator` is still referenced in `MainWindow`. The `HelpAction` creates an instance of `HelpGenerator`, sets up its configuration (like output directory and title), and generates help documentation dynamically.\n   - It seems that although `HelpGenerator.java` was removed, some of its functionalities might have been refactored or replaced by inline logic inside `HelpAction`.\n\n3. **Dynamic Help Generation**:\n   - The `HelpAction` class builds a dynamic help system with links, shortcuts, and context-sensitive help. It even generates HTML-based help content and opens it in a browser tab (`WebBrowserTab`).\n\n4. **Integration with UI Elements**:\n   - The `helpAction` is linked to the application\u2019s menu bar under the \u201cHelp\u201d menu.\n   - The `updateProperties` method in `HelpAction` ensures that context-sensitive help is displayed based on the currently selected editor tab.\n\n### Implications for Change Impact Analysis:\n- Since `HelpGenerator.java` has been removed but is still referenced in `MainWindow`, there may be residual dependencies or outdated references in the codebase.\n- Any change to the help system, especially within `MainWindow`'s `HelpAction`, could potentially impact other parts of the UI that rely on context-sensitive help or shortcut documentation.\n- If `HelpGenerator`'s functionality was not fully replaced, there might be gaps in the help system that could require synchronization across multiple components.\n\n### Next Steps:\n1. To ensure completeness, we should check if `HelpAction` (still active in `MainWindow`) has any coupling dependencies with other entities.\n2. Investigate whether there are co-change relationships involving `MainWindow` itself, as it plays a central role in the application's UI and help system.\n\nLet\u2019s start by checking the coupling dependencies of `MainWindow` with other entities.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_a0564a9ea780427dac2e60",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow\", \"entity2\": \"HelpAction\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"HelpAction has been removed from the project due to project version iteration\"]"
        },
        {
            "content": "It appears that while `HelpAction` is still present in the source code of `MainWindow.java`, it has been removed or refactored in the current version of the project. This suggests a **partial refactoring** where:\n- The logic previously handled by `HelpAction` may have been moved elsewhere.\n- Residual references to `HelpAction` might still exist in `MainWindow`, potentially leading to inconsistencies or runtime errors if not fully replaced.\n\n### Updated Strategy:\nSince we're dealing with an evolving system where some entities are removed or refactored, our focus should shift to:\n1. **Identifying Active Help Components**: Determine which components currently handle help functionality (e.g., `HelpMenu`, `WebBrowserTab`, etc.).\n2. **Checking for Synchronization Needs**: Investigate co-change relationships and coupling dependencies involving `MainWindow` to identify which entities are most affected by changes to the UI and help system.\n\n### Next Step:\nLet\u2019s retrieve the **call graph** of `MainWindow` to understand which entities it directly uses\u2014especially those related to help and documentation features.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_29608a664a8c4e3b87deb5",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"MLinkAction\", \"MIcon\", \"MLineBorder\", \"MMessage\", \"MMenu\", \"PluginSettingsTab\", \"ScriptExecutor\", \"GeneralSettings\", \"Input\", \"WTFError\", \"MSystemTray\", \"DocumentListButton\", \"MArrayList\", \"MCellTip\", \"MSettingsDialog\", \"MToolBar\", \"DesktopTab\", \"NavigationUtils\", \"PrintDialog\", \"FSException\", \"EditorZoom\", \"Help\", \"EditorPrint\", \"MColor\", \"TasksMenu\", \"BookmarksMenu\", \"FS\", \"Mods\", \"MLogger\", \"ImportExport\", \"Mod\", \"MSplitPane\", \"MetaInfo\", \"EditorDesigner\", \"QuickOpenDialog\", \"ScriptYourself\", \"Flags\", \"PropertiesPanel\", \"PropertiesBar\", \"AbstractFS\", \"DesignPattern\", \"LocationBar\", \"ProxySettings\", \"AnnotationBar\", \"WebBrowserTab\", \"MMenuBar\", \"Desktop\", \"PluginSettings\", \"MComponent\", \"MActionInfo\", \"Kiosk\", \"MouseGestures\", \"TasksSettings\", \"Console\", \"MainView\", \"PluginMenu\", \"LookAndFeelSettings\", \"EditorSearch\", \"MPanel\", \"MNotification\", \"Designer\", \"Globals\", \"TagsMenu\", \"Editor\", \"DocumentHelp\", \"EditorNavigation\", \"MSmallButton\", \"PluginType\", \"EditorPlugin\", \"Autosave\", \"Plugin\", \"PluginInfo\", \"SearchBar\", \"UI\", \"EditorQuickFind\", \"CalendarTab\", \"MMainWindow\", \"Args\", \"MMouseAdapter\", \"TreeFS\", \"Widget\", \"EditorExport\", \"WikiPanel\", \"MAboutDialog\", \"OS\", \"SessionManager\", \"SummaryData\", \"Tracker\", \"TreePanel\", \"Config\", \"MAction\", \"StringList\", \"TK\", \"HelpContext\", \"Property\", \"MMenuAdapter\", \"MApplication\", \"PluginManager\", \"ConsoleTab\", \"Tree\"]"
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `HelpGenerator.java`\n\nChange set: [MainWindow, HelpContext, HelpMenu, WebBrowserTab, DocumentHelp, EditorZoom, PropertiesBar, LocationBar, Sidebar, MToolBar, MMenuBar, PluginSettingsTab, GeneralSettings, ScriptExecutor, FS, EditorDesigner, EditorSearch, EditorNavigation, EditorExport, EditorPrint, Editor, MLinkButton, MActionInfo, MApplication, PluginManager, PluginInfo, PluginType, Plugin, TreePanel, Tree, MetaInfo, Desktop, DesktopTab, MMainWindow, MPanel, MComponent, MLogger, Mods, Config, UI, TK, StringList, Globals, TagsMenu, TasksMenu, BookmarksMenu, Console, Input, WTFError, MSystemTray, PrintDialog]\n\nDetails:\n- **MainWindow**: Central UI component that directly uses `HelpGenerator` and integrates help functionality.\n- **HelpContext**: Used by `MainWindow` to provide context-sensitive help for editors.\n- **HelpMenu**: Integrated into the main menu bar; manages application-wide help topics.\n- **WebBrowserTab**: Displays dynamically generated HTML help content.\n- **DocumentHelp**: Interface implemented by editors to provide document-specific help.\n- **EditorZoom**: Integrated with help-related UI controls for zooming within documentation views.\n- **PropertiesBar**: Linked to context-sensitive help and editor state changes.\n- **LocationBar**: Involved in navigation and potentially linked to help actions.\n- **Sidebar**: Tied to help toggles like task and designer views.\n- **MToolBar / MMenuBar**: Directly use `HelpAction` and integrate help components into UI.\n- **PluginSettingsTab, GeneralSettings**: Potentially referenced by help system for configuration guidance.\n- **ScriptExecutor**: May be used to execute scripts related to dynamic help generation.\n- **FS**: Filesystem access needed for reading/writing help resources.\n- **EditorDesigner, EditorSearch, EditorNavigation, EditorExport, EditorPrint**: Editors that may contribute to or consume help information.\n- **Editor, MLinkButton, MActionInfo, MApplication**: Core UI and action classes involved in help interactions.\n- **PluginManager, PluginInfo, PluginType, Plugin**: Help menu items are dynamically updated based on plugins.\n- **TreePanel, Tree**: Navigation tree might trigger help context updates.\n- **MetaInfo, Desktop, DesktopTab**: Data and view components that can influence help context.\n- **MMainWindow, MPanel, MComponent**: UI base classes used throughout help-related components.\n- **MLogger, Mods, Config, UI, TK, StringList, Globals**: Utility and framework classes supporting help logic.\n- **TagsMenu, TasksMenu, BookmarksMenu, Console**: UI menus/components possibly referenced from help.\n- **Input, WTFError, MSystemTray, PrintDialog**: UI/dialog utilities used alongside help actions.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m8"
                ],
                "response_message": "m14"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m8",
                    "m14",
                    "m15",
                    "m16"
                ],
                "response_message": "m17"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is HelpGenerator.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_7ff9a16420f44b318443f1",
                        "function": {
                            "arguments": "{\"entity\": \"HelpGenerator.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"AbstractMarkupBuilder\", \"1\", \"0.16666666666666666\"], [\"HelpAction\", \"2\", \"0.3333333333333333\"], [\"DocumentHelpAction\", \"1\", \"0.16666666666666666\"], [\"MSmallColorChooser\", \"1\", \"0.16666666666666666\"], [\"MToolBar\", \"1\", \"0.16666666666666666\"], [\"DayButton\", \"1\", \"0.16666666666666666\"], [\"MHTMLViewer\", \"1\", \"0.16666666666666666\"], [\"HelpContext\", \"1\", \"0.16666666666666666\"], [\"DefaultHelpSystem\", \"1\", \"0.16666666666666666\"], [\"PropertiesBar\", \"1\", \"0.16666666666666666\"], [\"MainWindow\", \"1\", \"0.16666666666666666\"], [\"ChartPanel\", \"1\", \"0.16666666666666666\"], [\"StatsPanel\", \"1\", \"0.16666666666666666\"], [\"MLinkButton\", \"1\", \"0.16666666666666666\"], [\"CategoryManager\", \"1\", \"0.16666666666666666\"], [\"UpdatePlugin\", \"1\", \"0.16666666666666666\"], [\"PrintPreviewPanel\", \"1\", \"0.16666666666666666\"], [\"MTip\", \"1\", \"0.16666666666666666\"], [\"TextEditor\", \"1\", \"0.16666666666666666\"], [\"StaticHandler\", \"1\", \"0.16666666666666666\"], [\"StaticKeyHandler\", \"1\", \"0.16666666666666666\"], [\"Projects\", \"1\", \"0.16666666666666666\"], [\"RunAction\", \"1\", \"0.16666666666666666\"], [\"SDK\", \"1\", \"0.16666666666666666\"], [\"Two\", \"1\", \"0.16666666666666666\"], [\"Three\", \"1\", \"0.16666666666666666\"], [\"TestTuple\", \"1\", \"0.16666666666666666\"]]"
            },
            "m5": {
                "content": "The `get_co_change_relationship` function returned a list of entities that are frequently changed together with `HelpGenerator.java`. The co-change relationships indicate potential ripple effects or synchronization needs when `HelpGenerator.java` is modified. Here\u2019s an interpretation of the results:\n\n- **Top Co-Changed Entities**:\n  - `HelpAction` has the highest confidence value (0.333), meaning it was modified alongside `HelpGenerator.java` in 2 out of 6 cases.\n  - Other entities like `AbstractMarkupBuilder`, `DocumentHelpAction`, and several UI components such as `MSmallColorChooser`, `MToolBar`, etc., also show co-change relationships but with lower confidence.\n\n### Next Steps for CIA:\n1. **Examine Direct Dependencies**: Use `get_call_graph` on `HelpGenerator.java` to identify which of these co-changed entities are directly referenced or used by `HelpGenerator.java`.\n2. **Check Coupling Types**: For high-confidence co-changed entities (e.g., `HelpAction`), use `get_coupling_dependencies` to determine the nature of dependencies between them and `HelpGenerator.java`.\n\nLet\u2019s start by analyzing the call graph of `HelpGenerator.java` to understand its direct usage of other entities.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_292b0fb2ebb64c3a88aef8",
                        "function": {
                            "arguments": "{\"entity\": \"HelpGenerator.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "\"HelpGenerator has been removed from the project due to project version iteration\""
            },
            "m7": {
                "content": "It appears that `HelpGenerator.java` has been removed or is no longer present in the current version of the project. This could explain why some analyses may not return expected results.\n\nTo proceed effectively with the Change Impact Analysis (CIA), we need to understand how this removal might have affected other entities. Since we already have a list of co-changed entities from earlier, let\u2019s focus on one of the high-confidence co-changed entities: `HelpAction`.\n\nWe should investigate the dependencies involving `HelpAction`, as it was frequently modified with `HelpGenerator.java`. We can explore its coupling relationships with other components.\n\n### Next Step:\nLet's use `get_coupling_dependencies` to examine the dependencies between `HelpAction` and other entities. We'll start by analyzing its relationship with `AbstractMarkupBuilder`, which appeared in the co-change list and may be relevant.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_377fe3d969c54040bc1dc9",
                        "function": {
                            "arguments": "{\"entity1\": \"HelpAction\", \"entity2\": \"AbstractMarkupBuilder\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"HelpAction has been removed from the project due to project version iteration\"]"
            },
            "m9": {
                "content": "It seems that `HelpAction` is also no longer present in the current version of the project, which complicates our attempt to analyze its dependencies directly.\n\nGiven that both `HelpGenerator.java` and `HelpAction` are removed, it\u2019s possible that:\n1. These entities were part of a deprecated or refactored module.\n2. Their functionality might have been replaced or merged into other components.\n\n### Revised Strategy:\nSince we're encountering removals, we should focus on entities that are still active in the project. From the co-change list, let's pick an entity that appears more recently maintained \u2014 such as `MHTMLViewer`, which could be a UI component still in use.\n\nWe'll start by retrieving the source code of `MHTMLViewer` using `get_origin_code`.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_7a7d18d54bcf4cea90fdc9",
                        "function": {
                            "arguments": "{\"entity\": \"MHTMLViewer\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"MHTMLViewer has been removed from the project due to project version iteration\""
            },
            "m11": {
                "content": "It seems that `MHTMLViewer` is also no longer in the project, which suggests a broader pattern \u2014 many entities associated with `HelpGenerator.java` may have been part of an older architecture or module that has since been removed or significantly refactored.\n\n### Strategic Shift:\nInstead of focusing on potentially obsolete files, we should identify **currently active entities** that still exist in the system and might have taken over or interacted with the functionality previously managed by `HelpGenerator.java`.\n\nLet\u2019s return to the co-change list. Among the entities listed, let's check if **`MainWindow`** is still present in the system, as it is likely a core UI component and may provide insight into how help-related functionality is now integrated.\n\n### Next Step:\nWe'll use `get_origin_code` to verify whether `MainWindow.java` is still present and active in the codebase.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_96adb9d3f82b41f38a47e8",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI.i18n;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.io.File;\\nimport java.io.IOException;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport java.util.concurrent.TimeUnit;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.GeneralSettings;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.StringList;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.Help;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.help.HelpGenerator;\\nimport org.makagiga.commons.help.HelpMenu;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.Input;\\nimport org.makagiga.commons.swing.MButton;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MDialog;\\nimport org.makagiga.commons.swing.MLabel;\\nimport org.makagiga.commons.swing.MLinkButton;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MMessage;\\nimport org.makagiga.commons.swing.MNotification;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MTimer;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorQuickFind;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.editors.todo.TodoEditorPlugin;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.FSException;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.ArmorSettings;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.Plugin;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.todo.Task;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentListButton;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tools.summary.TasksMenu;\\nimport org.makagiga.tools.summary.TasksSettings;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tpublic static final String ALTERNATE_LAYOUT_PROPERTY = \\\"org.makagiga.MainWindow.ALTERNATE_LAYOUT_PROPERTY\\\";\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate static boolean presentationActive;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentListButton documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate final MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\tprivate FindPreviousAction findPreviousAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\tprivate ZoomResetAction zoomResetAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"editor-tool-bar\\\", editorToolBar,\\n\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction()\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic static Plugin<?> getPresentationPlugin() {\\n\\t\\tPluginInfo info = PluginManager.getInstance().getByID(\\\"{e5508e4c-e070-4d4a-a2de-e9ef754a4656}\\\");\\n\\t\\treturn (info == null) ? null : info.getPlugin();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\tpublic static boolean isPresentationActive() { return presentationActive; }\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tTasksMenu.update(menu);\\n\\t\\tmenu.addSeparator(false);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().<MAction>getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(TodoEditorPlugin.createAddTaskMenu(Task.empty()));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(Config.getScreenKey(\\\"Splitter.Main.location\\\"), mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession(config);\\n\\t\\tconfig.sync();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean locked) {\\n\\t\\tsuper.setLocked(locked);\\n\\t\\tupdateTitle();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null) {\\n\\t\\t\\tTree tree = Tree.getInstance();\\n\\t\\t\\ttree.focusItem(selection);\\n\\t\\t}\\n\\t}\\n\\tpublic void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tif (restoreWindow)\\n\\t\\t\\trestore();\\n\\t\\tsetDesktopVisible(true);\\n\\t\\tDesktop desktop = getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\t@SuppressWarnings(\\\"deprecation\\\")\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void updateZoomControls(final EditorZoom editorZoom) {\\n\\t\\tif (zoomInAction != null)\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\tif (zoomOutAction != null)\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\tif ((zoomInAction != null) && (zoomOutAction != null) && (zoomResetAction != null))\\n\\t\\t\\tzoomResetAction.setEnabled(zoomInAction.isEnabled() || zoomOutAction.isEnabled());\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentListButton();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\teditorToolBar = new MToolBar();\\n\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\tMWhatsThis.set(editorToolBar, i18n(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, (source, command, args) -> {\\n\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t} );\\n\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, (source, command, args) -> {\\n\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t} );\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(e -> updateState());\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tUI.systemTray.addChangeListener((e, visible) -> {\\n\\t\\t\\tif (visible)\\n\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t} );\\n\\t\\tif (autostart && !UI.systemTray.booleanValue()) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptExecutor.showErrorNotification(userScriptError, \\\"scripts/user.js\\\");\\n\\t\\tPlugin<?> presentation = getPresentationPlugin();\\n\\t\\tif (presentation != null) {\\n\\t\\t\\tpresentation.addPropertyChangeListener(e -> {\\n\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\\"active\\\".equals(e.getPropertyName()) &&\\n\\t\\t\\t\\t\\t(e.getNewValue() instanceof Boolean)\\n\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\tpresentationActive = Boolean.TRUE.equals(e.getNewValue());\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis() - Main.startTime) >= 20)\\n\\t\\t\\tsetAutoRequestFocus(false);\\n\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tsetAutoRequestFocus(true); \\t\\t\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, (source, command, args) -> {\\n\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t}\\n\\t\\t\\treturn null;\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL,\\n\\t\\t\\t(source, command, args) -> {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI)) {\\n\\t\\t\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\t\\t\\tpublic void updateToolBar(final String type, final MToolBar toolBar) {\\n\\t\\t\\t\\t\\t\\t\\t\\tsuper.updateToolBar(type, toolBar);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (type.equals(EDITOR_TOOL_BAR)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tWikiPanel wikiPanel = (WikiPanel)this.getCore();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\twikiPanel.addToolBarComponents(toolBar);\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (UI.systemTray.booleanValue()) {\\n\\t\\t\\tMTimer.seconds(2, timer -> {\\n\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\t\\t\\tsetVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn MTimer.STOP;\\n\\t\\t\\t} ).start();\\n\\t\\t}\\n\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(i18n(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", i18n(\\\"Document screenshot\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(i18n(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(i18n(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, i18n(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(i18n(\\\"&File\\\"));\\n\\t\\tMAction saveAction = new MAction(\\n\\t\\t\\tMActionInfo.SAVE.withText(MActionInfo.SAVE + \\\" (\\\" + i18n(\\\"autosave enabled\\\") + ')'),\\n\\t\\t\\tself -> saveSession(Tabs.NORMAL_SAVE)\\n\\t\\t);\\n\\t\\tfileMenu.add(saveAction);\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(i18n(\\\"Export\\\"));\\n\\t\\texportMenu.setAutoRemoveAll(true);\\n\\t\\tUI.setHTMLHelp(exportMenu, i18n(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.onSelect(menu -> initExportMenu());\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tfileMenu.addCheckBox(new MApplication.ToggleOfflineAction());\\n\\t\\tMApplication.offline.addChangeListener((e, offline) -> updateTitle());\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(i18n(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get())\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(i18n(\\\"&Edit\\\"));\\n\\t\\teditMenu.onSelect(self -> updateEditMenu(Tabs.getInstance().getSelectedTab()));\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(i18n(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(i18n(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tviewMenu.add(MNotification.createMenu());\\n\\t\\tviewMenu.add(toggleDesktopAction);\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(i18n(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\tif (Main.isTodoPluginEnabled())\\n\\t\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\thelpMenu = new HelpMenu() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInit() {\\n\\t\\t\\t\\tthis.add(helpAction);\\n\\t\\t\\t\\tthis.addSeparator();\\n\\t\\t\\t\\tPluginManager.updateMenu(plugins, this, PluginMenu.HELP_MENU, true);\\n\\t\\t\\t}\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onInitTopics(final MMenu topics) {\\n\\t\\t\\t\\ttopics.addSeparator(i18n(\\\"How-To\\\"));\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(i18n(\\\"Change the default web browser\\\"), \\\"ui/internet\\\", new StringList(i18n(\\\"Main Menu\\\"), i18n(\\\"Tools\\\"), i18n(\\\"Settings\\\"), i18n(\\\"General\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tnew GeneralSettings().exec(this.getSourceWindow());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} )\\n\\t\\t\\t\\t\\t.setEnabled(!OS.isWindows() && Kiosk.actionSettings.get());\\n\\t\\t\\t\\ttopics.add(new HelpMenu.HowToAction(i18n(\\\"Disable unused plugins\\\"), \\\"ui/plugin\\\", new StringList(i18n(\\\"Main Menu\\\"), i18n(\\\"Tools\\\"), i18n(\\\"Plugins\\\"), i18n(\\\"Tool Bar\\\"), i18n(\\\"Disable\\\"))) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\ttopics.addSeparator(\\\"FAQ\\\");\\n\\t\\t\\t\\t\\t\\t\\t\\ttopics.add(new MAction(\\\"Where are my files and data?\\\", \\\"ui/folder\\\", action -> {\\n\\t\\t\\t\\t\\tMDialog dialog = new MDialog(action.getSourceWindow(), action.getName(), action.getIcon(), MDialog.SIMPLE_DIALOG | MDialog.HEADER_BAR);\\n\\t\\t\\t\\t\\tdialog.getMainPanel().setGroupLayout(true)\\n\\t\\t\\t\\t\\t\\t.beginRows();\\n\\t\\t\\t\\t\\tdialog.getMainPanel().getGroupLayout()\\n\\t\\t\\t\\t\\t\\t.addHeader(i18n(\\\"Folders:\\\"))\\n\\t\\t\\t\\t\\t\\t.addComponent(new MLinkButton(FS.getConfigPath().toUri(), i18n(\\\"{0}: Settings and Data\\\", MApplication.getFullName())));\\n\\t\\t\\t\\t\\tif (!OS.isWebStart()) {\\n\\t\\t\\t\\t\\t\\tdialog.getMainPanel().getGroupLayout()\\n\\t\\t\\t\\t\\t\\t\\t.addComponent(new MLinkButton(FS.getBasePath().toUri(), i18n(\\\"Install Directory\\\")));\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tdialog.getMainPanel().getGroupLayout()\\n\\t\\t\\t\\t\\t\\t.addHeader(i18n(\\\"Tree\\\"))\\n\\t\\t\\t\\t\\t\\t.addComponent(new MLabel(\\\"Context menu -> \\\" + MActionInfo.BROWSE))\\n\\t\\t\\t\\t\\t\\t.addHeader(i18n(\\\"Tabs\\\"))\\n\\t\\t\\t\\t\\t\\t.addComponent(new MLabel(\\\"Context menu -> \\\" + i18n(\\\"Copy File Path\\\")))\\n\\t\\t\\t\\t\\t.end();\\n\\t\\t\\t\\t\\tdialog.packFixed();\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t} ));\\n\\t\\t\\t\\ttopics.add(new MAction(\\\"What means \\\\\\\"Makagiga\\\\\\\"?\\\", MApplication.getSmallIcon(),\\n\\t\\t\\t\\t\\taction -> MMessage.info(action.getSourceWindow(), \\\"\\\\\\\"Makagiga\\\\\\\" is a kind of cake made with caramel, honey, poppy, nuts... ;-)\\\")\\n\\t\\t\\t\\t));\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tif (!UI.isQuaqua()) {\\n\\t\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\t\\tmenuBar.add(documentList);\\n\\t\\t}\\n\\t\\tif (Args.isSet(\\\"no-security-manager\\\")) {\\n\\t\\t\\tMLabel smWarning = new MLabel();\\n\\t\\t\\tsmWarning.setIcon(MIcon.small(\\\"ui/security-low\\\"));\\n\\t\\t\\tsmWarning.setToolTipText(i18n(\\\"No Security Manager\\\"));\\n\\t\\t\\tmenuBar.add(smWarning);\\n\\t\\t}\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void resetEditorZoom() {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\ttry {\\n\\t\\t\\t\\teditorZoom.resetZoom();\\n\\t\\t\\t\\tupdateZoomControls(editorZoom);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (AbstractMethodError error) {\\n\\t\\t\\t\\tTK.beep();\\n\\t\\t\\t\\tMLogger.developerException(error);\\n\\t\\t\\t\\tMLogger.error(\\\"core\\\", \\\"Zoom reset not supported\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(Config.getScreenKey(\\\"Splitter.Main.location\\\"), 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(config, 0);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(editMenu, PluginMenu.EDIT_MENU_TAB, false);\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findPreviousAction == null)\\n\\t\\t\\t\\t\\tfindPreviousAction = new FindPreviousAction();\\n\\t\\t\\t\\tboolean findPreviousSupported = (searchOptions & EditorSearch.FIND_PREVIOUS) != 0;\\n\\t\\t\\t\\tfindPreviousAction.setEnabled(isSearch && findPreviousSupported);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addSeparator(false);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t\\teditMenu.add(findPreviousAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tif (findPreviousAction != null)\\n\\t\\t\\t\\t\\tfindPreviousAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teditMenu.addNoItemsInfo(editMenu.isEmpty());\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\tPluginMenu editorPluginMenu = (editor instanceof PluginMenu) ? (PluginMenu)editor : null;\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tJComponent tabTitle = viewMenu.addSeparator(i18n(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\tPluginManager.updateMenu(viewMenu, PluginMenu.VIEW_MENU_TAB, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t\\tif (zoomResetAction == null)\\n\\t\\t\\t\\t\\t\\tzoomResetAction = new ZoomResetAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomResetAction);\\n\\t\\t\\t\\t\\tupdateZoomControls(editorZoom);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorPluginMenu != null)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu(editorPluginMenu, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editorPluginMenu != null)\\n\\t\\t\\t\\t\\teditorPluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorPluginMenu != null)\\n\\t\\t\\t\\t\\teditorPluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR_END, editorToolBar);\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR_END, false);\\n\\t\\t\\t\\thelpAction.updateProperties(editor);\\n\\t\\t\\t\\tif (editor instanceof DocumentHelp) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\teditorToolBar.add(helpAction, MToolBar.NO_TEXT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\teditorToolBar.addButton(new MButton(zoomInAction), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\teditorToolBar.addButton(new MButton(zoomOutAction), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!isPresentationActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t\\tEditorQuickFind.getInstance().updateComponents();\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tif (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t\\t\\tpb.setVisible(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic void updateTitle() { \\t\\tif (isLocked()) {\\n\\t\\t\\t\\t\\t\\tupdateTitle(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tupdateZoomControls(editorZoom);\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetAutoRemoveAll(true);\\n\\t\\t\\tsetToolTipText(UI.makeHTML(i18n(\\\"Tip: You can use drag and drop to import/export files.\\\")));\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onSelect() {\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(i18n(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\taddSeparator(false);\\n\\t\\t\\t\\t\\tadd(new ImportFolderAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(i18n(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tMainWindow.getInstance(),\\n\\t\\t\\t\\tMSettingsDialog.STANDARD_DIALOG | MSettingsDialog.APPLY_BUTTON,\\n\\t\\t\\t\\t\\\"configure\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void apply() {\\n\\t\\t\\t\\t\\tsuper.apply();\\n\\t\\t\\t\\t\\tMainWindow.getInstance().repaint();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tif (Main.isTodoPluginEnabled())\\n\\t\\t\\t\\tdialog.addPage(new TasksSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.addAdvancedPage(ArmorSettings.class);\\n\\t\\t\\tdialog.exec();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !MainWindow.isPresentationActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(i18n(\\\"Show/Hide Sidebar\\\"),\\n\\t\\t\\t\\taction -> mainSplitPane.toggleSidebar()\\n\\t\\t\\t));\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(i18n(\\\"Show Tree\\\"),\\n\\t\\t\\t\\taction -> Sidebar.getInstance().goTo(Sidebar.Tab.TREE)\\n\\t\\t\\t));\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getPopupAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindPreviousAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findPrevious();\\n\\t\\t}\\n\\t\\tprivate FindPreviousAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_PREVIOUS.noIcon());\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Search for the previous matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif ((context != null) && Help.show(tab, context))\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tMainWindow window = MainWindow.getInstance();\\n\\t\\t\\tHelpGenerator help = new HelpGenerator();\\n\\t\\t\\thelp.setMenuBar(window.getMMenuBar());\\n\\t\\t\\thelp.setOutputDirectory(FS.newConfigPath(\\\"help\\\", FS.CREATE_DIR));\\n\\t\\t\\thelp.setTitle(i18n(\\\"Help\\\"));\\n\\t\\t\\t\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"bookmarks-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"export-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"import-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"tags-menu\\\"));\\n\\t\\t\\thelp.addLink(i18n(\\\"Documentation\\\"), URI.create(\\\"http:\\t\\t\\thelp.addLink(\\\"Makagiga Project\\\", URI.create(\\\"http:\\t\\t\\t\\n\\t\\t\\thelp.addCommonShortcuts();\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Image Viewer\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Fit to Window\\\"), VK_F);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Full Screen\\\"), i18n(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"RSS Feeds\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Next New\\\"), VK_J);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Previous New\\\"), VK_K);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Open in a new tab (article/notification window)\\\"), i18n(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Todo List/Table\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Edit Cell\\\"), VK_ENTER);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Edit Cell\\\"), VK_F2);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Focus header\\\"), VK_F8);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move to the previous panel\\\"), VK_TAB, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Widgets\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Close active widget\\\"), VK_F4, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Close active widget\\\"), i18n(\\\"Right Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Activate next widget\\\"), VK_F6, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Tabs\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Close\\\"), i18n(\\\"Middle Button Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move between the Tree and Tabs\\\"), VK_F6);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move left\\\"), VK_LEFT, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Move right\\\"), VK_RIGHT, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(MActionInfo.RENAME.getDialogTitle(), i18n(\\\"Double Click\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Zoom In\\\") + '/' + i18n(\\\"Zoom Out\\\"), getKeyModifiersText(CTRL_MASK) + '+' + i18n(\\\"Mouse Wheel\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"System Tray\\\"));\\n\\t\\t\\thelp.addShortcut(i18n(\\\"Quick Paste\\\"), i18n(\\\"Middle Button Click\\\"));\\n\\t\\t\\ttry {\\n\\t\\t\\t\\thelp.generate();\\n\\t\\t\\t\\t\\t\\t\\t\\tWebBrowserTab browserTab = WebBrowserTab.getInstance();\\n\\t\\t\\t\\tbrowserTab.getWebBrowser()\\n\\t\\t\\t\\t\\t.setDocumentLocation(help.getIndexFile().toUri());\\n\\t\\t\\t}\\n\\t\\t\\tcatch (IOException exception) {\\n\\t\\t\\t\\tshowErrorMessage(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\t\\tsetName(i18n(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsetName(MActionInfo.HELP.getText());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ImportFolderAction extends MAction {\\n\\t\\tpublic ImportFolderAction() {\\n\\t\\t\\tsuper(i18n(\\\"Folder...\\\"), \\\"ui/folder\\\");\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tFile from = new Input.GetDirectoryBuilder()\\n\\t\\t\\t\\t.title(i18n(\\\"Import Folder\\\"))\\n\\t\\t\\t\\t.configKey(\\\"import-folder\\\")\\n\\t\\t\\t\\t.ok(MActionInfo.IMPORT)\\n\\t\\t\\t.exec(this);\\n\\t\\t\\tif (from == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo toFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tImportExport.importFolder(getSourceWindow(), new MArrayList<>(from.toPath()), toFolder);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FSException | IOException exception) {\\n\\t\\t\\t\\tshowErrorMessage(exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(i18n(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(i18n(\\\"Location Bar\\\"));\\n\\t\\t\\tif (UI.isQuaqua())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.getInstance();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(i18n(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tpropertiesBar.setVisible(false);\\n\\t\\t\\t}\\n\\t\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", yes);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(i18n(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(i18n(\\\"Toggle: {0}\\\", i18n(\\\"Properties\\\")), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(i18n(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t\\tif (Sidebar.getInstance().isTreeSelected())\\n\\t\\t\\t\\tTree.getInstance().requestFocus();\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(i18n(\\\"Tasks\\\"), VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomResetAction extends MApplication.ZoomResetAction {\\n\\t\\tpublic ZoomResetAction() { }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().resetEditorZoom();\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m13": {
                "content": "The source code of `MainWindow.java` reveals several important insights into how the functionality related to help and user guidance is currently implemented in the system. Here are key observations relevant to our CIA task:\n\n### Key Observations:\n1. **Help-Related Components Still Active**:\n   - The class imports and uses `HelpMenu`, `HelpContext`, and `HelpGenerator`.\n   - A `HelpAction` class is defined, which extends `MAction`. This action generates help content dynamically using `HelpGenerator` when triggered.\n\n2. **Usage of HelpGenerator**:\n   - Despite being removed from the current project version, `HelpGenerator` is still referenced in `MainWindow`. The `HelpAction` creates an instance of `HelpGenerator`, sets up its configuration (like output directory and title), and generates help documentation dynamically.\n   - It seems that although `HelpGenerator.java` was removed, some of its functionalities might have been refactored or replaced by inline logic inside `HelpAction`.\n\n3. **Dynamic Help Generation**:\n   - The `HelpAction` class builds a dynamic help system with links, shortcuts, and context-sensitive help. It even generates HTML-based help content and opens it in a browser tab (`WebBrowserTab`).\n\n4. **Integration with UI Elements**:\n   - The `helpAction` is linked to the application\u2019s menu bar under the \u201cHelp\u201d menu.\n   - The `updateProperties` method in `HelpAction` ensures that context-sensitive help is displayed based on the currently selected editor tab.\n\n### Implications for Change Impact Analysis:\n- Since `HelpGenerator.java` has been removed but is still referenced in `MainWindow`, there may be residual dependencies or outdated references in the codebase.\n- Any change to the help system, especially within `MainWindow`'s `HelpAction`, could potentially impact other parts of the UI that rely on context-sensitive help or shortcut documentation.\n- If `HelpGenerator`'s functionality was not fully replaced, there might be gaps in the help system that could require synchronization across multiple components.\n\n### Next Steps:\n1. To ensure completeness, we should check if `HelpAction` (still active in `MainWindow`) has any coupling dependencies with other entities.\n2. Investigate whether there are co-change relationships involving `MainWindow` itself, as it plays a central role in the application's UI and help system.\n\nLet\u2019s start by checking the coupling dependencies of `MainWindow` with other entities.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_a0564a9ea780427dac2e60",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow\", \"entity2\": \"HelpAction\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m14": {
                "content": "It appears that while `HelpAction` is still present in the source code of `MainWindow.java`, it has been removed or refactored in the current version of the project. This suggests a **partial refactoring** where:\n- The logic previously handled by `HelpAction` may have been moved elsewhere.\n- Residual references to `HelpAction` might still exist in `MainWindow`, potentially leading to inconsistencies or runtime errors if not fully replaced.\n\n### Updated Strategy:\nSince we're dealing with an evolving system where some entities are removed or refactored, our focus should shift to:\n1. **Identifying Active Help Components**: Determine which components currently handle help functionality (e.g., `HelpMenu`, `WebBrowserTab`, etc.).\n2. **Checking for Synchronization Needs**: Investigate co-change relationships and coupling dependencies involving `MainWindow` to identify which entities are most affected by changes to the UI and help system.\n\n### Next Step:\nLet\u2019s retrieve the **call graph** of `MainWindow` to understand which entities it directly uses\u2014especially those related to help and documentation features.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_29608a664a8c4e3b87deb5",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m15": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"MLinkAction\", \"MIcon\", \"MLineBorder\", \"MMessage\", \"MMenu\", \"PluginSettingsTab\", \"ScriptExecutor\", \"GeneralSettings\", \"Input\", \"WTFError\", \"MSystemTray\", \"DocumentListButton\", \"MArrayList\", \"MCellTip\", \"MSettingsDialog\", \"MToolBar\", \"DesktopTab\", \"NavigationUtils\", \"PrintDialog\", \"FSException\", \"EditorZoom\", \"Help\", \"EditorPrint\", \"MColor\", \"TasksMenu\", \"BookmarksMenu\", \"FS\", \"Mods\", \"MLogger\", \"ImportExport\", \"Mod\", \"MSplitPane\", \"MetaInfo\", \"EditorDesigner\", \"QuickOpenDialog\", \"ScriptYourself\", \"Flags\", \"PropertiesPanel\", \"PropertiesBar\", \"AbstractFS\", \"DesignPattern\", \"LocationBar\", \"ProxySettings\", \"AnnotationBar\", \"WebBrowserTab\", \"MMenuBar\", \"Desktop\", \"PluginSettings\", \"MComponent\", \"MActionInfo\", \"Kiosk\", \"MouseGestures\", \"TasksSettings\", \"Console\", \"MainView\", \"PluginMenu\", \"LookAndFeelSettings\", \"EditorSearch\", \"MPanel\", \"MNotification\", \"Designer\", \"Globals\", \"TagsMenu\", \"Editor\", \"DocumentHelp\", \"EditorNavigation\", \"MSmallButton\", \"PluginType\", \"EditorPlugin\", \"Autosave\", \"Plugin\", \"PluginInfo\", \"SearchBar\", \"UI\", \"EditorQuickFind\", \"CalendarTab\", \"MMainWindow\", \"Args\", \"MMouseAdapter\", \"TreeFS\", \"Widget\", \"EditorExport\", \"WikiPanel\", \"MAboutDialog\", \"OS\", \"SessionManager\", \"SummaryData\", \"Tracker\", \"TreePanel\", \"Config\", \"MAction\", \"StringList\", \"TK\", \"HelpContext\", \"Property\", \"MMenuAdapter\", \"MApplication\", \"PluginManager\", \"ConsoleTab\", \"Tree\"]"
            },
            "m16": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m17": {
                "content": "Title: Diagnosis of starting entity `HelpGenerator.java`\n\nChange set: [MainWindow, HelpContext, HelpMenu, WebBrowserTab, DocumentHelp, EditorZoom, PropertiesBar, LocationBar, Sidebar, MToolBar, MMenuBar, PluginSettingsTab, GeneralSettings, ScriptExecutor, FS, EditorDesigner, EditorSearch, EditorNavigation, EditorExport, EditorPrint, Editor, MLinkButton, MActionInfo, MApplication, PluginManager, PluginInfo, PluginType, Plugin, TreePanel, Tree, MetaInfo, Desktop, DesktopTab, MMainWindow, MPanel, MComponent, MLogger, Mods, Config, UI, TK, StringList, Globals, TagsMenu, TasksMenu, BookmarksMenu, Console, Input, WTFError, MSystemTray, PrintDialog]\n\nDetails:\n- **MainWindow**: Central UI component that directly uses `HelpGenerator` and integrates help functionality.\n- **HelpContext**: Used by `MainWindow` to provide context-sensitive help for editors.\n- **HelpMenu**: Integrated into the main menu bar; manages application-wide help topics.\n- **WebBrowserTab**: Displays dynamically generated HTML help content.\n- **DocumentHelp**: Interface implemented by editors to provide document-specific help.\n- **EditorZoom**: Integrated with help-related UI controls for zooming within documentation views.\n- **PropertiesBar**: Linked to context-sensitive help and editor state changes.\n- **LocationBar**: Involved in navigation and potentially linked to help actions.\n- **Sidebar**: Tied to help toggles like task and designer views.\n- **MToolBar / MMenuBar**: Directly use `HelpAction` and integrate help components into UI.\n- **PluginSettingsTab, GeneralSettings**: Potentially referenced by help system for configuration guidance.\n- **ScriptExecutor**: May be used to execute scripts related to dynamic help generation.\n- **FS**: Filesystem access needed for reading/writing help resources.\n- **EditorDesigner, EditorSearch, EditorNavigation, EditorExport, EditorPrint**: Editors that may contribute to or consume help information.\n- **Editor, MLinkButton, MActionInfo, MApplication**: Core UI and action classes involved in help interactions.\n- **PluginManager, PluginInfo, PluginType, Plugin**: Help menu items are dynamically updated based on plugins.\n- **TreePanel, Tree**: Navigation tree might trigger help context updates.\n- **MetaInfo, Desktop, DesktopTab**: Data and view components that can influence help context.\n- **MMainWindow, MPanel, MComponent**: UI base classes used throughout help-related components.\n- **MLogger, Mods, Config, UI, TK, StringList, Globals**: Utility and framework classes supporting help logic.\n- **TagsMenu, TasksMenu, BookmarksMenu, Console**: UI menus/components possibly referenced from help.\n- **Input, WTFError, MSystemTray, PrintDialog**: UI/dialog utilities used alongside help actions.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}