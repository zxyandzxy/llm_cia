{
    "time": 1749618995.833435,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MMenu.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_4676847f4758472d9de893",
                    "function": {
                        "arguments": "{\"entity\": \"MMenu.java\"}",
                        "name": "get_co_change_relationship"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "name": "get_co_change_relationship",
            "role": "tool",
            "content": "[[\"FeedsFSPlugin\", \"1\", \"0.034482758620689655\"], [\"SummaryRenderer\", \"1\", \"0.034482758620689655\"], [\"Index\", \"1\", \"0.034482758620689655\"], [\"TextEditor\", \"1\", \"0.034482758620689655\"], [\"TextEditorDesigner\", \"1\", \"0.034482758620689655\"], [\"ActionGroup\", \"1\", \"0.034482758620689655\"], [\"VersionControl\", \"1\", \"0.034482758620689655\"], [\"MDialog\", \"2\", \"0.06896551724137931\"], [\"ScriptPlugin\", \"1\", \"0.034482758620689655\"], [\"Mnemonic\", \"1\", \"0.034482758620689655\"], [\"MButton\", \"2\", \"0.06896551724137931\"], [\"MMenuBar\", \"2\", \"0.06896551724137931\"], [\"Title\", \"1\", \"0.034482758620689655\"], [\"MainWindow\", \"7\", \"0.2413793103448276\"], [\"MDateSpinner\", \"2\", \"0.06896551724137931\"], [\"MTree\", \"2\", \"0.06896551724137931\"], [\"Tabs\", \"3\", \"0.10344827586206896\"], [\"Bookmarks\", \"3\", \"0.10344827586206896\"], [\"CalendarWidgetPlugin\", \"2\", \"0.06896551724137931\"], [\"DeskletWidget\", \"2\", \"0.06896551724137931\"], [\"MSystemTray\", \"1\", \"0.034482758620689655\"], [\"ImageInfo\", \"1\", \"0.034482758620689655\"], [\"Tree\", \"1\", \"0.034482758620689655\"], [\"MCellTip\", \"1\", \"0.034482758620689655\"], [\"MAction\", \"1\", \"0.034482758620689655\"], [\"AnnotationBar\", \"1\", \"0.034482758620689655\"], [\"MToolBar\", \"1\", \"0.034482758620689655\"], [\"ActionProperties\", \"1\", \"0.034482758620689655\"], [\"ScriptYourself\", \"1\", \"0.034482758620689655\"], [\"Help\", \"1\", \"0.034482758620689655\"], [\"LinkAction\", \"1\", \"0.034482758620689655\"], [\"FeedViewer\", \"2\", \"0.06896551724137931\"], [\"PropertiesBar\", \"1\", \"0.034482758620689655\"], [\"CharacterAction\", \"1\", \"0.034482758620689655\"], [\"BrushTypeAction\", \"1\", \"0.034482758620689655\"], [\"Vars\", \"1\", \"0.034482758620689655\"], [\"FlatPainter\", \"1\", \"0.034482758620689655\"], [\"TagsEditor\", \"3\", \"0.10344827586206896\"], [\"MenuButton\", \"1\", \"0.034482758620689655\"], [\"LabelMenuAction\", \"1\", \"0.034482758620689655\"], [\"AddWidgetAction\", \"1\", \"0.034482758620689655\"], [\"WidgetListAction\", \"1\", \"0.034482758620689655\"], [\"MCalendarPanel\", \"1\", \"0.034482758620689655\"], [\"Sidebar\", \"1\", \"0.034482758620689655\"], [\"MFontChooser\", \"1\", \"0.034482758620689655\"], [\"TreePanel\", \"4\", \"0.13793103448275862\"], [\"RatingPanel\", \"1\", \"0.034482758620689655\"], [\"ChartView\", \"1\", \"0.034482758620689655\"], [\"MLabel\", \"1\", \"0.034482758620689655\"], [\"MScrollPane\", \"1\", \"0.034482758620689655\"], [\"DragScroller\", \"1\", \"0.034482758620689655\"], [\"InternetSearchPlugin\", \"2\", \"0.06896551724137931\"], [\"InternetSearchPanel\", \"5\", \"0.1724137931034483\"], [\"UninstallOpenSearchPluginAction\", \"1\", \"0.034482758620689655\"], [\"MActionInfo\", \"1\", \"0.034482758620689655\"], [\"MNotification\", \"2\", \"0.06896551724137931\"], [\"TodoEditor\", \"1\", \"0.034482758620689655\"], [\"FeedsFS\", \"2\", \"0.06896551724137931\"], [\"TagsMenu\", \"4\", \"0.13793103448275862\"], [\"MMenuAdapter\", \"2\", \"0.06896551724137931\"], [\"QueryEditor\", \"1\", \"0.034482758620689655\"], [\"MText\", \"2\", \"0.06896551724137931\"], [\"CalendarWidget\", \"1\", \"0.034482758620689655\"], [\"Submenu\", \"2\", \"0.06896551724137931\"], [\"Desktop\", \"1\", \"0.034482758620689655\"], [\"MSmallColorChooser\", \"1\", \"0.034482758620689655\"], [\"ColumnManager\", \"3\", \"0.10344827586206896\"], [\"Links\", \"3\", \"0.10344827586206896\"], [\"TaskTable\", \"3\", \"0.10344827586206896\"], [\"MetaInfoMenu\", \"3\", \"0.10344827586206896\"], [\"ImportMenu\", \"2\", \"0.06896551724137931\"], [\"TaskPanel\", \"2\", \"0.06896551724137931\"], [\"DocumentList\", \"1\", \"0.034482758620689655\"], [\"CalendarComponent\", \"2\", \"0.06896551724137931\"], [\"PopupContent\", \"1\", \"0.034482758620689655\"], [\"MMessage\", \"2\", \"0.06896551724137931\"], [\"FileInfoPanel\", \"1\", \"0.034482758620689655\"], [\"MTip\", \"1\", \"0.034482758620689655\"], [\"FeedThread\", \"1\", \"0.034482758620689655\"], [\"StaticHandler\", \"2\", \"0.06896551724137931\"], [\"MList\", \"3\", \"0.10344827586206896\"], [\"MComboBox\", \"1\", \"0.034482758620689655\"], [\"MTabbedPane\", \"1\", \"0.034482758620689655\"], [\"TaskList\", \"1\", \"0.034482758620689655\"], [\"GHNSDialog\", \"1\", \"0.034482758620689655\"], [\"VersionPanel\", \"1\", \"0.034482758620689655\"], [\"MSettingsDialog\", \"1\", \"0.034482758620689655\"], [\"CompletionList\", \"1\", \"0.034482758620689655\"], [\"CategoryManagerDialog\", \"1\", \"0.034482758620689655\"], [\"SortAction\", \"1\", \"0.034482758620689655\"], [\"CategoryMenu\", \"2\", \"0.06896551724137931\"], [\"SummaryPanel\", \"1\", \"0.034482758620689655\"], [\"MFileChooser\", \"1\", \"0.034482758620689655\"], [\"DocumentListButton\", \"2\", \"0.06896551724137931\"], [\"SummaryCategory\", \"1\", \"0.034482758620689655\"], [\"Task\", \"1\", \"0.034482758620689655\"], [\"MouseGestures\", \"1\", \"0.034482758620689655\"], [\"Impl\", \"1\", \"0.034482758620689655\"], [\"ArticleList\", \"1\", \"0.034482758620689655\"], [\"AbstractTest\", \"1\", \"0.034482758620689655\"], [\"CompletionWindow\", \"1\", \"0.034482758620689655\"], [\"Pager\", \"1\", \"0.034482758620689655\"], [\"MColorMenu\", \"1\", \"0.034482758620689655\"], [\"ImageEditor\", \"1\", \"0.034482758620689655\"], [\"TaskStateMenu\", \"1\", \"0.034482758620689655\"], [\"ScriptIDE\", \"1\", \"0.034482758620689655\"], [\"TreeSettingsButton\", \"1\", \"0.034482758620689655\"]]"
        },
        {
            "content": "The co-change relationships for `MMenu.java` have been retrieved. The results include a list of entities along with their support count and confidence score. To prioritize the most significant entities for synchronization, we should focus on those with higher confidence scores (higher likelihood of being impacted) and relatively high support counts (more historical evidence).\n\n### Observations:\n1. **High Confidence & Support:**\n   - `MainWindow`: 7 supports, confidence \u2248 24.14%\n   - `InternetSearchPanel`: 5 supports, confidence \u2248 17.24%\n   - `TreePanel`: 4 supports, confidence \u2248 13.79%\n   - `TagsMenu`: 4 supports, confidence \u2248 13.79%\n\n   These files are frequently modified together with `MMenu.java`. They show relatively strong historical coupling.\n\n2. **Moderate Confidence & Support:**\n   - `Tabs`, `Bookmarks`, `TagsEditor`, `ColumnManager`, `Links`, `TaskTable`, `MetaInfoMenu`, `MList`, etc.: Each has 3 supports and confidence \u2248 10.34%.\n   - These files also have notable historical correlation with `MMenu.java`.\n\n3. **Low Confidence & Support:**\n   - Most of the remaining files (e.g., `FeedsFSPlugin`, `SummaryRenderer`, `Index`, etc.) have only 1 or 2 supports and low confidence (\u22483.45% to ~6.90%). These may not be critical unless further analysis confirms dependencies.\n\n### Next Steps:\n- Focus on analyzing direct dependencies for the top candidates (`MainWindow`, `InternetSearchPanel`, `TreePanel`, `TagsMenu`) using the `get_coupling_dependencies` function to confirm structural relationships.\n- Additionally, call `get_call_graph` for `MMenu.java` to identify which entities it directly references in its code.\n\nLet me proceed by analyzing the coupling dependencies between `MMenu.java` and `MainWindow`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_7ae6c183af734dbe8a1e8c",
                    "function": {
                        "arguments": "{\"entity1\": \"MMenu.java\", \"entity2\": \"MainWindow\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"MMenu has been removed from the project due to project version iteration\"]"
        },
        {
            "content": "It appears that `MMenu.java` has been removed from the project due to version iteration. This explains why there is no coupling dependency found between `MMenu.java` and `MainWindow`.\n\nGiven this new information, our approach should shift slightly:\n\n1. Since `MMenu.java` no longer exists in the current project version, we need to understand how its functionality or responsibilities have been transferred or replaced.\n2. We can examine entities that historically had strong co-change relationships with `MMenu.java`, such as `MainWindow`, `InternetSearchPanel`, `TreePanel`, and `TagsMenu`, to see if they now include behavior previously handled by `MMenu.java`.\n3. To proceed, I will analyze the call graph of `MainWindow` to identify whether it directly references any menu-related logic or components.\n\nLet me now retrieve the call graph for `MainWindow`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_0df74e60532a4a7aa7e7cb",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"FS\", \"MIcon\", \"ScriptError\", \"Args\", \"WebBrowserEditor\", \"Console\", \"TreeFS\", \"Help\", \"InternetSearchPanel\", \"EditorExport\", \"MLogger\", \"EditorQuickFind\", \"TreeSettingsButton\", \"ScriptExecutor\", \"OS\", \"ImportExport\", \"SessionManager\", \"SummaryData\", \"ConsoleTab\", \"MetaInfo\", \"EditorDesigner\", \"PluginMenu\", \"Browser\", \"GeneralSettings\", \"QuickOpenDialog\", \"Tracker\", \"EditorSearch\", \"WTFError\", \"LookAndFeelSettings\", \"TreePanel\", \"PropertiesPanel\", \"SearchBar\", \"Designer\", \"Config\", \"DesktopPanel\", \"Presentation\", \"PropertiesBar\", \"TagsMenu\", \"MAction\", \"AbstractFS\", \"Bookmarks\", \"TK\", \"LocationBar\", \"Editor\", \"ProxySettings\", \"EditorNavigation\", \"NavigationUtils\", \"PrintDialog\", \"PluginType\", \"EditorPlugin\", \"MApplication\", \"EditorZoom\", \"Autosave\", \"Desktop\", \"PluginInfo\", \"EditorPrint\", \"PluginSettings\", \"TreeSettings\", \"UI\", \"PluginManager\", \"MActionInfo\", \"Kiosk\", \"Tree\"]"
        },
        {
            "content": "The call graph for `MainWindow` has been retrieved. It includes references to several entities that are likely related to menu functionality or user interface components. Notably, the following entities stand out in the context of menus and UI:\n\n- `PluginMenu`\n- `TagsMenu`\n- `InternetSearchPanel`\n- `TreePanel`\n\nThese align with our earlier list of strong co-change relationships with `MMenu.java`, suggesting that `MainWindow` may have absorbed or replaced some of the responsibilities previously handled by `MMenu.java`.\n\n### Next Steps:\n- To better understand how these menu-related components are used within `MainWindow`, I will retrieve the source code of `MainWindow` using the `get_origin_code` function.\n- This will allow us to inspect how these referenced entities (e.g., `PluginMenu`, `TagsMenu`) are utilized and whether there is any explicit handling of menu structures.\n\nLet me now retrieve the source code for `MainWindow`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_ddfc49f9cea54371941e6d",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.TrayIcon;\\nimport java.awt.event.MouseEvent;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport java.net.URL;\\nimport java.util.List;\\nimport java.util.Map;\\nimport javax.script.ScriptException;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAboutDialog;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MCellTip;\\nimport org.makagiga.commons.MFlipPanel;\\nimport org.makagiga.commons.MGuardedObject;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLabel;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.MMainWindow;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MMenuAdapter;\\nimport org.makagiga.commons.MMenuBar;\\nimport org.makagiga.commons.MMouseAdapter;\\nimport org.makagiga.commons.MPanel;\\nimport org.makagiga.commons.MSettingsDialog;\\nimport org.makagiga.commons.MSettingsPage;\\nimport org.makagiga.commons.MSmallButton;\\nimport org.makagiga.commons.MSplitPane;\\nimport org.makagiga.commons.MStatusBar;\\nimport org.makagiga.commons.MSystemTray;\\nimport org.makagiga.commons.MToolBar;\\nimport org.makagiga.commons.MWebBrowserPanel;\\nimport org.makagiga.commons.MWhatsThis;\\nimport org.makagiga.commons.MouseGestures;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.PermissionInfo;\\nimport org.makagiga.commons.Preloader;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.fx.ImageTransition.FadeEffect;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.DesktopPanel;\\nimport org.makagiga.editors.ConsoleTab;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.EditorZoom.ZoomType;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.editors.WebBrowserEditor;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.internetsearch.InternetSearchPanel;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.search.SearchBar;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.Bookmarks;\\nimport org.makagiga.tools.Browser;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.GeneralSettings;\\nimport org.makagiga.tools.Help;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.presentation.Presentation;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.TreeSettings;\\nimport org.makagiga.tree.TreeSettingsButton;\\nimport org.makagiga.tree.tracker.Tracker;\\npublic final class MainWindow extends MMainWindow {\\n\\tprivate Bookmarks.Menu bookmarksMenu;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate final InternetSearchPanel internetSearchPanel;\\n\\tprivate JComponent tabBar;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate static MGuardedObject<MainWindow> _guardedInstance;\\n\\tprivate MLabel editorStatusText;\\n\\tprivate final MFlipPanel mainPanel;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu goToMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tabsMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate MPanel navigationPanel;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate final MToolBar mainToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideMainToolBarAction showHideMainToolBarAction;\\n\\tprivate ShowHideEditorToolBarAction showHideEditorToolBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate MApplication.ToggleStatusBarAction toggleStatusBarAction;\\n\\tprivate Presentation.Action presentationAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\t\\tprivate InternetSearchAction internetSearchAction;\\n\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"tabs-menu\\\", tabsMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\t\\\"goto-menu\\\", goToMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\\"main-tool-bar\\\", mainToolBar,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"presentation-action\\\", presentationAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_guardedInstance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _guardedInstance.get();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tUI.replaceComponent(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\t@Override\\n\\tpublic void setDesktopVisible(final boolean value) {\\n\\t\\tsuper.setDesktopVisible(value);\\n\\t\\tboolean desktopVisible = isDesktopVisible();\\n\\t\\tmainPanel.setFrontVisible(!desktopVisible, UI.hollywood.get());\\n\\t\\ttoggleDesktopAction.setEnabled(!Tabs.getInstance().isEmpty());\\n\\t\\ttoggleDesktopAction.setName(desktopVisible ? _(\\\"Hide Widgets\\\") : _(\\\"Show Widgets\\\"));\\n\\t\\tupdateState();\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tDesktopPanel.getInstance().focus();\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tUI.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tpublic boolean isHorizontalSplit() {\\n\\t\\treturn mainSplitPane.getOrientation() == MSplitPane.HORIZONTAL_SPLIT;\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _guardedInstance != null;\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object object) {\\n\\t\\tif (object == null)\\n\\t\\t\\treturn null;\\n\\t\\tsynchronized (object) {\\n\\t\\t\\tif (object instanceof MAboutDialog) {\\n\\t\\t\\t\\tMAboutDialog about = (MAboutDialog)object;\\n\\t\\t\\t\\tabout.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", \\\"gmx\\\\u002enet\\\", \\\"lopoff\\\");\\n\\t\\t\\t\\tabout.addCredit(\\\"The Glossitope Team\\\", \\\"Glossitope Widgets\\\", \\\"http:\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseGestures) {\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\t\\tMouseGestures mouseGestures = (MouseGestures)object;\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\t\\tmouseGestures.add(consoleAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LD\\\", searchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"U\\\", internetSearchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ucs\\\", configureAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UR\\\", _(\\\"Find Text\\\"), findAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"URDL\\\", printAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Us\\\", presentationAction);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object source, final Object object) {\\n\\t\\tif (source instanceof TrayIcon) {\\n\\t\\t\\tif (object instanceof MMenu) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tMMenu menu = (MMenu)object;\\n\\t\\t\\t\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\t\\t\\t\\tmenu.add(new Bookmarks.Menu(MIcon.small(\\\"ui/bookmark\\\")));\\n\\t\\t\\t\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseEvent) {\\n\\t\\t\\t\\tsynchronized (object) {\\n\\t\\t\\t\\t\\tMouseEvent event = (MouseEvent)object;\\n\\t\\t\\t\\t\\tif (MMouseAdapter.isMiddle(event)) {\\n\\t\\t\\t\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\tconfig.write(\\\"Splitter.Main.orientation\\\", isHorizontalSplit() ? \\\"HORIZONTAL\\\" : \\\"VERTICAL\\\");\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tconfig.write(\\\"StatusBar.enabled\\\", toggleStatusBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Editor.enabled\\\", showHideEditorToolBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Main.enabled\\\", showHideMainToolBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tDesktop.getInstance().saveSession();\\n\\t\\tconfig.sync();\\n\\t}\\n\\tpublic void setEditorStatusText(final String value) {\\n\\t\\tif (TK.isEmpty(value)) {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tString text = null;\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tif (editor.getInfo() == null) {\\n\\t\\t\\t\\t\\tAbstractFS fs = editor.getMetaInfo().getFS();\\n\\t\\t\\t\\t\\ttext = (fs == null) ? null : fs.getName();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\ttext = editor.getInfo().toString();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\teditorStatusText.setText(text);\\n\\t\\t\\teditorStatusText.setToolTipText(text);\\n\\t\\t\\teditorStatusText.setVisible(text != null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\teditorStatusText.setText(value);\\n\\t\\t\\teditorStatusText.setToolTipText(value);\\n\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar sidebar = Sidebar.getInstance();\\n\\t\\tmainWindow.mainSplitPane.setSidebarVisible(true);\\n\\t\\tif (tab != null) {\\n\\t\\t\\tif (toggle) {\\n\\t\\t\\t\\tif (sidebar.isSelected(tab))\\n\\t\\t\\t\\t\\tsidebar.selectLastTab();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tsidebar.goTo(tab);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsidebar.goTo(tab);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t\\t\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t\\t\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_guardedInstance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_guardedInstance = new MGuardedObject<MainWindow>(this, \\\"org.makagiga.MainWindow\\\", PermissionInfo.ThreatLevel.MEDIUM, \\\"Main Window\\\");\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\tinitStatusBar();\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\ttabPanel = MPanel.createBorderPanel();\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\ttabPanel.setVisible(false); \\t\\t\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\tmainToolBar = new MToolBar();\\n\\t\\tmainToolBar.setTextPosition(MToolBar.TextPosition.ALONGSIDE_ICONS);\\n\\t\\tMWhatsThis.set(mainToolBar, _(\\\"Main Tool Bar\\\"));\\n\\t\\tmainToolBar.addButton(treePanel.getNewFileButton(), MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addButton(new TreeSettingsButton());\\n\\t\\tPluginManager.updateToolBar(table, mainToolBar, PluginMenu.MAIN_TOOL_BAR, true);\\n\\t\\tmainToolBar.addStretch();\\n\\t\\tmainToolBar.readConfig(\\\"main\\\");\\n\\t\\tmainToolBar.add(toggleDesktopAction, MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addGap();\\n\\t\\tinternetSearchPanel = new InternetSearchPanel();\\n\\t\\tinternetSearchPanel.getOKButton().setVisible(false);\\n\\t\\tif (!Kiosk.actionInternetSearch.get())\\n\\t\\t\\tinternetSearchPanel.setVisible(false);\\n\\t\\tmainToolBar.add(internetSearchPanel);\\n\\t\\tmainToolBar.addGap();\\n\\t\\taddNorth(mainToolBar);\\n\\t\\t\\t\\tmainPanel = new MFlipPanel(tabPanel, DesktopPanel.getInstance());\\n\\t\\tmainSplitPane.setRightComponent(mainPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\tif (MApplication.consoleOpenInTab.get())\\n\\t\\t\\tConsoleTab.install(); \\t\\trestoreSession();\\n\\t\\t\\t\\tScriptException userScriptError = null;\\n\\t\\tif (ScriptExecutor.userScript.get()) {\\n\\t\\t\\tFile userScriptFile = new File(FS.makePath(FS.makeConfigPath(\\\"scripts\\\"), \\\"user.js\\\"));\\n\\t\\t\\tif (userScriptFile.exists()) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tScriptExecutor.execute(userScriptFile);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (FileNotFoundException exception) { } \\t\\t\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\t\\t\\tuserScriptError = exception;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (Exception exception) {\\n\\t\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tsetDesktopVisible(tabs.isEmpty());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new MouseGestures() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic boolean canShowMessage() {\\n\\t\\t\\t\\treturn !Presentation.isActive();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMSystemTray.setVisible(UI.systemTray.get());\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t\\t\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\telse if (Args.isSet(\\\"presentation\\\"))\\n\\t\\t\\t\\tPresentation.setActive(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (tabs.isEmpty())\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\telse\\n\\t\\t\\t\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tMStatusBar.ready();\\n\\t\\tsetDesktopVisible(tabs.isEmpty());\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\t\\t\\tPreloader.add(Preloader.FontListPreloader.class, true);\\n\\t\\t\\t\\tif (Vars.preloaderClass.get())\\n\\t\\t\\tPreloader.start();\\n\\t\\tMWebBrowserPanel.setBrowserLauncher(new MWebBrowserPanel.BrowserLauncher() {\\n\\t\\t\\tpublic void openURL(final URL url) {\\n\\t\\t\\t\\tBrowser.openURL(url.toString());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideMainToolBarAction = new ShowHideMainToolBarAction();\\n\\t\\tshowHideEditorToolBarAction = new ShowHideEditorToolBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\ttoggleStatusBarAction = new MApplication.ToggleStatusBarAction(getStatusBar());\\n\\t\\tpresentationAction = new Presentation.Action();\\n\\t\\t\\t\\tinternetSearchAction = new InternetSearchAction();\\n\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\t\\t\\tJComponent c = getRootPane();\\n\\t\\tnew QuickSaveAction().connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t\\tif (Kiosk.actionInternetSearch.get())\\n\\t\\t\\tinternetSearchAction.connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t\\tpresentationAction.connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t\\tsearchAction.connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\texportMenu.setSplitMenu(true);\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getInfo().getPluggable();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported by this file\\\"), \\\"ui/error\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Select or open an item you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initImportMenu() {\\n\\t\\timportMenu.removeAll();\\n\\t\\timportMenu.setSplitMenu(true);\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif ((currentFS instanceof TreeFS) && currentFolder.canModify()) {\\n\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPluggable();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\timportMenu.add(importAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timportMenu.addSeparator();\\n\\t\\t\\timportMenu.add(new MAction(_(\\\"Import from {0}\\\", \\\"Incollector 1.x\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tImportExport.importIncollector();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tfor (AbstractFS i : Tree.getInstance().getFileSystems().values()) {\\n\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, importMenu);\\n\\t\\t}\\n\\t\\tPluginManager.updateMenu(importMenu, PluginMenu.IMPORT_MENU, false);\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tfileMenu.setSplitMenu(true);\\n\\t\\tfileMenu.add(new QuickOpenDialog.Action());\\n\\t\\tfileMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\tfileMenu.add(NavigationUtils.getNextAction());\\n\\t\\tfileMenu.addSeparator();\\n\\t\\ttabsMenu = tabs.createTabsMenu();\\n\\t\\tfileMenu.add(tabsMenu);\\n\\t\\tif (Vars.tabsRecentlyClosedTabs.get())\\n\\t\\t\\tfileMenu.add(tabs.createRecentlyClosedTabsMenu());\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new MMenu(MActionInfo.IMPORT.getText()); \\t\\timportMenu.setToolTipText(UI.makeHTML(\\n\\t\\t\\t_(\\\"Imports a selected files into the <b>Tree</b>.<br>Tip: You can use drag and drop to import/export files.\\\")\\n\\t\\t));\\n\\t\\timportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitImportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\timportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tif (Kiosk.actionPrint.get())\\n\\t\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideMainToolBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideEditorToolBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(toggleStatusBarAction);\\n\\t\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\t}\\n\\t\\tgoToMenu = new MMenu(_(\\\"Go To\\\"));\\n\\t\\tgoToMenu.add(showHideSidebarAction);\\n\\t\\tgoToMenu.add(toggleSummaryAction);\\n\\t\\tgoToMenu.add(toggleDesignerAction);\\n\\t\\tgoToMenu.add(toggleDesktopAction);\\n\\t\\tviewMenu.add(goToMenu);\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tif (Vars.actionPresentation.get())\\n\\t\\t\\tviewMenu.add(presentationAction);\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new Bookmarks.Menu(null);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\ttoolsMenu.setSplitMenu(true);\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\tif (Kiosk.pluginManager.get()) {\\n\\t\\t\\ttoolsMenu.addSeparator();\\n\\t\\t\\ttoolsMenu.add(new PluginSettings.Action());\\n\\t\\t\\ttoolsMenu.add(PluginManager.createPluginOptionsAction());\\n\\t\\t}\\n\\t\\tif (Kiosk.actionSettings.get()) {\\n\\t\\t\\ttoolsMenu.addSeparator();\\n\\t\\t\\ttoolsMenu.add(configureAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\tif (Kiosk.actionWhatsThis.get())\\n\\t\\t\\thelpMenu.add(MWhatsThis.createAction(this));\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new MApplication.AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setVisible(false);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void initStatusBar() {\\n\\t\\tMStatusBar statusBar = getStatusBar();\\n\\t\\teditorStatusText = new MLabel();\\n\\t\\t\\t\\tstatusBar.addStretch();\\n\\t\\tstatusBar.add(editorStatusText);\\n\\t\\tstatusBar.addGap();\\n\\t\\tnavigationPanel = MPanel.createHBoxPanel();\\n\\t\\tnavigationPanel.setVisible(false);\\n\\t\\tstatusBar.add(navigationPanel);\\n\\t\\tstatusBar.add(new MSmallButton(NavigationUtils.getPreviousAction(), false));\\n\\t\\tstatusBar.add(new MSmallButton(NavigationUtils.getNextAction(), true));\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\tgetStatusBar().setClosed(!config.read(\\\"StatusBar.enabled\\\", true));\\n\\t\\tshowHideEditorToolBarAction.setSelected(config.read(\\\"ToolBar.Editor.enabled\\\", true));\\n\\t\\tshowHideMainToolBarAction.setSelected(config.read(\\\"ToolBar.Main.enabled\\\", true));\\n\\t\\tmainToolBar.setVisible(showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tDesktop.getInstance().restoreSession();\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif ((editor != null) && !DesktopPanel.getInstance().isVisible()) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (!editMenu.isEmpty())\\n\\t\\t\\t\\teditMenu.addSeparator();\\n\\t\\t\\tif (Kiosk.actionSettings.get())\\n\\t\\t\\t\\teditMenu.add(configureAction);\\n\\t\\t\\t}\\n\\tprivate void updateSidebar(final Editor<?> editor, final Designer designer) {\\n\\t\\tSidebar sidebar = Sidebar.getInstance();\\n\\t\\tSidebar.Button button = sidebar.getButtonFor(Sidebar.Tab.DESIGNER);\\n\\t\\tsidebar.setDesigner(designer);\\n\\t\\tif (designer == null) {\\n\\t\\t\\tif (button != null)\\n\\t\\t\\t\\tbutton.setText(Sidebar.Tab.DESIGNER.getTitle());\\n\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\tsidebar.goTo(Sidebar.Tab.TREE, false);\\n\\t\\t\\ttoggleDesignerAction.setEnabled(false);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (button != null) {\\n\\t\\t\\t\\tString text = Sidebar.Tab.DESIGNER.getTitle();\\n\\t\\t\\t\\tString displayText = designer.getDisplayText();\\n\\t\\t\\t\\tif (displayText != null)\\n\\t\\t\\t\\t\\ttext += (\\\" - \\\" + displayText);\\n\\t\\t\\t\\tbutton.setText(text);\\n\\t\\t\\t}\\n\\t\\t\\tdesigner.repaint(); \\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tdesigner.setLocked(!editor.getMetaInfo().canModify());\\n\\t\\t\\ttoggleDesignerAction.setEnabled(true);\\n\\t\\t\\t\\t\\t\\tif (sidebar.isDesignerSelected()) {\\n\\t\\t\\t\\tif (button != null)\\n\\t\\t\\t\\t\\tbutton.select();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tDesigner designer = null;\\n\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\t\\t\\t\\tMAction closeAction = tabs.getCloseAction();\\n\\t\\t\\ttabsMenu.setEnabled(closeAction.isEnabled());\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\t\\t\\t\\tnavigationPanel.removeAll();\\n\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\tJComponent navigationComponent = EditorNavigation.class.cast(editor).getNavigationComponent();\\n\\t\\t\\t\\tif (navigationComponent == null) {\\n\\t\\t\\t\\t\\tnavigationPanel.setVisible(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tnavigationPanel.add(navigationComponent);\\n\\t\\t\\t\\t\\tnavigationPanel.setVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tnavigationPanel.setVisible(false);\\n\\t\\t\\t}\\n\\t\\t\\tif ((editor != null) && !DesktopPanel.getInstance().isVisible()) {\\n\\t\\t\\t\\temailAction.setEnabled(metaInfo.isFile() && Vars.actionSendFile.get());\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\t\\teditorToolBar.setOpaque(false);\\n\\t\\t\\t\\t\\ttabPanel.addNorth(editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ((editor instanceof EditorPrint) && Kiosk.actionPrint.get()) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t(editor instanceof WebBrowserEditor) &&\\n\\t\\t\\t\\t\\t\\t!WebBrowserEditor.class.cast(editor).isPrintActionVisible()\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tprintAction.setEnabled(true);\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(printAction);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\teditorToolBar.readConfig(\\\"editor\\\");\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (Presentation.isActive())\\n\\t\\t\\t\\t\\teditorToolBar.setVisible(false);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBar.setVisible(showHideEditorToolBarAction.isSelected());\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t\\t\\tsetEditorStatusText(editor.getStatusText());\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\temailAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tLocationBar.getInstance().setVisible(false);\\n\\t\\t\\t\\teditorStatusText.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tsetEditorStatusText(null);\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tupdateSidebar(editor, designer);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (EditorQuickFind.isInstance() && (tabBar == EditorQuickFind.getInstance())) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tString name = MApplication.getFullName();\\n\\t\\tif (FS.getProfile() != null)\\n\\t\\t\\tname += \\\" [\\\" + FS.getProfile() + \\\"]\\\";\\n\\t\\telse if (FS.isPortable())\\n\\t\\t\\tname += \\\" [Portable]\\\";\\n\\t\\tif (MApplication.isSafeMode())\\n\\t\\t\\tname += \\\" [Safe-Mode]\\\";\\n\\t\\tif ((metaInfo != null) && !DesktopPanel.getInstance().isVisible()) {\\n\\t\\t\\tString metaInfoName = metaInfo.toString();\\n\\t\\t\\t\\t\\t\\tif (OS.isWindows())\\n\\t\\t\\t\\tmetaInfoName = metaInfoName.replace(\\\"\\\\n\\\", \\\"\\\");\\n\\t\\t\\tsetTitle(metaInfoName + \\\" - \\\" + name);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tsetTitle(name);\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.ConfigureAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Kiosk.actionSettings.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tMSettingsDialog<MSettingsPage> dialog = new MSettingsDialog<MSettingsPage>(\\n\\t\\t\\t\\tmainWindow,\\n\\t\\t\\t\\t\\\"configure\\\",\\n\\t\\t\\t\\tUI.TOP\\n\\t\\t\\t);\\n\\t\\t\\tdialog.setAutoResizeWindow(true);\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\t\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.addAdvancedPage(GeneralSettings.Advanced.class);\\n\\t\\t\\tdialog.addAdvancedPage(TreeSettings.Advanced.class);\\n\\t\\t\\tdialog.addAdvancedPage(LookAndFeelSettings.Advanced.class);\\n\\t\\t\\tif (dialog.exec())\\n\\t\\t\\t\\tmainWindow.repaint();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t\\tif (!Kiosk.actionSettings.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Vars.actionSendFile.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MApplication.FindAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MApplication.FindNextAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MApplication.HelpAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tHelp.show();\\n\\t\\t}\\n\\t}\\n\\tprivate final class InternetSearchAction extends InternetSearchPanel.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Kiosk.actionInternetSearch.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tInternetSearchPanel isp = MainWindow.this.internetSearchPanel;\\n\\t\\t\\tif (isp.isEmpty()) {\\n\\t\\t\\t\\tString defaultText =\\n\\t\\t\\t\\t\\t(Editor.getCurrentEditor() instanceof EditorSearch)\\n\\t\\t\\t\\t\\t? EditorSearch.class.cast(Editor.getCurrentEditor()).getDefaultSearchText()\\n\\t\\t\\t\\t\\t: \\\"\\\";\\n\\t\\t\\t\\tisp.setText(defaultText);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (!MainWindow.this.mainToolBar.isVisible()) {\\n\\t\\t\\t\\tMainWindow.this.showHideMainToolBarAction.setSelected(true);\\n\\t\\t\\t\\tMainWindow.this.mainToolBar.setVisible(true);\\n\\t\\t\\t}\\n\\t\\t\\tisp.makeDefault();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Kiosk.actionPrint.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(\\\"Quick Save\\\", VK_S, CTRL_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideEditorToolBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMToolBar editorToolBar = MainWindow.getInstance().editorToolBar;\\n\\t\\t\\tif (editorToolBar != null)\\n\\t\\t\\t\\teditorToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideEditorToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Tab Tool Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideMainToolBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideMainToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Main Tool Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tPropertiesBar.freeInstance();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tboolean desktopVisible = DesktopPanel.getInstance().isVisible();\\n\\t\\t\\tif (UI.hollywood.get())\\n\\t\\t\\t\\tmainPanel.setTransitionEffect(new FadeEffect());\\n\\t\\t\\tMainWindow.getInstance().setDesktopVisible(!desktopVisible);\\n\\t\\t\\tif (UI.hollywood.get())\\n\\t\\t\\t\\tmainPanel.setTransitionEffect(null);\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (Kiosk.actionZoom.get())\\n\\t\\t\\t\\tMainWindow.getInstance().zoomEditor(ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (Kiosk.actionZoom.get())\\n\\t\\t\\t\\tMainWindow.getInstance().zoomEditor(ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "content": "The source code of `MainWindow` has been retrieved, and it provides valuable insights into how menu-related functionalities are handled in the current version of the project. Here's a breakdown of relevant observations:\n\n### Key Observations:\n1. **Menu Initialization:**\n   - The method `initMenuBar(PluginManager.Table plugins)` is responsible for setting up the main menu bar.\n   - It creates several menu instances such as `fileMenu`, `editMenu`, `viewMenu`, `bookmarksMenu`, `tagsMenu`, `toolsMenu`, and `helpMenu`.\n\n2. **Menu Usage:**\n   - These menus (`fileMenu`, `tagsMenu`, etc.) are added to the `menuBar` which is set as the main menu for the application window.\n   - Notably, `MMenu` references like `fileMenu`, `editMenu`, etc., are used throughout the class for adding actions and updating UI elements.\n\n3. **Historical Context:**\n   - Although `MMenu.java` has been removed from the project, its functionality appears to be preserved through direct usage of `MMenu` within `MainWindow`. This suggests that `MainWindow` might have assumed some responsibilities previously managed by `MMenu.java`.\n\n4. **References to Other Menu Components:**\n   - `PluginMenu`: Used in methods like `updateMenu()` and `initImportMenu()`, indicating integration with plugin-based menu extensions.\n   - `TagsMenu`: Instantiated and added to the menu bar, showing continued use of tag-related menu items.\n\n5. **Call Graph Correlation:**\n   - Entities like `PluginMenu`, `TagsMenu`, and `InternetSearchPanel` (from the call graph) are directly referenced in `MainWindow`, reinforcing their significance in relation to menu operations.\n\n### Next Steps:\n- Since `MainWindow` heavily utilizes `MMenu` and related components, we should analyze coupling dependencies between `MainWindow` and key menu-related entities such as `PluginMenu`, `TagsMenu`, and `InternetSearchPanel`.\n- Additionally, retrieving the source code of these entities will help understand their roles and interactions within the system.\n\nLet me begin by checking the coupling dependencies between `MainWindow` and `PluginMenu`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_6a63d24eaf4c441eb354a9",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow\", \"entity2\": \"PluginMenu\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "It appears there are no direct coupling dependencies between `MainWindow` and `PluginMenu`. This suggests that their interaction might be more dynamic or indirect, possibly through reflection or runtime mechanisms rather than static references in the code.\n\n### Alternative Approach:\nSince direct coupling analysis did not yield results, we should examine the source code of `PluginMenu`, `TagsMenu`, and `InternetSearchPanel` to understand how they integrate with `MainWindow` at runtime. Specifically, we can look for:\n- Usage of these classes within `MainWindow`.\n- Any dynamic loading or plugin-based integration patterns.\n\nLet me retrieve the source code for `PluginMenu` first.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_b697f3d380ca42129ce88c",
                    "function": {
                        "arguments": "{\"entity\": \"PluginMenu\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga.plugins;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MToolBar;\\npublic interface PluginMenu {\\n\\tpublic static final String BOOKMARKS_MENU = \\\"BOOKMARKS_MENU\\\";\\n\\tpublic static final String DESKTOP_MENU = \\\"DESKTOP_MENU\\\";\\n\\tpublic static final String EDIT_MENU = \\\"EDIT_MENU\\\";\\n\\tpublic static final String EXPORT_MENU = \\\"EXPORT_MENU\\\";\\n\\tpublic static final String FILE_MENU = \\\"FILE_MENU\\\";\\n\\tpublic static final String HELP_MENU = \\\"HELP_MENU\\\";\\n\\tpublic static final String IMPORT_MENU = \\\"IMPORT_MENU\\\";\\n\\tpublic static final String LABEL_MENU = \\\"LABEL_MENU\\\";\\n\\tpublic static final String NEW_MENU = \\\"NEW_MENU\\\";\\n\\tpublic static final String TABS_MENU = \\\"TABS_MENU\\\";\\n\\tpublic static final String TAGS_MENU = \\\"TAGS_MENU \\\";\\n\\tpublic static final String TOOLS_MENU = \\\"TOOLS_MENU\\\";\\n\\tpublic static final String TRAY_MENU = \\\"TRAY_MENU\\\";\\n\\tpublic static final String TREE_MENU = \\\"TREE_MENU\\\";\\n\\tpublic static final String VIEW_MENU_ALL = \\\"VIEW_MENU_ALL\\\";\\n\\tpublic static final String VIEW_MENU_EDITOR = \\\"VIEW_MENU_EDITOR\\\";\\n\\tpublic static final String WIDGETS_MENU = \\\"WIDGETS_MENU\\\";\\n\\tpublic static final String EDITOR_TOOL_BAR = \\\"EDITOR_TOOL_BAR\\\";\\n\\tpublic static final String MAIN_TOOL_BAR = \\\"MAIN_TOOL_BAR\\\";\\n\\tpublic void updateMenu(final String type, final MMenu menu);\\n\\tpublic void updateToolBar(final String type, final MToolBar toolBar);\\n}\""
        },
        {
            "content": "The source code for `PluginMenu` has been retrieved. Here's an analysis of its structure and potential integration points:\n\n### Key Observations:\n1. **Interface Definition:**\n   - `PluginMenu` is an interface that defines constants for various menu types (e.g., `FILE_MENU`, `EDIT_MENU`, `TAGS_MENU`) and toolbars (`EDITOR_TOOL_BAR`, `MAIN_TOOL_BAR`).\n   - It includes two abstract methods: `updateMenu(String type, MMenu menu)` and `updateToolBar(String type, MToolBar toolBar)`. These methods suggest that implementing classes are responsible for dynamically updating menus and toolbars based on the provided type.\n\n2. **Integration with MainWindow:**\n   - In `MainWindow`, we observed usage of `PluginManager.updateMenu(...)` and `PluginManager.updateToolBar(...)`, which likely interact with implementations of this interface to dynamically populate menus and toolbars at runtime.\n   - This implies that plugins or components within the system can extend or modify the UI by implementing `PluginMenu`.\n\n3. **No Direct Coupling:**\n   - The lack of direct coupling between `MainWindow` and `PluginMenu` suggests that `MainWindow` interacts with `PluginMenu` implementations indirectly through the plugin system, possibly via reflection or a service loader mechanism.\n\n### Next Steps:\n- To better understand how `PluginMenu` is used in practice, I will retrieve the source code for a class that implements `PluginMenu`. A logical candidate is `TagsMenu`, since it was identified in earlier steps as being part of the call graph and co-change history with `MMenu.java`.\n\nLet me now retrieve the source code for `TagsMenu`.\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_e2ed997a5bd3416e80adfb",
                    "function": {
                        "arguments": "{\"entity\": \"TagsMenu\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga.tags;\\nimport static org.makagiga.commons.UI._;\\nimport java.util.ArrayList;\\nimport java.util.HashSet;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Set;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MMenuAdapter;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.MetaInfoAction;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.search.Hit;\\nimport org.makagiga.search.Query;\\nimport org.makagiga.search.SortMethod;\\nimport org.makagiga.tree.Tree;\\npublic final class TagsMenu extends MMenu {\\n\\tpublic TagsMenu() {\\n\\t\\tsuper(_(\\\"T&ags\\\")); \\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tupdateMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\tprivate void updateMenu() {\\n\\t\\tremoveAll();\\n\\t\\tsetSplitMenu(true);\\n\\t\\tPluginManager.updateMenu(this, PluginMenu.TAGS_MENU, true);\\n\\t\\tMap<String, Set<String>> valueMap = TK.newHashMap();\\n\\t\\tTags allTags = Tags.getAll();\\n\\t\\tif (allTags.isEmpty()) {\\n\\t\\t\\taddTitle(_(\\\"No Tags\\\"));\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMArrayList<Submenu> submenusWithValues = new MArrayList<Submenu>();\\n\\t\\t\\tfor (String i : allTags) {\\n\\t\\t\\t\\tint valueIndex = i.lastIndexOf(':');\\n\\t\\t\\t\\tif ((valueIndex > 0) && (valueIndex < i.length() - 1)) {\\n\\t\\t\\t\\t\\tString key = i.substring(0, valueIndex).trim();\\n\\t\\t\\t\\t\\tSet<String> valueSet = valueMap.get(key);\\n\\t\\t\\t\\t\\tString value = i.substring(valueIndex + 1).trim();\\n\\t\\t\\t\\t\\tif (valueSet == null) {\\n\\t\\t\\t\\t\\t\\tvalueSet = new HashSet<String>();\\n\\t\\t\\t\\t\\t\\tvalueSet.add(value);\\n\\t\\t\\t\\t\\t\\tvalueMap.put(key, valueSet);\\n\\t\\t\\t\\t\\t\\tSubmenu submenu = new Submenu(null, i, key, valueSet);\\n\\t\\t\\t\\t\\t\\tsubmenusWithValues.add(submenu);\\n\\t\\t\\t\\t\\t\\tadd(submenu);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tvalueSet.add(value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tadd(new Submenu(i, i, null, null));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tfor (Submenu i : submenusWithValues) {\\n\\t\\t\\t\\tif (\\\"SYSTEM\\\".equals(i.key)) {\\n\\t\\t\\t\\t\\ti.system = true;\\n\\t\\t\\t\\t\\ti.setText(_(\\\"System Tags\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\ti.setText(i.key + \\\" (\\\" + i.values.size() + \\\")\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\taddSeparator();\\n\\t\\t}\\n\\t\\tadd(new Submenu(_(\\\"Untagged Items\\\"), \\\"\\\", null, null));\\n\\t}\\n\\tprivate static final class Submenu extends MMenu {\\n\\t\\tprivate boolean system;\\n\\t\\tprivate Set<String> values;\\n\\t\\tprivate String key;\\n\\t\\tprivate String tag;\\n\\t\\tprivate Submenu(final String text, final String tag, final String key, final Set<String> values) {\\n\\t\\t\\tsuper(text);\\n\\t\\t\\tthis.tag = tag;\\n\\t\\t\\tthis.key = key;\\n\\t\\t\\tthis.values = values;\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tupdateMenu();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tprivate void updateMenu() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tsetSplitMenu(true);\\n\\t\\t\\tif (values != null) {\\n\\t\\t\\t\\tTags sortedValues = new Tags();\\n\\t\\t\\t\\tsortedValues.addAll(values);\\n\\t\\t\\t\\tfor (String i : sortedValues) {\\n\\t\\t\\t\\t\\tString text = i;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (system) {\\n\\t\\t\\t\\t\\t\\tfor (TagsUtils.AutoTag autoTag : TagsUtils.AutoTag.values()) {\\n\\t\\t\\t\\t\\t\\t\\tif (i.equals(autoTag.getText())) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttext = autoTag.getLocalizedText();\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tadd(new Submenu(text, key + \\\":\\\" + i, null, null));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tQuery query = new Query(SortMethod.PATH);\\n\\t\\t\\tquery.add(Query.TAG, tag);\\n\\t\\t\\tQuery.Hits hits = query.start();\\n\\t\\t\\tif (\\\"\\\".equals(tag) && hits.isEmpty()) {\\n\\t\\t\\t\\taddTitle(_(\\\"No Items\\\"));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tint fileCount = 0;\\n\\t\\t\\t\\tfor (Hit i : hits) {\\n\\t\\t\\t\\t\\tif (i.get().isFile())\\n\\t\\t\\t\\t\\t\\tfileCount++;\\n\\t\\t\\t\\t\\tadd(new MetaInfoAction(i.get(), true));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ((fileCount > 1) && !\\\"\\\".equals(tag)) {\\n\\t\\t\\t\\t\\taddSeparator();\\n\\t\\t\\t\\t\\tadd(new Tree.OpenAllInTabsAction() {\\n\\t\\t\\t\\t\\t\\tprotected List<MetaInfo> getFileList() {\\n\\t\\t\\t\\t\\t\\t\\tQuery query = new Query();\\n\\t\\t\\t\\t\\t\\t\\tquery.add(Query.TAG, tag);\\n\\t\\t\\t\\t\\t\\t\\tQuery.Hits hits = query.start();\\n\\t\\t\\t\\t\\t\\t\\tList<MetaInfo> fileList = new ArrayList<MetaInfo>(hits.size());\\n\\t\\t\\t\\t\\t\\t\\tfor (Hit i : hits) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (i.get().isFile())\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfileList.add(i.get());\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treturn fileList;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `MMenu.java`\nChange set: [MainWindow, InternetSearchPanel, TreePanel, TagsMenu, Tabs, Bookmarks, TagsEditor, ColumnManager, Links, TaskTable, MetaInfoMenu, MList, PluginMenu, TreeSettingsButton, DocumentListButton, TaskPanel, MText, CalendarComponent, StaticHandler, CategoryManagerDialog, SortAction, SummaryPanel, MFileChooser, MComboBox, MTabbedPane, TaskList, GHNSDialog, VersionPanel, MSettingsDialog, CompletionList, CategoryMenu, SummaryCategory, Task, MouseGestures, Impl, ArticleList, AbstractTest, CompletionWindow, Pager, MColorMenu, ImageEditor, TaskStateMenu, ScriptIDE, TreeSettingsButton]\nDetails: Based on the analysis:\n- **MainWindow**: Directly uses menu-related components and was historically strongly co-changed with `MMenu.java`.\n- **InternetSearchPanel**, **TreePanel**, **TagsMenu**, **PluginMenu**: Part of the call graph of `MainWindow` and referenced in UI/menu logic.\n- **Tabs**, **Bookmarks**, **TagsEditor**, **ColumnManager**, **Links**, **TaskTable**, **MetaInfoMenu**, **MList**: Strong historical co-change relationships (confidence \u2265 10%).\n- Entities like **DocumentListButton**, **TaskPanel**, **MText**, **CalendarComponent**, **StaticHandler**, etc.: Show moderate-to-low confidence but were frequently changed alongside `MMenu.java`, suggesting potential indirect coupling.\n- Lower-confidence entities (**CategoryManagerDialog**, **SortAction**, **SummaryPanel**, etc.) are included to ensure recall, as they may still be impacted due to plugin/UI integration patterns observed.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4"
                ],
                "response_message": "m5"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6"
                ],
                "response_message": "m7"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8"
                ],
                "response_message": "m9"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10"
                ],
                "response_message": "m11"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12"
                ],
                "response_message": "m13"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14"
                ],
                "response_message": "m15"
            },
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m9",
                    "m10",
                    "m11",
                    "m12",
                    "m13",
                    "m14",
                    "m15",
                    "m16",
                    "m17"
                ],
                "response_message": "m18"
            }
        ],
        "mid_to_message": {
            "m1": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m2": {
                "role": "user",
                "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MMenu.java.\nBased on human experience in conducting CIA work, the results of the co-change are very significant. So start by calling the `get_co_change_relationship` function to get the results of the co-change."
            },
            "m3": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_4676847f4758472d9de893",
                        "function": {
                            "arguments": "{\"entity\": \"MMenu.java\"}",
                            "name": "get_co_change_relationship"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m4": {
                "name": "get_co_change_relationship",
                "role": "tool",
                "content": "[[\"FeedsFSPlugin\", \"1\", \"0.034482758620689655\"], [\"SummaryRenderer\", \"1\", \"0.034482758620689655\"], [\"Index\", \"1\", \"0.034482758620689655\"], [\"TextEditor\", \"1\", \"0.034482758620689655\"], [\"TextEditorDesigner\", \"1\", \"0.034482758620689655\"], [\"ActionGroup\", \"1\", \"0.034482758620689655\"], [\"VersionControl\", \"1\", \"0.034482758620689655\"], [\"MDialog\", \"2\", \"0.06896551724137931\"], [\"ScriptPlugin\", \"1\", \"0.034482758620689655\"], [\"Mnemonic\", \"1\", \"0.034482758620689655\"], [\"MButton\", \"2\", \"0.06896551724137931\"], [\"MMenuBar\", \"2\", \"0.06896551724137931\"], [\"Title\", \"1\", \"0.034482758620689655\"], [\"MainWindow\", \"7\", \"0.2413793103448276\"], [\"MDateSpinner\", \"2\", \"0.06896551724137931\"], [\"MTree\", \"2\", \"0.06896551724137931\"], [\"Tabs\", \"3\", \"0.10344827586206896\"], [\"Bookmarks\", \"3\", \"0.10344827586206896\"], [\"CalendarWidgetPlugin\", \"2\", \"0.06896551724137931\"], [\"DeskletWidget\", \"2\", \"0.06896551724137931\"], [\"MSystemTray\", \"1\", \"0.034482758620689655\"], [\"ImageInfo\", \"1\", \"0.034482758620689655\"], [\"Tree\", \"1\", \"0.034482758620689655\"], [\"MCellTip\", \"1\", \"0.034482758620689655\"], [\"MAction\", \"1\", \"0.034482758620689655\"], [\"AnnotationBar\", \"1\", \"0.034482758620689655\"], [\"MToolBar\", \"1\", \"0.034482758620689655\"], [\"ActionProperties\", \"1\", \"0.034482758620689655\"], [\"ScriptYourself\", \"1\", \"0.034482758620689655\"], [\"Help\", \"1\", \"0.034482758620689655\"], [\"LinkAction\", \"1\", \"0.034482758620689655\"], [\"FeedViewer\", \"2\", \"0.06896551724137931\"], [\"PropertiesBar\", \"1\", \"0.034482758620689655\"], [\"CharacterAction\", \"1\", \"0.034482758620689655\"], [\"BrushTypeAction\", \"1\", \"0.034482758620689655\"], [\"Vars\", \"1\", \"0.034482758620689655\"], [\"FlatPainter\", \"1\", \"0.034482758620689655\"], [\"TagsEditor\", \"3\", \"0.10344827586206896\"], [\"MenuButton\", \"1\", \"0.034482758620689655\"], [\"LabelMenuAction\", \"1\", \"0.034482758620689655\"], [\"AddWidgetAction\", \"1\", \"0.034482758620689655\"], [\"WidgetListAction\", \"1\", \"0.034482758620689655\"], [\"MCalendarPanel\", \"1\", \"0.034482758620689655\"], [\"Sidebar\", \"1\", \"0.034482758620689655\"], [\"MFontChooser\", \"1\", \"0.034482758620689655\"], [\"TreePanel\", \"4\", \"0.13793103448275862\"], [\"RatingPanel\", \"1\", \"0.034482758620689655\"], [\"ChartView\", \"1\", \"0.034482758620689655\"], [\"MLabel\", \"1\", \"0.034482758620689655\"], [\"MScrollPane\", \"1\", \"0.034482758620689655\"], [\"DragScroller\", \"1\", \"0.034482758620689655\"], [\"InternetSearchPlugin\", \"2\", \"0.06896551724137931\"], [\"InternetSearchPanel\", \"5\", \"0.1724137931034483\"], [\"UninstallOpenSearchPluginAction\", \"1\", \"0.034482758620689655\"], [\"MActionInfo\", \"1\", \"0.034482758620689655\"], [\"MNotification\", \"2\", \"0.06896551724137931\"], [\"TodoEditor\", \"1\", \"0.034482758620689655\"], [\"FeedsFS\", \"2\", \"0.06896551724137931\"], [\"TagsMenu\", \"4\", \"0.13793103448275862\"], [\"MMenuAdapter\", \"2\", \"0.06896551724137931\"], [\"QueryEditor\", \"1\", \"0.034482758620689655\"], [\"MText\", \"2\", \"0.06896551724137931\"], [\"CalendarWidget\", \"1\", \"0.034482758620689655\"], [\"Submenu\", \"2\", \"0.06896551724137931\"], [\"Desktop\", \"1\", \"0.034482758620689655\"], [\"MSmallColorChooser\", \"1\", \"0.034482758620689655\"], [\"ColumnManager\", \"3\", \"0.10344827586206896\"], [\"Links\", \"3\", \"0.10344827586206896\"], [\"TaskTable\", \"3\", \"0.10344827586206896\"], [\"MetaInfoMenu\", \"3\", \"0.10344827586206896\"], [\"ImportMenu\", \"2\", \"0.06896551724137931\"], [\"TaskPanel\", \"2\", \"0.06896551724137931\"], [\"DocumentList\", \"1\", \"0.034482758620689655\"], [\"CalendarComponent\", \"2\", \"0.06896551724137931\"], [\"PopupContent\", \"1\", \"0.034482758620689655\"], [\"MMessage\", \"2\", \"0.06896551724137931\"], [\"FileInfoPanel\", \"1\", \"0.034482758620689655\"], [\"MTip\", \"1\", \"0.034482758620689655\"], [\"FeedThread\", \"1\", \"0.034482758620689655\"], [\"StaticHandler\", \"2\", \"0.06896551724137931\"], [\"MList\", \"3\", \"0.10344827586206896\"], [\"MComboBox\", \"1\", \"0.034482758620689655\"], [\"MTabbedPane\", \"1\", \"0.034482758620689655\"], [\"TaskList\", \"1\", \"0.034482758620689655\"], [\"GHNSDialog\", \"1\", \"0.034482758620689655\"], [\"VersionPanel\", \"1\", \"0.034482758620689655\"], [\"MSettingsDialog\", \"1\", \"0.034482758620689655\"], [\"CompletionList\", \"1\", \"0.034482758620689655\"], [\"CategoryManagerDialog\", \"1\", \"0.034482758620689655\"], [\"SortAction\", \"1\", \"0.034482758620689655\"], [\"CategoryMenu\", \"2\", \"0.06896551724137931\"], [\"SummaryPanel\", \"1\", \"0.034482758620689655\"], [\"MFileChooser\", \"1\", \"0.034482758620689655\"], [\"DocumentListButton\", \"2\", \"0.06896551724137931\"], [\"SummaryCategory\", \"1\", \"0.034482758620689655\"], [\"Task\", \"1\", \"0.034482758620689655\"], [\"MouseGestures\", \"1\", \"0.034482758620689655\"], [\"Impl\", \"1\", \"0.034482758620689655\"], [\"ArticleList\", \"1\", \"0.034482758620689655\"], [\"AbstractTest\", \"1\", \"0.034482758620689655\"], [\"CompletionWindow\", \"1\", \"0.034482758620689655\"], [\"Pager\", \"1\", \"0.034482758620689655\"], [\"MColorMenu\", \"1\", \"0.034482758620689655\"], [\"ImageEditor\", \"1\", \"0.034482758620689655\"], [\"TaskStateMenu\", \"1\", \"0.034482758620689655\"], [\"ScriptIDE\", \"1\", \"0.034482758620689655\"], [\"TreeSettingsButton\", \"1\", \"0.034482758620689655\"]]"
            },
            "m5": {
                "content": "The co-change relationships for `MMenu.java` have been retrieved. The results include a list of entities along with their support count and confidence score. To prioritize the most significant entities for synchronization, we should focus on those with higher confidence scores (higher likelihood of being impacted) and relatively high support counts (more historical evidence).\n\n### Observations:\n1. **High Confidence & Support:**\n   - `MainWindow`: 7 supports, confidence \u2248 24.14%\n   - `InternetSearchPanel`: 5 supports, confidence \u2248 17.24%\n   - `TreePanel`: 4 supports, confidence \u2248 13.79%\n   - `TagsMenu`: 4 supports, confidence \u2248 13.79%\n\n   These files are frequently modified together with `MMenu.java`. They show relatively strong historical coupling.\n\n2. **Moderate Confidence & Support:**\n   - `Tabs`, `Bookmarks`, `TagsEditor`, `ColumnManager`, `Links`, `TaskTable`, `MetaInfoMenu`, `MList`, etc.: Each has 3 supports and confidence \u2248 10.34%.\n   - These files also have notable historical correlation with `MMenu.java`.\n\n3. **Low Confidence & Support:**\n   - Most of the remaining files (e.g., `FeedsFSPlugin`, `SummaryRenderer`, `Index`, etc.) have only 1 or 2 supports and low confidence (\u22483.45% to ~6.90%). These may not be critical unless further analysis confirms dependencies.\n\n### Next Steps:\n- Focus on analyzing direct dependencies for the top candidates (`MainWindow`, `InternetSearchPanel`, `TreePanel`, `TagsMenu`) using the `get_coupling_dependencies` function to confirm structural relationships.\n- Additionally, call `get_call_graph` for `MMenu.java` to identify which entities it directly references in its code.\n\nLet me proceed by analyzing the coupling dependencies between `MMenu.java` and `MainWindow`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_7ae6c183af734dbe8a1e8c",
                        "function": {
                            "arguments": "{\"entity1\": \"MMenu.java\", \"entity2\": \"MainWindow\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m6": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"MMenu has been removed from the project due to project version iteration\"]"
            },
            "m7": {
                "content": "It appears that `MMenu.java` has been removed from the project due to version iteration. This explains why there is no coupling dependency found between `MMenu.java` and `MainWindow`.\n\nGiven this new information, our approach should shift slightly:\n\n1. Since `MMenu.java` no longer exists in the current project version, we need to understand how its functionality or responsibilities have been transferred or replaced.\n2. We can examine entities that historically had strong co-change relationships with `MMenu.java`, such as `MainWindow`, `InternetSearchPanel`, `TreePanel`, and `TagsMenu`, to see if they now include behavior previously handled by `MMenu.java`.\n3. To proceed, I will analyze the call graph of `MainWindow` to identify whether it directly references any menu-related logic or components.\n\nLet me now retrieve the call graph for `MainWindow`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_0df74e60532a4a7aa7e7cb",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m8": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"FS\", \"MIcon\", \"ScriptError\", \"Args\", \"WebBrowserEditor\", \"Console\", \"TreeFS\", \"Help\", \"InternetSearchPanel\", \"EditorExport\", \"MLogger\", \"EditorQuickFind\", \"TreeSettingsButton\", \"ScriptExecutor\", \"OS\", \"ImportExport\", \"SessionManager\", \"SummaryData\", \"ConsoleTab\", \"MetaInfo\", \"EditorDesigner\", \"PluginMenu\", \"Browser\", \"GeneralSettings\", \"QuickOpenDialog\", \"Tracker\", \"EditorSearch\", \"WTFError\", \"LookAndFeelSettings\", \"TreePanel\", \"PropertiesPanel\", \"SearchBar\", \"Designer\", \"Config\", \"DesktopPanel\", \"Presentation\", \"PropertiesBar\", \"TagsMenu\", \"MAction\", \"AbstractFS\", \"Bookmarks\", \"TK\", \"LocationBar\", \"Editor\", \"ProxySettings\", \"EditorNavigation\", \"NavigationUtils\", \"PrintDialog\", \"PluginType\", \"EditorPlugin\", \"MApplication\", \"EditorZoom\", \"Autosave\", \"Desktop\", \"PluginInfo\", \"EditorPrint\", \"PluginSettings\", \"TreeSettings\", \"UI\", \"PluginManager\", \"MActionInfo\", \"Kiosk\", \"Tree\"]"
            },
            "m9": {
                "content": "The call graph for `MainWindow` has been retrieved. It includes references to several entities that are likely related to menu functionality or user interface components. Notably, the following entities stand out in the context of menus and UI:\n\n- `PluginMenu`\n- `TagsMenu`\n- `InternetSearchPanel`\n- `TreePanel`\n\nThese align with our earlier list of strong co-change relationships with `MMenu.java`, suggesting that `MainWindow` may have absorbed or replaced some of the responsibilities previously handled by `MMenu.java`.\n\n### Next Steps:\n- To better understand how these menu-related components are used within `MainWindow`, I will retrieve the source code of `MainWindow` using the `get_origin_code` function.\n- This will allow us to inspect how these referenced entities (e.g., `PluginMenu`, `TagsMenu`) are utilized and whether there is any explicit handling of menu structures.\n\nLet me now retrieve the source code for `MainWindow`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_ddfc49f9cea54371941e6d",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m10": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.TrayIcon;\\nimport java.awt.event.MouseEvent;\\nimport java.io.File;\\nimport java.io.FileNotFoundException;\\nimport java.net.URL;\\nimport java.util.List;\\nimport java.util.Map;\\nimport javax.script.ScriptException;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAboutDialog;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MCellTip;\\nimport org.makagiga.commons.MFlipPanel;\\nimport org.makagiga.commons.MGuardedObject;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLabel;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.MMainWindow;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MMenuAdapter;\\nimport org.makagiga.commons.MMenuBar;\\nimport org.makagiga.commons.MMouseAdapter;\\nimport org.makagiga.commons.MPanel;\\nimport org.makagiga.commons.MSettingsDialog;\\nimport org.makagiga.commons.MSettingsPage;\\nimport org.makagiga.commons.MSmallButton;\\nimport org.makagiga.commons.MSplitPane;\\nimport org.makagiga.commons.MStatusBar;\\nimport org.makagiga.commons.MSystemTray;\\nimport org.makagiga.commons.MToolBar;\\nimport org.makagiga.commons.MWebBrowserPanel;\\nimport org.makagiga.commons.MWhatsThis;\\nimport org.makagiga.commons.MouseGestures;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.PermissionInfo;\\nimport org.makagiga.commons.Preloader;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.fx.ImageTransition.FadeEffect;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.DesktopPanel;\\nimport org.makagiga.editors.ConsoleTab;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.EditorZoom.ZoomType;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.editors.WebBrowserEditor;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.internetsearch.InternetSearchPanel;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.search.SearchBar;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.Bookmarks;\\nimport org.makagiga.tools.Browser;\\nimport org.makagiga.tools.EditorQuickFind;\\nimport org.makagiga.tools.GeneralSettings;\\nimport org.makagiga.tools.Help;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.presentation.Presentation;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.TreeSettings;\\nimport org.makagiga.tree.TreeSettingsButton;\\nimport org.makagiga.tree.tracker.Tracker;\\npublic final class MainWindow extends MMainWindow {\\n\\tprivate Bookmarks.Menu bookmarksMenu;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate final InternetSearchPanel internetSearchPanel;\\n\\tprivate JComponent tabBar;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate static MGuardedObject<MainWindow> _guardedInstance;\\n\\tprivate MLabel editorStatusText;\\n\\tprivate final MFlipPanel mainPanel;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu goToMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tabsMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate MPanel navigationPanel;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate MToolBar editorToolBar;\\n\\tprivate final MToolBar mainToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideMainToolBarAction showHideMainToolBarAction;\\n\\tprivate ShowHideEditorToolBarAction showHideEditorToolBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate MApplication.ToggleStatusBarAction toggleStatusBarAction;\\n\\tprivate Presentation.Action presentationAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\t\\tprivate InternetSearchAction internetSearchAction;\\n\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"tabs-menu\\\", tabsMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\t\\\"goto-menu\\\", goToMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\\"main-tool-bar\\\", mainToolBar,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"presentation-action\\\", presentationAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t\\t\\telements.put(\\\"editor-tool-bar\\\", editorToolBar);\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_guardedInstance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _guardedInstance.get();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tUI.replaceComponent(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\t@Override\\n\\tpublic void setDesktopVisible(final boolean value) {\\n\\t\\tsuper.setDesktopVisible(value);\\n\\t\\tboolean desktopVisible = isDesktopVisible();\\n\\t\\tmainPanel.setFrontVisible(!desktopVisible, UI.hollywood.get());\\n\\t\\ttoggleDesktopAction.setEnabled(!Tabs.getInstance().isEmpty());\\n\\t\\ttoggleDesktopAction.setName(desktopVisible ? _(\\\"Hide Widgets\\\") : _(\\\"Show Widgets\\\"));\\n\\t\\tupdateState();\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tDesktopPanel.getInstance().focus();\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tUI.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tpublic boolean isHorizontalSplit() {\\n\\t\\treturn mainSplitPane.getOrientation() == MSplitPane.HORIZONTAL_SPLIT;\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _guardedInstance != null;\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object object) {\\n\\t\\tif (object == null)\\n\\t\\t\\treturn null;\\n\\t\\tsynchronized (object) {\\n\\t\\t\\tif (object instanceof MAboutDialog) {\\n\\t\\t\\t\\tMAboutDialog about = (MAboutDialog)object;\\n\\t\\t\\t\\tabout.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", \\\"gmx\\\\u002enet\\\", \\\"lopoff\\\");\\n\\t\\t\\t\\tabout.addCredit(\\\"The Glossitope Team\\\", \\\"Glossitope Widgets\\\", \\\"http:\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseGestures) {\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\t\\tMouseGestures mouseGestures = (MouseGestures)object;\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\t\\tmouseGestures.add(consoleAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LD\\\", searchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t\\t@Override\\n\\t\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} );\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"U\\\", internetSearchAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Ucs\\\", configureAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"UR\\\", _(\\\"Find Text\\\"), findAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"URDL\\\", printAction);\\n\\t\\t\\t\\tmouseGestures.registerGesture(\\\"Us\\\", presentationAction);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\t@Override\\n\\tpublic Object onDynamicInit(final Object source, final Object object) {\\n\\t\\tif (source instanceof TrayIcon) {\\n\\t\\t\\tif (object instanceof MMenu) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tMMenu menu = (MMenu)object;\\n\\t\\t\\t\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\t\\t\\t\\tmenu.add(new Bookmarks.Menu(MIcon.small(\\\"ui/bookmark\\\")));\\n\\t\\t\\t\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\telse if (object instanceof MouseEvent) {\\n\\t\\t\\t\\tsynchronized (object) {\\n\\t\\t\\t\\t\\tMouseEvent event = (MouseEvent)object;\\n\\t\\t\\t\\t\\tif (MMouseAdapter.isMiddle(event)) {\\n\\t\\t\\t\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn null;\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tMLogger.info(\\\"makagiga\\\", \\\"Saving session...\\\");\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\tconfig.write(\\\"Splitter.Main.orientation\\\", isHorizontalSplit() ? \\\"HORIZONTAL\\\" : \\\"VERTICAL\\\");\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tconfig.write(\\\"StatusBar.enabled\\\", toggleStatusBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Editor.enabled\\\", showHideEditorToolBarAction.isSelected());\\n\\t\\tconfig.write(\\\"ToolBar.Main.enabled\\\", showHideMainToolBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tDesktop.getInstance().saveSession();\\n\\t\\tconfig.sync();\\n\\t}\\n\\tpublic void setEditorStatusText(final String value) {\\n\\t\\tif (TK.isEmpty(value)) {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tString text = null;\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tif (editor.getInfo() == null) {\\n\\t\\t\\t\\t\\tAbstractFS fs = editor.getMetaInfo().getFS();\\n\\t\\t\\t\\t\\ttext = (fs == null) ? null : fs.getName();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\ttext = editor.getInfo().toString();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\teditorStatusText.setText(text);\\n\\t\\t\\teditorStatusText.setToolTipText(text);\\n\\t\\t\\teditorStatusText.setVisible(text != null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\teditorStatusText.setText(value);\\n\\t\\t\\teditorStatusText.setToolTipText(value);\\n\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t}\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar sidebar = Sidebar.getInstance();\\n\\t\\tmainWindow.mainSplitPane.setSidebarVisible(true);\\n\\t\\tif (tab != null) {\\n\\t\\t\\tif (toggle) {\\n\\t\\t\\t\\tif (sidebar.isSelected(tab))\\n\\t\\t\\t\\t\\tsidebar.selectLastTab();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tsidebar.goTo(tab);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tsidebar.goTo(tab);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t\\t\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t\\t\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_guardedInstance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_guardedInstance = new MGuardedObject<MainWindow>(this, \\\"org.makagiga.MainWindow\\\", PermissionInfo.ThreatLevel.MEDIUM, \\\"Main Window\\\");\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\tinitStatusBar();\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\t\\t\\ttabPanel = MPanel.createBorderPanel();\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\ttabPanel.setVisible(false); \\t\\t\\n\\t\\t\\t\\tfinal TreePanel treePanel = TreePanel.getInstance();\\n\\t\\tmainToolBar = new MToolBar();\\n\\t\\tmainToolBar.setTextPosition(MToolBar.TextPosition.ALONGSIDE_ICONS);\\n\\t\\tMWhatsThis.set(mainToolBar, _(\\\"Main Tool Bar\\\"));\\n\\t\\tmainToolBar.addButton(treePanel.getNewFileButton(), MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addButton(new TreeSettingsButton());\\n\\t\\tPluginManager.updateToolBar(table, mainToolBar, PluginMenu.MAIN_TOOL_BAR, true);\\n\\t\\tmainToolBar.addStretch();\\n\\t\\tmainToolBar.readConfig(\\\"main\\\");\\n\\t\\tmainToolBar.add(toggleDesktopAction, MToolBar.SHOW_TEXT);\\n\\t\\tmainToolBar.addGap();\\n\\t\\tinternetSearchPanel = new InternetSearchPanel();\\n\\t\\tinternetSearchPanel.getOKButton().setVisible(false);\\n\\t\\tif (!Kiosk.actionInternetSearch.get())\\n\\t\\t\\tinternetSearchPanel.setVisible(false);\\n\\t\\tmainToolBar.add(internetSearchPanel);\\n\\t\\tmainToolBar.addGap();\\n\\t\\taddNorth(mainToolBar);\\n\\t\\t\\t\\tmainPanel = new MFlipPanel(tabPanel, DesktopPanel.getInstance());\\n\\t\\tmainSplitPane.setRightComponent(mainPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\tif (MApplication.consoleOpenInTab.get())\\n\\t\\t\\tConsoleTab.install(); \\t\\trestoreSession();\\n\\t\\t\\t\\tScriptException userScriptError = null;\\n\\t\\tif (ScriptExecutor.userScript.get()) {\\n\\t\\t\\tFile userScriptFile = new File(FS.makePath(FS.makeConfigPath(\\\"scripts\\\"), \\\"user.js\\\"));\\n\\t\\t\\tif (userScriptFile.exists()) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tScriptExecutor.execute(userScriptFile);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (FileNotFoundException exception) { } \\t\\t\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\t\\t\\tuserScriptError = exception;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (Exception exception) {\\n\\t\\t\\t\\t\\tMLogger.exception(exception);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tsetDesktopVisible(tabs.isEmpty());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new MouseGestures() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic boolean canShowMessage() {\\n\\t\\t\\t\\treturn !Presentation.isActive();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMSystemTray.setVisible(UI.systemTray.get());\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t\\t\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\telse if (Args.isSet(\\\"presentation\\\"))\\n\\t\\t\\t\\tPresentation.setActive(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (tabs.isEmpty())\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\telse\\n\\t\\t\\t\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tMStatusBar.ready();\\n\\t\\tsetDesktopVisible(tabs.isEmpty());\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\t\\t\\tPreloader.add(Preloader.FontListPreloader.class, true);\\n\\t\\t\\t\\tif (Vars.preloaderClass.get())\\n\\t\\t\\tPreloader.start();\\n\\t\\tMWebBrowserPanel.setBrowserLauncher(new MWebBrowserPanel.BrowserLauncher() {\\n\\t\\t\\tpublic void openURL(final URL url) {\\n\\t\\t\\t\\tBrowser.openURL(url.toString());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideMainToolBarAction = new ShowHideMainToolBarAction();\\n\\t\\tshowHideEditorToolBarAction = new ShowHideEditorToolBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\ttoggleStatusBarAction = new MApplication.ToggleStatusBarAction(getStatusBar());\\n\\t\\tpresentationAction = new Presentation.Action();\\n\\t\\t\\t\\tinternetSearchAction = new InternetSearchAction();\\n\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\t\\t\\tJComponent c = getRootPane();\\n\\t\\tnew QuickSaveAction().connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t\\tif (Kiosk.actionInternetSearch.get())\\n\\t\\t\\tinternetSearchAction.connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t\\tpresentationAction.connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t\\tsearchAction.connect(c, JComponent.WHEN_IN_FOCUSED_WINDOW);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\texportMenu.setSplitMenu(true);\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getInfo().getPluggable();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported by this file\\\"), \\\"ui/error\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Select or open an item you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initImportMenu() {\\n\\t\\timportMenu.removeAll();\\n\\t\\timportMenu.setSplitMenu(true);\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif ((currentFS instanceof TreeFS) && currentFolder.canModify()) {\\n\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPluggable();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\timportMenu.add(importAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\timportMenu.addSeparator();\\n\\t\\t\\timportMenu.add(new MAction(_(\\\"Import from {0}\\\", \\\"Incollector 1.x\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tImportExport.importIncollector();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tfor (AbstractFS i : Tree.getInstance().getFileSystems().values()) {\\n\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, importMenu);\\n\\t\\t}\\n\\t\\tPluginManager.updateMenu(importMenu, PluginMenu.IMPORT_MENU, false);\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tfileMenu.setSplitMenu(true);\\n\\t\\tfileMenu.add(new QuickOpenDialog.Action());\\n\\t\\tfileMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\tfileMenu.add(NavigationUtils.getNextAction());\\n\\t\\tfileMenu.addSeparator();\\n\\t\\ttabsMenu = tabs.createTabsMenu();\\n\\t\\tfileMenu.add(tabsMenu);\\n\\t\\tif (Vars.tabsRecentlyClosedTabs.get())\\n\\t\\t\\tfileMenu.add(tabs.createRecentlyClosedTabsMenu());\\n\\t\\tfileMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new MMenu(MActionInfo.IMPORT.getText()); \\t\\timportMenu.setToolTipText(UI.makeHTML(\\n\\t\\t\\t_(\\\"Imports a selected files into the <b>Tree</b>.<br>Tip: You can use drag and drop to import/export files.\\\")\\n\\t\\t));\\n\\t\\timportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitImportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\timportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tif (Kiosk.actionPrint.get())\\n\\t\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideMainToolBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideEditorToolBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(toggleStatusBarAction);\\n\\t\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\t}\\n\\t\\tgoToMenu = new MMenu(_(\\\"Go To\\\"));\\n\\t\\tgoToMenu.add(showHideSidebarAction);\\n\\t\\tgoToMenu.add(toggleSummaryAction);\\n\\t\\tgoToMenu.add(toggleDesignerAction);\\n\\t\\tgoToMenu.add(toggleDesktopAction);\\n\\t\\tviewMenu.add(goToMenu);\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tif (Vars.actionPresentation.get())\\n\\t\\t\\tviewMenu.add(presentationAction);\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new Bookmarks.Menu(null);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\ttoolsMenu.setSplitMenu(true);\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\tif (Kiosk.pluginManager.get()) {\\n\\t\\t\\ttoolsMenu.addSeparator();\\n\\t\\t\\ttoolsMenu.add(new PluginSettings.Action());\\n\\t\\t\\ttoolsMenu.add(PluginManager.createPluginOptionsAction());\\n\\t\\t}\\n\\t\\tif (Kiosk.actionSettings.get()) {\\n\\t\\t\\ttoolsMenu.addSeparator();\\n\\t\\t\\ttoolsMenu.add(configureAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\tif (Kiosk.actionWhatsThis.get())\\n\\t\\t\\thelpMenu.add(MWhatsThis.createAction(this));\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new MApplication.AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setVisible(false);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void initStatusBar() {\\n\\t\\tMStatusBar statusBar = getStatusBar();\\n\\t\\teditorStatusText = new MLabel();\\n\\t\\t\\t\\tstatusBar.addStretch();\\n\\t\\tstatusBar.add(editorStatusText);\\n\\t\\tstatusBar.addGap();\\n\\t\\tnavigationPanel = MPanel.createHBoxPanel();\\n\\t\\tnavigationPanel.setVisible(false);\\n\\t\\tstatusBar.add(navigationPanel);\\n\\t\\tstatusBar.add(new MSmallButton(NavigationUtils.getPreviousAction(), false));\\n\\t\\tstatusBar.add(new MSmallButton(NavigationUtils.getNextAction(), true));\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\tgetStatusBar().setClosed(!config.read(\\\"StatusBar.enabled\\\", true));\\n\\t\\tshowHideEditorToolBarAction.setSelected(config.read(\\\"ToolBar.Editor.enabled\\\", true));\\n\\t\\tshowHideMainToolBarAction.setSelected(config.read(\\\"ToolBar.Main.enabled\\\", true));\\n\\t\\tmainToolBar.setVisible(showHideMainToolBarAction.isSelected());\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tDesktop.getInstance().restoreSession();\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif ((editor != null) && !DesktopPanel.getInstance().isVisible()) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addTitle(_(\\\"Search\\\"));\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif (!editMenu.isEmpty())\\n\\t\\t\\t\\teditMenu.addSeparator();\\n\\t\\t\\tif (Kiosk.actionSettings.get())\\n\\t\\t\\t\\teditMenu.add(configureAction);\\n\\t\\t\\t}\\n\\tprivate void updateSidebar(final Editor<?> editor, final Designer designer) {\\n\\t\\tSidebar sidebar = Sidebar.getInstance();\\n\\t\\tSidebar.Button button = sidebar.getButtonFor(Sidebar.Tab.DESIGNER);\\n\\t\\tsidebar.setDesigner(designer);\\n\\t\\tif (designer == null) {\\n\\t\\t\\tif (button != null)\\n\\t\\t\\t\\tbutton.setText(Sidebar.Tab.DESIGNER.getTitle());\\n\\t\\t\\tif (sidebar.isDesignerSelected())\\n\\t\\t\\t\\tsidebar.goTo(Sidebar.Tab.TREE, false);\\n\\t\\t\\ttoggleDesignerAction.setEnabled(false);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (button != null) {\\n\\t\\t\\t\\tString text = Sidebar.Tab.DESIGNER.getTitle();\\n\\t\\t\\t\\tString displayText = designer.getDisplayText();\\n\\t\\t\\t\\tif (displayText != null)\\n\\t\\t\\t\\t\\ttext += (\\\" - \\\" + displayText);\\n\\t\\t\\t\\tbutton.setText(text);\\n\\t\\t\\t}\\n\\t\\t\\tdesigner.repaint(); \\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tdesigner.setLocked(!editor.getMetaInfo().canModify());\\n\\t\\t\\ttoggleDesignerAction.setEnabled(true);\\n\\t\\t\\t\\t\\t\\tif (sidebar.isDesignerSelected()) {\\n\\t\\t\\t\\tif (button != null)\\n\\t\\t\\t\\t\\tbutton.select();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tDesigner designer = null;\\n\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\t\\t\\t\\tMAction closeAction = tabs.getCloseAction();\\n\\t\\t\\ttabsMenu.setEnabled(closeAction.isEnabled());\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\t\\t\\t\\tnavigationPanel.removeAll();\\n\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\tJComponent navigationComponent = EditorNavigation.class.cast(editor).getNavigationComponent();\\n\\t\\t\\t\\tif (navigationComponent == null) {\\n\\t\\t\\t\\t\\tnavigationPanel.setVisible(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tnavigationPanel.add(navigationComponent);\\n\\t\\t\\t\\t\\tnavigationPanel.setVisible(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tnavigationPanel.setVisible(false);\\n\\t\\t\\t}\\n\\t\\t\\tif ((editor != null) && !DesktopPanel.getInstance().isVisible()) {\\n\\t\\t\\t\\temailAction.setEnabled(metaInfo.isFile() && Vars.actionSendFile.get());\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editorToolBar == null) {\\n\\t\\t\\t\\t\\teditorToolBar = new MToolBar();\\n\\t\\t\\t\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\t\\teditorToolBar.setOpaque(false);\\n\\t\\t\\t\\t\\ttabPanel.addNorth(editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ((editor instanceof EditorPrint) && Kiosk.actionPrint.get()) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t(editor instanceof WebBrowserEditor) &&\\n\\t\\t\\t\\t\\t\\t!WebBrowserEditor.class.cast(editor).isPrintActionVisible()\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tprintAction.setEnabled(true);\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(printAction);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addSeparator();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\teditorToolBar.readConfig(\\\"editor\\\");\\n\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (Presentation.isActive())\\n\\t\\t\\t\\t\\teditorToolBar.setVisible(false);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBar.setVisible(showHideEditorToolBarAction.isSelected());\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\teditorStatusText.setVisible(true);\\n\\t\\t\\t\\tsetEditorStatusText(editor.getStatusText());\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\temailAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tLocationBar.getInstance().setVisible(false);\\n\\t\\t\\t\\teditorStatusText.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t\\tprintAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tsetEditorStatusText(null);\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tupdateSidebar(editor, designer);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (EditorQuickFind.isInstance() && (tabBar == EditorQuickFind.getInstance())) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTitle() {\\n\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\tString name = MApplication.getFullName();\\n\\t\\tif (FS.getProfile() != null)\\n\\t\\t\\tname += \\\" [\\\" + FS.getProfile() + \\\"]\\\";\\n\\t\\telse if (FS.isPortable())\\n\\t\\t\\tname += \\\" [Portable]\\\";\\n\\t\\tif (MApplication.isSafeMode())\\n\\t\\t\\tname += \\\" [Safe-Mode]\\\";\\n\\t\\tif ((metaInfo != null) && !DesktopPanel.getInstance().isVisible()) {\\n\\t\\t\\tString metaInfoName = metaInfo.toString();\\n\\t\\t\\t\\t\\t\\tif (OS.isWindows())\\n\\t\\t\\t\\tmetaInfoName = metaInfoName.replace(\\\"\\\\n\\\", \\\"\\\");\\n\\t\\t\\tsetTitle(metaInfoName + \\\" - \\\" + name);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tsetTitle(name);\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.ConfigureAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Kiosk.actionSettings.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tMSettingsDialog<MSettingsPage> dialog = new MSettingsDialog<MSettingsPage>(\\n\\t\\t\\t\\tmainWindow,\\n\\t\\t\\t\\t\\\"configure\\\",\\n\\t\\t\\t\\tUI.TOP\\n\\t\\t\\t);\\n\\t\\t\\tdialog.setAutoResizeWindow(true);\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\t\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.addAdvancedPage(GeneralSettings.Advanced.class);\\n\\t\\t\\tdialog.addAdvancedPage(TreeSettings.Advanced.class);\\n\\t\\t\\tdialog.addAdvancedPage(LookAndFeelSettings.Advanced.class);\\n\\t\\t\\tif (dialog.exec())\\n\\t\\t\\t\\tmainWindow.repaint();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t\\tif (!Kiosk.actionSettings.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Vars.actionSendFile.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MApplication.FindAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MApplication.FindNextAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MApplication.HelpAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tHelp.show();\\n\\t\\t}\\n\\t}\\n\\tprivate final class InternetSearchAction extends InternetSearchPanel.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Kiosk.actionInternetSearch.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tInternetSearchPanel isp = MainWindow.this.internetSearchPanel;\\n\\t\\t\\tif (isp.isEmpty()) {\\n\\t\\t\\t\\tString defaultText =\\n\\t\\t\\t\\t\\t(Editor.getCurrentEditor() instanceof EditorSearch)\\n\\t\\t\\t\\t\\t? EditorSearch.class.cast(Editor.getCurrentEditor()).getDefaultSearchText()\\n\\t\\t\\t\\t\\t: \\\"\\\";\\n\\t\\t\\t\\tisp.setText(defaultText);\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (!MainWindow.this.mainToolBar.isVisible()) {\\n\\t\\t\\t\\tMainWindow.this.showHideMainToolBarAction.setSelected(true);\\n\\t\\t\\t\\tMainWindow.this.mainToolBar.setVisible(true);\\n\\t\\t\\t}\\n\\t\\t\\tisp.makeDefault();\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (!Kiosk.actionPrint.get())\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(\\\"Quick Save\\\", VK_S, CTRL_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideEditorToolBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMToolBar editorToolBar = MainWindow.getInstance().editorToolBar;\\n\\t\\t\\tif (editorToolBar != null)\\n\\t\\t\\t\\teditorToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideEditorToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Tab Tool Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideMainToolBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainToolBar.setVisible(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideMainToolBarAction() {\\n\\t\\t\\tsuper(_(\\\"Main Tool Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tPropertiesBar.freeInstance();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tboolean desktopVisible = DesktopPanel.getInstance().isVisible();\\n\\t\\t\\tif (UI.hollywood.get())\\n\\t\\t\\t\\tmainPanel.setTransitionEffect(new FadeEffect());\\n\\t\\t\\tMainWindow.getInstance().setDesktopVisible(!desktopVisible);\\n\\t\\t\\tif (UI.hollywood.get())\\n\\t\\t\\t\\tmainPanel.setTransitionEffect(null);\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (Kiosk.actionZoom.get())\\n\\t\\t\\t\\tMainWindow.getInstance().zoomEditor(ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tif (Kiosk.actionZoom.get())\\n\\t\\t\\t\\tMainWindow.getInstance().zoomEditor(ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m11": {
                "content": "The source code of `MainWindow` has been retrieved, and it provides valuable insights into how menu-related functionalities are handled in the current version of the project. Here's a breakdown of relevant observations:\n\n### Key Observations:\n1. **Menu Initialization:**\n   - The method `initMenuBar(PluginManager.Table plugins)` is responsible for setting up the main menu bar.\n   - It creates several menu instances such as `fileMenu`, `editMenu`, `viewMenu`, `bookmarksMenu`, `tagsMenu`, `toolsMenu`, and `helpMenu`.\n\n2. **Menu Usage:**\n   - These menus (`fileMenu`, `tagsMenu`, etc.) are added to the `menuBar` which is set as the main menu for the application window.\n   - Notably, `MMenu` references like `fileMenu`, `editMenu`, etc., are used throughout the class for adding actions and updating UI elements.\n\n3. **Historical Context:**\n   - Although `MMenu.java` has been removed from the project, its functionality appears to be preserved through direct usage of `MMenu` within `MainWindow`. This suggests that `MainWindow` might have assumed some responsibilities previously managed by `MMenu.java`.\n\n4. **References to Other Menu Components:**\n   - `PluginMenu`: Used in methods like `updateMenu()` and `initImportMenu()`, indicating integration with plugin-based menu extensions.\n   - `TagsMenu`: Instantiated and added to the menu bar, showing continued use of tag-related menu items.\n\n5. **Call Graph Correlation:**\n   - Entities like `PluginMenu`, `TagsMenu`, and `InternetSearchPanel` (from the call graph) are directly referenced in `MainWindow`, reinforcing their significance in relation to menu operations.\n\n### Next Steps:\n- Since `MainWindow` heavily utilizes `MMenu` and related components, we should analyze coupling dependencies between `MainWindow` and key menu-related entities such as `PluginMenu`, `TagsMenu`, and `InternetSearchPanel`.\n- Additionally, retrieving the source code of these entities will help understand their roles and interactions within the system.\n\nLet me begin by checking the coupling dependencies between `MainWindow` and `PluginMenu`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_6a63d24eaf4c441eb354a9",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow\", \"entity2\": \"PluginMenu\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m12": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m13": {
                "content": "It appears there are no direct coupling dependencies between `MainWindow` and `PluginMenu`. This suggests that their interaction might be more dynamic or indirect, possibly through reflection or runtime mechanisms rather than static references in the code.\n\n### Alternative Approach:\nSince direct coupling analysis did not yield results, we should examine the source code of `PluginMenu`, `TagsMenu`, and `InternetSearchPanel` to understand how they integrate with `MainWindow` at runtime. Specifically, we can look for:\n- Usage of these classes within `MainWindow`.\n- Any dynamic loading or plugin-based integration patterns.\n\nLet me retrieve the source code for `PluginMenu` first.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_b697f3d380ca42129ce88c",
                        "function": {
                            "arguments": "{\"entity\": \"PluginMenu\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m14": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga.plugins;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MToolBar;\\npublic interface PluginMenu {\\n\\tpublic static final String BOOKMARKS_MENU = \\\"BOOKMARKS_MENU\\\";\\n\\tpublic static final String DESKTOP_MENU = \\\"DESKTOP_MENU\\\";\\n\\tpublic static final String EDIT_MENU = \\\"EDIT_MENU\\\";\\n\\tpublic static final String EXPORT_MENU = \\\"EXPORT_MENU\\\";\\n\\tpublic static final String FILE_MENU = \\\"FILE_MENU\\\";\\n\\tpublic static final String HELP_MENU = \\\"HELP_MENU\\\";\\n\\tpublic static final String IMPORT_MENU = \\\"IMPORT_MENU\\\";\\n\\tpublic static final String LABEL_MENU = \\\"LABEL_MENU\\\";\\n\\tpublic static final String NEW_MENU = \\\"NEW_MENU\\\";\\n\\tpublic static final String TABS_MENU = \\\"TABS_MENU\\\";\\n\\tpublic static final String TAGS_MENU = \\\"TAGS_MENU \\\";\\n\\tpublic static final String TOOLS_MENU = \\\"TOOLS_MENU\\\";\\n\\tpublic static final String TRAY_MENU = \\\"TRAY_MENU\\\";\\n\\tpublic static final String TREE_MENU = \\\"TREE_MENU\\\";\\n\\tpublic static final String VIEW_MENU_ALL = \\\"VIEW_MENU_ALL\\\";\\n\\tpublic static final String VIEW_MENU_EDITOR = \\\"VIEW_MENU_EDITOR\\\";\\n\\tpublic static final String WIDGETS_MENU = \\\"WIDGETS_MENU\\\";\\n\\tpublic static final String EDITOR_TOOL_BAR = \\\"EDITOR_TOOL_BAR\\\";\\n\\tpublic static final String MAIN_TOOL_BAR = \\\"MAIN_TOOL_BAR\\\";\\n\\tpublic void updateMenu(final String type, final MMenu menu);\\n\\tpublic void updateToolBar(final String type, final MToolBar toolBar);\\n}\""
            },
            "m15": {
                "content": "The source code for `PluginMenu` has been retrieved. Here's an analysis of its structure and potential integration points:\n\n### Key Observations:\n1. **Interface Definition:**\n   - `PluginMenu` is an interface that defines constants for various menu types (e.g., `FILE_MENU`, `EDIT_MENU`, `TAGS_MENU`) and toolbars (`EDITOR_TOOL_BAR`, `MAIN_TOOL_BAR`).\n   - It includes two abstract methods: `updateMenu(String type, MMenu menu)` and `updateToolBar(String type, MToolBar toolBar)`. These methods suggest that implementing classes are responsible for dynamically updating menus and toolbars based on the provided type.\n\n2. **Integration with MainWindow:**\n   - In `MainWindow`, we observed usage of `PluginManager.updateMenu(...)` and `PluginManager.updateToolBar(...)`, which likely interact with implementations of this interface to dynamically populate menus and toolbars at runtime.\n   - This implies that plugins or components within the system can extend or modify the UI by implementing `PluginMenu`.\n\n3. **No Direct Coupling:**\n   - The lack of direct coupling between `MainWindow` and `PluginMenu` suggests that `MainWindow` interacts with `PluginMenu` implementations indirectly through the plugin system, possibly via reflection or a service loader mechanism.\n\n### Next Steps:\n- To better understand how `PluginMenu` is used in practice, I will retrieve the source code for a class that implements `PluginMenu`. A logical candidate is `TagsMenu`, since it was identified in earlier steps as being part of the call graph and co-change history with `MMenu.java`.\n\nLet me now retrieve the source code for `TagsMenu`.\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_e2ed997a5bd3416e80adfb",
                        "function": {
                            "arguments": "{\"entity\": \"TagsMenu\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m16": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga.tags;\\nimport static org.makagiga.commons.UI._;\\nimport java.util.ArrayList;\\nimport java.util.HashSet;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Set;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MMenu;\\nimport org.makagiga.commons.MMenuAdapter;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.MetaInfoAction;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.search.Hit;\\nimport org.makagiga.search.Query;\\nimport org.makagiga.search.SortMethod;\\nimport org.makagiga.tree.Tree;\\npublic final class TagsMenu extends MMenu {\\n\\tpublic TagsMenu() {\\n\\t\\tsuper(_(\\\"T&ags\\\")); \\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tupdateMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t}\\n\\tprivate void updateMenu() {\\n\\t\\tremoveAll();\\n\\t\\tsetSplitMenu(true);\\n\\t\\tPluginManager.updateMenu(this, PluginMenu.TAGS_MENU, true);\\n\\t\\tMap<String, Set<String>> valueMap = TK.newHashMap();\\n\\t\\tTags allTags = Tags.getAll();\\n\\t\\tif (allTags.isEmpty()) {\\n\\t\\t\\taddTitle(_(\\\"No Tags\\\"));\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMArrayList<Submenu> submenusWithValues = new MArrayList<Submenu>();\\n\\t\\t\\tfor (String i : allTags) {\\n\\t\\t\\t\\tint valueIndex = i.lastIndexOf(':');\\n\\t\\t\\t\\tif ((valueIndex > 0) && (valueIndex < i.length() - 1)) {\\n\\t\\t\\t\\t\\tString key = i.substring(0, valueIndex).trim();\\n\\t\\t\\t\\t\\tSet<String> valueSet = valueMap.get(key);\\n\\t\\t\\t\\t\\tString value = i.substring(valueIndex + 1).trim();\\n\\t\\t\\t\\t\\tif (valueSet == null) {\\n\\t\\t\\t\\t\\t\\tvalueSet = new HashSet<String>();\\n\\t\\t\\t\\t\\t\\tvalueSet.add(value);\\n\\t\\t\\t\\t\\t\\tvalueMap.put(key, valueSet);\\n\\t\\t\\t\\t\\t\\tSubmenu submenu = new Submenu(null, i, key, valueSet);\\n\\t\\t\\t\\t\\t\\tsubmenusWithValues.add(submenu);\\n\\t\\t\\t\\t\\t\\tadd(submenu);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tvalueSet.add(value);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tadd(new Submenu(i, i, null, null));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tfor (Submenu i : submenusWithValues) {\\n\\t\\t\\t\\tif (\\\"SYSTEM\\\".equals(i.key)) {\\n\\t\\t\\t\\t\\ti.system = true;\\n\\t\\t\\t\\t\\ti.setText(_(\\\"System Tags\\\"));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\ti.setText(i.key + \\\" (\\\" + i.values.size() + \\\")\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\taddSeparator();\\n\\t\\t}\\n\\t\\tadd(new Submenu(_(\\\"Untagged Items\\\"), \\\"\\\", null, null));\\n\\t}\\n\\tprivate static final class Submenu extends MMenu {\\n\\t\\tprivate boolean system;\\n\\t\\tprivate Set<String> values;\\n\\t\\tprivate String key;\\n\\t\\tprivate String tag;\\n\\t\\tprivate Submenu(final String text, final String tag, final String key, final Set<String> values) {\\n\\t\\t\\tsuper(text);\\n\\t\\t\\tthis.tag = tag;\\n\\t\\t\\tthis.key = key;\\n\\t\\t\\tthis.values = values;\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tupdateMenu();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tprivate void updateMenu() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tsetSplitMenu(true);\\n\\t\\t\\tif (values != null) {\\n\\t\\t\\t\\tTags sortedValues = new Tags();\\n\\t\\t\\t\\tsortedValues.addAll(values);\\n\\t\\t\\t\\tfor (String i : sortedValues) {\\n\\t\\t\\t\\t\\tString text = i;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (system) {\\n\\t\\t\\t\\t\\t\\tfor (TagsUtils.AutoTag autoTag : TagsUtils.AutoTag.values()) {\\n\\t\\t\\t\\t\\t\\t\\tif (i.equals(autoTag.getText())) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttext = autoTag.getLocalizedText();\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak; \\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tadd(new Submenu(text, key + \\\":\\\" + i, null, null));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tQuery query = new Query(SortMethod.PATH);\\n\\t\\t\\tquery.add(Query.TAG, tag);\\n\\t\\t\\tQuery.Hits hits = query.start();\\n\\t\\t\\tif (\\\"\\\".equals(tag) && hits.isEmpty()) {\\n\\t\\t\\t\\taddTitle(_(\\\"No Items\\\"));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tint fileCount = 0;\\n\\t\\t\\t\\tfor (Hit i : hits) {\\n\\t\\t\\t\\t\\tif (i.get().isFile())\\n\\t\\t\\t\\t\\t\\tfileCount++;\\n\\t\\t\\t\\t\\tadd(new MetaInfoAction(i.get(), true));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif ((fileCount > 1) && !\\\"\\\".equals(tag)) {\\n\\t\\t\\t\\t\\taddSeparator();\\n\\t\\t\\t\\t\\tadd(new Tree.OpenAllInTabsAction() {\\n\\t\\t\\t\\t\\t\\tprotected List<MetaInfo> getFileList() {\\n\\t\\t\\t\\t\\t\\t\\tQuery query = new Query();\\n\\t\\t\\t\\t\\t\\t\\tquery.add(Query.TAG, tag);\\n\\t\\t\\t\\t\\t\\t\\tQuery.Hits hits = query.start();\\n\\t\\t\\t\\t\\t\\t\\tList<MetaInfo> fileList = new ArrayList<MetaInfo>(hits.size());\\n\\t\\t\\t\\t\\t\\t\\tfor (Hit i : hits) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (i.get().isFile())\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tfileList.add(i.get());\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treturn fileList;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m17": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis, where the result of the function get_co_change_relationship should be used as an important reference. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m18": {
                "content": "Title: Diagnosis of starting entity `MMenu.java`\nChange set: [MainWindow, InternetSearchPanel, TreePanel, TagsMenu, Tabs, Bookmarks, TagsEditor, ColumnManager, Links, TaskTable, MetaInfoMenu, MList, PluginMenu, TreeSettingsButton, DocumentListButton, TaskPanel, MText, CalendarComponent, StaticHandler, CategoryManagerDialog, SortAction, SummaryPanel, MFileChooser, MComboBox, MTabbedPane, TaskList, GHNSDialog, VersionPanel, MSettingsDialog, CompletionList, CategoryMenu, SummaryCategory, Task, MouseGestures, Impl, ArticleList, AbstractTest, CompletionWindow, Pager, MColorMenu, ImageEditor, TaskStateMenu, ScriptIDE, TreeSettingsButton]\nDetails: Based on the analysis:\n- **MainWindow**: Directly uses menu-related components and was historically strongly co-changed with `MMenu.java`.\n- **InternetSearchPanel**, **TreePanel**, **TagsMenu**, **PluginMenu**: Part of the call graph of `MainWindow` and referenced in UI/menu logic.\n- **Tabs**, **Bookmarks**, **TagsEditor**, **ColumnManager**, **Links**, **TaskTable**, **MetaInfoMenu**, **MList**: Strong historical co-change relationships (confidence \u2265 10%).\n- Entities like **DocumentListButton**, **TaskPanel**, **MText**, **CalendarComponent**, **StaticHandler**, etc.: Show moderate-to-low confidence but were frequently changed alongside `MMenu.java`, suggesting potential indirect coupling.\n- Lower-confidence entities (**CategoryManagerDialog**, **SortAction**, **SummaryPanel**, etc.) are included to ensure recall, as they may still be impacted due to plugin/UI integration patterns observed.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}