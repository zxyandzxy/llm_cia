{
    "time": 1749621345.9357154,
    "messages": [
        {
            "role": "system",
            "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
        },
        {
            "role": "user",
            "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MainWindow.java."
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_9062c4398fc74991833de4",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_call_graph"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_call_graph",
            "content": "[\"Designer\", \"EditorPrint\", \"OS\", \"AbstractFS\", \"Tracker\", \"Autosave\", \"EditorExport\", \"Args\", \"WTFError\", \"ImportExport\", \"FS\", \"LocationBar\", \"Plugin\", \"TreeFS\", \"Flags\", \"MetaInfo\", \"TreePanel\", \"PropertiesBar\", \"Widget\", \"PluginManager\", \"EditorSearch\", \"SessionManager\", \"MLogger\", \"PluginMenu\", \"EditorZoom\", \"Tree\", \"PluginInfo\", \"EditorPlugin\", \"Config\", \"Desktop\", \"PluginType\", \"TagsMenu\", \"TK\", \"Property\", \"Console\", \"UI\", \"Editor\", \"ScriptExecutor\", \"FSException\", \"EditorDesigner\", \"PropertiesPanel\", \"ScriptError\"]"
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_33f0243556714144b87267",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"Designer.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_31d67e217b3144c49e9b25",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"EditorPrint.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_a8c2884a159a4529965aa1",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"OS.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_a6747fa1b9724de8aee1ac",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"AbstractFS.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_95352fedcd194fa4be6dc5",
                    "function": {
                        "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"Tracker.java\"}",
                        "name": "get_coupling_dependencies"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_coupling_dependencies",
            "content": "[\"There are no coupling dependencies between these two entities\"]"
        },
        {
            "content": "It seems that the initial set of coupling dependency checks with several entities returned no direct dependencies with `MainWindow.java`. This suggests that either the relationships are more indirect or we need to consider other types of analysis, such as conceptual coupling or code inspection.\n\nTo proceed effectively:\n1. I will analyze the source code of `MainWindow.java` to understand its functionality and identify potential dependencies based on semantic context.\n2. From there, I can determine which entities might be conceptually linked or worth further investigation for synchronization purposes.\n\nLet me retrieve the source code of `MainWindow.java`.\n\n",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": [
                {
                    "id": "call_626550a987c04adb94c15f",
                    "function": {
                        "arguments": "{\"entity\": \"MainWindow.java\"}",
                        "name": "get_origin_code"
                    },
                    "type": "function",
                    "index": 0
                }
            ]
        },
        {
            "role": "tool",
            "name": "get_origin_code",
            "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.IOException;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.GeneralSettings;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.Property;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.Help;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.help.HelpGenerator;\\nimport org.makagiga.commons.mods.Mod;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.Input;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MMessage;\\nimport org.makagiga.commons.swing.MNotification;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSmallButton;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMenuAdapter;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorQuickFind;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.FSException;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.Plugin;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentListButton;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tools.summary.TasksMenu;\\nimport org.makagiga.tools.summary.TasksSettings;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate static boolean presentationActive;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentListButton documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate final MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\tprivate ZoomResetAction zoomResetAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tprivate DocumentHelpAction documentHelpAction;\\n\\t\\tprivate MAction quickOpenAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"editor-tool-bar\\\", editorToolBar,\\n\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"quick-open-action\\\", quickOpenAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic static Plugin<?> getPresentationPlugin() {\\n\\t\\tPluginInfo info = PluginManager.getInstance().getByID(\\\"{e5508e4c-e070-4d4a-a2de-e9ef754a4656}\\\");\\n\\t\\treturn (info == null) ? null : info.getPlugin();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\tpublic static boolean isPresentationActive() { return presentationActive; }\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tTasksMenu.update(menu);\\n\\t\\tmenu.addSeparator();\\n\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession(config);\\n\\t\\tconfig.sync();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean locked) {\\n\\t\\tsuper.setLocked(locked);\\n\\t\\tupdateTitle();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tif (restoreWindow)\\n\\t\\t\\trestore();\\n\\t\\tsetDesktopVisible(true);\\n\\t\\tDesktop desktop = getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentListButton();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\teditorToolBar = new MToolBar();\\n\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tif (MApplication.consoleOpenInTab.get()) {\\n\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tupdateState();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tUI.systemTray.addPropertyChangeListener(new Property.ValueChangeListener<Boolean>() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final Boolean visible) {\\n\\t\\t\\t\\tif (visible)\\n\\t\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tif (UI.systemTray.get()) {\\n\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t}\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPlugin<?> presentation = getPresentationPlugin();\\n\\t\\tif (presentation != null) {\\n\\t\\t\\tpresentation.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\\"active\\\".equals(e.getPropertyName()) &&\\n\\t\\t\\t\\t\\t\\t(e.getNewValue() instanceof Boolean)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tpresentationActive = Boolean.TRUE.equals(e.getNewValue());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI));\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\tdocumentHelpAction = new DocumentHelpAction();\\n\\t\\t\\t\\tquickOpenAction = new QuickOpenDialog.Action();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tnew QuickSaveAction(),\\n\\t\\t\\tquickOpenAction,\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\temailAction.setEnabled((editor != null) && editor.getMetaInfo().isFile());\\n\\t\\t\\texportMenu.addSeparator(false);\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tviewMenu.add(MNotification.createMenu());\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\thelpMenu.add(documentHelpAction);\\n\\t\\tif (Kiosk.actionWhatsThis.get())\\n\\t\\t\\thelpMenu.add(new MWhatsThis.Action(this));\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new MApplication.AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\tmenuBar.add(documentList);\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(config, Desktop.RESTORE_SESSION_LAZY);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addSeparator(false);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teditMenu.addNoItemsInfo(editMenu.isEmpty());\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tdocumentHelpAction.updateProperties(editor);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t\\tif (zoomResetAction == null)\\n\\t\\t\\t\\t\\t\\tzoomResetAction = new ZoomResetAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomResetAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\tboolean stretchAdded = false;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!isPresentationActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic void updateTitle() { \\t\\tif (isLocked()) {\\n\\t\\t\\t\\t\\t\\tupdateTitle(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetToolTipText(UI.makeHTML(_(\\\"Tip: You can use drag and drop to import/export files.\\\")));\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tImportMenu.class.cast(menu).doInit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\tprivate void doInit() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tadd(new ImportFolderAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tMainWindow.getInstance(),\\n\\t\\t\\t\\tMSettingsDialog.STANDARD_DIALOG | MSettingsDialog.APPLY_BUTTON,\\n\\t\\t\\t\\t\\\"configure\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void apply() {\\n\\t\\t\\t\\t\\tsuper.apply();\\n\\t\\t\\t\\t\\tMainWindow.getInstance().repaint();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tdialog.addPage(new TasksSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.exec();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !MainWindow.isPresentationActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DocumentHelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif (context != null)\\n\\t\\t\\t\\t\\tHelp.show(tab, context);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DocumentHelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP.getText()); \\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tsetEnabled(tab instanceof DocumentHelp);\\n\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\tsetName(_(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t\\tsetAuthorizationProperty(Vars.actionSendFile);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow window = MainWindow.getInstance();\\n\\t\\t\\tHelpGenerator help = new HelpGenerator();\\n\\t\\t\\thelp.setMenuBar(window.getMMenuBar());\\n\\t\\t\\thelp.setOutputDirectory(FS.makeConfigFile(\\\"help\\\", FS.CREATE_DIR).toPath());\\n\\t\\t\\t\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"bookmarks-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"export-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"import-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"tags-menu\\\"));\\n\\t\\t\\thelp.addCommonShortcuts();\\n\\t\\t\\thelp.addShortcut(_(\\\"Image Viewer\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next\\\"), VK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous\\\"), VK_BACK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Feeds\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next New\\\"), VK_J);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous New\\\"), VK_K);\\n\\t\\t\\thelp.addShortcut(_(\\\"Todo List/Table\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Edit cell\\\"), VK_F2);\\n\\t\\t\\thelp.addShortcut(_(\\\"Focus header\\\"), VK_F8);\\n\\t\\t\\thelp.addShortcut(_(\\\"Move to the previous panel\\\"), VK_TAB, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Widgets\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Close active widget\\\"), VK_F4, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Activate next widget\\\"), VK_F6, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Minimize active widget\\\"), VK_F9, CTRL_MASK);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\thelp.generate();\\n\\t\\t\\t\\t\\t\\t\\t\\tWebBrowserTab tab = WebBrowserTab.getInstance();\\n\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(help.getIndexFile().toUri());\\n\\t\\t\\t}\\n\\t\\t\\tcatch (IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ImportFolderAction extends MAction {\\n\\t\\tpublic ImportFolderAction() {\\n\\t\\t\\tsuper(_(\\\"Folder...\\\"), \\\"ui/folder\\\");\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tFile from = Input.getDirectory(getSourceWindow(), _(\\\"Import Folder\\\"), \\\"import-folder\\\", MActionInfo.IMPORT);\\n\\t\\t\\tif (from == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo toFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tImportExport.importFolder(getSourceWindow(), new MArrayList<>(from.toPath()), toFolder);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FSException | IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(_(\\\"Save all the modified files now\\\"), VK_S, getMenuMask());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(_(\\\"Location Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.isInstance() ? PropertiesBar.getInstance() : null;\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tif (PropertiesBar.isInstance())\\n\\t\\t\\t\\t\\tPropertiesBar.getInstance().setVisible(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomResetAction extends MApplication.ZoomResetAction {\\n\\t\\tpublic ZoomResetAction() { }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\teditorZoom.resetZoom();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (AbstractMethodError error) {\\n\\t\\t\\t\\t\\tTK.beep();\\n\\t\\t\\t\\t\\tif (MLogger.isDeveloper())\\n\\t\\t\\t\\t\\t\\tMLogger.exception(error);\\n\\t\\t\\t\\t\\tMLogger.error(\\\"core\\\", \\\"Zoom reset not supported\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
        },
        {
            "role": "user",
            "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
        },
        {
            "content": "Title: Diagnosis of starting entity `MainWindow`\n\nChange set: [Designer.java, EditorPrint.java, OS.java, AbstractFS.java, Tracker.java, Autosave.java, ImportExport.java, Args.java, WTFError.java, FS.java, LocationBar.java, Plugin.java, TreeFS.java, Flags.java, MetaInfo.java, TreePanel.java, PropertiesBar.java, Widget.java, PluginManager.java, EditorSearch.java, SessionManager.java, MLogger.java, PluginMenu.java, EditorZoom.java, Tree.java, PluginInfo.java, EditorPlugin.java, Config.java, Desktop.java, PluginType.java, TagsMenu.java, TK.java, Property.java, Console.java, UI.java, Editor.java, ScriptExecutor.java, FSException.java, EditorDesigner.java, PropertiesPanel.java, ScriptError.java, Sidebar.java, CalendarTab.java, ConsoleTab.java, DesktopTab.java, PluginSettingsTab.java, WebBrowserTab.java, ImportMenu.java, QuickOpenDialog.java]\n\nDetails:\n- **Designer.java**: Used in actions related to the designer panel within `MainWindow`.\n- **EditorPrint.java**: Checked for printing functionality.\n- **OS.java**: Used for platform-specific operations like sending emails.\n- **AbstractFS.java**: Related to file system operations and navigation.\n- **Tracker.java**: Involves tracking user activity and data.\n- **Autosave.java**: Handles auto-saving of session data.\n- **ImportExport.java**: Manages import/export features triggered from menus.\n- **Args.java**: Parses command-line arguments used during startup.\n- **WTFError.java**: Handles unexpected errors or exceptions.\n- **FS.java**: Core file system management utility.\n- **LocationBar.java**: Reflects current navigation location shown in UI.\n- **Plugin.java**: Interaction with plugins affects UI and functionality.\n- **TreeFS.java**: Used in folder/file tree navigation.\n- **Flags.java**: Stores application state flags.\n- **MetaInfo.java**: Represents metadata for files/items.\n- **TreePanel.java**: Displays hierarchical data (file trees).\n- **PropertiesBar.java**: Shows properties of selected items.\n- **Widget.java**: Manages widgets displayed in desktop view.\n- **PluginManager.java**: Loads and manages plugins.\n- **EditorSearch.java**: Enables search within editors.\n- **SessionManager.java**: Saves and restores session data.\n- **MLogger.java**: Logging mechanism for debugging and error handling.\n- **PluginMenu.java**: Dynamically updates menus based on context.\n- **EditorZoom.java**: Zooming controls for document views.\n- **Tree.java**: Core structure for managing hierarchical data.\n- **PluginInfo.java**: Metadata about plugins used throughout.\n- **EditorPlugin.java**: Base class for editor plugin implementations.\n- **Config.java**: Reads/writes application configuration settings.\n- **Desktop.java**: Manages desktop-style interface components.\n- **PluginType.java**: Classifies different types of plugins.\n- **TagsMenu.java**: Manages tags-related menu entries.\n- **TK.java**: Utility methods for general-purpose tasks.\n- **Property.java**: General property management class.\n- **Console.java**: Output console for logging and diagnostics.\n- **UI.java**: User interface utilities and look-and-feel settings.\n- **Editor.java**: Base class for various editor implementations.\n- **ScriptExecutor.java**: Executes user scripts on startup.\n- **FSException.java**: Thrown when file system operations fail.\n- **EditorDesigner.java**: Designer mode support for editing UI.\n- **PropertiesPanel.java**: Panel for displaying object properties.\n- **ScriptError.java**: Handles script execution errors.\n- **Sidebar.java**: Controls the sidebar UI component.\n- **CalendarTab.java**: Opens calendar-related tabs.\n- **ConsoleTab.java**: Manages console output as a tab.\n- **DesktopTab.java**: Provides desktop-like environment in a tab.\n- **PluginSettingsTab.java**: Settings for plugins accessed via tab.\n- **WebBrowserTab.java**: Displays web content within a tab.\n- **ImportMenu.java**: Submenu under File/Import for importing files.\n- **QuickOpenDialog.java**: Dialog for quickly opening files.",
            "refusal": null,
            "role": "assistant",
            "audio": null,
            "function_call": null,
            "tool_calls": null
        }
    ],
    "interaction_records": {
        "step_histories": [
            {
                "prompt_messages": [
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m3",
                    "m9",
                    "m10",
                    "m4",
                    "m11",
                    "m7",
                    "m12",
                    "m4",
                    "m13",
                    "m3",
                    "m3",
                    "m14",
                    "m4",
                    "m10",
                    "m7",
                    "m4",
                    "m15",
                    "m13",
                    "m15",
                    "m16",
                    "m11",
                    "m17",
                    "m3",
                    "m4",
                    "m18",
                    "m19",
                    "m4",
                    "m20",
                    "m21",
                    "m15",
                    "m22",
                    "m15",
                    "m23",
                    "m18",
                    "m23",
                    "m15",
                    "m20",
                    "m24",
                    "m4",
                    "m15",
                    "m4",
                    "m25",
                    "m3",
                    "m16",
                    "m16",
                    "m26",
                    "m22",
                    "m13",
                    "m7",
                    "m25",
                    "m13",
                    "m4",
                    "m27",
                    "m15",
                    "m28",
                    "m15",
                    "m4",
                    "m7",
                    "m5",
                    "m3",
                    "m13",
                    "m4",
                    "m19",
                    "m7",
                    "m12",
                    "m6",
                    "m9",
                    "m3",
                    "m4",
                    "m5",
                    "m6",
                    "m7",
                    "m8",
                    "m3",
                    "m9",
                    "m10",
                    "m29",
                    "m4",
                    "m1",
                    "m2",
                    "m3",
                    "m4",
                    "m19",
                    "m10",
                    "m15",
                    "m6",
                    "m10",
                    "m18",
                    "m13",
                    "m23",
                    "m4",
                    "m3",
                    "m13",
                    "m10",
                    "m18",
                    "m10",
                    "m11",
                    "m4",
                    "m11",
                    "m7",
                    "m12",
                    "m4",
                    "m13",
                    "m3",
                    "m3",
                    "m14",
                    "m4",
                    "m10",
                    "m7",
                    "m4",
                    "m14",
                    "m3",
                    "m15",
                    "m16",
                    "m4",
                    "m25",
                    "m18",
                    "m10",
                    "m2",
                    "m4",
                    "m18",
                    "m19",
                    "m4",
                    "m21",
                    "m15",
                    "m18",
                    "m13",
                    "m30",
                    "m18",
                    "m13",
                    "m14",
                    "m7",
                    "m25",
                    "m29",
                    "m8",
                    "m15",
                    "m28",
                    "m15",
                    "m29"
                ],
                "response_message": "m31"
            },
            {
                "prompt_messages": [
                    "m32",
                    "m33",
                    "m31",
                    "m34"
                ],
                "response_message": "m35"
            },
            {
                "prompt_messages": [
                    "m32",
                    "m33",
                    "m31",
                    "m34",
                    "m35",
                    "m36"
                ],
                "response_message": "m37"
            },
            {
                "prompt_messages": [
                    "m32",
                    "m33",
                    "m31",
                    "m34",
                    "m35",
                    "m36",
                    "m37",
                    "m36"
                ],
                "response_message": "m38"
            },
            {
                "prompt_messages": [
                    "m32",
                    "m33",
                    "m31",
                    "m34",
                    "m35",
                    "m36",
                    "m37",
                    "m36",
                    "m38",
                    "m36"
                ],
                "response_message": "m39"
            },
            {
                "prompt_messages": [
                    "m32",
                    "m33",
                    "m31",
                    "m34",
                    "m35",
                    "m36",
                    "m37",
                    "m36",
                    "m38",
                    "m36",
                    "m39",
                    "m36"
                ],
                "response_message": "m40"
            },
            {
                "prompt_messages": [
                    "m32",
                    "m33",
                    "m31",
                    "m34",
                    "m35",
                    "m36",
                    "m37",
                    "m36",
                    "m38",
                    "m36",
                    "m39",
                    "m36",
                    "m40",
                    "m36"
                ],
                "response_message": "m41"
            },
            {
                "prompt_messages": [
                    "m32",
                    "m33",
                    "m31",
                    "m34",
                    "m35",
                    "m36",
                    "m37",
                    "m36",
                    "m38",
                    "m36",
                    "m39",
                    "m36",
                    "m40",
                    "m36",
                    "m41",
                    "m42",
                    "m43"
                ],
                "response_message": "m44"
            }
        ],
        "mid_to_message": {
            "m1": "T",
            "m2": "h",
            "m3": "e",
            "m4": " ",
            "m5": "p",
            "m6": "r",
            "m7": "o",
            "m8": "j",
            "m9": "c",
            "m10": "t",
            "m11": "y",
            "m12": "u",
            "m13": "n",
            "m14": "d",
            "m15": "a",
            "m16": "l",
            "m17": "z",
            "m18": "i",
            "m19": "s",
            "m20": "`",
            "m21": "M",
            "m22": "k",
            "m23": "g",
            "m24": ",",
            "m25": "w",
            "m26": "-",
            "m27": "J",
            "m28": "v",
            "m29": ".",
            "m30": "W",
            "m31": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_9062c4398fc74991833de4",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_call_graph"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m32": {
                "role": "system",
                "content": "Change impact analysis (CIA) is a specialized process of program comprehension that investigates the ripple effects of a code change in a software system.The software entities in a software system usually have direct or indirect dependencies after a long-time evolution, a slight change may rise ripple effects from an entity to another.\nYou are a CIA assistant. In order to help solve the CIA mission, you should first understand some necessary concepts\uff1a\n(1)entity: Entities represent source code files in CIA tasks, and all the CIA tasks under study are based on the Java language, so entities are files with the .java extension.\n(2)starting entity: The starting entity is also called salient entity, and the salient entity is the root change that causes the modification of the rest of entities in a change set, while the rest of entities are the dependency modification along with the salient one.\nYou will be presented with a starting entity and tools (functions) will be provided to access the more information of the origin system. Your task is to gradually explain which entity really need to be synchronized, based on the starting entity and the information obtained through the function-call. You have 7 chances to call the function to get more information."
            },
            "m33": {
                "role": "user",
                "content": "The project you need to analyze is `Makagiga`, a well-known Java open source project. The starting entity you need to deal with is MainWindow.java."
            },
            "m34": {
                "role": "tool",
                "name": "get_call_graph",
                "content": "[\"Designer\", \"EditorPrint\", \"OS\", \"AbstractFS\", \"Tracker\", \"Autosave\", \"EditorExport\", \"Args\", \"WTFError\", \"ImportExport\", \"FS\", \"LocationBar\", \"Plugin\", \"TreeFS\", \"Flags\", \"MetaInfo\", \"TreePanel\", \"PropertiesBar\", \"Widget\", \"PluginManager\", \"EditorSearch\", \"SessionManager\", \"MLogger\", \"PluginMenu\", \"EditorZoom\", \"Tree\", \"PluginInfo\", \"EditorPlugin\", \"Config\", \"Desktop\", \"PluginType\", \"TagsMenu\", \"TK\", \"Property\", \"Console\", \"UI\", \"Editor\", \"ScriptExecutor\", \"FSException\", \"EditorDesigner\", \"PropertiesPanel\", \"ScriptError\"]"
            },
            "m35": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_33f0243556714144b87267",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"Designer.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m36": {
                "role": "tool",
                "name": "get_coupling_dependencies",
                "content": "[\"There are no coupling dependencies between these two entities\"]"
            },
            "m37": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_31d67e217b3144c49e9b25",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"EditorPrint.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m38": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_a8c2884a159a4529965aa1",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"OS.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m39": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_a6747fa1b9724de8aee1ac",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"AbstractFS.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m40": {
                "content": "",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_95352fedcd194fa4be6dc5",
                        "function": {
                            "arguments": "{\"entity1\": \"MainWindow.java\", \"entity2\": \"Tracker.java\"}",
                            "name": "get_coupling_dependencies"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m41": {
                "content": "It seems that the initial set of coupling dependency checks with several entities returned no direct dependencies with `MainWindow.java`. This suggests that either the relationships are more indirect or we need to consider other types of analysis, such as conceptual coupling or code inspection.\n\nTo proceed effectively:\n1. I will analyze the source code of `MainWindow.java` to understand its functionality and identify potential dependencies based on semantic context.\n2. From there, I can determine which entities might be conceptually linked or worth further investigation for synchronization purposes.\n\nLet me retrieve the source code of `MainWindow.java`.\n\n",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": [
                    {
                        "id": "call_626550a987c04adb94c15f",
                        "function": {
                            "arguments": "{\"entity\": \"MainWindow.java\"}",
                            "name": "get_origin_code"
                        },
                        "type": "function",
                        "index": 0
                    }
                ]
            },
            "m42": {
                "role": "tool",
                "name": "get_origin_code",
                "content": "\"package org.makagiga;\\nimport static java.awt.event.KeyEvent.*;\\nimport static org.makagiga.commons.UI._;\\nimport java.awt.BorderLayout;\\nimport java.awt.Component;\\nimport java.awt.Container;\\nimport java.awt.event.MouseEvent;\\nimport java.beans.PropertyChangeEvent;\\nimport java.beans.PropertyChangeListener;\\nimport java.io.File;\\nimport java.io.IOException;\\nimport java.net.URI;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.Objects;\\nimport javax.script.ScriptException;\\nimport javax.swing.Box;\\nimport javax.swing.JComponent;\\nimport javax.swing.event.ChangeEvent;\\nimport javax.swing.event.ChangeListener;\\nimport org.makagiga.commons.Args;\\nimport org.makagiga.commons.Config;\\nimport org.makagiga.commons.Flags;\\nimport org.makagiga.commons.FS;\\nimport org.makagiga.commons.GeneralSettings;\\nimport org.makagiga.commons.Globals;\\nimport org.makagiga.commons.Kiosk;\\nimport org.makagiga.commons.MAction;\\nimport org.makagiga.commons.MActionInfo;\\nimport org.makagiga.commons.MApplication;\\nimport org.makagiga.commons.MArrayList;\\nimport org.makagiga.commons.MColor;\\nimport org.makagiga.commons.MIcon;\\nimport org.makagiga.commons.MLogger;\\nimport org.makagiga.commons.OS;\\nimport org.makagiga.commons.Property;\\nimport org.makagiga.commons.TK;\\nimport org.makagiga.commons.UI;\\nimport org.makagiga.commons.WTFError;\\nimport org.makagiga.commons.about.MAboutDialog;\\nimport org.makagiga.commons.annotation.DesignPattern;\\nimport org.makagiga.commons.help.Help;\\nimport org.makagiga.commons.help.HelpContext;\\nimport org.makagiga.commons.help.HelpGenerator;\\nimport org.makagiga.commons.mods.Mod;\\nimport org.makagiga.commons.mods.Mods;\\nimport org.makagiga.commons.print.PrintDialog;\\nimport org.makagiga.commons.proxy.ProxySettings;\\nimport org.makagiga.commons.script.ScriptError;\\nimport org.makagiga.commons.script.ScriptExecutor;\\nimport org.makagiga.commons.script.ScriptYourself;\\nimport org.makagiga.commons.swing.Input;\\nimport org.makagiga.commons.swing.MCellTip;\\nimport org.makagiga.commons.swing.MComponent;\\nimport org.makagiga.commons.swing.MMainWindow;\\nimport org.makagiga.commons.swing.MMenu;\\nimport org.makagiga.commons.swing.MMenuBar;\\nimport org.makagiga.commons.swing.MMessage;\\nimport org.makagiga.commons.swing.MNotification;\\nimport org.makagiga.commons.swing.MPanel;\\nimport org.makagiga.commons.swing.MSettingsDialog;\\nimport org.makagiga.commons.swing.MSmallButton;\\nimport org.makagiga.commons.swing.MSplitPane;\\nimport org.makagiga.commons.swing.MSystemTray;\\nimport org.makagiga.commons.swing.MToolBar;\\nimport org.makagiga.commons.swing.MWhatsThis;\\nimport org.makagiga.commons.swing.MainView;\\nimport org.makagiga.commons.swing.MouseGestures;\\nimport org.makagiga.commons.swing.border.MLineBorder;\\nimport org.makagiga.commons.swing.event.MMenuAdapter;\\nimport org.makagiga.commons.swing.event.MMouseAdapter;\\nimport org.makagiga.console.Console;\\nimport org.makagiga.desktop.Desktop;\\nimport org.makagiga.desktop.Widget;\\nimport org.makagiga.editors.AnnotationBar;\\nimport org.makagiga.editors.Designer;\\nimport org.makagiga.editors.DocumentHelp;\\nimport org.makagiga.editors.Editor;\\nimport org.makagiga.editors.EditorDesigner;\\nimport org.makagiga.editors.EditorExport;\\nimport org.makagiga.editors.EditorNavigation;\\nimport org.makagiga.editors.EditorPlugin;\\nimport org.makagiga.editors.EditorPrint;\\nimport org.makagiga.editors.EditorQuickFind;\\nimport org.makagiga.editors.EditorSearch;\\nimport org.makagiga.editors.EditorZoom;\\nimport org.makagiga.editors.NavigationUtils;\\nimport org.makagiga.fs.AbstractFS;\\nimport org.makagiga.fs.FSException;\\nimport org.makagiga.fs.MetaInfo;\\nimport org.makagiga.fs.tree.TreeFS;\\nimport org.makagiga.plugins.LookAndFeelSettings;\\nimport org.makagiga.plugins.Plugin;\\nimport org.makagiga.plugins.PluginInfo;\\nimport org.makagiga.plugins.PluginManager;\\nimport org.makagiga.plugins.PluginMenu;\\nimport org.makagiga.plugins.PluginSettings;\\nimport org.makagiga.plugins.PluginType;\\nimport org.makagiga.tabs.CalendarTab;\\nimport org.makagiga.tabs.ConsoleTab;\\nimport org.makagiga.tabs.DesktopTab;\\nimport org.makagiga.tabs.PluginSettingsTab;\\nimport org.makagiga.tabs.WebBrowserTab;\\nimport org.makagiga.tags.TagsMenu;\\nimport org.makagiga.tools.Autosave;\\nimport org.makagiga.tools.BookmarksMenu;\\nimport org.makagiga.tools.DocumentListButton;\\nimport org.makagiga.tools.QuickOpenDialog;\\nimport org.makagiga.tools.SessionManager;\\nimport org.makagiga.tools.summary.SummaryData;\\nimport org.makagiga.tools.summary.TasksMenu;\\nimport org.makagiga.tools.summary.TasksSettings;\\nimport org.makagiga.tree.ImportExport;\\nimport org.makagiga.tree.LocationBar;\\nimport org.makagiga.tree.PropertiesBar;\\nimport org.makagiga.tree.PropertiesPanel;\\nimport org.makagiga.tree.SearchBar;\\nimport org.makagiga.tree.Tree;\\nimport org.makagiga.tree.TreePanel;\\nimport org.makagiga.tree.tracker.Tracker;\\nimport org.makagiga.web.wiki.WikiPanel;\\n@DesignPattern(DesignPattern.SINGLETON)\\npublic final class MainWindow extends MMainWindow {\\n\\tprivate BookmarksMenu bookmarksMenu;\\n\\tprivate static boolean presentationActive;\\n\\tprivate final DesktopTab desktopTab;\\n\\tprivate final DocumentListButton documentList;\\n\\tprivate Editor<?> lastTab;\\n\\tprivate int viewMenuItemCount;\\n\\tprivate JComponent tabBar;\\n\\tprivate static MainWindow _instance;\\n\\tprivate Map<String, Object> elements;\\n\\tprivate MMenu editMenu;\\n\\tprivate MMenu exportMenu;\\n\\tprivate MMenu fileMenu;\\n\\tprivate MMenu helpMenu;\\n\\tprivate MMenu importMenu;\\n\\tprivate MMenu tagsMenu;\\n\\tprivate MMenu toolsMenu;\\n\\tprivate MMenu viewMenu;\\n\\tprivate final MPanel tabPanel;\\n\\tprivate final MSplitPane mainSplitPane;\\n\\tprivate final MToolBar editorToolBar;\\n\\tprivate final Object updateComponentsLock = new Object();\\n\\tprivate final Object updateStateLock = new Object();\\n\\t\\t\\tprivate EmailAction emailAction;\\n\\tprivate PrintAction printAction;\\n\\t\\tprivate FindAction findAction;\\n\\tprivate FindNextAction findNextAction;\\n\\t\\tprivate ToggleSummaryAction toggleSummaryAction;\\n\\tprivate ToggleDesignerAction toggleDesignerAction;\\n\\tprivate ToggleDesktopAction toggleDesktopAction;\\n\\tprivate ShowHideSidebarAction showHideSidebarAction;\\n\\tprivate ShowHideLocationBarAction showHideLocationBarAction;\\n\\tprivate ShowHidePropertiesBarAction showHidePropertiesBarAction;\\n\\tprivate ZoomInAction zoomInAction;\\n\\tprivate ZoomOutAction zoomOutAction;\\n\\tprivate ZoomResetAction zoomResetAction;\\n\\t\\tprivate SearchBar.Action searchAction;\\n\\tprivate Console.Action consoleAction;\\n\\tprivate ConfigureAction configureAction;\\n\\t\\tprivate HelpAction helpAction;\\n\\tprivate DocumentHelpAction documentHelpAction;\\n\\t\\tprivate MAction quickOpenAction;\\n\\tpublic Desktop getDesktop() {\\n\\t\\treturn desktopTab.getCore();\\n\\t}\\n\\tpublic Object getElementById(final String id) {\\n\\t\\tif (elements == null) {\\n\\t\\t\\telements = TK.newHashMap(\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"file-menu\\\", fileMenu,\\n\\t\\t\\t\\t\\t\\\"import-menu\\\", importMenu,\\n\\t\\t\\t\\t\\t\\\"export-menu\\\", exportMenu,\\n\\t\\t\\t\\t\\\"edit-menu\\\", editMenu,\\n\\t\\t\\t\\t\\\"view-menu\\\", viewMenu,\\n\\t\\t\\t\\t\\\"bookmarks-menu\\\", bookmarksMenu,\\n\\t\\t\\t\\t\\\"tags-menu\\\", tagsMenu,\\n\\t\\t\\t\\t\\\"tools-menu\\\", toolsMenu,\\n\\t\\t\\t\\t\\\"help-menu\\\", helpMenu,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"editor-tool-bar\\\", editorToolBar,\\n\\t\\t\\t\\t\\\"main-split-pane\\\", mainSplitPane,\\n\\t\\t\\t\\t\\\"tab-panel\\\", tabPanel,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\\"previous-action\\\", NavigationUtils.getPreviousAction(),\\n\\t\\t\\t\\t\\\"next-action\\\", NavigationUtils.getNextAction(),\\n\\t\\t\\t\\t\\\"quick-open-action\\\", quickOpenAction\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\treturn elements.get(id);\\n\\t}\\n\\tpublic synchronized static MainWindow getInstance() {\\n\\t\\tif (_instance == null)\\n\\t\\t\\tnew MainWindow(); \\n\\t\\treturn _instance;\\n\\t}\\n\\tpublic static Plugin<?> getPresentationPlugin() {\\n\\t\\tPluginInfo info = PluginManager.getInstance().getByID(\\\"{e5508e4c-e070-4d4a-a2de-e9ef754a4656}\\\");\\n\\t\\treturn (info == null) ? null : info.getPlugin();\\n\\t}\\n\\tpublic void installTabBar(final JComponent c) {\\n\\t\\tif (c != null)\\n\\t\\t\\tc.setVisible(true);\\n\\t\\tMComponent.replace(tabPanel, tabBar, c, BorderLayout.PAGE_END, true);\\n\\t\\ttabBar = c;\\n\\t}\\n\\tpublic boolean isDesktopVisible() {\\n\\t\\treturn (desktopTab != null) && desktopTab.isTabSelected();\\n\\t}\\n\\tpublic void setDesktopVisible(final boolean desktopVisible) {\\n\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tEditor<?> newTab;\\n\\t\\tif (desktopVisible) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab != desktopTab)\\n\\t\\t\\t\\tlastTab = currentTab;\\n\\t\\t\\tnewTab = desktopTab;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tnewTab = lastTab;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t((newTab == null) || (tabs.indexOfComponent(newTab) == -1)) &&\\n\\t\\t\\t\\t(tabs.getTabCount() > 1)\\n\\t\\t\\t) {\\n\\t\\t\\t\\tnewTab = tabs.getTabAt(1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttabs.selectEditor(newTab);\\n\\t\\t\\t\\tif (tabs.getTabCount() == 1) {\\n\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\tif (currentTab == desktopTab)\\n\\t\\t\\t\\tdesktopTab.focus();\\n\\t\\t}\\n\\t}\\n\\tpublic static boolean isInstance() {\\n\\t\\treturn _instance != null;\\n\\t}\\n\\tpublic static boolean isPresentationActive() { return presentationActive; }\\n\\t@Override\\n\\tpublic boolean onTrayIconClick(final MouseEvent e) {\\n\\t\\tif (MMouseAdapter.isMiddle(e)) {\\n\\t\\t\\tImportExport.importClipboard();\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t@Override\\n\\tpublic void onTrayIconMenuPopup(final MMenu menu) {\\n\\t\\tTasksMenu.update(menu);\\n\\t\\tmenu.addSeparator();\\n\\t\\tmenu.add(TreePanel.getInstance().getActionGroup().getAction(\\\"quick-paste\\\"));\\n\\t\\tmenu.add(new BookmarksMenu(MIcon.small(\\\"ui/bookmark\\\"), false));\\n\\t\\tPluginManager.updateMenu(menu, PluginMenu.TRAY_MENU, false);\\n\\t}\\n\\tpublic synchronized void saveSession(final int flags) {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tconfig.write(\\\"Splitter.Main.location\\\", mainSplitPane.getDividerLocation());\\n\\t\\t\\t\\tconfig.write(\\\"PropertiesBar.enabled\\\", showHidePropertiesBarAction.isSelected());\\n\\t\\tPropertiesBar.sync();\\n\\t\\tTabs.getInstance().saveAllEditors(flags);\\n\\t\\tTree.getInstance().saveAllItems();\\n\\t\\tSessionManager.save();\\n\\t\\tgetDesktop().saveSession(config);\\n\\t\\tconfig.sync();\\n\\t}\\n\\t@Override\\n\\tpublic void setLocked(final boolean locked) {\\n\\t\\tsuper.setLocked(locked);\\n\\t\\tupdateTitle();\\n\\t}\\n\\tpublic void showProperties(final MetaInfo... selection) {\\n\\t\\tPropertiesPanel.showDialog(this, selection);\\n\\t}\\n\\tpublic static void showSidebar() {\\n\\t\\tshowSidebar(null, false);\\n\\t}\\n\\tpublic static void showSidebar(final Sidebar.Tab tab, final boolean toggle) {\\n\\t\\tMainWindow mainWindow = getInstance();\\n\\t\\tSidebar.show(tab, toggle, mainWindow.mainSplitPane);\\n\\t}\\n\\tpublic static void showTree(final MetaInfo selection) {\\n\\t\\tshowSidebar();\\n\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE, false);\\n\\t\\tif (selection != null)\\n\\t\\t\\tTree.getInstance().focusItem(selection);\\n\\t}\\n\\tpublic void showWidget(final Widget widget, final boolean restoreWindow) {\\n\\t\\tif (restoreWindow)\\n\\t\\t\\trestore();\\n\\t\\tsetDesktopVisible(true);\\n\\t\\tDesktop desktop = getDesktop();\\n\\t\\tdesktop.getPager().setCurrent(widget.getDesktopNumber());\\n\\t\\twidget.select();\\n\\t}\\n\\tpublic void updateComponents(final MetaInfo... metaInfos) {\\n\\t\\tsynchronized (updateComponentsLock) { \\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (metaInfos != null) {\\n\\t\\t\\t\\tEditor<?> currentTab = tabs.getSelectedTab();\\n\\t\\t\\t\\tEditor<?> editor;\\n\\t\\t\\t\\tfor (MetaInfo i : metaInfos) {\\n\\t\\t\\t\\t\\tif (i.isFile() || i.isVirtualFile()) {\\n\\t\\t\\t\\t\\t\\ttabs.setTabInfo(i);\\n\\t\\t\\t\\t\\t\\teditor = tabs.getTabAt(i);\\n\\t\\t\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\t\\t\\t\\tboolean readOnly = !i.canModify();\\n\\t\\t\\t\\t\\t\\t\\teditor.setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>)\\n\\t\\t\\t\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).getEditorDesigner().setLocked(readOnly);\\n\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (currentTab != null)\\n\\t\\t\\t\\t\\tLocationBar.getInstance().update(currentTab.getMetaInfo());\\n\\t\\t\\t}\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tTreePanel.getInstance().updateActions();\\n\\t\\t}\\n\\t\\tif (!TK.isEmpty(metaInfos)) {\\n\\t\\t\\tfor (MetaInfo i : metaInfos)\\n\\t\\t\\t\\ti.refresh(true);\\n\\t\\t}\\n\\t}\\n\\t@Override\\n\\tprotected void onMinimize() {\\n\\t\\tsaveSession(Tabs.NORMAL_SAVE);\\n\\t}\\n\\tprivate MainWindow() {\\n\\t\\tif (_instance != null)\\n\\t\\t\\tthrow new WTFError(\\\"org.makagiga.MainWindow already created\\\");\\n\\t\\t_instance = this;\\n\\t\\t\\t\\tfinal Tabs tabs = Tabs.getInstance();\\n\\t\\tfinal Sidebar sidebar = Sidebar.getInstance();\\n\\t\\tPluginManager.Table table = PluginManager.getTable();\\n\\t\\tdocumentList = new DocumentListButton();\\n\\t\\tinitActions();\\n\\t\\tinitMenuBar(table);\\n\\t\\t\\t\\tmainSplitPane = new MSplitPane();\\n\\t\\tmainSplitPane.setOneTouchExpandable(true);\\n\\t\\tmainSplitPane.setSidebar(sidebar);\\n\\t\\teditorToolBar = new MToolBar();\\n\\t\\teditorToolBar.setID(\\\"editor\\\");\\n\\t\\tMWhatsThis.set(editorToolBar, _(\\\"Tab Tool Bar\\\\nEach tab has its own tool bar\\\"));\\n\\t\\t\\t\\ttabPanel = new MPanel() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic void updateUI() {\\n\\t\\t\\t\\tsuper.updateUI();\\n\\t\\t\\t\\tif (UI.isMetal())\\n\\t\\t\\t\\t\\tthis.setBackground(MColor.WHITE);\\n\\t\\t\\t}\\n\\t\\t};\\n\\t\\ttabPanel.addCenter(tabs);\\n\\t\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\tPluginManager.updateToolBar(table, treePanel.getToolBar(), PluginMenu.TREE_TOOL_BAR, false);\\n\\t\\t\\t\\tdesktopTab = new DesktopTab(new Desktop());\\n\\t\\ttabs.addEditor(desktopTab);\\n\\t\\tmainSplitPane.setRightComponent(tabPanel);\\n\\t\\taddCenter(mainSplitPane);\\n\\t\\t\\t\\tif (MApplication.consoleOpenInTab.get()) {\\n\\t\\t\\tMods.replace(Console.MOD_CLOSE_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.closeEditorAt(tabs.findEditor(tab.getMetaInfo()), Tabs.REMOVE_TAB);\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tMods.replace(Console.MOD_SHOW_CONSOLE, new Mod() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\t\\tif (source instanceof Console) {\\n\\t\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\t\\tConsoleTab tab = tabs.findEditor(ConsoleTab.class);\\n\\t\\t\\t\\t\\t\\tif (tab != null)\\n\\t\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t\\ttabs.addEditor(new ConsoleTab((Console)source));\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\trestoreSession();\\n\\t\\tScriptException userScriptError = null;\\n\\t\\ttry {\\n\\t\\t\\tScriptExecutor.executeUserScript();\\n\\t\\t}\\n\\t\\tcatch (ScriptException exception) {\\n\\t\\t\\tuserScriptError = exception;\\n\\t\\t}\\n\\t\\tfinal boolean autostart = Args.isSet(\\\"autostart\\\");\\n\\t\\t\\t\\ttabs.addChangeListener(new ChangeListener() {\\n\\t\\t\\tpublic void stateChanged(final ChangeEvent e) {\\n\\t\\t\\t\\tupdateState();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tAutosave.init();\\n\\t\\tsetMouseGestures(new CustomMouseGestures());\\n\\t\\t\\t\\tUI.systemTray.addPropertyChangeListener(new Property.ValueChangeListener<Boolean>() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onChange(final Boolean visible) {\\n\\t\\t\\t\\tif (visible)\\n\\t\\t\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t\\tif (UI.systemTray.get()) {\\n\\t\\t\\tMSystemTray.setBackground(MApplication.getLightBrandColor());\\n\\t\\t\\tMSystemTray.setVisible(true);\\n\\t\\t}\\n\\t\\tif (autostart && (MSystemTray.getIcon() == null)) {\\n\\t\\t\\tsetState(ICONIFIED);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\tif (userScriptError != null)\\n\\t\\t\\tScriptError.getSharedInstance().showError(userScriptError);\\n\\t\\tPlugin<?> presentation = getPresentationPlugin();\\n\\t\\tif (presentation != null) {\\n\\t\\t\\tpresentation.addPropertyChangeListener(new PropertyChangeListener() {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void propertyChange(final PropertyChangeEvent e) {\\n\\t\\t\\t\\t\\tif (\\n\\t\\t\\t\\t\\t\\t\\\"active\\\".equals(e.getPropertyName()) &&\\n\\t\\t\\t\\t\\t\\t(e.getNewValue() instanceof Boolean)\\n\\t\\t\\t\\t\\t) {\\n\\t\\t\\t\\t\\t\\tpresentationActive = Boolean.TRUE.equals(e.getNewValue());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\t\\t\\t} );\\n\\t\\t}\\n\\t\\tPluginManager.postInit();\\n\\t\\t\\t\\tif (!autostart) {\\n\\t\\t\\tif (Args.isSet(\\\"full-screen\\\"))\\n\\t\\t\\t\\tsetFullScreen(true);\\n\\t\\t\\tsetVisible(true);\\n\\t\\t}\\n\\t\\t\\t\\tif (tabs.getTabCount() > 1)\\n\\t\\t\\ttabs.selectEditorAt(tabs.findEditor(SessionManager.getCurrentItem()));\\n\\t\\tupdateState();\\n\\t\\tif (tabs.getTabCount() == 1)\\n\\t\\t\\tTree.getInstance().requestFocusInWindow();\\n\\t\\tTracker.addTrackerListener(SummaryData.getInstance());\\n\\t\\tTracker.startScheduler();\\n\\t\\tMods.add(Globals.MOD_ABOUT_INIT_CREDITS, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif (source instanceof MAboutDialog) {\\n\\t\\t\\t\\t\\tMAboutDialog aboutDialog = (MAboutDialog)source;\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Thotheolh\\\", \\\"Coding, Testing, Ideas...\\\", \\\"http:\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"Dewitte Pierre-Alban\\\", \\\"Various PIM improvements\\\", null);\\n\\t\\t\\t\\t\\taboutDialog.addCredit(\\\"M. Korbar\\\", \\\"German Translation, Ideas, Testing\\\", null);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tMods.replace(Globals.MOD_WIKI_SHOW_PANEL, new Mod() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic Object exec(final Object source, final String command, final Object... args) {\\n\\t\\t\\t\\tif ((args.length == 1) && (args[0] instanceof URI)) {\\n\\t\\t\\t\\t\\tURI pageURI = (URI)args[0];\\n\\t\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\t\\t\\tString wikiID = WikiPanel.class.getName();\\n\\t\\t\\t\\t\\tWebBrowserTab tab = tabs.findByID(wikiID);\\n\\t\\t\\t\\t\\tif (tab != null) {\\n\\t\\t\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(pageURI);\\n\\t\\t\\t\\t\\t\\ttabs.selectEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\ttab = new WebBrowserTab(new WikiPanel(pageURI));\\n\\t\\t\\t\\t\\t\\ttab.putClientProperty(WebBrowserTab.ID_PROPERTY, wikiID);\\n\\t\\t\\t\\t\\t\\ttabs.addEditor(tab);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\t\\t}\\n\\tprivate void initActions() {\\n\\t\\t\\t\\temailAction = new EmailAction();\\n\\t\\tprintAction = new PrintAction();\\n\\t\\t\\t\\tfindAction = new FindAction();\\n\\t\\t\\t\\ttoggleSummaryAction = new ToggleSummaryAction();\\n\\t\\ttoggleDesignerAction = new ToggleDesignerAction();\\n\\t\\ttoggleDesktopAction = new ToggleDesktopAction();\\n\\t\\tshowHideSidebarAction = new ShowHideSidebarAction();\\n\\t\\tshowHideLocationBarAction = new ShowHideLocationBarAction();\\n\\t\\tshowHidePropertiesBarAction = new ShowHidePropertiesBarAction();\\n\\t\\t\\t\\tsearchAction = new SearchBar.Action();\\n\\t\\tconsoleAction = new Console.Action();\\n\\t\\tconfigureAction = new ConfigureAction();\\n\\t\\t\\t\\thelpAction = new HelpAction();\\n\\t\\tdocumentHelpAction = new DocumentHelpAction();\\n\\t\\t\\t\\tquickOpenAction = new QuickOpenDialog.Action();\\n\\t\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\tMainView.bind(\\n\\t\\t\\tnew QuickSaveAction(),\\n\\t\\t\\tquickOpenAction,\\n\\t\\t\\tsearchAction,\\n\\t\\t\\ttoggleDesignerAction,\\n\\t\\t\\ttoggleDesktopAction,\\n\\t\\t\\ttoggleSummaryAction,\\n\\t\\t\\tNavigationUtils.getPreviousAction(),\\n\\t\\t\\tNavigationUtils.getNextAction(),\\n\\t\\t\\ttabs.getCloseAllAction(),\\n\\t\\t\\ttabs.getCloseAction()\\n\\t\\t);\\n\\t}\\n\\tprivate void initExportMenu() {\\n\\t\\texportMenu.removeAll();\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif ((editor != null) && (editor.getPluginInfo() != null)) {\\n\\t\\t\\texportMenu.addTitle(_(\\\"Export \\\\\\\"{0}\\\\\\\"\\\", editor.getMetaInfo()));\\n\\t\\t\\t\\t\\t\\tif (editor instanceof EditorExport) {\\n\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)editor.getPluginInfo().getPlugin();\\n\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getExportTypes();\\n\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\tfor (EditorPlugin.FileType i : types)\\n\\t\\t\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(i));\\n\\t\\t\\t\\t\\texportMenu.addSeparator();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\texportMenu.add(new ImportExport.ExportAction(new EditorPlugin.FileType(\\\"png\\\", _(\\\"PNG Image (document screenshot)\\\"), \\\"image/png\\\", true)));\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\texportMenu.addTitle(_(\\\"Export is not supported\\\"), \\\"ui/info\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\tif (currentFS instanceof PluginMenu)\\n\\t\\t\\tPluginMenu.class.cast(currentFS).updateMenu(PluginMenu.EXPORT_MENU, exportMenu);\\n\\t\\tif (exportMenu.isEmpty())\\n\\t\\t\\texportMenu.addTitle(_(\\\"Open or select a tab you want to export\\\"), \\\"ui/info\\\");\\n\\t\\tif (OS.isLinux() && Vars.actionSendFile.get()) {\\n\\t\\t\\temailAction.setEnabled((editor != null) && editor.getMetaInfo().isFile());\\n\\t\\t\\texportMenu.addSeparator(false);\\n\\t\\t\\texportMenu.add(emailAction);\\n\\t\\t}\\n\\t}\\n\\tprivate void initMenuBar(final PluginManager.Table plugins) {\\n\\t\\tMMenuBar menuBar = new MMenuBar();\\n\\t\\tMWhatsThis.set(menuBar, _(\\\"Main Menu\\\"))\\n\\t\\t\\t.setKeyStroke(VK_F10);\\n\\t\\t\\t\\tfileMenu = new MMenu(_(\\\"&File\\\"));\\n\\t\\tPluginManager.updateMenu(plugins, fileMenu, PluginMenu.FILE_MENU, true);\\n\\t\\timportMenu = new ImportMenu();\\n\\t\\texportMenu = new MMenu(_(\\\"Export\\\"));\\n\\t\\tUI.setHTMLHelp(exportMenu, _(\\\"Exports the content of the active document.<br>For example, you can save a \\\\\\\"todo\\\\\\\" table in the HTML format.\\\"));\\n\\t\\texportMenu.addMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tinitExportMenu();\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tif (!Kiosk.actionExport.get())\\n\\t\\t\\texportMenu.setEnabled(false);\\n\\t\\tfileMenu.add(importMenu);\\n\\t\\tfileMenu.add(exportMenu);\\n\\t\\tfileMenu.add(printAction);\\n\\t\\tMAction quitAction = MApplication.getQuitAction();\\n\\t\\tquitAction.setHTMLHelp(_(\\\"Quits the application.<br>All the modified files are saved automatically.\\\"));\\n\\t\\tif (Kiosk.actionQuit.get()) {\\n\\t\\t\\tfileMenu.addSeparator();\\n\\t\\t\\tfileMenu.add(quitAction);\\n\\t\\t}\\n\\t\\tmenuBar.add(fileMenu);\\n\\t\\t\\t\\teditMenu = new MMenu(_(\\\"&Edit\\\"));\\n\\t\\teditMenu.addMenuListener(new MMenuAdapter() {\\n\\t\\t\\t@Override\\n\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\tMainWindow.this.updateEditMenu(Tabs.getInstance().getSelectedTab());\\n\\t\\t\\t}\\n\\t\\t} );\\n\\t\\tmenuBar.add(editMenu);\\n\\t\\t\\t\\tviewMenu = new MMenu(_(\\\"&View\\\"));\\n\\t\\tMMenu toolBarsMenu = new MMenu(_(\\\"Tool Bars\\\"));\\n\\t\\tif (!Kiosk.toolBarLocked.get()) {\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHideLocationBarAction);\\n\\t\\t\\ttoolBarsMenu.addCheckBox(showHidePropertiesBarAction);\\n\\t\\t\\ttoolBarsMenu.addSeparator();\\n\\t\\t}\\n\\t\\ttoolBarsMenu.add(showHideSidebarAction);\\n\\t\\tviewMenu.add(toolBarsMenu);\\n\\t\\tviewMenu.add(MNotification.createMenu());\\n\\t\\tif (Kiosk.actionFullScreen.get())\\n\\t\\t\\tviewMenu.add(new MApplication.FullScreenAction());\\n\\t\\tPluginManager.updateMenu(plugins, viewMenu, PluginMenu.VIEW_MENU_ALL, false);\\n\\t\\tviewMenuItemCount = viewMenu.getItemCount();\\n\\t\\tmenuBar.add(viewMenu);\\n\\t\\t\\t\\tbookmarksMenu = new BookmarksMenu(null, true);\\n\\t\\tmenuBar.add(bookmarksMenu);\\n\\t\\t\\t\\ttagsMenu = new TagsMenu();\\n\\t\\tmenuBar.add(tagsMenu);\\n\\t\\t\\t\\ttoolsMenu = new MMenu(_(\\\"&Tools\\\"));\\n\\t\\tif (Kiosk.consoleEnabled.get()) {\\n\\t\\t\\ttoolsMenu.add(consoleAction);\\n\\t\\t}\\n\\t\\ttoolsMenu.add(new CalendarTab.Action());\\n\\t\\tPluginManager.updateMenu(plugins, toolsMenu, PluginMenu.TOOLS_MENU, false);\\n\\t\\ttoolsMenu.addSeparator();\\n\\t\\tif (Kiosk.pluginManager.get())\\n\\t\\t\\ttoolsMenu.add(new PluginSettingsAction());\\n\\t\\ttoolsMenu.add(configureAction);\\n\\t\\tmenuBar.add(toolsMenu);\\n\\t\\t\\t\\thelpMenu = new MMenu(_(\\\"&Help\\\"));\\n\\t\\thelpMenu.add(helpAction);\\n\\t\\thelpMenu.add(documentHelpAction);\\n\\t\\tif (Kiosk.actionWhatsThis.get())\\n\\t\\t\\thelpMenu.add(new MWhatsThis.Action(this));\\n\\t\\thelpMenu.addSeparator();\\n\\t\\tPluginManager.updateMenu(plugins, helpMenu, PluginMenu.HELP_MENU, true);\\n\\t\\thelpMenu.add(new MApplication.AboutAction());\\n\\t\\tmenuBar.add(helpMenu);\\n\\t\\tmenuBar.add(LocationBar.getInstance());\\n\\t\\tmenuBar.add(Box.createHorizontalGlue());\\n\\t\\tmenuBar.add(documentList);\\n\\t\\tif (!Kiosk.mainWindowShowMenuBar.get())\\n\\t\\t\\tmenuBar.setMinimized(true);\\n\\t\\tsetJMenuBar(menuBar);\\n\\t}\\n\\tprivate void restoreSession() {\\n\\t\\tConfig config = Config.getDefault();\\n\\t\\t\\t\\tint dividerLocation = config.readInt(\\\"Splitter.Main.location\\\", 250);\\n\\t\\tmainSplitPane.setDividerLocation(dividerLocation);\\n\\t\\tmainSplitPane.setSidebarVisible((dividerLocation == -1) || mainSplitPane.isSidebarVisible());\\n\\t\\t\\t\\tshowHideLocationBarAction.setSelected(Vars.treeLocationBarVisible.get());\\n\\t\\tshowHidePropertiesBarAction.setSelected(config.read(\\\"PropertiesBar.enabled\\\", true));\\n\\t\\t\\t\\tSessionManager.restore();\\n\\t\\tgetDesktop().restoreSession(config, Desktop.RESTORE_SESSION_LAZY);\\n\\t}\\n\\tprivate void updateEditMenu(final Editor<?> editor) {\\n\\t\\teditMenu.removeAll();\\n\\t\\t\\t\\tif (editor != null) {\\n\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\tpluginMenu.updateMenu(PluginMenu.EDIT_MENU, editMenu);\\n\\t\\t\\t}\\n\\t\\t\\tif (editor instanceof EditorSearch) {\\n\\t\\t\\t\\tint searchOptions = EditorSearch.class.cast(editor).getSupportedSearchOptions();\\n\\t\\t\\t\\tboolean isSearch = (searchOptions & EditorSearch.NO_SEARCH) == 0;\\n\\t\\t\\t\\tfindAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (findNextAction == null)\\n\\t\\t\\t\\t\\tfindNextAction = new FindNextAction();\\n\\t\\t\\t\\tfindNextAction.setEnabled(isSearch);\\n\\t\\t\\t\\tif (isSearch) {\\n\\t\\t\\t\\t\\teditMenu.addSeparator(false);\\n\\t\\t\\t\\t\\teditMenu.add(findAction);\\n\\t\\t\\t\\t\\teditMenu.add(findNextAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\tfindAction.setEnabled(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (findNextAction != null)\\n\\t\\t\\t\\t\\tfindNextAction.setEnabled(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teditMenu.addNoItemsInfo(editMenu.isEmpty());\\n\\t}\\n\\tpublic void updateState() {\\n\\t\\tsynchronized (updateStateLock) { \\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tif (tabs.removingTab)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tDesigner designer = null;\\n\\t\\t\\tviewMenu.removeFrom(viewMenuItemCount);\\n\\t\\t\\t\\t\\t\\ttabs.updateState();\\n\\t\\t\\tMetaInfo metaInfo = tabs.getCurrentMetaInfo();\\n\\t\\t\\tTree.getInstance().focusItem(metaInfo);\\n\\t\\t\\t\\t\\t\\tEditor<?> editor = tabs.getSelectedTab();\\n\\t\\t\\t\\t\\t\\tNavigationUtils.updateActions(editor, metaInfo);\\n\\t\\t\\tif (editor != null) {\\n\\t\\t\\t\\tdocumentHelpAction.updateProperties(editor);\\n\\t\\t\\t\\t\\t\\t\\t\\tfinal LocationBar locationBar = LocationBar.getInstance();\\n\\t\\t\\t\\tlocationBar.update(metaInfo);\\n\\t\\t\\t\\tlocationBar.setVisible(true);\\n\\t\\t\\t\\t\\t\\t\\t\\tMMenu.Title tabTitle = viewMenu.addTitle(_(\\\"Current Tab\\\"));\\n\\t\\t\\t\\tint tabTitleCount = viewMenu.getItemCount();\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_MENU) != 0) {\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\tviewMenu.add(NavigationUtils.getNextAction());\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\t\\tif (zoomInAction == null)\\n\\t\\t\\t\\t\\t\\tzoomInAction = new ZoomInAction();\\n\\t\\t\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomInAction);\\n\\t\\t\\t\\t\\tif (zoomOutAction == null)\\n\\t\\t\\t\\t\\t\\tzoomOutAction = new ZoomOutAction();\\n\\t\\t\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t\\t\\t\\tviewMenu.add(zoomOutAction);\\n\\t\\t\\t\\t\\tif (zoomResetAction == null)\\n\\t\\t\\t\\t\\t\\tzoomResetAction = new ZoomResetAction();\\n\\t\\t\\t\\t\\tviewMenu.add(zoomResetAction);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editor instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginManager.updateMenu((PluginMenu)editor, viewMenu, PluginMenu.VIEW_MENU_EDITOR, false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (viewMenu.getItemCount() == tabTitleCount)\\n\\t\\t\\t\\t\\ttabTitle.setVisible(false);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorDesigner<?>) {\\n\\t\\t\\t\\t\\tdesigner = EditorDesigner.class.cast(editor).getEditorDesigner();\\n\\t\\t\\t\\t\\tEditorDesigner.class.cast(editor).updateEditorDesigner();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\teditorToolBar.removeAll();\\n\\t\\t\\t\\teditorToolBar.setTextPosition(editor.getPreferredToolBarTextPosition());\\n\\t\\t\\t\\teditorToolBar.putClientProperty(ScriptYourself.CONTEXT_PROPERTY, editor.getClass().getName());\\n\\t\\t\\t\\tMPanel editorToolBarContainer;\\n\\t\\t\\t\\tif (editor.getLayout() instanceof BorderLayout)\\n\\t\\t\\t\\t\\teditorToolBarContainer = editor;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\teditorToolBarContainer = tabPanel;\\n\\t\\t\\t\\teditorToolBar.setOpaque(editorToolBarContainer == editor);\\n\\t\\t\\t\\tContainer oldEditorToolBarContainer = editorToolBar.getParent();\\n\\t\\t\\t\\tif (oldEditorToolBarContainer != editorToolBarContainer) {\\n\\t\\t\\t\\t\\tif (oldEditorToolBarContainer != null) {\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.remove(editorToolBar);\\n\\t\\t\\t\\t\\t\\toldEditorToolBarContainer.validate();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\teditorToolBarContainer.add(editorToolBar, BorderLayout.PAGE_START);\\n\\t\\t\\t\\t\\teditorToolBarContainer.validate();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (editorToolBarContainer == editor) {\\n\\t\\t\\t\\t\\teditorToolBar.showLineBorder(MLineBorder.Position.BOTTOM);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\teditorToolBar.setBorder(null);\\n\\t\\t\\t\\t\\teditorToolBar.setBorderPainted(false);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tprintAction.setEnabled(editor instanceof EditorPrint);\\n\\t\\t\\t\\tif (editor instanceof PluginMenu) {\\n\\t\\t\\t\\t\\tPluginMenu pluginMenu = (PluginMenu)editor;\\n\\t\\t\\t\\t\\tpluginMenu.updateToolBar(PluginMenu.EDITOR_TOOL_BAR, editorToolBar);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tPluginManager.updateToolBar(editorToolBar, PluginMenu.EDITOR_TOOL_BAR, false);\\n\\t\\t\\t\\tScriptYourself.install(editorToolBar);\\n\\t\\t\\t\\tboolean stretchAdded = false;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (editor instanceof EditorNavigation) {\\n\\t\\t\\t\\t\\tEditorNavigation en = (EditorNavigation)editor;\\n\\t\\t\\t\\t\\tif ((en.getNavigationCapabilities() & EditorNavigation.NAVIGATION_TOOL_BAR) != 0) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tJComponent navigationComponent = en.getNavigationComponent();\\n\\t\\t\\t\\t\\t\\tif (navigationComponent != null) {\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.add(navigationComponent);\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getPreviousAction());\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(NavigationUtils.getNextAction(), MToolBar.SHOW_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\tif ((editor instanceof EditorZoom) && Kiosk.actionZoom.get()) {\\n\\t\\t\\t\\t\\tJComponent zoomComponent = EditorZoom.class.cast(editor).getZoomComponent();\\n\\t\\t\\t\\t\\tif (zoomComponent != null) {\\n\\t\\t\\t\\t\\t\\tif (!stretchAdded) {\\n\\t\\t\\t\\t\\t\\t\\tstretchAdded = true;\\n\\t\\t\\t\\t\\t\\t\\teditorToolBar.addStretch();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.add(zoomComponent);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addGap();\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomInAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t\\teditorToolBar.addButton(new MSmallButton(zoomOutAction, false), MToolBar.NO_TEXT);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\teditorToolBar.setVisible(!isPresentationActive() || (editor == desktopTab));\\n\\t\\t\\t\\teditorToolBar.validate();\\n\\t\\t\\t\\teditorToolBar.repaint();\\n\\t\\t\\t\\t\\t\\t\\t\\teditor.updateActions();\\n\\t\\t\\t}\\n\\t\\t\\tupdateEditMenu(editor);\\n\\t\\t\\tupdateTabBar(editor);\\n\\t\\t\\t\\t\\t\\tif (PropertiesBar.isInstance()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpb.setMetaInfo(metaInfo);\\n\\t\\t\\t\\tpb.showOrHide(showHidePropertiesBarAction.isSelected());\\n\\t\\t\\t}\\n\\t\\t\\tAnnotationBar.getInstance().setEditor(editor);\\n\\t\\t\\tSidebar.getInstance().update(editor, designer, toggleDesignerAction);\\n\\t\\t\\tupdateTitle();\\n\\t\\t\\tMCellTip.getInstance().setVisible(false);\\n\\t\\t\\tif (editor != null)\\n\\t\\t\\t\\tMComponent.requestFocus(editor);\\n\\t\\t}\\n\\t}\\n\\tprivate void updateTabBar(final Editor<?> editor) {\\n\\t\\tif (editor == null) {\\n\\t\\t\\tinstallTabBar(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t(editor instanceof EditorSearch) &&\\n\\t\\t\\t\\tEditorQuickFind.isInstance() &&\\n\\t\\t\\t\\t(tabBar == EditorQuickFind.getInstance())\\n\\t\\t\\t) {\\n\\t\\t\\t\\tinstallTabBar(EditorQuickFind.getInstance());\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if (editor.getMetaInfo().isDummy()) {\\n\\t\\t\\t\\tinstallTabBar(null);\\n\\t\\t\\t}\\n\\t\\t\\telse if (showHidePropertiesBarAction.isSelected()) {\\n\\t\\t\\t\\tPropertiesBar pb = PropertiesBar.getInstance();\\n\\t\\t\\t\\tinstallTabBar(pb);\\n\\t\\t\\t\\tpb.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tpublic void updateTitle() { \\t\\tif (isLocked()) {\\n\\t\\t\\t\\t\\t\\tupdateTitle(null);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tupdateTitle(Objects.toString(metaInfo, null));\\n\\t\\t}\\n\\t}\\n\\tprivate void zoomEditor(final EditorZoom.ZoomType type) {\\n\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\teditorZoom.zoom(type);\\n\\t\\t\\tzoomInAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.IN));\\n\\t\\t\\tzoomOutAction.setEnabled(editorZoom.isZoomEnabled(EditorZoom.ZoomType.OUT));\\n\\t\\t}\\n\\t}\\n\\tpublic static final class ImportMenu extends MMenu {\\n\\t\\tpublic ImportMenu() {\\n\\t\\t\\t\\t\\t\\tsuper(MActionInfo.IMPORT.getText());\\n\\t\\t\\tsetToolTipText(UI.makeHTML(_(\\\"Tip: You can use drag and drop to import/export files.\\\")));\\n\\t\\t\\taddMenuListener(new MMenuAdapter(true) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void onSelect(final MMenu menu) {\\n\\t\\t\\t\\t\\tImportMenu.class.cast(menu).doInit();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tif (Vars.treeReadOnly.get())\\n\\t\\t\\t\\tsetEnabled(false);\\n\\t\\t}\\n\\t\\tprivate void doInit() {\\n\\t\\t\\tremoveAll();\\n\\t\\t\\tMetaInfo currentFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\tAbstractFS currentFS = currentFolder.getFS();\\n\\t\\t\\tif (currentFS instanceof TreeFS) {\\n\\t\\t\\t\\tif (currentFolder.canModify()) {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"Import into \\\\\\\"{0}\\\\\\\"\\\", currentFolder));\\n\\t\\t\\t\\t\\tfor (PluginInfo i : PluginType.EDITOR.get()) {\\n\\t\\t\\t\\t\\t\\tEditorPlugin plugin = (EditorPlugin)i.getPlugin();\\n\\t\\t\\t\\t\\t\\tList<EditorPlugin.FileType> types = plugin.getImportTypes();\\n\\t\\t\\t\\t\\t\\tif (!types.isEmpty()) {\\n\\t\\t\\t\\t\\t\\t\\tMAction importAction = new ImportExport.ImportAction(plugin, plugin.getDocumentDisplayName(), types);\\n\\t\\t\\t\\t\\t\\t\\timportAction.setSmallIcon(i.getSmallIcon());\\n\\t\\t\\t\\t\\t\\t\\tadd(importAction);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tadd(new ImportFolderAction());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\taddTitle(_(\\\"This folder is locked (read only): {0}\\\", currentFolder), \\\"ui/error\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tfor (AbstractFS i : Tree.getInstance()) {\\n\\t\\t\\t\\tif (i instanceof PluginMenu)\\n\\t\\t\\t\\t\\tPluginMenu.class.cast(i).updateMenu(PluginMenu.IMPORT_MENU, this);\\n\\t\\t\\t}\\n\\t\\t\\tPluginManager.updateMenu(this, PluginMenu.IMPORT_MENU, false);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ConfigureAction extends MApplication.SettingsAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMSettingsDialog dialog = new MSettingsDialog(\\n\\t\\t\\t\\tMainWindow.getInstance(),\\n\\t\\t\\t\\tMSettingsDialog.STANDARD_DIALOG | MSettingsDialog.APPLY_BUTTON,\\n\\t\\t\\t\\t\\\"configure\\\"\\n\\t\\t\\t) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tprotected void apply() {\\n\\t\\t\\t\\t\\tsuper.apply();\\n\\t\\t\\t\\t\\tMainWindow.getInstance().repaint();\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tdialog.addPage(new GeneralSettings());\\n\\t\\t\\tdialog.addPage(new LookAndFeelSettings());\\n\\t\\t\\tdialog.addPage(new TasksSettings());\\n\\t\\t\\tPluginManager.addPluginOptions(dialog);\\n\\t\\t\\tdialog.addAdvancedPage(ProxySettings.class);\\n\\t\\t\\tdialog.exec();\\n\\t\\t}\\n\\t\\tprivate ConfigureAction() {\\n\\t\\t\\tsetHTMLHelp(_(\\\"Application settings (look and feel, browser, etc).\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate final class CustomMouseGestures extends MouseGestures {\\n\\t\\tpublic CustomMouseGestures() { }\\n\\t\\t@Override\\n\\t\\tprotected boolean canShowMessage() {\\n\\t\\t\\treturn !MainWindow.isPresentationActive();\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tprotected void onInit() {\\n\\t\\t\\tTabs tabs = Tabs.getInstance();\\n\\t\\t\\tTreePanel treePanel = TreePanel.getInstance();\\n\\t\\t\\tthis.add(\\\"D\\\", treePanel.getActionGroup().getAction(\\\"new-file\\\"));\\n\\t\\t\\tif (Kiosk.consoleEnabled.get())\\n\\t\\t\\t\\tthis.add(consoleAction);\\n\\t\\t\\tthis.add(\\\"Ds\\\", treePanel.getActionGroup().getAction(\\\"new-folder\\\"));\\n\\t\\t\\tthis.add(\\\"DR\\\", tabs.getCloseAction());\\n\\t\\t\\tthis.add(\\\"DRs\\\", tabs.getCloseAllAction());\\n\\t\\t\\tthis.add(\\\"L\\\", NavigationUtils.getPreviousAction());\\n\\t\\t\\tthis.add(\\\"Lc\\\", toggleDesignerAction);\\n\\t\\t\\tthis.add(\\\"LD\\\", searchAction);\\n\\t\\t\\tthis.add(\\\"LR\\\", new MAction(_(\\\"Show/Hide Sidebar\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tmainSplitPane.toggleSidebar();\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"Ls\\\", toggleSummaryAction);\\n\\t\\t\\tthis.add(\\\"LU\\\", new MAction(_(\\\"Show Tree\\\")) {\\n\\t\\t\\t\\t@Override\\n\\t\\t\\t\\tpublic void onAction() {\\n\\t\\t\\t\\t\\tSidebar.getInstance().goTo(Sidebar.Tab.TREE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} );\\n\\t\\t\\tthis.add(\\\"R\\\", NavigationUtils.getNextAction());\\n\\t\\t\\tthis.add(documentList.getAction());\\n\\t\\t\\tthis.add(\\\"Uc\\\", TreePanel.getInstance().getActionGroup().getAction(\\\"properties\\\"));\\n\\t\\t\\tthis.add(\\\"Ucs\\\", configureAction);\\n\\t\\t\\tthis.add(\\\"UD\\\", toggleDesktopAction);\\n\\t\\t\\tthis.add(\\\"UR\\\", findAction);\\n\\t\\t\\tthis.add(\\\"URDL\\\", printAction);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class DocumentHelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> tab = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (tab instanceof DocumentHelp) {\\n\\t\\t\\t\\tHelpContext context = DocumentHelp.class.cast(tab).showHelp();\\n\\t\\t\\t\\tif (context != null)\\n\\t\\t\\t\\t\\tHelp.show(tab, context);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate DocumentHelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP.getText()); \\t\\t}\\n\\t\\tprivate void updateProperties(final Editor<?> tab) {\\n\\t\\t\\tsetEnabled(tab instanceof DocumentHelp);\\n\\t\\t\\tPluginInfo info = tab.getMetaInfo().getPluginInfo();\\n\\t\\t\\tString name = (info != null) ? info.toString() : tab.getMetaInfo().toString();\\n\\t\\t\\tsetName(_(\\\"Help: {0}\\\", TK.rightSqueeze(name, 20)));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class EmailAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMetaInfo metaInfo = Tabs.getInstance().getCurrentMetaInfo();\\n\\t\\t\\tif ((metaInfo != null) && metaInfo.isFile())\\n\\t\\t\\t\\tOS.email(null, metaInfo.toString(), metaInfo.getFile());\\n\\t\\t}\\n\\t\\tprivate EmailAction() {\\n\\t\\t\\tsuper(_(\\\"Email File...\\\"));\\n\\t\\t\\tsetAuthorizationProperty(Vars.actionSendFile);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.setActive(true);\\n\\t\\t}\\n\\t\\tprivate FindAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for a text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class FindNextAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditorQuickFind editorQuickFind = EditorQuickFind.getInstance();\\n\\t\\t\\tMainWindow.getInstance().installTabBar(editorQuickFind);\\n\\t\\t\\teditorQuickFind.findNext();\\n\\t\\t}\\n\\t\\tprivate FindNextAction() {\\n\\t\\t\\tsuper(MActionInfo.FIND_NEXT);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Search for the next matching text in the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class HelpAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow window = MainWindow.getInstance();\\n\\t\\t\\tHelpGenerator help = new HelpGenerator();\\n\\t\\t\\thelp.setMenuBar(window.getMMenuBar());\\n\\t\\t\\thelp.setOutputDirectory(FS.makeConfigFile(\\\"help\\\", FS.CREATE_DIR).toPath());\\n\\t\\t\\t\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"bookmarks-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"export-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"import-menu\\\"));\\n\\t\\t\\thelp.addExcludeMenu((MMenu)window.getElementById(\\\"tags-menu\\\"));\\n\\t\\t\\thelp.addCommonShortcuts();\\n\\t\\t\\thelp.addShortcut(_(\\\"Image Viewer\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next\\\"), VK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous\\\"), VK_BACK_SPACE);\\n\\t\\t\\thelp.addShortcut(_(\\\"Feeds\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Next New\\\"), VK_J);\\n\\t\\t\\thelp.addShortcut(_(\\\"Previous New\\\"), VK_K);\\n\\t\\t\\thelp.addShortcut(_(\\\"Todo List/Table\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Edit cell\\\"), VK_F2);\\n\\t\\t\\thelp.addShortcut(_(\\\"Focus header\\\"), VK_F8);\\n\\t\\t\\thelp.addShortcut(_(\\\"Move to the previous panel\\\"), VK_TAB, CTRL_MASK + SHIFT_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Widgets\\\"));\\n\\t\\t\\thelp.addShortcut(_(\\\"Close active widget\\\"), VK_F4, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Activate next widget\\\"), VK_F6, CTRL_MASK);\\n\\t\\t\\thelp.addShortcut(_(\\\"Minimize active widget\\\"), VK_F9, CTRL_MASK);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\thelp.generate();\\n\\t\\t\\t\\t\\t\\t\\t\\tWebBrowserTab tab = WebBrowserTab.getInstance();\\n\\t\\t\\t\\ttab.getWebBrowser().setDocumentLocation(help.getIndexFile().toUri());\\n\\t\\t\\t}\\n\\t\\t\\tcatch (IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate HelpAction() {\\n\\t\\t\\tsuper(MActionInfo.HELP);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ImportFolderAction extends MAction {\\n\\t\\tpublic ImportFolderAction() {\\n\\t\\t\\tsuper(_(\\\"Folder...\\\"), \\\"ui/folder\\\");\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tFile from = Input.getDirectory(getSourceWindow(), _(\\\"Import Folder\\\"), \\\"import-folder\\\", MActionInfo.IMPORT);\\n\\t\\t\\tif (from == null)\\n\\t\\t\\t\\treturn;\\n\\t\\t\\tMetaInfo toFolder = Tree.getInstance().getCurrentFolder(false);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tImportExport.importFolder(getSourceWindow(), new MArrayList<>(from.toPath()), toFolder);\\n\\t\\t\\t}\\n\\t\\t\\tcatch (FSException | IOException exception) {\\n\\t\\t\\t\\tMMessage.error(getSourceWindow(), exception);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class PluginSettingsAction extends PluginSettings.Action {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tPluginSettingsTab.getInstance();\\n\\t\\t}\\n\\t\\tprivate PluginSettingsAction() { }\\n\\t}\\n\\tprivate static final class PrintAction extends MApplication.PrintAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorPrint) {\\n\\t\\t\\t\\tFlags caps = Flags.valueOf(editor.getPrintingCapabilities());\\n\\t\\t\\t\\tif (caps.isSet(Editor.NO_PRINT_PREVIEW)) {\\n\\t\\t\\t\\t\\tPrintDialog.printDocument(editor, Flags.NONE);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tPrintDialog dialog = new PrintDialog(MainWindow.getInstance(), editor);\\n\\t\\t\\t\\t\\tdialog.exec();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tprivate PrintAction() {\\n\\t\\t\\tsetEnabled(false);\\n\\t\\t\\tsetHTMLHelp(_(\\\"Prints the content of the active document.\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class QuickSaveAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().saveSession(Tabs.NORMAL_SAVE);\\n\\t\\t}\\n\\t\\tprivate QuickSaveAction() {\\n\\t\\t\\tsuper(_(\\\"Save all the modified files now\\\"), VK_S, getMenuMask());\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideLocationBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return LocationBar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tVars.treeLocationBarVisible.set(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHideLocationBarAction() {\\n\\t\\t\\tsuper(_(\\\"Location Bar\\\"));\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHidePropertiesBarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() {\\n\\t\\t\\treturn PropertiesBar.isInstance() ? PropertiesBar.getInstance() : null;\\n\\t\\t}\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tsetInstalled(isSelected());\\n\\t\\t}\\n\\t\\tprivate ShowHidePropertiesBarAction() {\\n\\t\\t\\tsuper(_(\\\"Properties Bar\\\"));\\n\\t\\t}\\n\\t\\tprivate void setInstalled(final boolean yes) {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tsetSelected(yes);\\n\\t\\t\\tif (yes) {\\n\\t\\t\\t\\tPropertiesBar propertiesBar = PropertiesBar.getInstance();\\n\\t\\t\\t\\tpropertiesBar.setMetaInfo(Tabs.getInstance().getCurrentMetaInfo());\\n\\t\\t\\t\\tmainWindow.installTabBar(propertiesBar);\\n\\t\\t\\t\\tpropertiesBar.showOrHide(true);\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tmainWindow.installTabBar(null);\\n\\t\\t\\t\\tif (PropertiesBar.isInstance())\\n\\t\\t\\t\\t\\tPropertiesBar.getInstance().setVisible(false);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ShowHideSidebarAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic Component getHighlightedComponent() { return Sidebar.getInstance(); }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().mainSplitPane.toggleSidebar();\\n\\t\\t}\\n\\t\\tprivate ShowHideSidebarAction() {\\n\\t\\t\\tsuper(_(\\\"Sidebar\\\"), null, VK_F9);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesignerAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.DESIGNER, true);\\n\\t\\t}\\n\\t\\tprivate ToggleDesignerAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Designer\\\"), \\\"ui/wizard\\\", VK_F4);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleDesktopAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow mainWindow = MainWindow.getInstance();\\n\\t\\t\\tmainWindow.setDesktopVisible(!mainWindow.isDesktopVisible());\\n\\t\\t}\\n\\t\\tprivate ToggleDesktopAction() {\\n\\t\\t\\tsuper(_(\\\"Show Widgets\\\"), \\\"ui/desktop\\\", VK_F5);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ToggleSummaryAction extends MAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.showSidebar(Sidebar.Tab.SUMMARY, true);\\n\\t\\t}\\n\\t\\tprivate ToggleSummaryAction() {\\n\\t\\t\\tsuper(_(\\\"Toggle Summary\\\"), \\\"summary\\\", VK_S, CTRL_MASK + SHIFT_MASK);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomInAction extends MApplication.ZoomInAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.IN);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomOutAction extends MApplication.ZoomOutAction {\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tMainWindow.getInstance().zoomEditor(EditorZoom.ZoomType.OUT);\\n\\t\\t}\\n\\t}\\n\\tprivate static final class ZoomResetAction extends MApplication.ZoomResetAction {\\n\\t\\tpublic ZoomResetAction() { }\\n\\t\\t@Override\\n\\t\\tpublic void onAction() {\\n\\t\\t\\tEditor<?> editor = Tabs.getInstance().getSelectedTab();\\n\\t\\t\\tif (editor instanceof EditorZoom) {\\n\\t\\t\\t\\tEditorZoom editorZoom = (EditorZoom)editor;\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\teditorZoom.resetZoom();\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (AbstractMethodError error) {\\n\\t\\t\\t\\t\\tTK.beep();\\n\\t\\t\\t\\t\\tif (MLogger.isDeveloper())\\n\\t\\t\\t\\t\\t\\tMLogger.exception(error);\\n\\t\\t\\t\\t\\tMLogger.error(\\\"core\\\", \\\"Zoom reset not supported\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\""
            },
            "m43": {
                "role": "user",
                "content": "This is the final round of conversation, and you need to give your answers strictly in the form of the example , without any other extra text (the elements in the Change set should be sorted in descending order of the likelihood of needing synchronous modification). Please note that in order to ensure recall, you need to give as many entities as possible (preferably more than 40) that need to be modified synchronously based on your analysis. An example of the answer is given below:Title: Diagnosis of starting entity `DatabaseURL`Change set: [ServerConstants, jdbcDriver]Details: Explain why each entity in your given change set needs to synchronize changes"
            },
            "m44": {
                "content": "Title: Diagnosis of starting entity `MainWindow`\n\nChange set: [Designer.java, EditorPrint.java, OS.java, AbstractFS.java, Tracker.java, Autosave.java, ImportExport.java, Args.java, WTFError.java, FS.java, LocationBar.java, Plugin.java, TreeFS.java, Flags.java, MetaInfo.java, TreePanel.java, PropertiesBar.java, Widget.java, PluginManager.java, EditorSearch.java, SessionManager.java, MLogger.java, PluginMenu.java, EditorZoom.java, Tree.java, PluginInfo.java, EditorPlugin.java, Config.java, Desktop.java, PluginType.java, TagsMenu.java, TK.java, Property.java, Console.java, UI.java, Editor.java, ScriptExecutor.java, FSException.java, EditorDesigner.java, PropertiesPanel.java, ScriptError.java, Sidebar.java, CalendarTab.java, ConsoleTab.java, DesktopTab.java, PluginSettingsTab.java, WebBrowserTab.java, ImportMenu.java, QuickOpenDialog.java]\n\nDetails:\n- **Designer.java**: Used in actions related to the designer panel within `MainWindow`.\n- **EditorPrint.java**: Checked for printing functionality.\n- **OS.java**: Used for platform-specific operations like sending emails.\n- **AbstractFS.java**: Related to file system operations and navigation.\n- **Tracker.java**: Involves tracking user activity and data.\n- **Autosave.java**: Handles auto-saving of session data.\n- **ImportExport.java**: Manages import/export features triggered from menus.\n- **Args.java**: Parses command-line arguments used during startup.\n- **WTFError.java**: Handles unexpected errors or exceptions.\n- **FS.java**: Core file system management utility.\n- **LocationBar.java**: Reflects current navigation location shown in UI.\n- **Plugin.java**: Interaction with plugins affects UI and functionality.\n- **TreeFS.java**: Used in folder/file tree navigation.\n- **Flags.java**: Stores application state flags.\n- **MetaInfo.java**: Represents metadata for files/items.\n- **TreePanel.java**: Displays hierarchical data (file trees).\n- **PropertiesBar.java**: Shows properties of selected items.\n- **Widget.java**: Manages widgets displayed in desktop view.\n- **PluginManager.java**: Loads and manages plugins.\n- **EditorSearch.java**: Enables search within editors.\n- **SessionManager.java**: Saves and restores session data.\n- **MLogger.java**: Logging mechanism for debugging and error handling.\n- **PluginMenu.java**: Dynamically updates menus based on context.\n- **EditorZoom.java**: Zooming controls for document views.\n- **Tree.java**: Core structure for managing hierarchical data.\n- **PluginInfo.java**: Metadata about plugins used throughout.\n- **EditorPlugin.java**: Base class for editor plugin implementations.\n- **Config.java**: Reads/writes application configuration settings.\n- **Desktop.java**: Manages desktop-style interface components.\n- **PluginType.java**: Classifies different types of plugins.\n- **TagsMenu.java**: Manages tags-related menu entries.\n- **TK.java**: Utility methods for general-purpose tasks.\n- **Property.java**: General property management class.\n- **Console.java**: Output console for logging and diagnostics.\n- **UI.java**: User interface utilities and look-and-feel settings.\n- **Editor.java**: Base class for various editor implementations.\n- **ScriptExecutor.java**: Executes user scripts on startup.\n- **FSException.java**: Thrown when file system operations fail.\n- **EditorDesigner.java**: Designer mode support for editing UI.\n- **PropertiesPanel.java**: Panel for displaying object properties.\n- **ScriptError.java**: Handles script execution errors.\n- **Sidebar.java**: Controls the sidebar UI component.\n- **CalendarTab.java**: Opens calendar-related tabs.\n- **ConsoleTab.java**: Manages console output as a tab.\n- **DesktopTab.java**: Provides desktop-like environment in a tab.\n- **PluginSettingsTab.java**: Settings for plugins accessed via tab.\n- **WebBrowserTab.java**: Displays web content within a tab.\n- **ImportMenu.java**: Submenu under File/Import for importing files.\n- **QuickOpenDialog.java**: Dialog for quickly opening files.",
                "refusal": null,
                "role": "assistant",
                "audio": null,
                "function_call": null,
                "tool_calls": null
            }
        }
    }
}