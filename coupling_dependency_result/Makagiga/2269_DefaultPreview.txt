Preview : ['ReturnType(RT): Return Type found: getPreview returns Preview,  Return Type found: getPreview returns Preview,', 'Method Member Variable Usage Variable (MMAUA): Coupling found in method setPreview, at line: 272. Instance of Preview is created and used directly.', 'Function Parameter Usage Variable (FPUA): Coupling found in method getImage, at line: 183. Instance of Preview parameter preview is used directly.  Coupling found in method getImage, at line: 183. Instance of Preview parameter preview is used directly.', 'ConstructorInvoking(CMI): Construction Method Invoking found: new Preview(false) {', '', '@Override', 'public Image getImage(final Path file, final int width, final MProperties properties) {', 'return image;', '}', '},  Construction Method Invoking found: new Preview(true) {', '', '@Override', 'public Image getImage(final Path file, final int width, final MProperties properties) throws Exception {', 'String type = FS.getFileExtension(file);', 'if (type.isEmpty())', 'return null;', 'Iterator<ImageReader> it = ImageIO.getImageReadersBySuffix(type);', 'BufferedImage result = null;', 'ImageReader reader = it.hasNext() ? it.next() : null;', 'try (ImageInputStream input = ImageIO.createImageInputStream(file.toFile())) {', '// guess image type by content', 'if (reader == null) {', 'it = ImageIO.getImageReaders(input);', 'if (it.hasNext())', 'reader = it.next();', 'else', 'return null;', '}', 'reader.setInput(input);', 'float factor = width * 4.2f;', 'int longEdge = Math.max(reader.getHeight(0), reader.getWidth(0));', 'int subSample = (int) (longEdge / factor);', 'ImageReadParam readParam = reader.getDefaultReadParam();', '// subSample the image', 'if (subSample > 1)', 'readParam.setSourceSubsampling(subSample, subSample, 0, 0);', 'result = reader.read(0, readParam);', '} catch (IIOException exception) {', 'MLogger.exception(exception);', 'return null;', '} finally {', 'if (reader != null)', 'reader.dispose();', '}', 'if (result != null) {', 'properties.setPropertyValue(IMAGE_WIDTH_PROPERTY, result.getWidth(null));', 'properties.setPropertyValue(IMAGE_HEIGHT_PROPERTY, result.getHeight(null));', 'properties.setPropertyValue(IMAGE_BPP_PROPERTY, result.getColorModel().getPixelSize());', 'String s = TK.toUpperCase(type);', 'switch(s) {', 'case "JPG":', 's = "JPEG";', 'break;', 'case "TIF":', 's = "TIFF";', 'break;', '}', 'properties.setProperty(IMAGE_TYPE_PROPERTY, s);', '}', 'return result;', '}', '},  Construction Method Invoking found: new Preview(false) {', '', '@Override', 'public Image getImage(final Path file, final int width, final MProperties properties) throws Exception {', 'return DefaultPreview.getTextImage(file, width);', '}', '},  Construction Method Invoking found: new Preview(false) {', '', '@Override', 'public Image getImage(final Path file, final int width, final MProperties properties) throws Exception {', 'try (MZip zip = MZip.read(file)) {', 'StringBuilder buf = new StringBuilder(1024);', 'int count = 0;', 'for (ZipEntry i : zip) {', 'if (count++ == 10) {', 'buf.append("(...)");', '// for', 'break;', '}', 'buf.append(i.getName()).append('\n');', '}', 'return DefaultPreview.getTextImage(buf.toString(), width);', '}', '}', '},']
PreviewPanel : ['There are no coupling dependencies between these two entities']
Stuff : ['There are no coupling dependencies between these two entities']
FSProperties : ['There are no coupling dependencies between these two entities']
Renderer : ['Renderer is not exist in project code']
NotepadEditor : ['There are no coupling dependencies between these two entities']
PrintDialog : ['There are no coupling dependencies between these two entities']
GHNSDialog : ['There are no coupling dependencies between these two entities']
MetaInfo : ['There are no coupling dependencies between these two entities']
MFileChooser : ['There are no coupling dependencies between these two entities']
SettingsForm : ['SettingsForm is not exist in project code']
PrintPreview : ['PrintPreview is not exist in project code']
ItemRenderer : ['There are no coupling dependencies between these two entities']
MFontChooser : ['There are no coupling dependencies between these two entities']
AddFeedDialog : ['There are no coupling dependencies between these two entities']
Vars : ['There are no coupling dependencies between these two entities']
PreviewReader : ['PreviewReader is not exist in project code']
LookAndFeelSettings : ['There are no coupling dependencies between these two entities']
HTMLPreviewAction : ['HTMLPreviewAction is not exist in project code']
MFontComboBox : ['There are no coupling dependencies between these two entities']
TreeSettings : ['TreeSettings is not exist in project code']
ImageEditorDesigner : ['There are no coupling dependencies between these two entities']
MColorChooser : ['MColorChooser is not exist in project code']
FilterDialog : ['FilterDialog is not exist in project code']
PropertiesPanel : ['There are no coupling dependencies between these two entities']
DeskletWidgetPlugin : ['DeskletWidgetPlugin is not exist in project code']
AbstractPreview : ['AbstractPreview is not exist in project code']
DeskletLoader : ['DeskletLoader is not exist in project code']
Tree : ['There are no coupling dependencies between these two entities']
NumberControlPanel : ['NumberControlPanel is not exist in project code']
FeedComponent : ['There are no coupling dependencies between these two entities']
VersionControl : ['There are no coupling dependencies between these two entities']
BrushTool : ['There are no coupling dependencies between these two entities']
LinkEditorPlugin : ['There are no coupling dependencies between these two entities']
NoteWidget : ['There are no coupling dependencies between these two entities']
TodoEditorPlugin : ['There are no coupling dependencies between these two entities']
FeedThread : ['There are no coupling dependencies between these two entities']
FSHelper : ['There are no coupling dependencies between these two entities']
Editor : ['There are no coupling dependencies between these two entities']
Main : ['There are no coupling dependencies between these two entities']
